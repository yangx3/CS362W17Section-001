/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 21:09:00 GMT 2017
 */

package org.cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
//import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.cs362.dominion.Card;
import org.cs362.dominion.GameState;
import org.cs362.dominion.Player;
//import org.evosuite.runtime.EvoRunner;
//import org.evosuite.runtime.EvoRunnerParameters;
//import org.evosuite.runtime.TooManyResourcesException;
import org.junit.runner.RunWith;

//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class GameState_ESTest {

  @Test
  public void test00()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      gameState0.toString();
  }

  @Test
  public void test01()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      // Undeclared exception!
      try { 
        gameState0.isGameOver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "BusD A<'");
      gameState0.addPlayer(player0);
      gameState0.addPlayer(player0);
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
 //        assertThrownBy("org.cs362.dominion.GameState", e);
      }
  }

  @Test
  public void test03()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, "");
      player0.drawCard();
      gameState0.addPlayer(player0);
      // Undeclared exception!
      try { 
        gameState0.getWinners();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
 //        assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test
  public void test04()  throws Throwable  {
      Player player0 = new Player((GameState) null, "Millisecond");
      List<Card> list0 = player0.playedCards;
      GameState gameState0 = new GameState(list0);
      Integer integer0 = new Integer(0);
      gameState0.gameBoard.put((Card) null, integer0);
      gameState0.play();
  }

  @Test
  public void test05()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      Player player0 = new Player(gameState0, "");
      Integer integer0 = new Integer(104);
      hashMap0.put((Card) null, integer0);
      gameState0.addPlayer(player0);
      // Undeclared exception!
      try { 
        gameState0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
 //        assertThrownBy("java.util.TreeMap", e);
      }
  }

  @Test
  public void test06()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      Card.CardName card_CardName0 = Card.CardName.Estate;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, (-648), (-648), (-560));
      hashMap0.put(card0, (Integer) (-560));
      gameState0.toString();
  }

  @Test
  public void test07()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "BusD/ A<'");
      List<Card> list0 = player0.discard;
      GameState gameState1 = new GameState(list0);
      gameState1.play();
  }

  @Test
  public void test08()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      Player player0 = new Player(gameState0, "");
      player0.drawCard();
      Integer integer0 = new Integer(3317);
      hashMap0.put((Card) null, integer0);
      gameState0.addPlayer(player0);
      // Undeclared exception!
      try { 
        gameState0.play();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
//         assertThrownBy("org.cs362.dominion.GameState", e);
      }
  }

  @Test
  public void test09()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      Player player0 = new Player(gameState0, "");
      Integer integer0 = new Integer(3317);
      hashMap0.put((Card) null, integer0);
      gameState0.addPlayer(player0);
      // Undeclared exception!
      try { 
        gameState0.play();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      Integer integer0 = new Integer((-648));
      hashMap0.put((Card) null, integer0);
      // Undeclared exception!
//      try { 
//        gameState0.play();
//        fail("Expecting exception: TooManyResourcesException");
//      
//      } catch(TooManyResourcesException e) {
//         //
//         // Loop has been executed more times than the allowed 10000
//         //
//         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
//      }
  }

  @Test
  public void test11()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      Integer integer0 = new Integer(3317);
      hashMap0.put((Card) null, integer0);
      boolean boolean0 = gameState0.isGameOver();
      assertFalse(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      Player player0 = new Player((GameState) null, "xt; ");
      List<Card> list0 = player0.playedCards;
      GameState gameState0 = new GameState(list0);
      boolean boolean0 = gameState0.isGameOver();
      assertTrue(boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      Player player0 = new Player((GameState) null, "xt; ");
      List<Card> list0 = player0.playedCards;
      GameState gameState0 = new GameState(list0);
      Vector<Player> vector0 = new Vector<Player>();
      vector0.add(player0);
      gameState0.players = (List<Player>) vector0;
      gameState0.addPlayer(player0);
      // Undeclared exception!
//      try { 
//        gameState0.initializeGame();
//        fail("Expecting exception: ArithmeticException");
//      
//      } catch(ArithmeticException e) {
//         //
//         // / by zero
//         //
////         assertThrownBy("org.evosuite.runtime.Random", e);
//      }
  }

  @Test
  public void test14()  throws Throwable  {
      Player player0 = new Player((GameState) null, "xt; ");
      List<Card> list0 = player0.playedCards;
      GameState gameState0 = new GameState(list0);
      gameState0.initializeGame();
  }

  @Test
  public void test15()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, "");
      gameState0.addPlayer(player0);
      HashMap<Player, Integer> hashMap0 = gameState0.getWinners();
      assertEquals(1, hashMap0.size());
  }
}
