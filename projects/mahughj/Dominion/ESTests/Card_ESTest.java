/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 28 07:27:56 GMT 2017
 */

package cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import cs362.dominion.Card;
import cs362.dominion.GameState;
import cs362.dominion.Player;
import java.io.ObjectStreamConstants;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.TooManyResourcesException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class Card_ESTest extends Card_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.getCard(list0, "YEI,pfUU43,S-x");
      Card.CardName card_CardName0 = Card.CardName.Smithy;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "Q?|RFO8y+kdQ");
      Player player1 = player0.clone();
      LinkedList<Card> linkedList0 = player1.deck;
      gameState0.cards = (List<Card>) linkedList0;
      gameState0.getWinners();
      Player player2 = new Player(gameState0, "YEI,pfUU43,S-x");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.getCard(list0, "L,");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "L,";
      stringArray0[1] = "L,";
      stringArray0[2] = "L,";
      stringArray0[3] = "L,";
      stringArray0[4] = "Action-Attack";
      stringArray0[5] = "L,";
      stringArray0[6] = "L,";
      stringArray0[7] = "L,";
      stringArray0[8] = "L,";
      List<Card> list1 = Card.filter(list0, stringArray0);
      Card.filter(list1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.toEnumType("Action");
      GameState gameState0 = new GameState(list0);
      // Undeclared exception!
      try { 
        Card.Type.valueOf("Hoping for no loop!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant cs362.dominion.Card.Type.Hoping for no loop!
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Card.CardName card_CardName0 = Card.CardName.Great_Hall;
      Card.getCard(list0, card_CardName0);
      Card.toEnumType("");
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Curse;
      Card.getCard(list0, card_CardName0);
      String[] stringArray0 = new String[8];
      stringArray0[1] = "\"?&4?e";
      stringArray0[2] = "\"?&4?e";
      stringArray0[3] = "Deck Count, Gardens Count, then Gardens Value for ";
      stringArray0[4] = "";
      stringArray0[5] = "s#M`Hc1sYZ";
      stringArray0[6] = "NE=U}.>\u0003D}N5jeBl";
      stringArray0[7] = "Curse";
      Vector<Card> vector0 = new Vector<Card>();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Silver;
      Card.getCard(list0, card_CardName0);
      String[] stringArray0 = new String[8];
      stringArray0[1] = "\"A&4?e";
      stringArray0[2] = "\"A&4?e";
      stringArray0[3] = "Deck Count, Gardens Count, then Gardens Value for ";
      stringArray0[4] = "";
      stringArray0[5] = "s#M`Hc1saYZ";
      stringArray0[6] = "NE=U}.>\u0003D}N5jeBl";
      stringArray0[7] = "Curse";
      Vector<Card> vector0 = new Vector<Card>();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.getCard(list0, "YEI,pfUU43,S-x");
      Card.CardName card_CardName0 = Card.CardName.Salvager;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "Q?|FO8y+kdQ");
      Player player1 = player0.clone();
      LinkedList<Card> linkedList0 = player1.deck;
      gameState0.cards = (List<Card>) linkedList0;
      gameState0.playTest(5, '%', 5);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Gardens;
      Card.getCard(list0, card_CardName0);
      String[] stringArray0 = new String[8];
      stringArray0[1] = "\"?&4?e";
      stringArray0[2] = "\"?&4?e";
      stringArray0[3] = "Deck Count, Gardens Count, then Gardens Value for ";
      stringArray0[4] = "";
      stringArray0[5] = "s#M`Hc1saYZ";
      stringArray0[6] = "NE=U}.>\u0003D}N5eBl";
      stringArray0[7] = "Curse";
      Card.filter(list0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Curse;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "");
      player0.drawCard();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Province;
      Card.getCard(list0, card_CardName0);
      LinkedList<Player> linkedList0 = new LinkedList<Player>();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      List<Card> list1 = Card.createCards();
      Player player0 = new Player((GameState) null, "");
      player0.clone();
      Card.CardName card_CardName1 = Card.CardName.Ambassador;
      Card.getCard(list0, card_CardName1);
      Card.getCard(list1, "Province");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Curse;
      Card.getCard(list0, card_CardName0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "^v[";
      stringArray0[1] = "\"?&4?e";
      stringArray0[2] = "Month";
      stringArray0[4] = "Deck Count, Gardens Count, then Gardens Value for ";
      stringArray0[4] = "";
      stringArray0[5] = "s#M`Hc1saYZ";
      stringArray0[6] = "NE=U}.>\u0003D}N5eBl";
      stringArray0[7] = "Embargo";
      Card.filter(list0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Province;
      Card.getCard(list0, card_CardName0);
      Card.CardName card_CardName1 = Card.CardName.Curse;
      Card.getCard(list0, card_CardName1);
      LinkedList<Player> linkedList0 = new LinkedList<Player>();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "d";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "d";
      Card.createCards();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Card.Type.values();
      Random.setNextRandom((-241));
      List<Card> list0 = Card.createCards();
      Card.CardName.values();
      Card.CardName card_CardName0 = Card.CardName.Duchy;
      Card.getCard(list0, card_CardName0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "x";
      stringArray0[2] = "VICTORY";
      stringArray0[3] = "Co$!T0";
      stringArray0[4] = "";
      stringArray0[5] = " )S$LwWVyckz";
      Card.filter(list0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Card.CardName.values();
      Card.CardName.values();
      List<Card> list0 = Card.createCards();
      ArrayList<Player> arrayList0 = new ArrayList<Player>();
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      GameState gameState0 = new GameState(list0, (List<Player>) arrayList0, hashMap0, hashMap0);
      GameState gameState1 = gameState0.clone();
      Card.CardName card_CardName0 = Card.CardName.Copper;
      Card card0 = Card.getCard(gameState0.cards, card_CardName0);
      Integer integer0 = new Integer(4988);
      hashMap0.put(card0, integer0);
      // Undeclared exception!
      try { 
        gameState1.randomCard(0);
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Province;
      Card.getCard(list0, card_CardName0);
      Card.getCard(list0, "5Fh");
      Card.createCards();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Card.toEnumType("");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        Card.filter((Iterable<Card>) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      gameState0.embargoBoard = hashMap0;
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "0PHJIJn~^`g=)Z");
      gameState1.initializeGame();
      player0.drawCard();
      gameState1.play();
      vector0.add((Card) null);
      gameState1.play();
      // Undeclared exception!
      try { 
        Card.getCard((List<Card>) vector0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      vector0.spliterator();
      Card.CardName card_CardName0 = Card.CardName.Cutpurse;
      vector0.iterator();
      vector0.add((Card) null);
      // Undeclared exception!
      try { 
        Card.getCard((List<Card>) vector0, card_CardName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Great_Hall;
      Card.getCard(list0, card_CardName0);
      Card.toEnumType("");
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      player0.drawCard();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.getCard(list0, "YEI,pfUU43,S-x");
      Card.CardName card_CardName0 = Card.CardName.Mine;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "Q?|FO8y+kdQ");
      Player player1 = player0.clone();
      LinkedList<Card> linkedList0 = player1.deck;
      gameState0.cards = (List<Card>) linkedList0;
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.getCard(list0, "Village");
      Card.getCard(list0, "Village");
      Card.getCard(list0, "");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Salvager;
      Card.getCard(list0, card_CardName0);
      Card.toEnumType("F>");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Curse;
      Card.getCard(list0, card_CardName0);
      String[] stringArray0 = new String[8];
      stringArray0[1] = "\"?&4?e";
      stringArray0[3] = "Deck Count, Gardens Count, then Gardens Value for ";
      stringArray0[4] = "";
      stringArray0[5] = "s#M`Hc1saYZ";
      stringArray0[6] = "NE=U}.>\u0003D}N5jeBl";
      stringArray0[7] = "Curse";
      Vector<Card> vector0 = new Vector<Card>();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = stringArray0[0];
      stringArray0[2] = "5R-5RJw$VKPLm";
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.CardName.values();
      Card.toEnumType("Action-Victory");
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName1 = Card.CardName.Mine;
      Card.CardName card_CardName2 = Card.CardName.Ambassador;
      Card.getCard(list0, card_CardName2);
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      ArrayList<Player> arrayList1 = new ArrayList<Player>();
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>(1004);
      GameState gameState0 = new GameState((List<Card>) arrayList0, (List<Player>) arrayList1, hashMap0, hashMap0);
      Player player0 = new Player(gameState0, "");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = new Object();
  }
}
