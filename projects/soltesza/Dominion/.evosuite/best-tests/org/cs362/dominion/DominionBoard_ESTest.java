/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 26 22:43:00 GMT 2017
 */

package org.cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import org.cs362.dominion.Card;
import org.cs362.dominion.DominionBoard;
import org.cs362.dominion.VictoryCard;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DominionBoard_ESTest extends DominionBoard_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DominionBoard dominionBoard0 = new DominionBoard();
      Vector<Card> vector0 = dominionBoard0.GetBuyable(0);
      assertEquals(1, vector0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DominionBoard dominionBoard0 = new DominionBoard();
      Vector<Card> vector0 = dominionBoard0.GetBuyable((-1610));
      assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DominionBoard dominionBoard0 = new DominionBoard();
      VictoryCard victoryCard0 = (VictoryCard)dominionBoard0.BuyCurse();
      victoryCard0.SetTrashed(true);
      VictoryCard victoryCard1 = (VictoryCard)dominionBoard0.BuyCurse();
      assertSame(victoryCard1, victoryCard0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DominionBoard dominionBoard0 = new DominionBoard();
      // Undeclared exception!
      try { 
        dominionBoard0.EmbargoPile(1230);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1230 >= 16
         //
         assertThrownBy("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DominionBoard dominionBoard0 = new DominionBoard();
      // Undeclared exception!
      try { 
        dominionBoard0.BuyCard(2898);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2898 >= 16
         //
         assertThrownBy("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom(Integer.MAX_VALUE);
      DominionBoard dominionBoard0 = null;
      try {
        dominionBoard0 = new DominionBoard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DominionBoard dominionBoard0 = new DominionBoard();
      dominionBoard0.EmbargoPile(0);
      dominionBoard0.BuyCurse();
      dominionBoard0.EmbargoPile(0);
      dominionBoard0.BuyCard(0);
      dominionBoard0.BuyCard(0);
      dominionBoard0.BuyCard(0);
      VictoryCard victoryCard0 = (VictoryCard)dominionBoard0.BuyCurse();
      assertNull(victoryCard0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DominionBoard dominionBoard0 = new DominionBoard();
      boolean boolean0 = dominionBoard0.GameOver();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DominionBoard dominionBoard0 = new DominionBoard();
      dominionBoard0.PrintBoard();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DominionBoard dominionBoard0 = new DominionBoard();
      dominionBoard0.EmbargoPile(0);
      dominionBoard0.BuyCurse();
      dominionBoard0.EmbargoPile(0);
      dominionBoard0.BuyCard(0);
      dominionBoard0.BuyCard(0);
      dominionBoard0.BuyCard(0);
      dominionBoard0.PrintBoard();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DominionBoard dominionBoard0 = new DominionBoard();
      Vector<Card> vector0 = dominionBoard0.GetBuyable(7);
      assertEquals(15, vector0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DominionBoard dominionBoard0 = new DominionBoard();
      Vector<Card> vector0 = dominionBoard0.GetBuyable(2898);
      assertEquals(16, vector0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DominionBoard dominionBoard0 = new DominionBoard();
      dominionBoard0.EmbargoPile(0);
      dominionBoard0.BuyCard(0);
      VictoryCard victoryCard0 = (VictoryCard)dominionBoard0.BuyCurse();
      dominionBoard0.EmbargoPile(0);
      dominionBoard0.BuyCard(0);
      dominionBoard0.BuyCard(0);
      VictoryCard victoryCard1 = (VictoryCard)dominionBoard0.BuyCurse();
      assertSame(victoryCard1, victoryCard0);
  }
}
