/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 26 22:41:31 GMT 2017
 */

package org.cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import org.cs362.dominion.ActionCard;
import org.cs362.dominion.Card;
import org.cs362.dominion.Deck;
import org.cs362.dominion.DominionBoard;
import org.cs362.dominion.GameState;
import org.cs362.dominion.Player;
import org.cs362.dominion.TreasureCard;
import org.cs362.dominion.VictoryCard;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Deck_ESTest extends Deck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Deck deck0 = new Deck();
      VictoryCard.VictoryType victoryCard_VictoryType0 = VictoryCard.VictoryType.GARDENS;
      VictoryCard victoryCard0 = new VictoryCard(victoryCard_VictoryType0);
      deck0.AddCard(victoryCard0);
      int int0 = deck0.GetScore();
      assertEquals(11, deck0.GetCardCount());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Deck deck0 = new Deck();
      int int0 = deck0.PlayTreasures();
      assertEquals(3, deck0.GetScore());
      assertEquals(10, deck0.GetCardCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Deck deck0 = new Deck();
      deck0.DrawCards(1377);
      Vector<Card> vector0 = deck0.GetHand();
      assertEquals(10, vector0.size());
      assertEquals(3, deck0.GetScore());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DominionBoard dominionBoard0 = new DominionBoard();
      Player player0 = new Player("NG<EUiSgIXY'UsG", dominionBoard0);
      // Undeclared exception!
      try { 
        player0.deck.TrashCard((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Deck", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Deck deck0 = new Deck();
      // Undeclared exception!
      try { 
        deck0.AddCard((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Deck", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Deck deck0 = new Deck();
      Vector<Card> vector0 = deck0.DrawCards((-241));
      assertEquals(3, deck0.GetScore());
      assertTrue(vector0.isEmpty());
      assertEquals(10, deck0.GetCardCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DominionBoard dominionBoard0 = new DominionBoard();
      Player player0 = new Player("3A7", dominionBoard0);
      VictoryCard.VictoryType victoryCard_VictoryType0 = VictoryCard.VictoryType.DUCHY;
      VictoryCard victoryCard0 = new VictoryCard(victoryCard_VictoryType0);
      player0.deck.AddCard(victoryCard0);
      VictoryCard.VictoryType victoryCard_VictoryType1 = VictoryCard.VictoryType.PROVINCE;
      VictoryCard victoryCard1 = new VictoryCard(victoryCard_VictoryType1);
      player0.deck.TrashCard(victoryCard1);
      assertTrue(victoryCard1.GetTrashed());
      
      int int0 = player0.deck.GetScore();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DominionBoard dominionBoard0 = new DominionBoard();
      VictoryCard victoryCard0 = (VictoryCard)dominionBoard0.BuyCurse();
      Player player0 = new Player("Gold", dominionBoard0);
      player0.GainCurse();
      player0.deck.DrawCards(1358);
      player0.deck.DiscardFromHand(victoryCard0);
      assertEquals(2, player0.GetScore());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Deck deck0 = new Deck();
      TreasureCard.TreasureType treasureCard_TreasureType0 = TreasureCard.TreasureType.COPPER;
      TreasureCard treasureCard0 = new TreasureCard(treasureCard_TreasureType0);
      deck0.DiscardFromHand(treasureCard0);
      assertEquals(3, deck0.GetScore());
      assertEquals(10, deck0.GetCardCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DominionBoard dominionBoard0 = new DominionBoard();
      Player player0 = new Player("Village", dominionBoard0);
      TreasureCard treasureCard0 = (TreasureCard)player0.TrashFromHand();
      assertNotNull(treasureCard0);
      
      player0.deck.AddCard(treasureCard0);
      player0.deck.TrashCard(treasureCard0);
      assertTrue(treasureCard0.GetTrashed());
      assertEquals(3, player0.GetScore());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DominionBoard dominionBoard0 = new DominionBoard();
      Player player0 = new Player("3A7", dominionBoard0);
      player0.deck.DiscardHand();
      VictoryCard.VictoryType victoryCard_VictoryType0 = VictoryCard.VictoryType.DUCHY;
      VictoryCard victoryCard0 = new VictoryCard(victoryCard_VictoryType0);
      player0.deck.TrashCard(victoryCard0);
      assertEquals(-2, player0.GetScore());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DominionBoard dominionBoard0 = new DominionBoard();
      GameState gameState0 = new GameState(dominionBoard0, 11);
      gameState0.currentPlayer.TakeTurn(gameState0);
      ActionCard.ActionType actionCard_ActionType0 = ActionCard.ActionType.SMITHY;
      VictoryCard.VictoryType victoryCard_VictoryType0 = VictoryCard.VictoryType.GARDENS;
      VictoryCard victoryCard0 = new VictoryCard(victoryCard_VictoryType0);
      victoryCard0.SetTrashed(true);
      gameState0.currentPlayer.deck.AddCard(victoryCard0);
      ActionCard actionCard0 = new ActionCard(actionCard_ActionType0);
      actionCard0.PlayAction(gameState0);
      gameState0.currentPlayer.deck.TrashCard(actionCard0);
      assertTrue(actionCard0.GetTrashed());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Deck deck0 = new Deck();
      VictoryCard.VictoryType victoryCard_VictoryType0 = VictoryCard.VictoryType.PROVINCE;
      VictoryCard victoryCard0 = new VictoryCard(victoryCard_VictoryType0);
      deck0.TrashCard(victoryCard0);
      int int0 = deck0.GetScore();
      assertEquals(9, deck0.GetCardCount());
      assertEquals((-5), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Deck deck0 = new Deck();
      TreasureCard.TreasureType treasureCard_TreasureType0 = TreasureCard.TreasureType.COPPER;
      TreasureCard treasureCard0 = new TreasureCard(treasureCard_TreasureType0);
      deck0.TrashCard(treasureCard0);
      deck0.DrawCards(9);
      assertEquals(9, deck0.GetCardCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Deck deck0 = new Deck();
      TreasureCard.TreasureType treasureCard_TreasureType0 = TreasureCard.TreasureType.COPPER;
      TreasureCard treasureCard0 = new TreasureCard(treasureCard_TreasureType0);
      TreasureCard treasureCard1 = treasureCard0.clone();
      treasureCard1.name = "Gardens";
      deck0.TrashCard(treasureCard1);
      assertEquals(9, deck0.GetCardCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Deck deck0 = new Deck();
      TreasureCard.TreasureType treasureCard_TreasureType0 = TreasureCard.TreasureType.COPPER;
      TreasureCard treasureCard0 = new TreasureCard(treasureCard_TreasureType0);
      deck0.AddCard(treasureCard0);
      deck0.DrawCards(1377);
      deck0.TrashCard(treasureCard0);
      assertTrue(treasureCard0.GetTrashed());
      assertEquals(10, deck0.GetCardCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Deck deck0 = new Deck();
      deck0.DrawCards(14);
      int int0 = deck0.PlayTreasures();
      assertEquals(3, deck0.GetScore());
      assertEquals(7, int0);
      assertEquals(10, deck0.GetCardCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Deck deck0 = new Deck();
      int int0 = deck0.GetCardCount();
      assertEquals(10, int0);
      assertEquals(3, deck0.GetScore());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Deck deck0 = new Deck();
      deck0.GetHand();
      assertEquals(3, deck0.GetScore());
      assertEquals(10, deck0.GetCardCount());
  }
}
