/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 28 03:43:59 GMT 2017
 */

package org.thenellb;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.InputMismatchException;
import java.util.List;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import org.thenellb.Card;
import org.thenellb.CardPicker;
import org.thenellb.CardShop;
import org.thenellb.Deck;
import org.thenellb.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.cardsInHand = (-2310);
      player0.cleanUp();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      Deck deck0 = player0.playerDeck;
      player0.buy();
      player0.playerDeck = deck0;
      // Undeclared exception!
      try { 
        player0.playerTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.thenellb.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.numDraws = (-397);
      player0.buy();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.cardsInHand = (-2310);
      player0.buy();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SystemInUtil.addInputLine("8");
      SystemInUtil.addInputLine("0");
      Player player0 = new Player((CardShop) null);
      // Undeclared exception!
      try { 
        player0.chooseDiscard();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SystemInUtil.addInputLine("0");
      Player player0 = new Player((CardShop) null);
      player0.numDraws = 10;
      player0.chooseDiscard();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.numCoins = (-544);
      SystemInUtil.addInputLine("0");
      player0.chooseDiscard();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SystemInUtil.addInputLine("0");
      Player player0 = new Player((CardShop) null);
      player0.playerNumber = (-1);
      player0.chooseDiscard();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      SystemInUtil.addInputLine("0");
      player0.cardsInHand = (-5);
      player0.chooseDiscard();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      SystemInUtil.addInputLine("0");
      Deck deck0 = new Deck();
      player0.playerDeck = deck0;
      player0.playerHand = deck0.cardDeck;
      player0.cardsInHand = 16;
      player0.playerDeck.shuffle();
      // Undeclared exception!
      try { 
        player0.chooseDiscard();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 10
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.numCoins = (-551);
      SystemInUtil.addInputLine("0");
      player0.cardsInHand = 16;
      // Undeclared exception!
      try { 
        player0.trashCards();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.playerNumber = 1407;
      SystemInUtil.addInputLine("0");
      player0.cardsInHand = 16;
      // Undeclared exception!
      try { 
        player0.trashCards();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.cardsInHand = (-544);
      SystemInUtil.addInputLine("0");
      player0.trashCards();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      SystemInUtil.addInputLine("0");
      player0.numDraws = (-2207);
      player0.trashCards();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.numCoins = (-551);
      SystemInUtil.addInputLine("0");
      player0.trashCards();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      SystemInUtil.addInputLine("0");
      player0.playerNumber = (-1773);
      player0.trashCards();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.cardsInHand = 254;
      player0.numCoins = 254;
      List<Card> list0 = player0.playerDeck.discard;
      player0.playerHand = list0;
      player0.trashCopper();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      Deck deck0 = player0.playerDeck;
      player0.playerHand = deck0.discard;
      player0.playerNumber = 10;
      player0.cardsInHand = 5;
      player0.trashCopper();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.cardsInHand = 254;
      player0.numCoins = 254;
      // Undeclared exception!
      try { 
        player0.trashCopper();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      CardPicker cardPicker0 = new CardPicker();
      player0.playerHand = cardPicker0.finalList;
      player0.play(0);
      player0.trashCopper();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.numCoins = 2475;
      player0.trashCopper();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.numDraws = 459;
      // Undeclared exception!
      try { 
        player0.effect(3);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.numActions = 0;
      player0.action();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.numDraws = (-397);
      // Undeclared exception!
      try { 
        player0.action();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.numCoins = 2475;
      // Undeclared exception!
      try { 
        player0.action();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.playerNumber = 10;
      // Undeclared exception!
      try { 
        player0.action();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SystemInUtil.addInputLine("1");
      SystemInUtil.addInputLine("1");
      Player player0 = new Player((CardShop) null);
      // Undeclared exception!
      try { 
        player0.trashCards();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SystemInUtil.addInputLine("1");
      SystemInUtil.addInputLine("1");
      Player player0 = new Player((CardShop) null);
      // Undeclared exception!
      try { 
        player0.chooseDiscard();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      SystemInUtil.addInputLine("ACTION");
      // Undeclared exception!
      try { 
        player0.trashCards();
        fail("Expecting exception: InputMismatchException");
      
      } catch(InputMismatchException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      Deck deck0 = player0.playerDeck;
      deck0.deckSize = 1;
      // Undeclared exception!
      try { 
        player0.playerTurn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.playerHand = null;
      // Undeclared exception!
      try { 
        player0.play((-1486));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.thenellb.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      // Undeclared exception!
      try { 
        player0.play((-2315));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      SystemInUtil.addInputLine("Please choose how many cards to trash:  ");
      // Undeclared exception!
      try { 
        player0.effect(4);
        fail("Expecting exception: InputMismatchException");
      
      } catch(InputMismatchException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      // Undeclared exception!
      try { 
        player0.discardDeck();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      SystemInUtil.addInputLine("\n\nCard number ");
      // Undeclared exception!
      try { 
        player0.discardDeck();
        fail("Expecting exception: InputMismatchException");
      
      } catch(InputMismatchException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SystemInUtil.addInputLine("1");
      Deck deck0 = new Deck();
      deck0.deckIndex = 1204;
      Player player0 = new Player((CardShop) null);
      player0.playerDeck = deck0;
      // Undeclared exception!
      try { 
        player0.discardDeck();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1204, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.playerHand = null;
      // Undeclared exception!
      try { 
        player0.cleanUp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.thenellb.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SystemInUtil.addInputLine("m[6;");
      Player player0 = new Player((CardShop) null);
      // Undeclared exception!
      try { 
        player0.chooseDiscard();
        fail("Expecting exception: InputMismatchException");
      
      } catch(InputMismatchException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.cardsInHand = 10;
      // Undeclared exception!
      try { 
        player0.buy();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.cardsInHand = 1976;
      // Undeclared exception!
      try { 
        player0.cleanUp();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.numCoins = 2475;
      // Undeclared exception!
      try { 
        player0.buy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.thenellb.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.numBuys = (-820);
      player0.buy();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.effect((-551));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.effect(12);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.cardsInHand = (-1);
      // Undeclared exception!
      try { 
        player0.action();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      Deck deck0 = player0.playerDeck;
      player0.playerHand = deck0.discard;
      player0.cardsInHand = 5;
      player0.action();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.cardsInHand = 254;
      List<Card> list0 = player0.playerDeck.discard;
      player0.playerHand = list0;
      // Undeclared exception!
      try { 
        player0.action();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 10
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      assertEquals(1, player0.numActions);
      
      player0.numActions = (-1203);
      player0.action();
      assertEquals(0, player0.playerNumber);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.numBuys = 0;
      player0.playerTurn();
      assertEquals(0, player0.cardsInHand);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SystemInUtil.addInputLine("1");
      Deck deck0 = new Deck();
      deck0.tallyVictoryPoints();
      Player player0 = new Player((CardShop) null);
      player0.playerDeck = deck0;
      player0.discardDeck();
      assertEquals(0, player0.numDraws);
      assertEquals(1, player0.numBuys);
      assertEquals(0, player0.playerNumber);
      assertEquals(0, player0.numCoins);
      assertEquals(1, player0.numActions);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      SystemInUtil.addInputLine("0");
      player0.discardDeck();
      assertEquals(1, player0.numBuys);
      assertEquals(0, player0.numDraws);
      assertEquals(1, player0.numActions);
      assertEquals(0, player0.numCoins);
      assertEquals(0, player0.playerNumber);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SystemInUtil.addInputLine("1");
      Player player0 = new Player((CardShop) null);
      // Undeclared exception!
      try { 
        player0.chooseDiscard();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SystemInUtil.addInputLine("1");
      Player player0 = new Player((CardShop) null);
      // Undeclared exception!
      try { 
        player0.trashCards();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      SystemInUtil.addInputLine("3");
      player0.cardsInHand = 16;
      // Undeclared exception!
      try { 
        player0.trashCards();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.cardsInHand = 10;
      // Undeclared exception!
      try { 
        player0.effect(10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.effect(13);
      assertEquals(1, player0.numActions);
      assertEquals(1, player0.numBuys);
      assertEquals(0, player0.numCoins);
      assertEquals(0, player0.numDraws);
      assertEquals(0, player0.playerNumber);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      CardPicker cardPicker0 = new CardPicker();
      List<Card> list0 = cardPicker0.cardList;
      player0.playerHand = list0;
      player0.play(11);
      assertEquals(1, player0.numDraws);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.effect(11);
      assertEquals(0, player0.playerNumber);
      assertEquals(1, player0.numBuys);
      assertEquals(1, player0.numActions);
      assertEquals(0, player0.numCoins);
      assertEquals(0, player0.numDraws);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.effect(10);
      assertEquals(0, player0.playerNumber);
      assertEquals(0, player0.numCoins);
      assertEquals(1, player0.numActions);
      assertEquals(1, player0.numBuys);
      assertEquals(0, player0.numDraws);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.effect(9);
      assertEquals(0, player0.numDraws);
      assertEquals(0, player0.playerNumber);
      assertEquals(0, player0.numCoins);
      assertEquals(1, player0.numActions);
      assertEquals(1, player0.numBuys);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.effect(8);
      assertEquals(0, player0.numCoins);
      assertEquals(1, player0.numActions);
      assertEquals(1, player0.numBuys);
      assertEquals(0, player0.numDraws);
      assertEquals(0, player0.playerNumber);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.effect(7);
      assertEquals(1, player0.numActions);
      assertEquals(0, player0.playerNumber);
      assertEquals(0, player0.numDraws);
      assertEquals(0, player0.numCoins);
      assertEquals(1, player0.numBuys);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.effect(6);
      assertEquals(0, player0.numDraws);
      assertEquals(1, player0.numBuys);
      assertEquals(0, player0.numCoins);
      assertEquals(1, player0.numActions);
      assertEquals(0, player0.playerNumber);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      // Undeclared exception!
      try { 
        player0.effect(5);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.effect(2);
      assertEquals(1, player0.numActions);
      assertEquals(0, player0.playerNumber);
      assertEquals(0, player0.numCoins);
      assertEquals(0, player0.numDraws);
      assertEquals(1, player0.numBuys);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.effect(1);
      player0.cardsInHand = 10;
      // Undeclared exception!
      try { 
        player0.action();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      assertEquals(1, player0.numActions);
      
      CardPicker cardPicker0 = new CardPicker();
      List<Card> list0 = cardPicker0.cardList;
      player0.playerHand = list0;
      player0.playerTurn();
      assertEquals(0, player0.cardsInHand);
      assertEquals(0, player0.playerNumber);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      player0.cardsInHand = (-2555);
      // Undeclared exception!
      try { 
        player0.playerTurn();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Player player0 = new Player((CardShop) null);
      // Undeclared exception!
      try { 
        player0.play(11);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }
}
