/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 28 03:55:38 GMT 2017
 */

package org.thenellb;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.thenellb.Adventurer;
import org.thenellb.Bazaar;
import org.thenellb.Chancellor;
import org.thenellb.Chapel;
import org.thenellb.Copper;
import org.thenellb.CouncilRoom;
import org.thenellb.Curse;
import org.thenellb.Duchy;
import org.thenellb.Estate;
import org.thenellb.Festival;
import org.thenellb.Gold;
import org.thenellb.Market;
import org.thenellb.Smithy;
import org.thenellb.Village;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Card_ESTest extends Card_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Village village0 = new Village();
      village0.plusDiscardValue = (-1550);
      village0.printCard();
      assertEquals(3, village0.get_cost());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Chancellor chancellor0 = new Chancellor();
      chancellor0.victoryValue = 4;
      chancellor0.printCard();
      assertEquals(4, chancellor0.get_victoryValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Festival festival0 = new Festival();
      int int0 = festival0.get_victoryValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Duchy duchy0 = new Duchy();
      int int0 = duchy0.get_victoryValue();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Adventurer adventurer0 = new Adventurer();
      adventurer0.text = "";
      adventurer0.text = null;
      String string0 = adventurer0.get_text();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Gold gold0 = new Gold();
      String string0 = gold0.get_text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Market market0 = new Market();
      int int0 = market0.get_plusTreasuryValue();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Estate estate0 = new Estate();
      estate0.plusTreasuryValue = (-1550);
      int int0 = estate0.get_plusTreasuryValue();
      assertEquals((-1550), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Bazaar bazaar0 = new Bazaar();
      int int0 = bazaar0.get_plusCardValue();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Duchy duchy0 = new Duchy();
      duchy0.plusCardValue = (-2872);
      int int0 = duchy0.get_plusCardValue();
      assertEquals((-2872), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Chancellor chancellor0 = new Chancellor();
      int int0 = chancellor0.get_plusBuyValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CouncilRoom councilRoom0 = new CouncilRoom();
      councilRoom0.plusBuyValue = (-1);
      int int0 = councilRoom0.get_plusBuyValue();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Chapel chapel0 = new Chapel();
      chapel0.plusActionValue = 2234;
      int int0 = chapel0.get_plusActionValue();
      assertEquals(2234, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Chapel chapel0 = new Chapel();
      chapel0.plusActionValue = (-1);
      int int0 = chapel0.get_plusActionValue();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Smithy smithy0 = new Smithy();
      assertEquals(4, smithy0.get_cost());
      
      smithy0.cost = 0;
      int int0 = smithy0.get_cost();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Copper copper0 = new Copper();
      copper0.cost = 1;
      copper0.cost = (-98);
      int int0 = copper0.get_cost();
      assertEquals((-98), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Village village0 = new Village();
      village0.cardType = null;
      String string0 = village0.get_cardType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Copper copper0 = new Copper();
      assertEquals("TREASURE", copper0.get_cardType());
      
      copper0.cardType = "";
      String string0 = copper0.get_cardType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Copper copper0 = new Copper();
      copper0.cardName = null;
      String string0 = copper0.get_cardName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Duchy duchy0 = new Duchy();
      assertEquals("Duchy", duchy0.get_cardName());
      
      duchy0.cardName = "";
      String string0 = duchy0.get_cardName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Village village0 = new Village();
      int int0 = village0.activate();
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Village village0 = new Village();
      String string0 = village0.get_cardType();
      assertEquals("ACTION", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Curse curse0 = new Curse();
      int int0 = curse0.get_victoryValue();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Estate estate0 = new Estate();
      int int0 = estate0.get_plusTreasuryValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Duchy duchy0 = new Duchy();
      int int0 = duchy0.get_plusCardValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Chapel chapel0 = new Chapel();
      int int0 = chapel0.get_plusActionValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Smithy smithy0 = new Smithy();
      int int0 = smithy0.get_cost();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CouncilRoom councilRoom0 = new CouncilRoom();
      int int0 = councilRoom0.get_plusBuyValue();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Adventurer adventurer0 = new Adventurer();
      String string0 = adventurer0.get_text();
      assertEquals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards into your hand and discard the other revealed cards.", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Copper copper0 = new Copper();
      String string0 = copper0.get_cardName();
      assertEquals("Copper", string0);
  }
}
