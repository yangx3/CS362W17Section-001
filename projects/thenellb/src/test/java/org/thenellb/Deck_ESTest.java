/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 28 03:46:52 GMT 2017
 */

package org.thenellb;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.thenellb.Card;
import org.thenellb.Copper;
import org.thenellb.CouncilRoom;
import org.thenellb.Curse;
import org.thenellb.Deck;
import org.thenellb.Duchy;
import org.thenellb.Laboratory;
import org.thenellb.Market;
import org.thenellb.Silver;
import org.thenellb.Smithy;
import org.thenellb.WoodCutter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Deck_ESTest extends Deck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Deck deck0 = new Deck();
      deck0.deckIndex = 14;
      deck0.scanForTreasure();
      assertEquals(0, deck0.victoryCards);
      assertEquals(0, deck0.actionCards);
      assertEquals(0, deck0.treasureCards);
      assertEquals(0, deck0.remainingCards);
      assertEquals(10, deck0.discardSize);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Deck deck0 = new Deck();
      deck0.deckIndex = 14;
      // Undeclared exception!
      try { 
        deck0.drawCard();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 14, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Deck deck0 = new Deck();
      assertEquals(10, deck0.discardSize);
      
      deck0.discardSize = (-1);
      int int0 = deck0.tallyVictoryPoints();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Deck deck0 = new Deck();
      Copper copper0 = new Copper();
      deck0.addCardToDeck(copper0);
      copper0.victoryValue = 26;
      deck0.scanForTreasure();
      assertEquals(1, deck0.deckIndex);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Deck deck0 = new Deck();
      Silver silver0 = new Silver();
      deck0.addCardToDeck(silver0);
      silver0.plusTreasuryValue = 0;
      deck0.scanForTreasure();
      assertEquals(1, deck0.deckSize);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Deck deck0 = new Deck();
      Silver silver0 = new Silver();
      silver0.plusBuyValue = 421;
      deck0.addCardToDeck(silver0);
      deck0.scanForTreasure();
      assertEquals(1, deck0.deckSize);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Deck deck0 = new Deck();
      deck0.tallyVictoryPoints();
      Copper copper0 = (Copper)deck0.scanForTreasure();
      copper0.plusActionValue = 3033;
      deck0.addCardToDiscard(copper0);
      deck0.tallyVictoryPoints();
      deck0.scanForTreasure();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Deck deck0 = new Deck();
      Duchy duchy0 = new Duchy();
      deck0.addCardToDeck(duchy0);
      duchy0.plusCardValue = (-3022);
      deck0.drawCard();
      assertEquals(1, deck0.deckIndex);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Deck deck0 = new Deck();
      Market market0 = new Market();
      deck0.addCardToDeck(market0);
      deck0.drawCard();
      assertEquals(1, deck0.deckIndex);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Deck deck0 = new Deck();
      Copper copper0 = new Copper();
      copper0.plusBuyValue = (-827);
      deck0.addCardToDeck(copper0);
      deck0.drawCard();
      assertEquals(1, deck0.deckIndex);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Deck deck0 = new Deck();
      Curse curse0 = new Curse();
      deck0.addCardToDeck(curse0);
      deck0.drawCard();
      assertEquals(1, deck0.deckSize);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Deck deck0 = new Deck();
      deck0.cardDeck = null;
      // Undeclared exception!
      try { 
        deck0.tallyVictoryPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.thenellb.Deck", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Deck deck0 = new Deck();
      List<Card> list0 = deck0.cardDeck;
      Laboratory laboratory0 = new Laboratory();
      deck0.addCardToDeck(laboratory0);
      deck0.discard = list0;
      // Undeclared exception!
      try { 
        deck0.tallyVictoryPoints();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Deck deck0 = new Deck();
      deck0.discard = null;
      // Undeclared exception!
      try { 
        deck0.shuffle();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.thenellb.Deck", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Deck deck0 = new Deck();
      deck0.discardSize = 1208;
      // Undeclared exception!
      try { 
        deck0.shuffle();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 10
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Deck deck0 = new Deck();
      CouncilRoom councilRoom0 = new CouncilRoom();
      deck0.addCardToDeck(councilRoom0);
      deck0.cardDeck = deck0.trash;
      // Undeclared exception!
      try { 
        deck0.scanForTreasure();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Deck deck0 = new Deck();
      deck0.deckIndex = (-1);
      // Undeclared exception!
      try { 
        deck0.scanForTreasure();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Deck deck0 = new Deck();
      deck0.discard = null;
      // Undeclared exception!
      try { 
        deck0.initialization();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Deck deck0 = new Deck();
      deck0.discard = null;
      // Undeclared exception!
      try { 
        deck0.drawCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.thenellb.Deck", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Deck deck0 = new Deck();
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      deck0.discard = (List<Card>) linkedList0;
      // Undeclared exception!
      try { 
        deck0.drawCard();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Deck deck0 = new Deck();
      deck0.deckIndex = (-4229);
      // Undeclared exception!
      try { 
        deck0.drawCard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Deck deck0 = new Deck();
      deck0.discard = null;
      Curse curse0 = new Curse();
      // Undeclared exception!
      try { 
        deck0.addCardToDiscard(curse0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Deck deck0 = new Deck();
      deck0.cardDeck = null;
      Smithy smithy0 = new Smithy();
      // Undeclared exception!
      try { 
        deck0.addCardToDeck(smithy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Deck deck0 = new Deck();
      deck0.shuffle();
      Curse curse0 = new Curse();
      deck0.cardDeck = deck0.trash;
      deck0.addCardToDeck(curse0);
      int int0 = deck0.tallyVictoryPoints();
      assertEquals(1, deck0.deckSize);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Deck deck0 = new Deck();
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      deck0.initialization();
      deck0.drawCard();
      deck0.treasureCards = (-3557);
      deck0.scanForTreasure();
      assertEquals(20, deck0.deckSize);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Deck deck0 = new Deck();
      deck0.drawCard();
      WoodCutter woodCutter0 = new WoodCutter();
      woodCutter0.cost = (-3294);
      deck0.addCardToDiscard(woodCutter0);
      deck0.tallyVictoryPoints();
      deck0.drawCard();
      assertEquals(1, deck0.deckSize);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Deck deck0 = new Deck();
      deck0.discard = deck0.trash;
      deck0.shuffle();
      assertEquals(0, deck0.treasureCards);
      assertEquals(10, deck0.discardSize);
      assertEquals(0, deck0.remainingCards);
      assertEquals(0, deck0.actionCards);
      assertEquals(0, deck0.deckSize);
      assertEquals(0, deck0.victoryCards);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Deck deck0 = new Deck();
      deck0.tallyVictoryPoints();
      deck0.addCardToDiscard((Card) null);
      deck0.deckSize = 0;
      deck0.drawCard();
      assertEquals(1, deck0.discardSize);
  }
}
