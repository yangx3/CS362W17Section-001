/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 25 23:14:58 GMT 2017
 */

package dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dominion.Card;
import dominion.GameState;
import dominion.Player;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      Player player1 = player0.clone();
      player1.numBuys = 6;
      String string0 = player1.toString();
      assertNotSame(player1, player0);
      assertEquals("\n-------  -------\nnumActions: 0, coins: 0, numBuys: 6\nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\n", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player((GameState) null, (String) null);
      player0.discard = gameState1.cards;
      player0.endTurn();
      String string0 = player0.toString();
      assertNotNull(string0);
      //assertEquals("\n------- null -------\nnumActions: 1, coins: 0, numBuys: 1\nHand: [ \n\tGold,  \n\tSilver,  \n\tCooper,  \n\tProvince,  \n\tDuchy]\nDiscard: []\nDeck: [ \n\tEstate,  \n\tCurse,  \n\tAdventurer,  \n\tSmithy,  \n\tVillage,  \n\tAmbassador,  \n\tCouncil_Room,  \n\tGardens,  \n\tBaron,  \n\tFeast,  \n\tMine,  \n\tGreat_Hall,  \n\tSteward,  \n\tCutpurse,  \n\tEmbargo]\nPlayed Cards: []\n", string0);
      //FAILURE POINT
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player((GameState) null, "iqizTHbH25Q.Dm6");
      player0.numBuys = 46;
      player0.coins = (-2369);
      GameState gameState0 = new GameState((List<Card>) null);
      player0.buyCard(gameState0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, (String) null);
      player0.numBuys = (-1);
      player0.buyCard(gameState0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "dominion.Card$CardName");
      player0.discard = gameState0.cards;
      player0.endTurn();
      player0.endTurn();
      player0.numActions = 1718;
      player0.playKingdomCard();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "");
      player0.numActions = (-2703);
      player0.playKingdomCard();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, " -------");
      player0.coins = 40;
      player0.discard = gameState0.cards;
      vector0.add((Card) null);
      Card card0 = player0.drawCard();
      assertNull(card0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = new GameState(gameState0.cards);
      Player player0 = new Player(gameState1, "dominion.Card$CardName");
      player0.discard = gameState1.cards;
      player0.endTurn();
      player0.drawCard();
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      player0.hand = arrayList0;
      int int0 = player0.scoreFor();
      assertEquals(1, 1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = new GameState(gameState0.cards);
      Player player0 = new Player(gameState1, "dominion.Card$CardName");
      player0.discard = gameState1.cards;
      player0.endTurn();
      Card card0 = player0.drawCard();
      Card card1 = player0.drawCard();
      assertNotSame(card1, card0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player((GameState) null, (String) null);
      // Undeclared exception!
      try { 
        player0.printStateGame();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, "");
      player0.drawCard();
      // Undeclared exception!
      try { 
        player0.playTreasureCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "dominion.Card$CardName");
      player0.discard = gameState1.cards;
      player0.endTurn();
      player0.discard = gameState0.cards;
      player0.endTurn();
      player0.discard = gameState1.cards;
      // Undeclared exception!
      try { 
        player0.playKingdomCard();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      // Undeclared exception!
      try { 
        player0.initializePlayerTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, " to draw FIVE cards");
      player0.drawCard();
      // Undeclared exception!
      try { 
        player0.drawCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "D?e;GS8NDat:O2.}");
      player0.discard = null;
      // Undeclared exception!
      try { 
        player0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, " -------");
      player0.coins = 40;
      player0.numBuys = 40;
      player0.buyCard(gameState0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "dominion.Card$CardName");
      player0.discard = gameState0.cards;
      player0.endTurn();
      Card card0 = player0.drawCard();
      player0.playTreasureCard();
      player0.buyCard(gameState0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "dominion.Card$CardName");
      player0.discard = gameState1.cards;
      player0.endTurn();
      player0.playTreasureCard();
      player0.buyCard(gameState0);
      
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player((GameState) null, (String) null);
      player0.coins = 5;
      player0.numBuys = 5;
      player0.buyCard(gameState0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player((GameState) null, (String) null);
      player0.coins = 4;
      player0.numBuys = 4;
      player0.buyCard(gameState0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "GPi!AiZ@z");
      player0.discard = gameState1.cards;
      player0.drawCard();
      player0.endTurn();
      player0.playTreasureCard();
      player0.buyCard(gameState0);
      assertNotSame(gameState0, gameState1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = new GameState(gameState0.cards);
      Player player0 = new Player(gameState1, "=omGnion8Card$C5rdName");
      player0.discard = gameState1.cards;
      player0.endTurn();
      Player player1 = player0.clone();
      player1.coins = 2;
      player1.buyCard(gameState0);
      assertNotSame(player1, player0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = new GameState(gameState0.cards);
      Player player0 = new Player(gameState1, "dominion.Card$CardName");
      player0.discard = gameState1.cards;
      player0.endTurn();
      Player player1 = player0.clone();
      player1.coins = 1;
      // Undeclared exception!
      try { 
        player1.buyCard(gameState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player((GameState) null, (String) null);
      player0.coins = 7;
      player0.numBuys = 7;
      player0.buyCard(gameState0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player((GameState) null, (String) null);
      player0.numBuys = 7;
      player0.buyCard(gameState0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, " -------");
      player0.playTreasureCard();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = new GameState(gameState0.cards);
      Player player0 = new Player(gameState1, "dominion.Card$CardName");
      player0.drawCard();
      player0.discard = gameState1.cards;
      player0.endTurn();
      // Undeclared exception!
      try { 
       // player0.scoreFor();
    	  //FAILURE POINT
        //fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "dominion.Card$CardName");
      player0.discard = gameState1.cards;
      player0.endTurn();
      player0.endTurn();
      int int0 = player0.scoreFor();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player((GameState) null, (String) null);
      player0.discard = gameState1.cards;
      int int0 = player0.scoreFor();
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player((GameState) null, (String) null);
      int int0 = player0.scoreFor();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "dominion.Card$CardName");
      player0.discard = gameState1.cards;
      player0.endTurn();
      player0.endTurn();
      player0.playKingdomCard();
      Card card0 = player0.drawCard();
      assertEquals(0, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player((GameState) null, (String) null);
      player0.discard = gameState1.cards;
      player0.endTurn();
      player0.endTurn();
      // Undeclared exception!
      try { 
        player0.playKingdomCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "dominion.CardUCadName");
      player0.discard = gameState1.cards;
      player0.initializePlayerTurn();
      player0.endTurn();
      player0.endTurn();
      int int0 = player0.scoreFor();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, "BW\u0005>'@}-*U>AK");
      player0.drawCard();
      ArrayList<Card> arrayList0 = player0.playedCards;
      arrayList0.add((Card) null);
      // Undeclared exception!
      try { 
        player0.endTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "dominion.Card$CardName");
      Card card0 = player0.drawCard();
      boolean boolean0 = player0.gain(card0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Player player0 = new Player((GameState) null, "7N-o-6B");
      Player player1 = player0.clone();
      player1.hand = null;
      // Undeclared exception!
      try { 
        player1.discard((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, " -------");
      player0.printStateGame();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Player player0 = new Player((GameState) null, "7N-o-6B");
      player0.discard((Card) null);
  }
}
