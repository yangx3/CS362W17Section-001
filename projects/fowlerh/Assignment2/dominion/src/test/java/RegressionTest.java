
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test001"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.adventurer;
    gameBoard2.trashCard(card3);
    int i5 = card3.getVictory();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.adventurer + "'", card3.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test002"); }

    Card card0 = Card.adventurer;
    card0.setVictory(4);
    org.junit.Assert.assertTrue("'" + card0 + "' != '" + Card.adventurer + "'", card0.equals(Card.adventurer));

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test003"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    java.util.List<Card> list_card5 = gameBoard2.getActiveSupplyPiles();
    java.util.List<Card> list_card6 = gameBoard2.getTrash();
    java.util.List<Card> list_card8 = gameBoard2.kingdomCards(100);
    gameBoard2.opponentDiscardCopper((int)(short)1);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test004"); }

    Card card0 = Card.copper;
    org.junit.Assert.assertTrue("'" + card0 + "' != '" + Card.copper + "'", card0.equals(Card.copper));

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test005"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    boolean b5 = gameBoard2.gameDone();
    Card card6 = Card.cutpurse;
    int i7 = gameBoard2.numCardsAvailable(card6);
    GameBoard gameBoard10 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card11 = gameBoard10.getActiveSupplyPiles();
    int i12 = gameBoard10.getTotalEmbargoTokens();
    Card card13 = Card.council_room;
    int i14 = card13.getVictory();
    int i15 = gameBoard10.numCardsAvailable(card13);
    Card card16 = null;
    Card card17 = Card.embargo;
    card17.setVictory(0);
    Card card20 = Card.gold;
    GameBoard gameBoard23 = new GameBoard((int)(byte)100, (-1));
    Card card24 = Card.gardens;
    int i25 = gameBoard23.numEmbargoTokens(card24);
    GameBoard gameBoard28 = new GameBoard(0, "hi!");
    Card card29 = Card.ambassador;
    gameBoard28.returnCard(card29);
    java.util.List<Card> list_card31 = gameBoard28.getActiveSupplyPiles();
    java.util.List<Card> list_card34 = gameBoard28.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card36 = gameBoard28.kingdomCards((int)(short)100);
    Card card37 = Card.cutpurse;
    int i38 = card37.getCost();
    int i39 = gameBoard28.numEmbargoTokens(card37);
    Card card40 = Card.estate;
    Card card41 = Card.estate;
    card41.setVictory((int)(short)-1);
    GameBoard gameBoard46 = new GameBoard(0, "hi!");
    Card card47 = Card.ambassador;
    gameBoard46.returnCard(card47);
    boolean b49 = gameBoard46.gameDone();
    java.util.List<Card> list_card50 = gameBoard46.getActiveSupplyPiles();
    GameBoard gameBoard53 = new GameBoard(0, "hi!");
    Card card54 = Card.ambassador;
    gameBoard53.returnCard(card54);
    int i56 = gameBoard46.numCardsAvailable(card54);
    GameBoard gameBoard59 = new GameBoard(0, "hi!");
    Card card60 = Card.ambassador;
    gameBoard59.returnCard(card60);
    java.util.List<Card> list_card62 = gameBoard2.kingdomCards(card13, card16, card17, card20, card24, card37, card40, card41, card54, card60);
    card24.setVictory((int)(short)-1);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.cutpurse + "'", card6.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.council_room + "'", card13.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 10);
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.embargo + "'", card17.equals(Card.embargo));
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.gold + "'", card20.equals(Card.gold));
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.gardens + "'", card24.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.ambassador + "'", card29.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.cutpurse + "'", card37.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.estate + "'", card40.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.estate + "'", card41.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.ambassador + "'", card47.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    org.junit.Assert.assertTrue("'" + card54 + "' != '" + Card.ambassador + "'", card54.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    org.junit.Assert.assertTrue("'" + card60 + "' != '" + Card.ambassador + "'", card60.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test006"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.adventurer;
    gameBoard2.trashCard(card3);
    java.util.List<Player> list_player5 = gameBoard2.getPlayers();
    java.util.List<Card> list_card6 = gameBoard2.getActiveSupplyPiles();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.adventurer + "'", card3.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test007"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Player> list_player11 = gameBoard4.getPlayers();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test008"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    Card card12 = Card.adventurer;
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    gameBoard15.opponentDraw((int)'4');
    player10.buyCard(card12, gameBoard15);
    GameBoard gameBoard26 = new GameBoard(0, "hi!");
    Card card27 = Card.ambassador;
    gameBoard26.returnCard(card27);
    boolean b29 = gameBoard26.gameDone();
    int i30 = gameBoard26.play();
    Card card31 = player10.getRandomBuyCard(gameBoard26);
    int i32 = player10.getTotalVictoryPoints();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.ambassador + "'", card27.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.copper + "'", card31.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == (-3));

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test009"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    boolean b5 = gameBoard2.gameDone();
    Card card6 = Card.cutpurse;
    int i7 = gameBoard2.numCardsAvailable(card6);
    GameBoard gameBoard10 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card11 = gameBoard10.getActiveSupplyPiles();
    int i12 = gameBoard10.getTotalEmbargoTokens();
    Card card13 = Card.council_room;
    int i14 = card13.getVictory();
    int i15 = gameBoard10.numCardsAvailable(card13);
    Card card16 = null;
    Card card17 = Card.embargo;
    card17.setVictory(0);
    Card card20 = Card.gold;
    GameBoard gameBoard23 = new GameBoard((int)(byte)100, (-1));
    Card card24 = Card.gardens;
    int i25 = gameBoard23.numEmbargoTokens(card24);
    GameBoard gameBoard28 = new GameBoard(0, "hi!");
    Card card29 = Card.ambassador;
    gameBoard28.returnCard(card29);
    java.util.List<Card> list_card31 = gameBoard28.getActiveSupplyPiles();
    java.util.List<Card> list_card34 = gameBoard28.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card36 = gameBoard28.kingdomCards((int)(short)100);
    Card card37 = Card.cutpurse;
    int i38 = card37.getCost();
    int i39 = gameBoard28.numEmbargoTokens(card37);
    Card card40 = Card.estate;
    Card card41 = Card.estate;
    card41.setVictory((int)(short)-1);
    GameBoard gameBoard46 = new GameBoard(0, "hi!");
    Card card47 = Card.ambassador;
    gameBoard46.returnCard(card47);
    boolean b49 = gameBoard46.gameDone();
    java.util.List<Card> list_card50 = gameBoard46.getActiveSupplyPiles();
    GameBoard gameBoard53 = new GameBoard(0, "hi!");
    Card card54 = Card.ambassador;
    gameBoard53.returnCard(card54);
    int i56 = gameBoard46.numCardsAvailable(card54);
    GameBoard gameBoard59 = new GameBoard(0, "hi!");
    Card card60 = Card.ambassador;
    gameBoard59.returnCard(card60);
    java.util.List<Card> list_card62 = gameBoard2.kingdomCards(card13, card16, card17, card20, card24, card37, card40, card41, card54, card60);
    card40.setVictory(97);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.cutpurse + "'", card6.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.council_room + "'", card13.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 10);
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.embargo + "'", card17.equals(Card.embargo));
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.gold + "'", card20.equals(Card.gold));
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.gardens + "'", card24.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.ambassador + "'", card29.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.cutpurse + "'", card37.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.estate + "'", card40.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.estate + "'", card41.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.ambassador + "'", card47.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    org.junit.Assert.assertTrue("'" + card54 + "' != '" + Card.ambassador + "'", card54.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    org.junit.Assert.assertTrue("'" + card60 + "' != '" + Card.ambassador + "'", card60.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test010"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    java.util.List<Card> list_card5 = gameBoard2.getActiveSupplyPiles();
    java.util.List<Card> list_card6 = gameBoard2.getTrash();
    Card card8 = Card.smithy;
    card8.setVictory((int)(byte)-1);
    int i11 = card8.getTreasure();
    gameBoard2.opponentGainCard((int)'4', card8);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + card8 + "' != '" + Card.smithy + "'", card8.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test011"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    boolean b5 = gameBoard2.gameDone();
    java.util.List<Card> list_card6 = gameBoard2.getActiveSupplyPiles();
    GameBoard gameBoard9 = new GameBoard(0, "hi!");
    Card card10 = Card.ambassador;
    gameBoard9.returnCard(card10);
    boolean b12 = gameBoard2.hasCardsAvailable(card10);
    card10.setVictory(4);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.ambassador + "'", card10.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test012"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    java.util.List<Card> list_card5 = gameBoard2.getActiveSupplyPiles();
    java.util.List<Card> list_card8 = gameBoard2.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card10 = gameBoard2.kingdomCards((int)(short)100);
    Card card11 = Card.ambassador;
    int i12 = card11.getCost();
    int i13 = gameBoard2.numEmbargoTokens(card11);
    int i14 = gameBoard2.play();
    boolean b15 = gameBoard2.gameDone();
    Card card17 = Card.smithy;
    gameBoard2.opponentGainCard((int)(short)100, card17);
    GameBoard gameBoard21 = new GameBoard(0, "hi!");
    Card card22 = Card.ambassador;
    gameBoard21.returnCard(card22);
    Card card24 = Card.cutpurse;
    int i25 = card24.getCost();
    boolean b26 = gameBoard21.hasCardsAvailable(card24);
    gameBoard2.trashCard(card24);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.ambassador + "'", card11.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.smithy + "'", card17.equals(Card.smithy));
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.ambassador + "'", card22.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.cutpurse + "'", card24.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test013"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.lang.String str14 = player10.getName();
    GameBoard gameBoard19 = new GameBoard(0, "hi!");
    Card card20 = Card.ambassador;
    gameBoard19.returnCard(card20);
    Card card22 = Card.cutpurse;
    int i23 = card22.getCost();
    boolean b24 = gameBoard19.hasCardsAvailable(card22);
    Player player25 = new Player("hi!", (int)'a', gameBoard19);
    Card card26 = player25.drawCard();
    player25.addActions((int)(short)1);
    java.lang.String str29 = player25.getName();
    player25.discardHandAndInPlay();
    player25.initPlayerTurn();
    Card card32 = player25.drawCard();
    GameBoard gameBoard33 = null;
    // The following exception was thrown during execution in test generation
    try {
    player10.gainCard(card32, gameBoard33);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.ambassador + "'", card20.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.cutpurse + "'", card22.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "hi!"+ "'", str29.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.copper + "'", card32.equals(Card.copper));

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test014"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.lang.String str14 = player10.getName();
    player10.discardHandAndInPlay();
    player10.initPlayerTurn();
    Card card17 = Card.duchy;
    GameBoard gameBoard20 = new GameBoard(0, "hi!");
    Card card21 = Card.adventurer;
    gameBoard20.trashCard(card21);
    player10.gainCardToHand(card17, gameBoard20);
    int i24 = player10.getNumActions();
    GameBoard gameBoard28 = new GameBoard(0, "hi!");
    Card card29 = Card.ambassador;
    gameBoard28.returnCard(card29);
    java.util.List<Card> list_card31 = gameBoard28.getActiveSupplyPiles();
    boolean b32 = gameBoard28.gameDone();
    // The following exception was thrown during execution in test generation
    try {
    player10.playCard((int)'4', gameBoard28);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.duchy + "'", card17.equals(Card.duchy));
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.ambassador + "'", card29.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test015"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    boolean b7 = gameBoard4.gameDone();
    java.util.List<Card> list_card8 = gameBoard4.getTrash();
    Card card9 = Card.ambassador;
    int i10 = card9.getCost();
    gameBoard4.returnCard(card9);
    Player player12 = new Player("hi!", (-1), gameBoard4);
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    GameBoard gameBoard25 = new GameBoard(0, "hi!");
    Card card26 = Card.ambassador;
    gameBoard25.returnCard(card26);
    Card card28 = Card.cutpurse;
    int i29 = card28.getCost();
    boolean b30 = gameBoard25.hasCardsAvailable(card28);
    Player player31 = new Player("hi!", (int)'a', gameBoard25);
    Card card32 = Card.feast;
    int i33 = card32.getCost();
    GameBoard gameBoard36 = new GameBoard(3, "hi!");
    player31.buyCard(card32, gameBoard36);
    player12.gainCard(card19, gameBoard36);
    boolean b39 = player12.hasBuys();
    boolean b40 = player12.hasActions();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.ambassador + "'", card9.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.ambassador + "'", card26.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.cutpurse + "'", card28.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.feast + "'", card32.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test016"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.lang.String str14 = player10.getName();
    player10.discardHandAndInPlay();
    int i16 = player10.getNum();
    java.util.List<java.lang.Integer> list_i17 = player10.getActionCardIndices();
    Card card18 = Card.smithy;
    card18.setVictory((int)(byte)-1);
    int i21 = card18.getTreasure();
    int i22 = card18.getCost();
    GameBoard gameBoard23 = null;
    // The following exception was thrown during execution in test generation
    try {
    player10.gainCard(card18, gameBoard23);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i17);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.smithy + "'", card18.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 4);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test017"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.countTreasure();
    player10.countTreasure();
    java.util.LinkedList<Card> linkedlist_card14 = player10.getDeck();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card14);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test018"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.lang.String str14 = player10.getName();
    player10.discardHandAndInPlay();
    Card card16 = Card.smithy;
    card16.setVictory((int)(byte)-1);
    GameBoard gameBoard19 = null;
    // The following exception was thrown during execution in test generation
    try {
    player10.gainCardToHand(card16, gameBoard19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.smithy + "'", card16.equals(Card.smithy));

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test019"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    boolean b5 = gameBoard2.gameDone();
    java.util.List<Card> list_card6 = gameBoard2.getActiveSupplyPiles();
    GameBoard gameBoard9 = new GameBoard(0, "hi!");
    Card card10 = Card.ambassador;
    gameBoard9.returnCard(card10);
    int i12 = gameBoard2.numCardsAvailable(card10);
    int i13 = card10.getCost();
    int i14 = card10.getCost();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.ambassador + "'", card10.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 3);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test020"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = Card.feast;
    int i12 = card11.getCost();
    GameBoard gameBoard15 = new GameBoard(3, "hi!");
    player10.buyCard(card11, gameBoard15);
    java.lang.String str17 = player10.getName();
    GameBoard gameBoard22 = new GameBoard(0, "hi!");
    Card card23 = Card.ambassador;
    gameBoard22.returnCard(card23);
    Card card25 = Card.cutpurse;
    int i26 = card25.getCost();
    boolean b27 = gameBoard22.hasCardsAvailable(card25);
    Player player28 = new Player("hi!", (int)'a', gameBoard22);
    Card card29 = player28.drawCard();
    player28.addActions((int)(short)1);
    java.lang.String str32 = player28.getName();
    player28.discardHandAndInPlay();
    player28.initPlayerTurn();
    Card card35 = Card.gardens;
    player28.Discard(card35);
    GameBoard gameBoard39 = new GameBoard(1, "hi!");
    player10.gainCardToHand(card35, gameBoard39);
    Card card41 = player10.drawCard();
    java.util.List<java.lang.String> list_str42 = card41.getTypes();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.feast + "'", card11.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "hi!"+ "'", str17.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.ambassador + "'", card23.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.cutpurse + "'", card25.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.copper + "'", card29.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "hi!"+ "'", str32.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.gardens + "'", card35.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.copper + "'", card41.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str42);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test021"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = Card.feast;
    int i12 = card11.getCost();
    GameBoard gameBoard15 = new GameBoard(3, "hi!");
    player10.buyCard(card11, gameBoard15);
    java.lang.String str17 = player10.getName();
    Card card18 = player10.drawCard();
    GameBoard gameBoard22 = new GameBoard(0, "hi!");
    Card card23 = Card.ambassador;
    gameBoard22.returnCard(card23);
    boolean b25 = gameBoard22.gameDone();
    Card card26 = Card.cutpurse;
    int i27 = gameBoard22.numCardsAvailable(card26);
    GameBoard gameBoard30 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card31 = gameBoard30.getActiveSupplyPiles();
    int i32 = gameBoard30.getTotalEmbargoTokens();
    Card card33 = Card.council_room;
    int i34 = card33.getVictory();
    int i35 = gameBoard30.numCardsAvailable(card33);
    Card card36 = null;
    Card card37 = Card.embargo;
    card37.setVictory(0);
    Card card40 = Card.gold;
    GameBoard gameBoard43 = new GameBoard((int)(byte)100, (-1));
    Card card44 = Card.gardens;
    int i45 = gameBoard43.numEmbargoTokens(card44);
    GameBoard gameBoard48 = new GameBoard(0, "hi!");
    Card card49 = Card.ambassador;
    gameBoard48.returnCard(card49);
    java.util.List<Card> list_card51 = gameBoard48.getActiveSupplyPiles();
    java.util.List<Card> list_card54 = gameBoard48.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card56 = gameBoard48.kingdomCards((int)(short)100);
    Card card57 = Card.cutpurse;
    int i58 = card57.getCost();
    int i59 = gameBoard48.numEmbargoTokens(card57);
    Card card60 = Card.estate;
    Card card61 = Card.estate;
    card61.setVictory((int)(short)-1);
    GameBoard gameBoard66 = new GameBoard(0, "hi!");
    Card card67 = Card.ambassador;
    gameBoard66.returnCard(card67);
    boolean b69 = gameBoard66.gameDone();
    java.util.List<Card> list_card70 = gameBoard66.getActiveSupplyPiles();
    GameBoard gameBoard73 = new GameBoard(0, "hi!");
    Card card74 = Card.ambassador;
    gameBoard73.returnCard(card74);
    int i76 = gameBoard66.numCardsAvailable(card74);
    GameBoard gameBoard79 = new GameBoard(0, "hi!");
    Card card80 = Card.ambassador;
    gameBoard79.returnCard(card80);
    java.util.List<Card> list_card82 = gameBoard22.kingdomCards(card33, card36, card37, card40, card44, card57, card60, card61, card74, card80);
    // The following exception was thrown during execution in test generation
    try {
    player10.playCard((int)'4', gameBoard22);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.feast + "'", card11.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "hi!"+ "'", str17.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.copper + "'", card18.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.ambassador + "'", card23.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.cutpurse + "'", card26.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.council_room + "'", card33.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 10);
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.embargo + "'", card37.equals(Card.embargo));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.gold + "'", card40.equals(Card.gold));
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.gardens + "'", card44.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    org.junit.Assert.assertTrue("'" + card49 + "' != '" + Card.ambassador + "'", card49.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card56);
    org.junit.Assert.assertTrue("'" + card57 + "' != '" + Card.cutpurse + "'", card57.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    org.junit.Assert.assertTrue("'" + card60 + "' != '" + Card.estate + "'", card60.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card61 + "' != '" + Card.estate + "'", card61.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card67 + "' != '" + Card.ambassador + "'", card67.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card70);
    org.junit.Assert.assertTrue("'" + card74 + "' != '" + Card.ambassador + "'", card74.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    org.junit.Assert.assertTrue("'" + card80 + "' != '" + Card.ambassador + "'", card80.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card82);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test022"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    java.util.List<Card> list_card5 = gameBoard2.getActiveSupplyPiles();
    java.util.List<Card> list_card8 = gameBoard2.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card10 = gameBoard2.kingdomCards((int)(short)100);
    Card card11 = Card.ambassador;
    int i12 = card11.getCost();
    int i13 = gameBoard2.numEmbargoTokens(card11);
    int i14 = gameBoard2.play();
    java.util.List<Card> list_card16 = gameBoard2.getPurchaseableCards(0);
    GameBoard gameBoard19 = new GameBoard(0, "hi!");
    Card card20 = Card.ambassador;
    gameBoard19.returnCard(card20);
    int i22 = gameBoard2.numCardsAvailable(card20);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.ambassador + "'", card11.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.ambassador + "'", card20.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test023"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.countTreasure();
    player10.countTreasure();
    int i14 = player10.getCoins();
    Card card15 = player10.drawCard();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 6);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.copper + "'", card15.equals(Card.copper));

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test024"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    boolean b5 = gameBoard2.gameDone();
    Card card6 = Card.estate;
    gameBoard2.returnCard(card6);
    gameBoard2.opponentDraw((int)'4');
    int i10 = gameBoard2.play();
    Card card11 = null;
    gameBoard2.takeCard(card11);
    Card card13 = Card.council_room;
    gameBoard2.returnCard(card13);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.estate + "'", card6.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.council_room + "'", card13.equals(Card.council_room));

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test025"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    GameBoard gameBoard5 = new GameBoard(0, "hi!");
    Card card6 = Card.ambassador;
    gameBoard5.returnCard(card6);
    boolean b8 = gameBoard5.gameDone();
    Card card9 = Card.cutpurse;
    int i10 = gameBoard5.numCardsAvailable(card9);
    GameBoard gameBoard13 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card14 = gameBoard13.getActiveSupplyPiles();
    int i15 = gameBoard13.getTotalEmbargoTokens();
    Card card16 = Card.council_room;
    int i17 = card16.getVictory();
    int i18 = gameBoard13.numCardsAvailable(card16);
    Card card19 = null;
    Card card20 = Card.embargo;
    card20.setVictory(0);
    Card card23 = Card.gold;
    GameBoard gameBoard26 = new GameBoard((int)(byte)100, (-1));
    Card card27 = Card.gardens;
    int i28 = gameBoard26.numEmbargoTokens(card27);
    GameBoard gameBoard31 = new GameBoard(0, "hi!");
    Card card32 = Card.ambassador;
    gameBoard31.returnCard(card32);
    java.util.List<Card> list_card34 = gameBoard31.getActiveSupplyPiles();
    java.util.List<Card> list_card37 = gameBoard31.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card39 = gameBoard31.kingdomCards((int)(short)100);
    Card card40 = Card.cutpurse;
    int i41 = card40.getCost();
    int i42 = gameBoard31.numEmbargoTokens(card40);
    Card card43 = Card.estate;
    Card card44 = Card.estate;
    card44.setVictory((int)(short)-1);
    GameBoard gameBoard49 = new GameBoard(0, "hi!");
    Card card50 = Card.ambassador;
    gameBoard49.returnCard(card50);
    boolean b52 = gameBoard49.gameDone();
    java.util.List<Card> list_card53 = gameBoard49.getActiveSupplyPiles();
    GameBoard gameBoard56 = new GameBoard(0, "hi!");
    Card card57 = Card.ambassador;
    gameBoard56.returnCard(card57);
    int i59 = gameBoard49.numCardsAvailable(card57);
    GameBoard gameBoard62 = new GameBoard(0, "hi!");
    Card card63 = Card.ambassador;
    gameBoard62.returnCard(card63);
    java.util.List<Card> list_card65 = gameBoard5.kingdomCards(card16, card19, card20, card23, card27, card40, card43, card44, card57, card63);
    card20.setVictory((int)(byte)0);
    gameBoard2.returnCard(card20);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.ambassador + "'", card6.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.cutpurse + "'", card9.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.council_room + "'", card16.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 10);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.embargo + "'", card20.equals(Card.embargo));
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.gold + "'", card23.equals(Card.gold));
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.gardens + "'", card27.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.ambassador + "'", card32.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.cutpurse + "'", card40.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    org.junit.Assert.assertTrue("'" + card43 + "' != '" + Card.estate + "'", card43.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.estate + "'", card44.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card50 + "' != '" + Card.ambassador + "'", card50.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    org.junit.Assert.assertTrue("'" + card57 + "' != '" + Card.ambassador + "'", card57.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    org.junit.Assert.assertTrue("'" + card63 + "' != '" + Card.ambassador + "'", card63.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card65);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test026"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    boolean b7 = gameBoard4.gameDone();
    java.util.List<Card> list_card8 = gameBoard4.getTrash();
    Card card9 = Card.ambassador;
    int i10 = card9.getCost();
    gameBoard4.returnCard(card9);
    Player player12 = new Player("hi!", (-1), gameBoard4);
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    GameBoard gameBoard25 = new GameBoard(0, "hi!");
    Card card26 = Card.ambassador;
    gameBoard25.returnCard(card26);
    Card card28 = Card.cutpurse;
    int i29 = card28.getCost();
    boolean b30 = gameBoard25.hasCardsAvailable(card28);
    Player player31 = new Player("hi!", (int)'a', gameBoard25);
    Card card32 = Card.feast;
    int i33 = card32.getCost();
    GameBoard gameBoard36 = new GameBoard(3, "hi!");
    player31.buyCard(card32, gameBoard36);
    player12.gainCard(card19, gameBoard36);
    int i39 = player12.getNum();
    player12.addActions((int)(short)1);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.ambassador + "'", card9.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.ambassador + "'", card26.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.cutpurse + "'", card28.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.feast + "'", card32.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == (-1));

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test027"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    int i12 = player10.getNum();
    boolean b13 = player10.hasActions();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test028"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.countTreasure();
    player10.countTreasure();
    int i14 = player10.getCoins();
    int i15 = player10.getCoins();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 6);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test029"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card3 = gameBoard2.getActiveSupplyPiles();
    boolean b4 = gameBoard2.gameDone();
    int i5 = gameBoard2.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test030"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    boolean b7 = gameBoard4.gameDone();
    java.util.List<Card> list_card8 = gameBoard4.getTrash();
    Card card9 = Card.ambassador;
    int i10 = card9.getCost();
    gameBoard4.returnCard(card9);
    Player player12 = new Player("hi!", (-1), gameBoard4);
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    GameBoard gameBoard25 = new GameBoard(0, "hi!");
    Card card26 = Card.ambassador;
    gameBoard25.returnCard(card26);
    Card card28 = Card.cutpurse;
    int i29 = card28.getCost();
    boolean b30 = gameBoard25.hasCardsAvailable(card28);
    Player player31 = new Player("hi!", (int)'a', gameBoard25);
    Card card32 = Card.feast;
    int i33 = card32.getCost();
    GameBoard gameBoard36 = new GameBoard(3, "hi!");
    player31.buyCard(card32, gameBoard36);
    player12.gainCard(card19, gameBoard36);
    GameBoard gameBoard41 = new GameBoard(0, "hi!");
    Card card42 = Card.ambassador;
    gameBoard41.returnCard(card42);
    java.util.List<Card> list_card44 = gameBoard41.getActiveSupplyPiles();
    java.util.List<Card> list_card47 = gameBoard41.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card49 = gameBoard41.kingdomCards((int)(short)100);
    Card card50 = Card.cutpurse;
    int i51 = card50.getCost();
    int i52 = gameBoard41.numEmbargoTokens(card50);
    int i53 = card50.getCost();
    player12.Discard(card50);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.ambassador + "'", card9.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.ambassador + "'", card26.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.cutpurse + "'", card28.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.feast + "'", card32.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 4);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.ambassador + "'", card42.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    org.junit.Assert.assertTrue("'" + card50 + "' != '" + Card.cutpurse + "'", card50.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 4);

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test031"); }

    GameBoard gameBoard6 = new GameBoard(0, "hi!");
    Card card7 = Card.ambassador;
    gameBoard6.returnCard(card7);
    Card card9 = Card.cutpurse;
    int i10 = card9.getCost();
    boolean b11 = gameBoard6.hasCardsAvailable(card9);
    Player player12 = new Player("hi!", (int)'a', gameBoard6);
    Card card13 = player12.drawCard();
    player12.addActions((int)(short)1);
    java.lang.String str16 = player12.getName();
    player12.discardHandAndInPlay();
    player12.initPlayerTurn();
    Card card19 = Card.duchy;
    GameBoard gameBoard22 = new GameBoard(0, "hi!");
    Card card23 = Card.adventurer;
    gameBoard22.trashCard(card23);
    player12.gainCardToHand(card19, gameBoard22);
    Player player26 = new Player("", (int)(short)10, gameBoard22);
    java.util.List<Card> list_card28 = gameBoard22.kingdomCards((int)(byte)10);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.ambassador + "'", card7.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.cutpurse + "'", card9.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.copper + "'", card13.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "hi!"+ "'", str16.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.duchy + "'", card19.equals(Card.duchy));
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.adventurer + "'", card23.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test032"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.countTreasure();
    player10.countTreasure();
    int i14 = player10.getCoins();
    player10.initPlayerTurn();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 6);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test033"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    java.util.List<Card> list_card5 = gameBoard2.getActiveSupplyPiles();
    java.util.List<Card> list_card8 = gameBoard2.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card10 = gameBoard2.kingdomCards((int)(short)100);
    gameBoard2.opponentDiscardCopper((int)(short)0);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test034"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    boolean b14 = player10.hasActions();
    GameBoard gameBoard17 = new GameBoard(0, "hi!");
    Card card18 = Card.ambassador;
    gameBoard17.returnCard(card18);
    java.util.List<Card> list_card20 = gameBoard17.getActiveSupplyPiles();
    java.util.List<Card> list_card21 = gameBoard17.getTrash();
    java.util.List<Card> list_card23 = gameBoard17.kingdomCards(100);
    Card card24 = player10.getRandomBuyCard(gameBoard17);
    int i25 = player10.getNum();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.ambassador + "'", card18.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.copper + "'", card24.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 97);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test035"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    boolean b5 = gameBoard2.gameDone();
    java.util.List<Card> list_card6 = gameBoard2.getTrash();
    Card card7 = Card.ambassador;
    int i8 = card7.getCost();
    gameBoard2.returnCard(card7);
    java.util.List<Card> list_card11 = gameBoard2.kingdomCards(8);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.ambassador + "'", card7.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test036"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    boolean b14 = player10.hasActions();
    GameBoard gameBoard17 = new GameBoard(0, "hi!");
    Card card18 = Card.ambassador;
    gameBoard17.returnCard(card18);
    java.util.List<Card> list_card20 = gameBoard17.getActiveSupplyPiles();
    java.util.List<Card> list_card21 = gameBoard17.getTrash();
    java.util.List<Card> list_card23 = gameBoard17.kingdomCards(100);
    Card card24 = player10.getRandomBuyCard(gameBoard17);
    java.util.List<Card> list_card25 = player10.getHand();
    Card card26 = player10.drawCard();
    player10.discardHandAndInPlay();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.ambassador + "'", card18.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.copper + "'", card24.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test037"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getHand();
    java.util.List<Card> list_card12 = player10.getHand();
    boolean b13 = player10.hasBuys();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test038"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card3 = gameBoard2.getActiveSupplyPiles();
    boolean b4 = gameBoard2.gameDone();
    java.util.List<Card> list_card5 = gameBoard2.getTrash();
    GameBoard gameBoard9 = new GameBoard(0, "hi!");
    Card card10 = Card.ambassador;
    gameBoard9.returnCard(card10);
    java.util.List<Card> list_card12 = gameBoard9.getActiveSupplyPiles();
    java.util.List<Card> list_card15 = gameBoard9.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card17 = gameBoard9.kingdomCards((int)(short)100);
    Card card18 = Card.ambassador;
    int i19 = card18.getCost();
    int i20 = gameBoard9.numEmbargoTokens(card18);
    gameBoard2.opponentGainCard((int)(byte)0, card18);
    java.util.List<java.lang.String> list_str22 = card18.getTypes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.ambassador + "'", card10.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.ambassador + "'", card18.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str22);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test039"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    boolean b12 = player10.hasActionCard();
    player10.countTreasure();
    GameBoard gameBoard16 = new GameBoard(0, "hi!");
    Card card17 = Card.ambassador;
    gameBoard16.returnCard(card17);
    boolean b19 = gameBoard16.gameDone();
    java.util.List<Card> list_card20 = gameBoard16.getActiveSupplyPiles();
    GameBoard gameBoard23 = new GameBoard(0, "hi!");
    Card card24 = Card.ambassador;
    gameBoard23.returnCard(card24);
    int i26 = gameBoard16.numCardsAvailable(card24);
    Card card28 = Card.council_room;
    gameBoard16.opponentGainCard((int)(byte)1, card28);
    GameBoard gameBoard32 = new GameBoard(0, "hi!");
    Card card33 = Card.ambassador;
    gameBoard32.returnCard(card33);
    java.util.List<Card> list_card35 = gameBoard32.getActiveSupplyPiles();
    java.util.List<Card> list_card36 = gameBoard32.getTrash();
    java.util.List<Player> list_player37 = gameBoard32.getPlayers();
    player10.buyCard(card28, gameBoard32);
    boolean b39 = player10.hasActions();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.ambassador + "'", card17.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.ambassador + "'", card24.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.council_room + "'", card28.equals(Card.council_room));
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.ambassador + "'", card33.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test040"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    boolean b5 = gameBoard2.gameDone();
    Card card6 = Card.estate;
    gameBoard2.returnCard(card6);
    int i8 = card6.getTreasure();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.estate + "'", card6.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test041"); }

    GameBoard gameBoard2 = new GameBoard((int)(byte)100, (-1));
    java.util.List<Card> list_card5 = gameBoard2.getPurchaseableCards((-1), "hi!");
    GameBoard gameBoard10 = new GameBoard(0, "hi!");
    Card card11 = Card.ambassador;
    gameBoard10.returnCard(card11);
    Card card13 = Card.cutpurse;
    int i14 = card13.getCost();
    boolean b15 = gameBoard10.hasCardsAvailable(card13);
    Player player16 = new Player("hi!", (int)'a', gameBoard10);
    Card card17 = player16.drawCard();
    player16.addActions((int)(short)1);
    boolean b20 = player16.hasActions();
    GameBoard gameBoard23 = new GameBoard(0, "hi!");
    Card card24 = Card.ambassador;
    gameBoard23.returnCard(card24);
    java.util.List<Card> list_card26 = gameBoard23.getActiveSupplyPiles();
    java.util.List<Card> list_card27 = gameBoard23.getTrash();
    java.util.List<Card> list_card29 = gameBoard23.kingdomCards(100);
    Card card30 = player16.getRandomBuyCard(gameBoard23);
    GameBoard gameBoard33 = new GameBoard(0, "hi!");
    Card card34 = Card.ambassador;
    gameBoard33.returnCard(card34);
    java.util.List<Card> list_card36 = gameBoard33.getActiveSupplyPiles();
    java.util.List<Card> list_card39 = gameBoard33.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card41 = gameBoard33.kingdomCards((int)(short)100);
    Card card42 = player16.getRandomBuyCard(gameBoard33);
    gameBoard2.trashCard(card42);
    Card card45 = Card.cutpurse;
    int i46 = card45.getCost();
    gameBoard2.opponentGainCard((int)(byte)-1, card45);
    GameBoard gameBoard52 = new GameBoard(0, "hi!");
    Card card53 = Card.ambassador;
    gameBoard52.returnCard(card53);
    Card card55 = Card.cutpurse;
    int i56 = card55.getCost();
    boolean b57 = gameBoard52.hasCardsAvailable(card55);
    Player player58 = new Player("hi!", (int)'a', gameBoard52);
    java.util.List<Card> list_card59 = player58.getPlayedCards();
    Card card60 = Card.adventurer;
    GameBoard gameBoard63 = new GameBoard(0, "hi!");
    Card card64 = Card.ambassador;
    gameBoard63.returnCard(card64);
    boolean b66 = gameBoard63.gameDone();
    Card card67 = Card.estate;
    gameBoard63.returnCard(card67);
    gameBoard63.opponentDraw((int)'4');
    player58.buyCard(card60, gameBoard63);
    GameBoard gameBoard74 = new GameBoard(0, "hi!");
    Card card75 = Card.ambassador;
    gameBoard74.returnCard(card75);
    boolean b77 = gameBoard74.gameDone();
    int i78 = gameBoard74.play();
    Card card79 = player58.getRandomBuyCard(gameBoard74);
    int i80 = gameBoard2.numCardsAvailable(card79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.ambassador + "'", card11.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.cutpurse + "'", card13.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.copper + "'", card17.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.ambassador + "'", card24.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.copper + "'", card30.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.ambassador + "'", card34.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.copper + "'", card42.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.cutpurse + "'", card45.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 4);
    org.junit.Assert.assertTrue("'" + card53 + "' != '" + Card.ambassador + "'", card53.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card55 + "' != '" + Card.cutpurse + "'", card55.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    org.junit.Assert.assertTrue("'" + card60 + "' != '" + Card.adventurer + "'", card60.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card64 + "' != '" + Card.ambassador + "'", card64.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    org.junit.Assert.assertTrue("'" + card67 + "' != '" + Card.estate + "'", card67.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card75 + "' != '" + Card.ambassador + "'", card75.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 1);
    org.junit.Assert.assertTrue("'" + card79 + "' != '" + Card.copper + "'", card79.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == (-640));

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test042"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    boolean b14 = player10.hasActions();
    boolean b15 = player10.hasBuys();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test043"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    java.util.List<Card> list_card5 = gameBoard2.getActiveSupplyPiles();
    java.util.List<Card> list_card6 = gameBoard2.getTrash();
    java.util.List<Card> list_card8 = gameBoard2.kingdomCards(100);
    GameBoard gameBoard11 = new GameBoard(0, "hi!");
    Card card12 = Card.ambassador;
    gameBoard11.returnCard(card12);
    boolean b14 = gameBoard11.gameDone();
    Card card15 = Card.cutpurse;
    int i16 = gameBoard11.numCardsAvailable(card15);
    GameBoard gameBoard19 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card20 = gameBoard19.getActiveSupplyPiles();
    int i21 = gameBoard19.getTotalEmbargoTokens();
    Card card22 = Card.council_room;
    int i23 = card22.getVictory();
    int i24 = gameBoard19.numCardsAvailable(card22);
    Card card25 = null;
    Card card26 = Card.embargo;
    card26.setVictory(0);
    Card card29 = Card.gold;
    GameBoard gameBoard32 = new GameBoard((int)(byte)100, (-1));
    Card card33 = Card.gardens;
    int i34 = gameBoard32.numEmbargoTokens(card33);
    GameBoard gameBoard37 = new GameBoard(0, "hi!");
    Card card38 = Card.ambassador;
    gameBoard37.returnCard(card38);
    java.util.List<Card> list_card40 = gameBoard37.getActiveSupplyPiles();
    java.util.List<Card> list_card43 = gameBoard37.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card45 = gameBoard37.kingdomCards((int)(short)100);
    Card card46 = Card.cutpurse;
    int i47 = card46.getCost();
    int i48 = gameBoard37.numEmbargoTokens(card46);
    Card card49 = Card.estate;
    Card card50 = Card.estate;
    card50.setVictory((int)(short)-1);
    GameBoard gameBoard55 = new GameBoard(0, "hi!");
    Card card56 = Card.ambassador;
    gameBoard55.returnCard(card56);
    boolean b58 = gameBoard55.gameDone();
    java.util.List<Card> list_card59 = gameBoard55.getActiveSupplyPiles();
    GameBoard gameBoard62 = new GameBoard(0, "hi!");
    Card card63 = Card.ambassador;
    gameBoard62.returnCard(card63);
    int i65 = gameBoard55.numCardsAvailable(card63);
    GameBoard gameBoard68 = new GameBoard(0, "hi!");
    Card card69 = Card.ambassador;
    gameBoard68.returnCard(card69);
    java.util.List<Card> list_card71 = gameBoard11.kingdomCards(card22, card25, card26, card29, card33, card46, card49, card50, card63, card69);
    gameBoard2.trashCard(card63);
    boolean b73 = gameBoard2.gameDone();
    GameBoard gameBoard76 = new GameBoard(0, "hi!");
    Card card77 = Card.ambassador;
    gameBoard76.returnCard(card77);
    boolean b79 = gameBoard76.gameDone();
    java.util.List<Card> list_card80 = gameBoard76.getActiveSupplyPiles();
    GameBoard gameBoard83 = new GameBoard(0, "hi!");
    Card card84 = Card.ambassador;
    gameBoard83.returnCard(card84);
    boolean b86 = gameBoard76.hasCardsAvailable(card84);
    card84.setVictory((int)(short)10);
    gameBoard2.trashCard(card84);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.ambassador + "'", card12.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.cutpurse + "'", card15.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.council_room + "'", card22.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 10);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.embargo + "'", card26.equals(Card.embargo));
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.gold + "'", card29.equals(Card.gold));
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.gardens + "'", card33.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.ambassador + "'", card38.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.cutpurse + "'", card46.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    org.junit.Assert.assertTrue("'" + card49 + "' != '" + Card.estate + "'", card49.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card50 + "' != '" + Card.estate + "'", card50.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card56 + "' != '" + Card.ambassador + "'", card56.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    org.junit.Assert.assertTrue("'" + card63 + "' != '" + Card.ambassador + "'", card63.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    org.junit.Assert.assertTrue("'" + card69 + "' != '" + Card.ambassador + "'", card69.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    org.junit.Assert.assertTrue("'" + card77 + "' != '" + Card.ambassador + "'", card77.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card80);
    org.junit.Assert.assertTrue("'" + card84 + "' != '" + Card.ambassador + "'", card84.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test044"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card3 = gameBoard2.getActiveSupplyPiles();
    GameBoard gameBoard6 = new GameBoard(0, "hi!");
    Card card7 = Card.adventurer;
    gameBoard6.trashCard(card7);
    gameBoard2.trashCard(card7);
    Card card10 = null;
    boolean b11 = gameBoard2.hasCardsAvailable(card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card3);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.adventurer + "'", card7.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test045"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    Card card12 = Card.adventurer;
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    gameBoard15.opponentDraw((int)'4');
    player10.buyCard(card12, gameBoard15);
    java.util.List<Card> list_card24 = player10.getPlayedCards();
    player10.initPlayerTurn();
    Card card26 = Card.smithy;
    card26.setVictory((int)(byte)-1);
    boolean b29 = player10.hasCard(card26);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.smithy + "'", card26.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test046"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    int i12 = player10.getNum();
    Card card13 = Card.ambassador;
    int i14 = card13.getCost();
    GameBoard gameBoard17 = new GameBoard(0, "hi!");
    Card card18 = Card.ambassador;
    gameBoard17.returnCard(card18);
    boolean b20 = gameBoard17.gameDone();
    Card card21 = Card.estate;
    gameBoard17.returnCard(card21);
    gameBoard17.opponentDraw((int)'4');
    int i25 = gameBoard17.play();
    Card card26 = null;
    gameBoard17.takeCard(card26);
    player10.buyCard(card13, gameBoard17);
    int i29 = player10.getBuys();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 97);
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.ambassador + "'", card13.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 3);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.ambassador + "'", card18.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.estate + "'", card21.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test047"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    GameBoard gameBoard14 = new GameBoard((int)(byte)100, (-1));
    Card card15 = Card.gardens;
    int i16 = gameBoard14.numEmbargoTokens(card15);
    java.util.List<Card> list_card17 = gameBoard14.getTrash();
    GameBoard gameBoard20 = new GameBoard(0, "hi!");
    Card card21 = Card.ambassador;
    gameBoard20.returnCard(card21);
    boolean b23 = gameBoard20.gameDone();
    java.util.List<Card> list_card24 = gameBoard20.getActiveSupplyPiles();
    GameBoard gameBoard27 = new GameBoard(0, "hi!");
    Card card28 = Card.ambassador;
    gameBoard27.returnCard(card28);
    boolean b30 = gameBoard20.hasCardsAvailable(card28);
    gameBoard14.trashCard(card28);
    Card card32 = player10.getRandomBuyCard(gameBoard14);
    player10.initPlayerTurn();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.gardens + "'", card15.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.ambassador + "'", card21.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.ambassador + "'", card28.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test048"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    Card card12 = Card.adventurer;
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    gameBoard15.opponentDraw((int)'4');
    player10.buyCard(card12, gameBoard15);
    java.util.List<Card> list_card24 = player10.getPlayedCards();
    player10.countTreasure();
    player10.initPlayerTurn();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test049"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    java.util.List<Card> list_card12 = player10.getHand();
    int i13 = player10.getBuys();
    boolean b14 = player10.hasBuys();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test050"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    Card card12 = Card.adventurer;
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    gameBoard15.opponentDraw((int)'4');
    player10.buyCard(card12, gameBoard15);
    GameBoard gameBoard26 = new GameBoard(0, "hi!");
    Card card27 = Card.ambassador;
    gameBoard26.returnCard(card27);
    boolean b29 = gameBoard26.gameDone();
    int i30 = gameBoard26.play();
    Card card31 = player10.getRandomBuyCard(gameBoard26);
    GameBoard gameBoard34 = new GameBoard((int)(byte)100, (-1));
    int i35 = gameBoard34.getTotalEmbargoTokens();
    Card card36 = player10.getRandomBuyCard(gameBoard34);
    java.util.LinkedList<Card> linkedlist_card37 = player10.getDeck();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.ambassador + "'", card27.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.copper + "'", card31.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card37);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test051"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    GameBoard gameBoard14 = new GameBoard((int)(byte)100, (-1));
    Card card15 = Card.gardens;
    int i16 = gameBoard14.numEmbargoTokens(card15);
    java.util.List<Card> list_card17 = gameBoard14.getTrash();
    GameBoard gameBoard20 = new GameBoard(0, "hi!");
    Card card21 = Card.ambassador;
    gameBoard20.returnCard(card21);
    boolean b23 = gameBoard20.gameDone();
    java.util.List<Card> list_card24 = gameBoard20.getActiveSupplyPiles();
    GameBoard gameBoard27 = new GameBoard(0, "hi!");
    Card card28 = Card.ambassador;
    gameBoard27.returnCard(card28);
    boolean b30 = gameBoard20.hasCardsAvailable(card28);
    gameBoard14.trashCard(card28);
    Card card32 = player10.getRandomBuyCard(gameBoard14);
    int i33 = player10.getBuys();
    boolean b34 = player10.hasBuys();
    int i35 = player10.getNum();
    java.lang.String str36 = player10.getName();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.gardens + "'", card15.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.ambassador + "'", card21.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.ambassador + "'", card28.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "hi!"+ "'", str36.equals("hi!"));

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test052"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.lang.String str14 = player10.getName();
    player10.discardHandAndInPlay();
    player10.initPlayerTurn();
    Card card17 = Card.duchy;
    GameBoard gameBoard20 = new GameBoard(0, "hi!");
    Card card21 = Card.adventurer;
    gameBoard20.trashCard(card21);
    player10.gainCardToHand(card17, gameBoard20);
    boolean b24 = player10.hasBuys();
    int i25 = player10.getTotalVictoryPoints();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.duchy + "'", card17.equals(Card.duchy));
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test053"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    Card card12 = Card.adventurer;
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    gameBoard15.opponentDraw((int)'4');
    player10.buyCard(card12, gameBoard15);
    java.util.List<Card> list_card24 = player10.getPlayedCards();
    player10.countTreasure();
    GameBoard gameBoard28 = new GameBoard(1, "hi!");
    Card card29 = player10.getRandomBuyCard(gameBoard28);
    int i30 = player10.getNumActions();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.mine + "'", card29.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test054"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    int i12 = player10.getNum();
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    java.util.List<Card> list_card18 = gameBoard15.getActiveSupplyPiles();
    java.util.List<Card> list_card21 = gameBoard15.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card23 = gameBoard15.kingdomCards((int)(short)100);
    Card card24 = Card.cutpurse;
    int i25 = card24.getCost();
    int i26 = gameBoard15.numEmbargoTokens(card24);
    GameBoard gameBoard29 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card30 = gameBoard29.getActiveSupplyPiles();
    player10.gainCard(card24, gameBoard29);
    int i32 = player10.getNum();
    java.util.List<Card> list_card33 = player10.getPlayedCards();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 97);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.cutpurse + "'", card24.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test055"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = Card.feast;
    int i12 = card11.getCost();
    GameBoard gameBoard15 = new GameBoard(3, "hi!");
    player10.buyCard(card11, gameBoard15);
    java.lang.String str17 = player10.getName();
    Card card18 = player10.drawCard();
    int i19 = card18.getCost();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.feast + "'", card11.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "hi!"+ "'", str17.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.copper + "'", card18.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test056"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    int i12 = player10.getNum();
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    java.util.List<Card> list_card18 = gameBoard15.getActiveSupplyPiles();
    java.util.List<Card> list_card21 = gameBoard15.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card23 = gameBoard15.kingdomCards((int)(short)100);
    Card card24 = Card.cutpurse;
    int i25 = card24.getCost();
    int i26 = gameBoard15.numEmbargoTokens(card24);
    GameBoard gameBoard29 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card30 = gameBoard29.getActiveSupplyPiles();
    player10.gainCard(card24, gameBoard29);
    java.lang.String str32 = player10.getName();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 97);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.cutpurse + "'", card24.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "hi!"+ "'", str32.equals("hi!"));

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test057"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    Card card5 = Card.cutpurse;
    int i6 = card5.getCost();
    boolean b7 = gameBoard2.hasCardsAvailable(card5);
    gameBoard2.opponentDraw((-3));
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.cutpurse + "'", card5.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test058"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    Card card5 = Card.baron;
    int i6 = gameBoard2.numCardsAvailable(card5);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.baron + "'", card5.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test059"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    boolean b7 = gameBoard4.gameDone();
    java.util.List<Card> list_card8 = gameBoard4.getTrash();
    Card card9 = Card.ambassador;
    int i10 = card9.getCost();
    gameBoard4.returnCard(card9);
    Player player12 = new Player("hi!", (-1), gameBoard4);
    java.util.List<Card> list_card13 = gameBoard4.getActiveSupplyPiles();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.ambassador + "'", card9.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test060"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.countTreasure();
    boolean b13 = player10.hasActionCard();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test061"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    boolean b5 = gameBoard2.gameDone();
    Card card6 = Card.estate;
    gameBoard2.returnCard(card6);
    gameBoard2.opponentDraw((int)'4');
    java.util.List<Card> list_card10 = gameBoard2.getActiveSupplyPiles();
    GameBoard gameBoard13 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card14 = gameBoard13.getActiveSupplyPiles();
    boolean b15 = gameBoard13.gameDone();
    java.util.List<Card> list_card16 = gameBoard13.getTrash();
    GameBoard gameBoard20 = new GameBoard(0, "hi!");
    Card card21 = Card.ambassador;
    gameBoard20.returnCard(card21);
    java.util.List<Card> list_card23 = gameBoard20.getActiveSupplyPiles();
    java.util.List<Card> list_card26 = gameBoard20.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card28 = gameBoard20.kingdomCards((int)(short)100);
    Card card29 = Card.ambassador;
    int i30 = card29.getCost();
    int i31 = gameBoard20.numEmbargoTokens(card29);
    gameBoard13.opponentGainCard((int)(byte)0, card29);
    int i33 = gameBoard2.numEmbargoTokens(card29);
    java.util.List<Card> list_card36 = gameBoard2.getPurchaseableCards(97, "hi!");
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.estate + "'", card6.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.ambassador + "'", card21.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.ambassador + "'", card29.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test062"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.adventurer;
    gameBoard2.trashCard(card3);
    gameBoard2.opponentDiscardCopper((-1));
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.adventurer + "'", card3.equals(Card.adventurer));

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test063"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.util.List<Card> list_card14 = player10.getPlayedCards();
    player10.countTreasure();
    GameBoard gameBoard20 = new GameBoard(0, "hi!");
    Card card21 = Card.ambassador;
    gameBoard20.returnCard(card21);
    boolean b23 = gameBoard20.gameDone();
    java.util.List<Card> list_card24 = gameBoard20.getTrash();
    Card card25 = Card.ambassador;
    int i26 = card25.getCost();
    gameBoard20.returnCard(card25);
    Player player28 = new Player("hi!", (-1), gameBoard20);
    Card card29 = player10.getRandomBuyCard(gameBoard20);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.ambassador + "'", card21.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.ambassador + "'", card25.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 3);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.remodel + "'", card29.equals(Card.remodel));

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test064"); }

    GameBoard gameBoard2 = new GameBoard(97, "");

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test065"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    int i11 = player10.getCoins();
    java.util.List<java.lang.Integer> list_i12 = player10.getActionCardIndices();
    player10.initPlayerTurn();
    GameBoard gameBoard17 = new GameBoard((int)(byte)100, (-1));
    Card card18 = Card.gardens;
    int i19 = gameBoard17.numEmbargoTokens(card18);
    java.util.List<Card> list_card20 = gameBoard17.getTrash();
    // The following exception was thrown during execution in test generation
    try {
    player10.playCard(10, gameBoard17);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i12);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.gardens + "'", card18.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test066"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.lang.String str14 = player10.getName();
    player10.discardHandAndInPlay();
    player10.initPlayerTurn();
    int i17 = player10.getTotalVictoryPoints();
    boolean b18 = player10.hasActions();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-3));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test067"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card3 = gameBoard2.getActiveSupplyPiles();
    int i4 = gameBoard2.getTotalEmbargoTokens();
    Card card5 = Card.council_room;
    int i6 = card5.getVictory();
    int i7 = gameBoard2.numCardsAvailable(card5);
    GameBoard gameBoard10 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card11 = gameBoard10.getActiveSupplyPiles();
    boolean b12 = gameBoard10.gameDone();
    GameBoard gameBoard17 = new GameBoard(0, "hi!");
    Card card18 = Card.ambassador;
    gameBoard17.returnCard(card18);
    Card card20 = Card.cutpurse;
    int i21 = card20.getCost();
    boolean b22 = gameBoard17.hasCardsAvailable(card20);
    Player player23 = new Player("hi!", (int)'a', gameBoard17);
    Card card24 = player23.drawCard();
    player23.addActions((int)(short)1);
    java.lang.String str27 = player23.getName();
    java.util.List<Card> list_card28 = player23.getPlayedCards();
    GameBoard gameBoard31 = new GameBoard(0, "hi!");
    Card card32 = Card.ambassador;
    gameBoard31.returnCard(card32);
    boolean b34 = gameBoard31.gameDone();
    Card card35 = Card.cutpurse;
    int i36 = gameBoard31.numCardsAvailable(card35);
    GameBoard gameBoard39 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card40 = gameBoard39.getActiveSupplyPiles();
    int i41 = gameBoard39.getTotalEmbargoTokens();
    Card card42 = Card.council_room;
    int i43 = card42.getVictory();
    int i44 = gameBoard39.numCardsAvailable(card42);
    Card card45 = null;
    Card card46 = Card.embargo;
    card46.setVictory(0);
    Card card49 = Card.gold;
    GameBoard gameBoard52 = new GameBoard((int)(byte)100, (-1));
    Card card53 = Card.gardens;
    int i54 = gameBoard52.numEmbargoTokens(card53);
    GameBoard gameBoard57 = new GameBoard(0, "hi!");
    Card card58 = Card.ambassador;
    gameBoard57.returnCard(card58);
    java.util.List<Card> list_card60 = gameBoard57.getActiveSupplyPiles();
    java.util.List<Card> list_card63 = gameBoard57.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card65 = gameBoard57.kingdomCards((int)(short)100);
    Card card66 = Card.cutpurse;
    int i67 = card66.getCost();
    int i68 = gameBoard57.numEmbargoTokens(card66);
    Card card69 = Card.estate;
    Card card70 = Card.estate;
    card70.setVictory((int)(short)-1);
    GameBoard gameBoard75 = new GameBoard(0, "hi!");
    Card card76 = Card.ambassador;
    gameBoard75.returnCard(card76);
    boolean b78 = gameBoard75.gameDone();
    java.util.List<Card> list_card79 = gameBoard75.getActiveSupplyPiles();
    GameBoard gameBoard82 = new GameBoard(0, "hi!");
    Card card83 = Card.ambassador;
    gameBoard82.returnCard(card83);
    int i85 = gameBoard75.numCardsAvailable(card83);
    GameBoard gameBoard88 = new GameBoard(0, "hi!");
    Card card89 = Card.ambassador;
    gameBoard88.returnCard(card89);
    java.util.List<Card> list_card91 = gameBoard31.kingdomCards(card42, card45, card46, card49, card53, card66, card69, card70, card83, card89);
    player23.Discard(card53);
    int i93 = gameBoard10.numCardsAvailable(card53);
    gameBoard2.returnCard(card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.council_room + "'", card5.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.ambassador + "'", card18.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.cutpurse + "'", card20.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.copper + "'", card24.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "hi!"+ "'", str27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.ambassador + "'", card32.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.cutpurse + "'", card35.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.council_room + "'", card42.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 10);
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.embargo + "'", card46.equals(Card.embargo));
    org.junit.Assert.assertTrue("'" + card49 + "' != '" + Card.gold + "'", card49.equals(Card.gold));
    org.junit.Assert.assertTrue("'" + card53 + "' != '" + Card.gardens + "'", card53.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    org.junit.Assert.assertTrue("'" + card58 + "' != '" + Card.ambassador + "'", card58.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card65);
    org.junit.Assert.assertTrue("'" + card66 + "' != '" + Card.cutpurse + "'", card66.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    org.junit.Assert.assertTrue("'" + card69 + "' != '" + Card.estate + "'", card69.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card70 + "' != '" + Card.estate + "'", card70.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card76 + "' != '" + Card.ambassador + "'", card76.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card79);
    org.junit.Assert.assertTrue("'" + card83 + "' != '" + Card.ambassador + "'", card83.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 0);
    org.junit.Assert.assertTrue("'" + card89 + "' != '" + Card.ambassador + "'", card89.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 10);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test068"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.lang.String str14 = player10.getName();
    player10.discardHandAndInPlay();
    int i16 = player10.getTotalVictoryPoints();
    int i17 = player10.getTotalVictoryPoints();
    GameBoard gameBoard20 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card21 = gameBoard20.getActiveSupplyPiles();
    int i22 = gameBoard20.getTotalEmbargoTokens();
    GameBoard gameBoard25 = new GameBoard(0, "hi!");
    Card card26 = Card.ambassador;
    gameBoard25.returnCard(card26);
    boolean b28 = gameBoard25.gameDone();
    Card card29 = Card.cutpurse;
    int i30 = gameBoard25.numCardsAvailable(card29);
    GameBoard gameBoard33 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card34 = gameBoard33.getActiveSupplyPiles();
    int i35 = gameBoard33.getTotalEmbargoTokens();
    Card card36 = Card.council_room;
    int i37 = card36.getVictory();
    int i38 = gameBoard33.numCardsAvailable(card36);
    Card card39 = null;
    Card card40 = Card.embargo;
    card40.setVictory(0);
    Card card43 = Card.gold;
    GameBoard gameBoard46 = new GameBoard((int)(byte)100, (-1));
    Card card47 = Card.gardens;
    int i48 = gameBoard46.numEmbargoTokens(card47);
    GameBoard gameBoard51 = new GameBoard(0, "hi!");
    Card card52 = Card.ambassador;
    gameBoard51.returnCard(card52);
    java.util.List<Card> list_card54 = gameBoard51.getActiveSupplyPiles();
    java.util.List<Card> list_card57 = gameBoard51.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card59 = gameBoard51.kingdomCards((int)(short)100);
    Card card60 = Card.cutpurse;
    int i61 = card60.getCost();
    int i62 = gameBoard51.numEmbargoTokens(card60);
    Card card63 = Card.estate;
    Card card64 = Card.estate;
    card64.setVictory((int)(short)-1);
    GameBoard gameBoard69 = new GameBoard(0, "hi!");
    Card card70 = Card.ambassador;
    gameBoard69.returnCard(card70);
    boolean b72 = gameBoard69.gameDone();
    java.util.List<Card> list_card73 = gameBoard69.getActiveSupplyPiles();
    GameBoard gameBoard76 = new GameBoard(0, "hi!");
    Card card77 = Card.ambassador;
    gameBoard76.returnCard(card77);
    int i79 = gameBoard69.numCardsAvailable(card77);
    GameBoard gameBoard82 = new GameBoard(0, "hi!");
    Card card83 = Card.ambassador;
    gameBoard82.returnCard(card83);
    java.util.List<Card> list_card85 = gameBoard25.kingdomCards(card36, card39, card40, card43, card47, card60, card63, card64, card77, card83);
    gameBoard20.takeCard(card77);
    Card card87 = Card.ambassador;
    gameBoard20.trashCard(card87);
    GameBoard gameBoard91 = new GameBoard(0, "hi!");
    Card card92 = Card.ambassador;
    gameBoard91.returnCard(card92);
    java.util.List<Card> list_card94 = gameBoard91.getActiveSupplyPiles();
    java.util.List<Card> list_card95 = gameBoard91.getTrash();
    java.util.List<Player> list_player96 = gameBoard91.getPlayers();
    java.util.List<Card> list_card98 = gameBoard91.kingdomCards(100);
    player10.buyCard(card87, gameBoard91);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-3));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-3));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.ambassador + "'", card26.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.cutpurse + "'", card29.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.council_room + "'", card36.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 10);
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.embargo + "'", card40.equals(Card.embargo));
    org.junit.Assert.assertTrue("'" + card43 + "' != '" + Card.gold + "'", card43.equals(Card.gold));
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.gardens + "'", card47.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.ambassador + "'", card52.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    org.junit.Assert.assertTrue("'" + card60 + "' != '" + Card.cutpurse + "'", card60.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    org.junit.Assert.assertTrue("'" + card63 + "' != '" + Card.estate + "'", card63.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card64 + "' != '" + Card.estate + "'", card64.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card70 + "' != '" + Card.ambassador + "'", card70.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card73);
    org.junit.Assert.assertTrue("'" + card77 + "' != '" + Card.ambassador + "'", card77.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    org.junit.Assert.assertTrue("'" + card83 + "' != '" + Card.ambassador + "'", card83.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    org.junit.Assert.assertTrue("'" + card87 + "' != '" + Card.ambassador + "'", card87.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card92 + "' != '" + Card.ambassador + "'", card92.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card98);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test069"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    int i12 = player10.getNum();
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    java.util.List<Card> list_card18 = gameBoard15.getActiveSupplyPiles();
    java.util.List<Card> list_card21 = gameBoard15.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card23 = gameBoard15.kingdomCards((int)(short)100);
    Card card24 = Card.cutpurse;
    int i25 = card24.getCost();
    int i26 = gameBoard15.numEmbargoTokens(card24);
    GameBoard gameBoard29 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card30 = gameBoard29.getActiveSupplyPiles();
    player10.gainCard(card24, gameBoard29);
    int i32 = gameBoard29.getTotalEmbargoTokens();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 97);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.cutpurse + "'", card24.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test070"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card3 = gameBoard2.getActiveSupplyPiles();
    int i4 = gameBoard2.getTotalEmbargoTokens();
    GameBoard gameBoard7 = new GameBoard(0, "hi!");
    Card card8 = Card.ambassador;
    gameBoard7.returnCard(card8);
    boolean b10 = gameBoard7.gameDone();
    Card card11 = Card.cutpurse;
    int i12 = gameBoard7.numCardsAvailable(card11);
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card16 = gameBoard15.getActiveSupplyPiles();
    int i17 = gameBoard15.getTotalEmbargoTokens();
    Card card18 = Card.council_room;
    int i19 = card18.getVictory();
    int i20 = gameBoard15.numCardsAvailable(card18);
    Card card21 = null;
    Card card22 = Card.embargo;
    card22.setVictory(0);
    Card card25 = Card.gold;
    GameBoard gameBoard28 = new GameBoard((int)(byte)100, (-1));
    Card card29 = Card.gardens;
    int i30 = gameBoard28.numEmbargoTokens(card29);
    GameBoard gameBoard33 = new GameBoard(0, "hi!");
    Card card34 = Card.ambassador;
    gameBoard33.returnCard(card34);
    java.util.List<Card> list_card36 = gameBoard33.getActiveSupplyPiles();
    java.util.List<Card> list_card39 = gameBoard33.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card41 = gameBoard33.kingdomCards((int)(short)100);
    Card card42 = Card.cutpurse;
    int i43 = card42.getCost();
    int i44 = gameBoard33.numEmbargoTokens(card42);
    Card card45 = Card.estate;
    Card card46 = Card.estate;
    card46.setVictory((int)(short)-1);
    GameBoard gameBoard51 = new GameBoard(0, "hi!");
    Card card52 = Card.ambassador;
    gameBoard51.returnCard(card52);
    boolean b54 = gameBoard51.gameDone();
    java.util.List<Card> list_card55 = gameBoard51.getActiveSupplyPiles();
    GameBoard gameBoard58 = new GameBoard(0, "hi!");
    Card card59 = Card.ambassador;
    gameBoard58.returnCard(card59);
    int i61 = gameBoard51.numCardsAvailable(card59);
    GameBoard gameBoard64 = new GameBoard(0, "hi!");
    Card card65 = Card.ambassador;
    gameBoard64.returnCard(card65);
    java.util.List<Card> list_card67 = gameBoard7.kingdomCards(card18, card21, card22, card25, card29, card42, card45, card46, card59, card65);
    gameBoard2.takeCard(card59);
    GameBoard gameBoard73 = new GameBoard(0, "hi!");
    Card card74 = Card.ambassador;
    gameBoard73.returnCard(card74);
    Card card76 = Card.cutpurse;
    int i77 = card76.getCost();
    boolean b78 = gameBoard73.hasCardsAvailable(card76);
    Player player79 = new Player("hi!", (int)'a', gameBoard73);
    Card card80 = player79.drawCard();
    player79.addActions((int)(short)1);
    java.lang.String str83 = player79.getName();
    player79.discardHandAndInPlay();
    player79.initPlayerTurn();
    Card card86 = Card.duchy;
    GameBoard gameBoard89 = new GameBoard(0, "hi!");
    Card card90 = Card.adventurer;
    gameBoard89.trashCard(card90);
    player79.gainCardToHand(card86, gameBoard89);
    gameBoard2.trashCard(card86);
    java.util.List<java.lang.String> list_str94 = card86.getTypes();
    int i95 = card86.getTreasure();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    org.junit.Assert.assertTrue("'" + card8 + "' != '" + Card.ambassador + "'", card8.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.cutpurse + "'", card11.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.council_room + "'", card18.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 10);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.embargo + "'", card22.equals(Card.embargo));
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.gold + "'", card25.equals(Card.gold));
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.gardens + "'", card29.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.ambassador + "'", card34.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.cutpurse + "'", card42.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.estate + "'", card45.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.estate + "'", card46.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.ambassador + "'", card52.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card55);
    org.junit.Assert.assertTrue("'" + card59 + "' != '" + Card.ambassador + "'", card59.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    org.junit.Assert.assertTrue("'" + card65 + "' != '" + Card.ambassador + "'", card65.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    org.junit.Assert.assertTrue("'" + card74 + "' != '" + Card.ambassador + "'", card74.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card76 + "' != '" + Card.cutpurse + "'", card76.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    org.junit.Assert.assertTrue("'" + card80 + "' != '" + Card.copper + "'", card80.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "hi!"+ "'", str83.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card86 + "' != '" + Card.duchy + "'", card86.equals(Card.duchy));
    org.junit.Assert.assertTrue("'" + card90 + "' != '" + Card.adventurer + "'", card90.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i95 == 0);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test071"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    boolean b5 = gameBoard2.gameDone();
    Card card6 = null;
    int i7 = gameBoard2.numEmbargoTokens(card6);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test072"); }

    GameBoard gameBoard6 = new GameBoard(0, "hi!");
    Card card7 = Card.ambassador;
    gameBoard6.returnCard(card7);
    Card card9 = Card.cutpurse;
    int i10 = card9.getCost();
    boolean b11 = gameBoard6.hasCardsAvailable(card9);
    Player player12 = new Player("hi!", (int)'a', gameBoard6);
    Card card13 = player12.drawCard();
    player12.addActions((int)(short)1);
    java.lang.String str16 = player12.getName();
    player12.discardHandAndInPlay();
    player12.initPlayerTurn();
    Card card19 = Card.duchy;
    GameBoard gameBoard22 = new GameBoard(0, "hi!");
    Card card23 = Card.adventurer;
    gameBoard22.trashCard(card23);
    player12.gainCardToHand(card19, gameBoard22);
    Player player26 = new Player("", (int)(short)10, gameBoard22);
    Card card27 = Card.mine;
    boolean b28 = gameBoard22.placeEmbargo(card27);
    GameBoard gameBoard31 = new GameBoard(0, "hi!");
    Card card32 = Card.adventurer;
    gameBoard31.trashCard(card32);
    int i34 = gameBoard22.numCardsAvailable(card32);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.ambassador + "'", card7.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.cutpurse + "'", card9.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.copper + "'", card13.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "hi!"+ "'", str16.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.duchy + "'", card19.equals(Card.duchy));
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.adventurer + "'", card23.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.mine + "'", card27.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.adventurer + "'", card32.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test073"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.util.List<Card> list_card14 = player10.getPlayedCards();
    Card card15 = null;
    player10.Discard(card15);
    int i17 = player10.getNumActions();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 2);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test074"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = Card.feast;
    int i12 = card11.getCost();
    GameBoard gameBoard15 = new GameBoard(3, "hi!");
    player10.buyCard(card11, gameBoard15);
    java.lang.String str17 = player10.getName();
    GameBoard gameBoard22 = new GameBoard(0, "hi!");
    Card card23 = Card.ambassador;
    gameBoard22.returnCard(card23);
    Card card25 = Card.cutpurse;
    int i26 = card25.getCost();
    boolean b27 = gameBoard22.hasCardsAvailable(card25);
    Player player28 = new Player("hi!", (int)'a', gameBoard22);
    Card card29 = player28.drawCard();
    player28.addActions((int)(short)1);
    java.lang.String str32 = player28.getName();
    player28.discardHandAndInPlay();
    player28.initPlayerTurn();
    Card card35 = Card.gardens;
    player28.Discard(card35);
    GameBoard gameBoard39 = new GameBoard(1, "hi!");
    player10.gainCardToHand(card35, gameBoard39);
    java.util.List<Card> list_card41 = player10.getPlayedCards();
    boolean b42 = player10.hasBuys();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.feast + "'", card11.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "hi!"+ "'", str17.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.ambassador + "'", card23.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.cutpurse + "'", card25.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.copper + "'", card29.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "hi!"+ "'", str32.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.gardens + "'", card35.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test075"); }

    GameBoard gameBoard2 = new GameBoard(6, (int)(byte)10);
    Card card3 = Card.curse;
    gameBoard2.returnCard(card3);
    GameBoard gameBoard7 = new GameBoard(0, "hi!");
    Card card8 = Card.ambassador;
    gameBoard7.returnCard(card8);
    boolean b10 = gameBoard7.gameDone();
    Card card11 = Card.cutpurse;
    int i12 = gameBoard7.numCardsAvailable(card11);
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card16 = gameBoard15.getActiveSupplyPiles();
    int i17 = gameBoard15.getTotalEmbargoTokens();
    Card card18 = Card.council_room;
    int i19 = card18.getVictory();
    int i20 = gameBoard15.numCardsAvailable(card18);
    Card card21 = null;
    Card card22 = Card.embargo;
    card22.setVictory(0);
    Card card25 = Card.gold;
    GameBoard gameBoard28 = new GameBoard((int)(byte)100, (-1));
    Card card29 = Card.gardens;
    int i30 = gameBoard28.numEmbargoTokens(card29);
    GameBoard gameBoard33 = new GameBoard(0, "hi!");
    Card card34 = Card.ambassador;
    gameBoard33.returnCard(card34);
    java.util.List<Card> list_card36 = gameBoard33.getActiveSupplyPiles();
    java.util.List<Card> list_card39 = gameBoard33.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card41 = gameBoard33.kingdomCards((int)(short)100);
    Card card42 = Card.cutpurse;
    int i43 = card42.getCost();
    int i44 = gameBoard33.numEmbargoTokens(card42);
    Card card45 = Card.estate;
    Card card46 = Card.estate;
    card46.setVictory((int)(short)-1);
    GameBoard gameBoard51 = new GameBoard(0, "hi!");
    Card card52 = Card.ambassador;
    gameBoard51.returnCard(card52);
    boolean b54 = gameBoard51.gameDone();
    java.util.List<Card> list_card55 = gameBoard51.getActiveSupplyPiles();
    GameBoard gameBoard58 = new GameBoard(0, "hi!");
    Card card59 = Card.ambassador;
    gameBoard58.returnCard(card59);
    int i61 = gameBoard51.numCardsAvailable(card59);
    GameBoard gameBoard64 = new GameBoard(0, "hi!");
    Card card65 = Card.ambassador;
    gameBoard64.returnCard(card65);
    java.util.List<Card> list_card67 = gameBoard7.kingdomCards(card18, card21, card22, card25, card29, card42, card45, card46, card59, card65);
    card22.setVictory((int)(byte)0);
    int i70 = gameBoard2.numCardsAvailable(card22);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.curse + "'", card3.equals(Card.curse));
    org.junit.Assert.assertTrue("'" + card8 + "' != '" + Card.ambassador + "'", card8.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.cutpurse + "'", card11.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.council_room + "'", card18.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 10);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.embargo + "'", card22.equals(Card.embargo));
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.gold + "'", card25.equals(Card.gold));
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.gardens + "'", card29.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.ambassador + "'", card34.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.cutpurse + "'", card42.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.estate + "'", card45.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.estate + "'", card46.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.ambassador + "'", card52.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card55);
    org.junit.Assert.assertTrue("'" + card59 + "' != '" + Card.ambassador + "'", card59.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    org.junit.Assert.assertTrue("'" + card65 + "' != '" + Card.ambassador + "'", card65.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 10);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test076"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    Card card12 = Card.adventurer;
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    gameBoard15.opponentDraw((int)'4');
    player10.buyCard(card12, gameBoard15);
    GameBoard gameBoard26 = new GameBoard(0, "hi!");
    Card card27 = Card.ambassador;
    gameBoard26.returnCard(card27);
    boolean b29 = gameBoard26.gameDone();
    int i30 = gameBoard26.play();
    Card card31 = player10.getRandomBuyCard(gameBoard26);
    java.lang.String str32 = player10.getName();
    int i33 = player10.getCoins();
    java.util.List<Card> list_card34 = player10.getPlayedCards();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.ambassador + "'", card27.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.copper + "'", card31.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "hi!"+ "'", str32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test077"); }

    GameBoard gameBoard2 = new GameBoard((int)(short)0, (int)(byte)1);
    GameBoard gameBoard5 = new GameBoard(1, "hi!");
    java.util.List<Card> list_card7 = gameBoard5.kingdomCards((-3));
    GameBoard gameBoard12 = new GameBoard(0, "hi!");
    Card card13 = Card.ambassador;
    gameBoard12.returnCard(card13);
    Card card15 = Card.cutpurse;
    int i16 = card15.getCost();
    boolean b17 = gameBoard12.hasCardsAvailable(card15);
    Player player18 = new Player("hi!", (int)'a', gameBoard12);
    Card card19 = Card.feast;
    int i20 = card19.getCost();
    GameBoard gameBoard23 = new GameBoard(3, "hi!");
    player18.buyCard(card19, gameBoard23);
    boolean b25 = gameBoard5.placeEmbargo(card19);
    gameBoard2.trashCard(card19);
    int i27 = card19.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.ambassador + "'", card13.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.cutpurse + "'", card15.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.feast + "'", card19.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 4);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test078"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    java.util.List<Card> list_card12 = player10.getHand();
    int i13 = player10.getTotalVictoryPoints();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-3));

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test079"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.util.List<Card> list_card14 = player10.getPlayedCards();
    int i15 = player10.getCoins();
    GameBoard gameBoard20 = new GameBoard(0, "hi!");
    Card card21 = Card.ambassador;
    gameBoard20.returnCard(card21);
    boolean b23 = gameBoard20.gameDone();
    java.util.List<Card> list_card24 = gameBoard20.getTrash();
    Card card25 = Card.ambassador;
    int i26 = card25.getCost();
    gameBoard20.returnCard(card25);
    Player player28 = new Player("hi!", (-1), gameBoard20);
    GameBoard gameBoard31 = new GameBoard(0, "hi!");
    Card card32 = Card.ambassador;
    gameBoard31.returnCard(card32);
    boolean b34 = gameBoard31.gameDone();
    Card card35 = Card.estate;
    gameBoard31.returnCard(card35);
    GameBoard gameBoard41 = new GameBoard(0, "hi!");
    Card card42 = Card.ambassador;
    gameBoard41.returnCard(card42);
    Card card44 = Card.cutpurse;
    int i45 = card44.getCost();
    boolean b46 = gameBoard41.hasCardsAvailable(card44);
    Player player47 = new Player("hi!", (int)'a', gameBoard41);
    Card card48 = Card.feast;
    int i49 = card48.getCost();
    GameBoard gameBoard52 = new GameBoard(3, "hi!");
    player47.buyCard(card48, gameBoard52);
    player28.gainCard(card35, gameBoard52);
    boolean b55 = player28.hasBuys();
    Card card56 = player28.drawCard();
    boolean b57 = player10.hasCard(card56);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.ambassador + "'", card21.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.ambassador + "'", card25.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 3);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.ambassador + "'", card32.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.estate + "'", card35.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.ambassador + "'", card42.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.cutpurse + "'", card44.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    org.junit.Assert.assertTrue("'" + card48 + "' != '" + Card.feast + "'", card48.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    org.junit.Assert.assertTrue("'" + card56 + "' != '" + Card.copper + "'", card56.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test080"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.util.List<Card> list_card14 = player10.getPlayedCards();
    player10.countTreasure();
    java.util.List<Card> list_card16 = player10.getHand();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test081"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.lang.String str14 = player10.getName();
    player10.discardHandAndInPlay();
    player10.initPlayerTurn();
    Card card17 = Card.duchy;
    GameBoard gameBoard20 = new GameBoard(0, "hi!");
    Card card21 = Card.adventurer;
    gameBoard20.trashCard(card21);
    player10.gainCardToHand(card17, gameBoard20);
    boolean b24 = player10.hasActionCard();
    GameBoard gameBoard27 = new GameBoard(0, "hi!");
    Card card28 = Card.ambassador;
    gameBoard27.returnCard(card28);
    boolean b30 = gameBoard27.gameDone();
    java.util.List<Card> list_card31 = gameBoard27.getActiveSupplyPiles();
    GameBoard gameBoard34 = new GameBoard(0, "hi!");
    Card card35 = Card.ambassador;
    gameBoard34.returnCard(card35);
    boolean b37 = gameBoard27.hasCardsAvailable(card35);
    card35.setVictory((int)(short)10);
    GameBoard gameBoard46 = new GameBoard(0, "hi!");
    Card card47 = Card.ambassador;
    gameBoard46.returnCard(card47);
    Card card49 = Card.cutpurse;
    int i50 = card49.getCost();
    boolean b51 = gameBoard46.hasCardsAvailable(card49);
    Player player52 = new Player("hi!", (int)'a', gameBoard46);
    Card card53 = player52.drawCard();
    player52.addActions((int)(short)1);
    java.lang.String str56 = player52.getName();
    player52.discardHandAndInPlay();
    player52.initPlayerTurn();
    Card card59 = Card.duchy;
    GameBoard gameBoard62 = new GameBoard(0, "hi!");
    Card card63 = Card.adventurer;
    gameBoard62.trashCard(card63);
    player52.gainCardToHand(card59, gameBoard62);
    Player player66 = new Player("", (int)(short)10, gameBoard62);
    Card card67 = Card.mine;
    boolean b68 = gameBoard62.placeEmbargo(card67);
    player10.gainCardToHand(card35, gameBoard62);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.duchy + "'", card17.equals(Card.duchy));
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.ambassador + "'", card28.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.ambassador + "'", card35.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.ambassador + "'", card47.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card49 + "' != '" + Card.cutpurse + "'", card49.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    org.junit.Assert.assertTrue("'" + card53 + "' != '" + Card.copper + "'", card53.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "hi!"+ "'", str56.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card59 + "' != '" + Card.duchy + "'", card59.equals(Card.duchy));
    org.junit.Assert.assertTrue("'" + card63 + "' != '" + Card.adventurer + "'", card63.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card67 + "' != '" + Card.mine + "'", card67.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test082"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    boolean b7 = gameBoard4.gameDone();
    java.util.List<Card> list_card8 = gameBoard4.getTrash();
    Card card9 = Card.ambassador;
    int i10 = card9.getCost();
    gameBoard4.returnCard(card9);
    Player player12 = new Player("hi!", (-1), gameBoard4);
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.cutpurse;
    int i20 = gameBoard15.numCardsAvailable(card19);
    GameBoard gameBoard23 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card24 = gameBoard23.getActiveSupplyPiles();
    int i25 = gameBoard23.getTotalEmbargoTokens();
    Card card26 = Card.council_room;
    int i27 = card26.getVictory();
    int i28 = gameBoard23.numCardsAvailable(card26);
    Card card29 = null;
    Card card30 = Card.embargo;
    card30.setVictory(0);
    Card card33 = Card.gold;
    GameBoard gameBoard36 = new GameBoard((int)(byte)100, (-1));
    Card card37 = Card.gardens;
    int i38 = gameBoard36.numEmbargoTokens(card37);
    GameBoard gameBoard41 = new GameBoard(0, "hi!");
    Card card42 = Card.ambassador;
    gameBoard41.returnCard(card42);
    java.util.List<Card> list_card44 = gameBoard41.getActiveSupplyPiles();
    java.util.List<Card> list_card47 = gameBoard41.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card49 = gameBoard41.kingdomCards((int)(short)100);
    Card card50 = Card.cutpurse;
    int i51 = card50.getCost();
    int i52 = gameBoard41.numEmbargoTokens(card50);
    Card card53 = Card.estate;
    Card card54 = Card.estate;
    card54.setVictory((int)(short)-1);
    GameBoard gameBoard59 = new GameBoard(0, "hi!");
    Card card60 = Card.ambassador;
    gameBoard59.returnCard(card60);
    boolean b62 = gameBoard59.gameDone();
    java.util.List<Card> list_card63 = gameBoard59.getActiveSupplyPiles();
    GameBoard gameBoard66 = new GameBoard(0, "hi!");
    Card card67 = Card.ambassador;
    gameBoard66.returnCard(card67);
    int i69 = gameBoard59.numCardsAvailable(card67);
    GameBoard gameBoard72 = new GameBoard(0, "hi!");
    Card card73 = Card.ambassador;
    gameBoard72.returnCard(card73);
    java.util.List<Card> list_card75 = gameBoard15.kingdomCards(card26, card29, card30, card33, card37, card50, card53, card54, card67, card73);
    gameBoard4.returnCard(card73);
    GameBoard gameBoard79 = new GameBoard(0, "hi!");
    Card card80 = Card.adventurer;
    gameBoard79.trashCard(card80);
    GameBoard gameBoard84 = new GameBoard(0, "hi!");
    Card card85 = Card.adventurer;
    gameBoard84.trashCard(card85);
    gameBoard79.takeCard(card85);
    int i88 = gameBoard4.numEmbargoTokens(card85);
    card85.setVictory((int)(short)0);
    java.util.List<java.lang.String> list_str91 = card85.getTypes();
    int i92 = card85.getCost();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.ambassador + "'", card9.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.cutpurse + "'", card19.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.council_room + "'", card26.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 10);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.embargo + "'", card30.equals(Card.embargo));
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.gold + "'", card33.equals(Card.gold));
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.gardens + "'", card37.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.ambassador + "'", card42.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    org.junit.Assert.assertTrue("'" + card50 + "' != '" + Card.cutpurse + "'", card50.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    org.junit.Assert.assertTrue("'" + card53 + "' != '" + Card.estate + "'", card53.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card54 + "' != '" + Card.estate + "'", card54.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card60 + "' != '" + Card.ambassador + "'", card60.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    org.junit.Assert.assertTrue("'" + card67 + "' != '" + Card.ambassador + "'", card67.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    org.junit.Assert.assertTrue("'" + card73 + "' != '" + Card.ambassador + "'", card73.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card75);
    org.junit.Assert.assertTrue("'" + card80 + "' != '" + Card.adventurer + "'", card80.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card85 + "' != '" + Card.adventurer + "'", card85.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 6);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test083"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    boolean b14 = player10.hasActions();
    GameBoard gameBoard17 = new GameBoard(0, "hi!");
    Card card18 = Card.ambassador;
    gameBoard17.returnCard(card18);
    java.util.List<Card> list_card20 = gameBoard17.getActiveSupplyPiles();
    java.util.List<Card> list_card21 = gameBoard17.getTrash();
    java.util.List<Card> list_card23 = gameBoard17.kingdomCards(100);
    Card card24 = player10.getRandomBuyCard(gameBoard17);
    java.util.List<Card> list_card25 = player10.getHand();
    Card card26 = null;
    GameBoard gameBoard29 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card30 = gameBoard29.getActiveSupplyPiles();
    java.util.List<Card> list_card32 = gameBoard29.kingdomCards((int)(byte)100);
    GameBoard gameBoard37 = new GameBoard(0, "hi!");
    Card card38 = Card.ambassador;
    gameBoard37.returnCard(card38);
    Card card40 = Card.cutpurse;
    int i41 = card40.getCost();
    boolean b42 = gameBoard37.hasCardsAvailable(card40);
    Player player43 = new Player("hi!", (int)'a', gameBoard37);
    java.util.List<Card> list_card44 = player43.getPlayedCards();
    Card card45 = Card.adventurer;
    GameBoard gameBoard48 = new GameBoard(0, "hi!");
    Card card49 = Card.ambassador;
    gameBoard48.returnCard(card49);
    boolean b51 = gameBoard48.gameDone();
    Card card52 = Card.estate;
    gameBoard48.returnCard(card52);
    gameBoard48.opponentDraw((int)'4');
    player43.buyCard(card45, gameBoard48);
    GameBoard gameBoard59 = new GameBoard(0, "hi!");
    Card card60 = Card.ambassador;
    gameBoard59.returnCard(card60);
    boolean b62 = gameBoard59.gameDone();
    int i63 = gameBoard59.play();
    Card card64 = player43.getRandomBuyCard(gameBoard59);
    Card card65 = player43.drawCard();
    boolean b66 = gameBoard29.placeEmbargo(card65);
    player10.gainCard(card26, gameBoard29);
    java.util.LinkedList<Card> linkedlist_card68 = player10.getDeck();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.ambassador + "'", card18.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.copper + "'", card24.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.ambassador + "'", card38.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.cutpurse + "'", card40.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.adventurer + "'", card45.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card49 + "' != '" + Card.ambassador + "'", card49.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.estate + "'", card52.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card60 + "' != '" + Card.ambassador + "'", card60.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);
    org.junit.Assert.assertTrue("'" + card64 + "' != '" + Card.copper + "'", card64.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card65 + "' != '" + Card.copper + "'", card65.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card68);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test084"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    GameBoard gameBoard14 = new GameBoard((int)(byte)100, (-1));
    Card card15 = Card.gardens;
    int i16 = gameBoard14.numEmbargoTokens(card15);
    java.util.List<Card> list_card17 = gameBoard14.getTrash();
    GameBoard gameBoard20 = new GameBoard(0, "hi!");
    Card card21 = Card.ambassador;
    gameBoard20.returnCard(card21);
    boolean b23 = gameBoard20.gameDone();
    java.util.List<Card> list_card24 = gameBoard20.getActiveSupplyPiles();
    GameBoard gameBoard27 = new GameBoard(0, "hi!");
    Card card28 = Card.ambassador;
    gameBoard27.returnCard(card28);
    boolean b30 = gameBoard20.hasCardsAvailable(card28);
    gameBoard14.trashCard(card28);
    Card card32 = player10.getRandomBuyCard(gameBoard14);
    int i33 = player10.getBuys();
    java.util.List<Card> list_card34 = player10.getPlayedCards();
    player10.addActions(10);
    java.util.LinkedList<Card> linkedlist_card37 = player10.getDeck();
    player10.initPlayerTurn();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.gardens + "'", card15.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.ambassador + "'", card21.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.ambassador + "'", card28.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card37);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test085"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    java.util.List<Card> list_card5 = gameBoard2.getActiveSupplyPiles();
    java.util.List<Card> list_card6 = gameBoard2.getTrash();
    java.util.List<Player> list_player7 = gameBoard2.getPlayers();
    gameBoard2.opponentDiscardCopper(1);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test086"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card3 = gameBoard2.getActiveSupplyPiles();
    int i4 = gameBoard2.getTotalEmbargoTokens();
    GameBoard gameBoard7 = new GameBoard(0, "hi!");
    Card card8 = Card.ambassador;
    gameBoard7.returnCard(card8);
    boolean b10 = gameBoard7.gameDone();
    Card card11 = Card.cutpurse;
    int i12 = gameBoard7.numCardsAvailable(card11);
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card16 = gameBoard15.getActiveSupplyPiles();
    int i17 = gameBoard15.getTotalEmbargoTokens();
    Card card18 = Card.council_room;
    int i19 = card18.getVictory();
    int i20 = gameBoard15.numCardsAvailable(card18);
    Card card21 = null;
    Card card22 = Card.embargo;
    card22.setVictory(0);
    Card card25 = Card.gold;
    GameBoard gameBoard28 = new GameBoard((int)(byte)100, (-1));
    Card card29 = Card.gardens;
    int i30 = gameBoard28.numEmbargoTokens(card29);
    GameBoard gameBoard33 = new GameBoard(0, "hi!");
    Card card34 = Card.ambassador;
    gameBoard33.returnCard(card34);
    java.util.List<Card> list_card36 = gameBoard33.getActiveSupplyPiles();
    java.util.List<Card> list_card39 = gameBoard33.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card41 = gameBoard33.kingdomCards((int)(short)100);
    Card card42 = Card.cutpurse;
    int i43 = card42.getCost();
    int i44 = gameBoard33.numEmbargoTokens(card42);
    Card card45 = Card.estate;
    Card card46 = Card.estate;
    card46.setVictory((int)(short)-1);
    GameBoard gameBoard51 = new GameBoard(0, "hi!");
    Card card52 = Card.ambassador;
    gameBoard51.returnCard(card52);
    boolean b54 = gameBoard51.gameDone();
    java.util.List<Card> list_card55 = gameBoard51.getActiveSupplyPiles();
    GameBoard gameBoard58 = new GameBoard(0, "hi!");
    Card card59 = Card.ambassador;
    gameBoard58.returnCard(card59);
    int i61 = gameBoard51.numCardsAvailable(card59);
    GameBoard gameBoard64 = new GameBoard(0, "hi!");
    Card card65 = Card.ambassador;
    gameBoard64.returnCard(card65);
    java.util.List<Card> list_card67 = gameBoard7.kingdomCards(card18, card21, card22, card25, card29, card42, card45, card46, card59, card65);
    gameBoard2.takeCard(card59);
    GameBoard gameBoard73 = new GameBoard(0, "hi!");
    Card card74 = Card.ambassador;
    gameBoard73.returnCard(card74);
    Card card76 = Card.cutpurse;
    int i77 = card76.getCost();
    boolean b78 = gameBoard73.hasCardsAvailable(card76);
    Player player79 = new Player("hi!", (int)'a', gameBoard73);
    Card card80 = player79.drawCard();
    player79.addActions((int)(short)1);
    java.lang.String str83 = player79.getName();
    player79.discardHandAndInPlay();
    player79.initPlayerTurn();
    Card card86 = Card.duchy;
    GameBoard gameBoard89 = new GameBoard(0, "hi!");
    Card card90 = Card.adventurer;
    gameBoard89.trashCard(card90);
    player79.gainCardToHand(card86, gameBoard89);
    gameBoard2.trashCard(card86);
    java.util.List<Card> list_card95 = gameBoard2.kingdomCards((int)(short)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    org.junit.Assert.assertTrue("'" + card8 + "' != '" + Card.ambassador + "'", card8.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.cutpurse + "'", card11.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.council_room + "'", card18.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 10);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.embargo + "'", card22.equals(Card.embargo));
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.gold + "'", card25.equals(Card.gold));
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.gardens + "'", card29.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.ambassador + "'", card34.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.cutpurse + "'", card42.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.estate + "'", card45.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.estate + "'", card46.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.ambassador + "'", card52.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card55);
    org.junit.Assert.assertTrue("'" + card59 + "' != '" + Card.ambassador + "'", card59.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    org.junit.Assert.assertTrue("'" + card65 + "' != '" + Card.ambassador + "'", card65.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    org.junit.Assert.assertTrue("'" + card74 + "' != '" + Card.ambassador + "'", card74.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card76 + "' != '" + Card.cutpurse + "'", card76.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    org.junit.Assert.assertTrue("'" + card80 + "' != '" + Card.copper + "'", card80.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "hi!"+ "'", str83.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card86 + "' != '" + Card.duchy + "'", card86.equals(Card.duchy));
    org.junit.Assert.assertTrue("'" + card90 + "' != '" + Card.adventurer + "'", card90.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card95);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test087"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card3 = gameBoard2.getActiveSupplyPiles();
    int i4 = gameBoard2.getTotalEmbargoTokens();
    GameBoard gameBoard7 = new GameBoard(0, "hi!");
    Card card8 = Card.ambassador;
    gameBoard7.returnCard(card8);
    boolean b10 = gameBoard7.gameDone();
    Card card11 = Card.cutpurse;
    int i12 = gameBoard7.numCardsAvailable(card11);
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card16 = gameBoard15.getActiveSupplyPiles();
    int i17 = gameBoard15.getTotalEmbargoTokens();
    Card card18 = Card.council_room;
    int i19 = card18.getVictory();
    int i20 = gameBoard15.numCardsAvailable(card18);
    Card card21 = null;
    Card card22 = Card.embargo;
    card22.setVictory(0);
    Card card25 = Card.gold;
    GameBoard gameBoard28 = new GameBoard((int)(byte)100, (-1));
    Card card29 = Card.gardens;
    int i30 = gameBoard28.numEmbargoTokens(card29);
    GameBoard gameBoard33 = new GameBoard(0, "hi!");
    Card card34 = Card.ambassador;
    gameBoard33.returnCard(card34);
    java.util.List<Card> list_card36 = gameBoard33.getActiveSupplyPiles();
    java.util.List<Card> list_card39 = gameBoard33.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card41 = gameBoard33.kingdomCards((int)(short)100);
    Card card42 = Card.cutpurse;
    int i43 = card42.getCost();
    int i44 = gameBoard33.numEmbargoTokens(card42);
    Card card45 = Card.estate;
    Card card46 = Card.estate;
    card46.setVictory((int)(short)-1);
    GameBoard gameBoard51 = new GameBoard(0, "hi!");
    Card card52 = Card.ambassador;
    gameBoard51.returnCard(card52);
    boolean b54 = gameBoard51.gameDone();
    java.util.List<Card> list_card55 = gameBoard51.getActiveSupplyPiles();
    GameBoard gameBoard58 = new GameBoard(0, "hi!");
    Card card59 = Card.ambassador;
    gameBoard58.returnCard(card59);
    int i61 = gameBoard51.numCardsAvailable(card59);
    GameBoard gameBoard64 = new GameBoard(0, "hi!");
    Card card65 = Card.ambassador;
    gameBoard64.returnCard(card65);
    java.util.List<Card> list_card67 = gameBoard7.kingdomCards(card18, card21, card22, card25, card29, card42, card45, card46, card59, card65);
    gameBoard2.takeCard(card59);
    GameBoard gameBoard73 = new GameBoard(0, "hi!");
    Card card74 = Card.ambassador;
    gameBoard73.returnCard(card74);
    Card card76 = Card.cutpurse;
    int i77 = card76.getCost();
    boolean b78 = gameBoard73.hasCardsAvailable(card76);
    Player player79 = new Player("hi!", (int)'a', gameBoard73);
    Card card80 = player79.drawCard();
    player79.addActions((int)(short)1);
    java.lang.String str83 = player79.getName();
    player79.discardHandAndInPlay();
    player79.initPlayerTurn();
    Card card86 = Card.duchy;
    GameBoard gameBoard89 = new GameBoard(0, "hi!");
    Card card90 = Card.adventurer;
    gameBoard89.trashCard(card90);
    player79.gainCardToHand(card86, gameBoard89);
    gameBoard2.trashCard(card86);
    int i94 = card86.getTreasure();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    org.junit.Assert.assertTrue("'" + card8 + "' != '" + Card.ambassador + "'", card8.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.cutpurse + "'", card11.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.council_room + "'", card18.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 10);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.embargo + "'", card22.equals(Card.embargo));
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.gold + "'", card25.equals(Card.gold));
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.gardens + "'", card29.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.ambassador + "'", card34.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.cutpurse + "'", card42.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.estate + "'", card45.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.estate + "'", card46.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.ambassador + "'", card52.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card55);
    org.junit.Assert.assertTrue("'" + card59 + "' != '" + Card.ambassador + "'", card59.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    org.junit.Assert.assertTrue("'" + card65 + "' != '" + Card.ambassador + "'", card65.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    org.junit.Assert.assertTrue("'" + card74 + "' != '" + Card.ambassador + "'", card74.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card76 + "' != '" + Card.cutpurse + "'", card76.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    org.junit.Assert.assertTrue("'" + card80 + "' != '" + Card.copper + "'", card80.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "hi!"+ "'", str83.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card86 + "' != '" + Card.duchy + "'", card86.equals(Card.duchy));
    org.junit.Assert.assertTrue("'" + card90 + "' != '" + Card.adventurer + "'", card90.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test088"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card3 = gameBoard2.getActiveSupplyPiles();
    int i4 = gameBoard2.getTotalEmbargoTokens();
    Card card5 = Card.council_room;
    int i6 = card5.getVictory();
    int i7 = gameBoard2.numCardsAvailable(card5);
    java.util.List<Card> list_card10 = gameBoard2.getPurchaseableCards((int)'a', "");
    Card card11 = Card.silver;
    boolean b12 = gameBoard2.placeEmbargo(card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.council_room + "'", card5.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.silver + "'", card11.equals(Card.silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test089"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    boolean b14 = player10.hasActions();
    java.util.List<Card> list_card15 = player10.getHand();
    boolean b16 = player10.hasActionCard();
    player10.discardHandAndInPlay();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test090"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    java.util.List<Card> list_card5 = gameBoard2.getActiveSupplyPiles();
    java.util.List<Card> list_card8 = gameBoard2.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card10 = gameBoard2.kingdomCards((int)(short)100);
    Card card11 = Card.cutpurse;
    int i12 = card11.getCost();
    int i13 = gameBoard2.numEmbargoTokens(card11);
    Card card14 = Card.feast;
    gameBoard2.trashCard(card14);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.cutpurse + "'", card11.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.feast + "'", card14.equals(Card.feast));

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test091"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.util.List<Card> list_card14 = player10.getPlayedCards();
    java.util.List<Card> list_card15 = player10.getHand();
    player10.countTreasure();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test092"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    boolean b14 = player10.hasActions();
    int i15 = player10.getTotalVictoryPoints();
    player10.addActions(10);
    player10.addActions(0);
    GameBoard gameBoard22 = new GameBoard(0, "hi!");
    Card card23 = Card.ambassador;
    gameBoard22.returnCard(card23);
    java.util.List<Card> list_card25 = gameBoard22.getActiveSupplyPiles();
    java.util.List<Card> list_card26 = gameBoard22.getTrash();
    java.util.List<Player> list_player27 = gameBoard22.getPlayers();
    GameBoard gameBoard32 = new GameBoard(0, "hi!");
    Card card33 = Card.ambassador;
    gameBoard32.returnCard(card33);
    Card card35 = Card.cutpurse;
    int i36 = card35.getCost();
    boolean b37 = gameBoard32.hasCardsAvailable(card35);
    Player player38 = new Player("hi!", (int)'a', gameBoard32);
    Card card39 = player38.drawCard();
    player38.addActions((int)(short)1);
    boolean b42 = player38.hasActions();
    GameBoard gameBoard45 = new GameBoard(0, "hi!");
    Card card46 = Card.ambassador;
    gameBoard45.returnCard(card46);
    java.util.List<Card> list_card48 = gameBoard45.getActiveSupplyPiles();
    java.util.List<Card> list_card49 = gameBoard45.getTrash();
    java.util.List<Card> list_card51 = gameBoard45.kingdomCards(100);
    Card card52 = player38.getRandomBuyCard(gameBoard45);
    java.util.List<Card> list_card53 = player38.getHand();
    Card card54 = Card.baron;
    int i55 = card54.getTreasure();
    player38.Discard(card54);
    boolean b57 = gameBoard22.hasCardsAvailable(card54);
    Card card58 = Card.smithy;
    card58.setVictory((int)(byte)-1);
    int i61 = card58.getTreasure();
    gameBoard22.returnCard(card58);
    boolean b63 = player10.hasCard(card58);
    java.util.List<Card> list_card64 = player10.getHand();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-3));
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.ambassador + "'", card23.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player27);
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.ambassador + "'", card33.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.cutpurse + "'", card35.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.copper + "'", card39.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.ambassador + "'", card46.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.copper + "'", card52.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    org.junit.Assert.assertTrue("'" + card54 + "' != '" + Card.baron + "'", card54.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    org.junit.Assert.assertTrue("'" + card58 + "' != '" + Card.smithy + "'", card58.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test093"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card3 = gameBoard2.getActiveSupplyPiles();
    java.util.List<Card> list_card6 = gameBoard2.getPurchaseableCards((-1), "hi!");
    java.util.List<Card> list_card8 = gameBoard2.kingdomCards((int)' ');
    GameBoard gameBoard13 = new GameBoard(0, "hi!");
    Card card14 = Card.ambassador;
    gameBoard13.returnCard(card14);
    Card card16 = Card.cutpurse;
    int i17 = card16.getCost();
    boolean b18 = gameBoard13.hasCardsAvailable(card16);
    Player player19 = new Player("hi!", (int)'a', gameBoard13);
    java.util.List<Card> list_card20 = player19.getPlayedCards();
    GameBoard gameBoard23 = new GameBoard((int)(byte)100, (-1));
    Card card24 = Card.gardens;
    int i25 = gameBoard23.numEmbargoTokens(card24);
    java.util.List<Card> list_card26 = gameBoard23.getTrash();
    GameBoard gameBoard29 = new GameBoard(0, "hi!");
    Card card30 = Card.ambassador;
    gameBoard29.returnCard(card30);
    boolean b32 = gameBoard29.gameDone();
    java.util.List<Card> list_card33 = gameBoard29.getActiveSupplyPiles();
    GameBoard gameBoard36 = new GameBoard(0, "hi!");
    Card card37 = Card.ambassador;
    gameBoard36.returnCard(card37);
    boolean b39 = gameBoard29.hasCardsAvailable(card37);
    gameBoard23.trashCard(card37);
    Card card41 = player19.getRandomBuyCard(gameBoard23);
    int i42 = player19.getBuys();
    boolean b43 = player19.hasBuys();
    int i44 = player19.getNum();
    Card card45 = player19.drawCard();
    boolean b46 = gameBoard2.hasCardsAvailable(card45);
    gameBoard2.opponentDiscardCopper((int)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.ambassador + "'", card14.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.cutpurse + "'", card16.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.gardens + "'", card24.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.ambassador + "'", card30.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.ambassador + "'", card37.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 97);
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.copper + "'", card45.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test094"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    boolean b14 = player10.hasActions();
    GameBoard gameBoard17 = new GameBoard(0, "hi!");
    Card card18 = Card.ambassador;
    gameBoard17.returnCard(card18);
    java.util.List<Card> list_card20 = gameBoard17.getActiveSupplyPiles();
    java.util.List<Card> list_card21 = gameBoard17.getTrash();
    java.util.List<Card> list_card23 = gameBoard17.kingdomCards(100);
    Card card24 = player10.getRandomBuyCard(gameBoard17);
    java.util.List<Card> list_card25 = player10.getHand();
    Card card26 = player10.drawCard();
    GameBoard gameBoard31 = new GameBoard(0, "hi!");
    Card card32 = Card.ambassador;
    gameBoard31.returnCard(card32);
    Card card34 = Card.cutpurse;
    int i35 = card34.getCost();
    boolean b36 = gameBoard31.hasCardsAvailable(card34);
    Player player37 = new Player("hi!", (int)'a', gameBoard31);
    Card card38 = player37.drawCard();
    player37.addActions((int)(short)1);
    boolean b41 = player37.hasActions();
    GameBoard gameBoard44 = new GameBoard(0, "hi!");
    Card card45 = Card.ambassador;
    gameBoard44.returnCard(card45);
    java.util.List<Card> list_card47 = gameBoard44.getActiveSupplyPiles();
    java.util.List<Card> list_card48 = gameBoard44.getTrash();
    java.util.List<Card> list_card50 = gameBoard44.kingdomCards(100);
    Card card51 = player37.getRandomBuyCard(gameBoard44);
    GameBoard gameBoard54 = new GameBoard(0, "hi!");
    Card card55 = Card.ambassador;
    gameBoard54.returnCard(card55);
    boolean b57 = gameBoard54.gameDone();
    java.util.List<Card> list_card58 = gameBoard54.getActiveSupplyPiles();
    GameBoard gameBoard61 = new GameBoard(0, "hi!");
    Card card62 = Card.ambassador;
    gameBoard61.returnCard(card62);
    int i64 = gameBoard54.numCardsAvailable(card62);
    Card card66 = Card.council_room;
    gameBoard54.opponentGainCard((int)(byte)1, card66);
    player10.buyCard(card51, gameBoard54);
    int i69 = player10.getBuys();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.ambassador + "'", card18.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.copper + "'", card24.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.ambassador + "'", card32.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.cutpurse + "'", card34.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.copper + "'", card38.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.ambassador + "'", card45.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    org.junit.Assert.assertTrue("'" + card51 + "' != '" + Card.copper + "'", card51.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card55 + "' != '" + Card.ambassador + "'", card55.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card58);
    org.junit.Assert.assertTrue("'" + card62 + "' != '" + Card.ambassador + "'", card62.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    org.junit.Assert.assertTrue("'" + card66 + "' != '" + Card.council_room + "'", card66.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test095"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    boolean b5 = gameBoard2.gameDone();
    Card card6 = Card.estate;
    gameBoard2.returnCard(card6);
    gameBoard2.opponentDraw((int)'4');
    java.util.List<Card> list_card11 = gameBoard2.getPurchaseableCards((-1));
    Card card12 = Card.smithy;
    card12.setVictory((int)(byte)-1);
    int i15 = card12.getTreasure();
    int i16 = card12.getCost();
    int i17 = card12.getTreasure();
    gameBoard2.returnCard(card12);
    java.util.List<Card> list_card19 = gameBoard2.getActiveSupplyPiles();
    Card card20 = Card.cutpurse;
    int i21 = card20.getCost();
    int i22 = card20.getVictory();
    boolean b23 = gameBoard2.hasCardsAvailable(card20);
    java.util.List<Card> list_card24 = gameBoard2.getTrash();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.estate + "'", card6.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.smithy + "'", card12.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.cutpurse + "'", card20.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test096"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    boolean b7 = gameBoard4.gameDone();
    java.util.List<Card> list_card8 = gameBoard4.getTrash();
    Card card9 = Card.ambassador;
    int i10 = card9.getCost();
    gameBoard4.returnCard(card9);
    Player player12 = new Player("hi!", (-1), gameBoard4);
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.cutpurse;
    int i20 = gameBoard15.numCardsAvailable(card19);
    GameBoard gameBoard23 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card24 = gameBoard23.getActiveSupplyPiles();
    int i25 = gameBoard23.getTotalEmbargoTokens();
    Card card26 = Card.council_room;
    int i27 = card26.getVictory();
    int i28 = gameBoard23.numCardsAvailable(card26);
    Card card29 = null;
    Card card30 = Card.embargo;
    card30.setVictory(0);
    Card card33 = Card.gold;
    GameBoard gameBoard36 = new GameBoard((int)(byte)100, (-1));
    Card card37 = Card.gardens;
    int i38 = gameBoard36.numEmbargoTokens(card37);
    GameBoard gameBoard41 = new GameBoard(0, "hi!");
    Card card42 = Card.ambassador;
    gameBoard41.returnCard(card42);
    java.util.List<Card> list_card44 = gameBoard41.getActiveSupplyPiles();
    java.util.List<Card> list_card47 = gameBoard41.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card49 = gameBoard41.kingdomCards((int)(short)100);
    Card card50 = Card.cutpurse;
    int i51 = card50.getCost();
    int i52 = gameBoard41.numEmbargoTokens(card50);
    Card card53 = Card.estate;
    Card card54 = Card.estate;
    card54.setVictory((int)(short)-1);
    GameBoard gameBoard59 = new GameBoard(0, "hi!");
    Card card60 = Card.ambassador;
    gameBoard59.returnCard(card60);
    boolean b62 = gameBoard59.gameDone();
    java.util.List<Card> list_card63 = gameBoard59.getActiveSupplyPiles();
    GameBoard gameBoard66 = new GameBoard(0, "hi!");
    Card card67 = Card.ambassador;
    gameBoard66.returnCard(card67);
    int i69 = gameBoard59.numCardsAvailable(card67);
    GameBoard gameBoard72 = new GameBoard(0, "hi!");
    Card card73 = Card.ambassador;
    gameBoard72.returnCard(card73);
    java.util.List<Card> list_card75 = gameBoard15.kingdomCards(card26, card29, card30, card33, card37, card50, card53, card54, card67, card73);
    gameBoard4.returnCard(card73);
    GameBoard gameBoard79 = new GameBoard(0, "hi!");
    Card card80 = Card.adventurer;
    gameBoard79.trashCard(card80);
    GameBoard gameBoard84 = new GameBoard(0, "hi!");
    Card card85 = Card.adventurer;
    gameBoard84.trashCard(card85);
    gameBoard79.takeCard(card85);
    int i88 = gameBoard4.numEmbargoTokens(card85);
    card85.setVictory((int)(short)0);
    java.util.List<java.lang.String> list_str91 = card85.getTypes();
    card85.setVictory((int)(byte)0);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.ambassador + "'", card9.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.cutpurse + "'", card19.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.council_room + "'", card26.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 10);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.embargo + "'", card30.equals(Card.embargo));
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.gold + "'", card33.equals(Card.gold));
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.gardens + "'", card37.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.ambassador + "'", card42.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    org.junit.Assert.assertTrue("'" + card50 + "' != '" + Card.cutpurse + "'", card50.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    org.junit.Assert.assertTrue("'" + card53 + "' != '" + Card.estate + "'", card53.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card54 + "' != '" + Card.estate + "'", card54.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card60 + "' != '" + Card.ambassador + "'", card60.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    org.junit.Assert.assertTrue("'" + card67 + "' != '" + Card.ambassador + "'", card67.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    org.junit.Assert.assertTrue("'" + card73 + "' != '" + Card.ambassador + "'", card73.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card75);
    org.junit.Assert.assertTrue("'" + card80 + "' != '" + Card.adventurer + "'", card80.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card85 + "' != '" + Card.adventurer + "'", card85.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str91);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test097"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    boolean b14 = player10.hasActions();
    GameBoard gameBoard17 = new GameBoard(0, "hi!");
    Card card18 = Card.ambassador;
    gameBoard17.returnCard(card18);
    java.util.List<Card> list_card20 = gameBoard17.getActiveSupplyPiles();
    java.util.List<Card> list_card21 = gameBoard17.getTrash();
    java.util.List<Card> list_card23 = gameBoard17.kingdomCards(100);
    Card card24 = player10.getRandomBuyCard(gameBoard17);
    java.util.List<Card> list_card25 = player10.getHand();
    Card card26 = null;
    GameBoard gameBoard29 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card30 = gameBoard29.getActiveSupplyPiles();
    java.util.List<Card> list_card32 = gameBoard29.kingdomCards((int)(byte)100);
    GameBoard gameBoard37 = new GameBoard(0, "hi!");
    Card card38 = Card.ambassador;
    gameBoard37.returnCard(card38);
    Card card40 = Card.cutpurse;
    int i41 = card40.getCost();
    boolean b42 = gameBoard37.hasCardsAvailable(card40);
    Player player43 = new Player("hi!", (int)'a', gameBoard37);
    java.util.List<Card> list_card44 = player43.getPlayedCards();
    Card card45 = Card.adventurer;
    GameBoard gameBoard48 = new GameBoard(0, "hi!");
    Card card49 = Card.ambassador;
    gameBoard48.returnCard(card49);
    boolean b51 = gameBoard48.gameDone();
    Card card52 = Card.estate;
    gameBoard48.returnCard(card52);
    gameBoard48.opponentDraw((int)'4');
    player43.buyCard(card45, gameBoard48);
    GameBoard gameBoard59 = new GameBoard(0, "hi!");
    Card card60 = Card.ambassador;
    gameBoard59.returnCard(card60);
    boolean b62 = gameBoard59.gameDone();
    int i63 = gameBoard59.play();
    Card card64 = player43.getRandomBuyCard(gameBoard59);
    Card card65 = player43.drawCard();
    boolean b66 = gameBoard29.placeEmbargo(card65);
    player10.gainCard(card26, gameBoard29);
    int i68 = gameBoard29.getTotalEmbargoTokens();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.ambassador + "'", card18.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.copper + "'", card24.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.ambassador + "'", card38.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.cutpurse + "'", card40.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.adventurer + "'", card45.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card49 + "' != '" + Card.ambassador + "'", card49.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.estate + "'", card52.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card60 + "' != '" + Card.ambassador + "'", card60.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);
    org.junit.Assert.assertTrue("'" + card64 + "' != '" + Card.copper + "'", card64.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card65 + "' != '" + Card.copper + "'", card65.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 1);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test098"); }

    GameBoard gameBoard2 = new GameBoard(3, "hi!");
    Card card3 = Card.cutpurse;
    int i4 = card3.getCost();
    int i5 = card3.getVictory();
    int i6 = gameBoard2.numEmbargoTokens(card3);
    gameBoard2.opponentDraw((int)(short)10);
    int i9 = gameBoard2.getTotalEmbargoTokens();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.cutpurse + "'", card3.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test099"); }

    GameBoard gameBoard6 = new GameBoard(0, "hi!");
    Card card7 = Card.ambassador;
    gameBoard6.returnCard(card7);
    Card card9 = Card.cutpurse;
    int i10 = card9.getCost();
    boolean b11 = gameBoard6.hasCardsAvailable(card9);
    Player player12 = new Player("hi!", (int)'a', gameBoard6);
    java.util.List<Card> list_card13 = player12.getPlayedCards();
    Card card14 = Card.adventurer;
    GameBoard gameBoard17 = new GameBoard(0, "hi!");
    Card card18 = Card.ambassador;
    gameBoard17.returnCard(card18);
    boolean b20 = gameBoard17.gameDone();
    Card card21 = Card.estate;
    gameBoard17.returnCard(card21);
    gameBoard17.opponentDraw((int)'4');
    player12.buyCard(card14, gameBoard17);
    GameBoard gameBoard28 = new GameBoard(0, "hi!");
    Card card29 = Card.adventurer;
    gameBoard28.trashCard(card29);
    java.util.List<Player> list_player31 = gameBoard28.getPlayers();
    int i32 = gameBoard28.play();
    Card card33 = Card.salvager;
    int i34 = gameBoard28.numCardsAvailable(card33);
    int i35 = gameBoard17.numCardsAvailable(card33);
    Player player36 = new Player("", 97, gameBoard17);
    gameBoard17.opponentDraw((int)(short)1);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.ambassador + "'", card7.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.cutpurse + "'", card9.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.adventurer + "'", card14.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.ambassador + "'", card18.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.estate + "'", card21.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.adventurer + "'", card29.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.salvager + "'", card33.equals(Card.salvager));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 10);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test100"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    Card card12 = Card.adventurer;
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    gameBoard15.opponentDraw((int)'4');
    player10.buyCard(card12, gameBoard15);
    java.util.List<Card> list_card24 = player10.getPlayedCards();
    int i25 = player10.getBuys();
    GameBoard gameBoard28 = new GameBoard(0, "hi!");
    Card card29 = Card.ambassador;
    gameBoard28.returnCard(card29);
    boolean b31 = gameBoard28.gameDone();
    java.util.List<Card> list_card32 = gameBoard28.getActiveSupplyPiles();
    GameBoard gameBoard35 = new GameBoard(0, "hi!");
    Card card36 = Card.ambassador;
    gameBoard35.returnCard(card36);
    boolean b38 = gameBoard28.hasCardsAvailable(card36);
    player10.Discard(card36);
    int i40 = card36.getCost();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.ambassador + "'", card29.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.ambassador + "'", card36.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 3);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test101"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.lang.String str14 = player10.getName();
    java.util.List<Card> list_card15 = player10.getPlayedCards();
    GameBoard gameBoard18 = new GameBoard(0, "hi!");
    Card card19 = Card.ambassador;
    gameBoard18.returnCard(card19);
    boolean b21 = gameBoard18.gameDone();
    Card card22 = Card.cutpurse;
    int i23 = gameBoard18.numCardsAvailable(card22);
    GameBoard gameBoard26 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card27 = gameBoard26.getActiveSupplyPiles();
    int i28 = gameBoard26.getTotalEmbargoTokens();
    Card card29 = Card.council_room;
    int i30 = card29.getVictory();
    int i31 = gameBoard26.numCardsAvailable(card29);
    Card card32 = null;
    Card card33 = Card.embargo;
    card33.setVictory(0);
    Card card36 = Card.gold;
    GameBoard gameBoard39 = new GameBoard((int)(byte)100, (-1));
    Card card40 = Card.gardens;
    int i41 = gameBoard39.numEmbargoTokens(card40);
    GameBoard gameBoard44 = new GameBoard(0, "hi!");
    Card card45 = Card.ambassador;
    gameBoard44.returnCard(card45);
    java.util.List<Card> list_card47 = gameBoard44.getActiveSupplyPiles();
    java.util.List<Card> list_card50 = gameBoard44.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card52 = gameBoard44.kingdomCards((int)(short)100);
    Card card53 = Card.cutpurse;
    int i54 = card53.getCost();
    int i55 = gameBoard44.numEmbargoTokens(card53);
    Card card56 = Card.estate;
    Card card57 = Card.estate;
    card57.setVictory((int)(short)-1);
    GameBoard gameBoard62 = new GameBoard(0, "hi!");
    Card card63 = Card.ambassador;
    gameBoard62.returnCard(card63);
    boolean b65 = gameBoard62.gameDone();
    java.util.List<Card> list_card66 = gameBoard62.getActiveSupplyPiles();
    GameBoard gameBoard69 = new GameBoard(0, "hi!");
    Card card70 = Card.ambassador;
    gameBoard69.returnCard(card70);
    int i72 = gameBoard62.numCardsAvailable(card70);
    GameBoard gameBoard75 = new GameBoard(0, "hi!");
    Card card76 = Card.ambassador;
    gameBoard75.returnCard(card76);
    java.util.List<Card> list_card78 = gameBoard18.kingdomCards(card29, card32, card33, card36, card40, card53, card56, card57, card70, card76);
    player10.Discard(card40);
    player10.initPlayerTurn();
    Card card81 = player10.drawCard();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.ambassador + "'", card19.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.cutpurse + "'", card22.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.council_room + "'", card29.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 10);
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.embargo + "'", card33.equals(Card.embargo));
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.gold + "'", card36.equals(Card.gold));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.gardens + "'", card40.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.ambassador + "'", card45.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    org.junit.Assert.assertTrue("'" + card53 + "' != '" + Card.cutpurse + "'", card53.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    org.junit.Assert.assertTrue("'" + card56 + "' != '" + Card.estate + "'", card56.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card57 + "' != '" + Card.estate + "'", card57.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card63 + "' != '" + Card.ambassador + "'", card63.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card66);
    org.junit.Assert.assertTrue("'" + card70 + "' != '" + Card.ambassador + "'", card70.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    org.junit.Assert.assertTrue("'" + card76 + "' != '" + Card.ambassador + "'", card76.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card81);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test102"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.util.List<Card> list_card14 = player10.getPlayedCards();
    GameBoard gameBoard19 = new GameBoard(0, "hi!");
    Card card20 = Card.ambassador;
    gameBoard19.returnCard(card20);
    Card card22 = Card.cutpurse;
    int i23 = card22.getCost();
    boolean b24 = gameBoard19.hasCardsAvailable(card22);
    Player player25 = new Player("hi!", (int)'a', gameBoard19);
    Card card26 = player25.drawCard();
    player25.addActions((int)(short)1);
    java.lang.String str29 = player25.getName();
    player25.discardHandAndInPlay();
    int i31 = player25.getTotalVictoryPoints();
    GameBoard gameBoard34 = new GameBoard(0, "hi!");
    Card card35 = Card.ambassador;
    gameBoard34.returnCard(card35);
    boolean b37 = gameBoard34.gameDone();
    Card card38 = Card.estate;
    gameBoard34.returnCard(card38);
    gameBoard34.opponentDraw((int)'4');
    java.util.List<Card> list_card42 = gameBoard34.getActiveSupplyPiles();
    GameBoard gameBoard45 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card46 = gameBoard45.getActiveSupplyPiles();
    boolean b47 = gameBoard45.gameDone();
    java.util.List<Card> list_card48 = gameBoard45.getTrash();
    GameBoard gameBoard52 = new GameBoard(0, "hi!");
    Card card53 = Card.ambassador;
    gameBoard52.returnCard(card53);
    java.util.List<Card> list_card55 = gameBoard52.getActiveSupplyPiles();
    java.util.List<Card> list_card58 = gameBoard52.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card60 = gameBoard52.kingdomCards((int)(short)100);
    Card card61 = Card.ambassador;
    int i62 = card61.getCost();
    int i63 = gameBoard52.numEmbargoTokens(card61);
    gameBoard45.opponentGainCard((int)(byte)0, card61);
    int i65 = gameBoard34.numEmbargoTokens(card61);
    boolean b66 = player25.hasCard(card61);
    boolean b67 = player10.hasCard(card61);
    int i68 = card61.getCost();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.ambassador + "'", card20.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.cutpurse + "'", card22.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "hi!"+ "'", str29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == (-3));
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.ambassador + "'", card35.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.estate + "'", card38.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    org.junit.Assert.assertTrue("'" + card53 + "' != '" + Card.ambassador + "'", card53.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    org.junit.Assert.assertTrue("'" + card61 + "' != '" + Card.ambassador + "'", card61.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 3);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test103"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    GameBoard gameBoard14 = new GameBoard((int)(byte)100, (-1));
    Card card15 = Card.gardens;
    int i16 = gameBoard14.numEmbargoTokens(card15);
    java.util.List<Card> list_card17 = gameBoard14.getTrash();
    GameBoard gameBoard20 = new GameBoard(0, "hi!");
    Card card21 = Card.ambassador;
    gameBoard20.returnCard(card21);
    boolean b23 = gameBoard20.gameDone();
    java.util.List<Card> list_card24 = gameBoard20.getActiveSupplyPiles();
    GameBoard gameBoard27 = new GameBoard(0, "hi!");
    Card card28 = Card.ambassador;
    gameBoard27.returnCard(card28);
    boolean b30 = gameBoard20.hasCardsAvailable(card28);
    gameBoard14.trashCard(card28);
    Card card32 = player10.getRandomBuyCard(gameBoard14);
    int i33 = player10.getBuys();
    boolean b34 = player10.hasBuys();
    player10.countTreasure();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.gardens + "'", card15.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.ambassador + "'", card21.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.ambassador + "'", card28.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test104"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card5 = gameBoard4.getActiveSupplyPiles();
    boolean b6 = gameBoard4.gameDone();
    java.util.List<Card> list_card7 = gameBoard4.getTrash();
    GameBoard gameBoard11 = new GameBoard(0, "hi!");
    Card card12 = Card.ambassador;
    gameBoard11.returnCard(card12);
    java.util.List<Card> list_card14 = gameBoard11.getActiveSupplyPiles();
    java.util.List<Card> list_card17 = gameBoard11.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card19 = gameBoard11.kingdomCards((int)(short)100);
    Card card20 = Card.ambassador;
    int i21 = card20.getCost();
    int i22 = gameBoard11.numEmbargoTokens(card20);
    gameBoard4.opponentGainCard((int)(byte)0, card20);
    Player player24 = new Player("", 0, gameBoard4);
    GameBoard gameBoard27 = new GameBoard(0, "hi!");
    Card card28 = Card.ambassador;
    gameBoard27.returnCard(card28);
    java.util.List<Card> list_card30 = gameBoard27.getActiveSupplyPiles();
    java.util.List<Card> list_card33 = gameBoard27.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card35 = gameBoard27.kingdomCards((int)(short)100);
    Card card36 = Card.ambassador;
    int i37 = card36.getCost();
    int i38 = gameBoard27.numEmbargoTokens(card36);
    int i39 = gameBoard27.play();
    boolean b40 = gameBoard27.gameDone();
    Card card42 = Card.smithy;
    gameBoard27.opponentGainCard((int)(short)100, card42);
    gameBoard4.takeCard(card42);
    java.util.List<java.lang.String> list_str45 = card42.getTypes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.ambassador + "'", card12.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.ambassador + "'", card20.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.ambassador + "'", card28.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.ambassador + "'", card36.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.smithy + "'", card42.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str45);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test105"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = gameBoard4.getTrash();
    java.util.List<Card> list_card13 = gameBoard4.kingdomCards((int)' ');
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test106"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    boolean b7 = gameBoard4.gameDone();
    java.util.List<Card> list_card8 = gameBoard4.getTrash();
    Card card9 = Card.ambassador;
    int i10 = card9.getCost();
    gameBoard4.returnCard(card9);
    Player player12 = new Player("hi!", (-1), gameBoard4);
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    GameBoard gameBoard25 = new GameBoard(0, "hi!");
    Card card26 = Card.ambassador;
    gameBoard25.returnCard(card26);
    Card card28 = Card.cutpurse;
    int i29 = card28.getCost();
    boolean b30 = gameBoard25.hasCardsAvailable(card28);
    Player player31 = new Player("hi!", (int)'a', gameBoard25);
    Card card32 = Card.feast;
    int i33 = card32.getCost();
    GameBoard gameBoard36 = new GameBoard(3, "hi!");
    player31.buyCard(card32, gameBoard36);
    player12.gainCard(card19, gameBoard36);
    java.util.List<Card> list_card40 = gameBoard36.getPurchaseableCards((int)(short)10);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.ambassador + "'", card9.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.ambassador + "'", card26.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.cutpurse + "'", card28.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.feast + "'", card32.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test107"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    java.util.List<Card> list_card5 = gameBoard2.getActiveSupplyPiles();
    java.util.List<Card> list_card6 = gameBoard2.getTrash();
    java.util.List<Card> list_card8 = gameBoard2.kingdomCards(100);
    GameBoard gameBoard13 = new GameBoard(0, "hi!");
    Card card14 = Card.ambassador;
    gameBoard13.returnCard(card14);
    Card card16 = Card.cutpurse;
    int i17 = card16.getCost();
    boolean b18 = gameBoard13.hasCardsAvailable(card16);
    Player player19 = new Player("hi!", (int)'a', gameBoard13);
    Card card20 = player19.drawCard();
    player19.addActions((int)(short)1);
    boolean b23 = player19.hasActions();
    GameBoard gameBoard26 = new GameBoard(0, "hi!");
    Card card27 = Card.ambassador;
    gameBoard26.returnCard(card27);
    java.util.List<Card> list_card29 = gameBoard26.getActiveSupplyPiles();
    java.util.List<Card> list_card30 = gameBoard26.getTrash();
    java.util.List<Card> list_card32 = gameBoard26.kingdomCards(100);
    Card card33 = player19.getRandomBuyCard(gameBoard26);
    java.util.List<Card> list_card34 = player19.getHand();
    Card card35 = Card.baron;
    int i36 = card35.getTreasure();
    player19.Discard(card35);
    int i38 = gameBoard2.numCardsAvailable(card35);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.ambassador + "'", card14.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.cutpurse + "'", card16.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.copper + "'", card20.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.ambassador + "'", card27.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.copper + "'", card33.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.baron + "'", card35.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test108"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    int i11 = player10.getCoins();
    java.util.List<java.lang.Integer> list_i12 = player10.getActionCardIndices();
    player10.initPlayerTurn();
    java.util.List<Card> list_card14 = player10.getHand();
    boolean b15 = player10.hasBuys();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test109"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card3 = gameBoard2.getActiveSupplyPiles();
    java.util.List<Card> list_card6 = gameBoard2.getPurchaseableCards((-1), "hi!");
    java.util.List<Card> list_card8 = gameBoard2.kingdomCards((int)' ');
    GameBoard gameBoard13 = new GameBoard(0, "hi!");
    Card card14 = Card.ambassador;
    gameBoard13.returnCard(card14);
    Card card16 = Card.cutpurse;
    int i17 = card16.getCost();
    boolean b18 = gameBoard13.hasCardsAvailable(card16);
    Player player19 = new Player("hi!", (int)'a', gameBoard13);
    java.util.List<Card> list_card20 = player19.getPlayedCards();
    GameBoard gameBoard23 = new GameBoard((int)(byte)100, (-1));
    Card card24 = Card.gardens;
    int i25 = gameBoard23.numEmbargoTokens(card24);
    java.util.List<Card> list_card26 = gameBoard23.getTrash();
    GameBoard gameBoard29 = new GameBoard(0, "hi!");
    Card card30 = Card.ambassador;
    gameBoard29.returnCard(card30);
    boolean b32 = gameBoard29.gameDone();
    java.util.List<Card> list_card33 = gameBoard29.getActiveSupplyPiles();
    GameBoard gameBoard36 = new GameBoard(0, "hi!");
    Card card37 = Card.ambassador;
    gameBoard36.returnCard(card37);
    boolean b39 = gameBoard29.hasCardsAvailable(card37);
    gameBoard23.trashCard(card37);
    Card card41 = player19.getRandomBuyCard(gameBoard23);
    int i42 = player19.getBuys();
    boolean b43 = player19.hasBuys();
    int i44 = player19.getNum();
    Card card45 = player19.drawCard();
    boolean b46 = gameBoard2.hasCardsAvailable(card45);
    int i47 = card45.getVictory();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.ambassador + "'", card14.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.cutpurse + "'", card16.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.gardens + "'", card24.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.ambassador + "'", card30.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.ambassador + "'", card37.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 97);
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.copper + "'", card45.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test110"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    int i12 = player10.getNum();
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    java.util.List<Card> list_card18 = gameBoard15.getActiveSupplyPiles();
    java.util.List<Card> list_card21 = gameBoard15.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card23 = gameBoard15.kingdomCards((int)(short)100);
    Card card24 = Card.cutpurse;
    int i25 = card24.getCost();
    int i26 = gameBoard15.numEmbargoTokens(card24);
    GameBoard gameBoard29 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card30 = gameBoard29.getActiveSupplyPiles();
    player10.gainCard(card24, gameBoard29);
    int i32 = player10.getBuys();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 97);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.cutpurse + "'", card24.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test111"); }

    GameBoard gameBoard6 = new GameBoard(0, "hi!");
    Card card7 = Card.ambassador;
    gameBoard6.returnCard(card7);
    Card card9 = Card.cutpurse;
    int i10 = card9.getCost();
    boolean b11 = gameBoard6.hasCardsAvailable(card9);
    Player player12 = new Player("hi!", (int)'a', gameBoard6);
    Card card13 = player12.drawCard();
    player12.addActions((int)(short)1);
    java.lang.String str16 = player12.getName();
    player12.discardHandAndInPlay();
    player12.initPlayerTurn();
    Card card19 = Card.duchy;
    GameBoard gameBoard22 = new GameBoard(0, "hi!");
    Card card23 = Card.adventurer;
    gameBoard22.trashCard(card23);
    player12.gainCardToHand(card19, gameBoard22);
    Player player26 = new Player("", (int)(short)10, gameBoard22);
    java.lang.String str27 = player26.getName();
    java.util.List<Card> list_card28 = player26.getDiscard();
    java.util.List<Card> list_card29 = player26.getPlayedCards();
    java.util.LinkedList<Card> linkedlist_card30 = player26.getDeck();
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.ambassador + "'", card7.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.cutpurse + "'", card9.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.copper + "'", card13.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "hi!"+ "'", str16.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.duchy + "'", card19.equals(Card.duchy));
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.adventurer + "'", card23.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card30);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test112"); }

    GameBoard gameBoard4 = new GameBoard((int)(byte)100, (-1));
    java.util.List<Card> list_card7 = gameBoard4.getPurchaseableCards((-1), "hi!");
    GameBoard gameBoard12 = new GameBoard(0, "hi!");
    Card card13 = Card.ambassador;
    gameBoard12.returnCard(card13);
    Card card15 = Card.cutpurse;
    int i16 = card15.getCost();
    boolean b17 = gameBoard12.hasCardsAvailable(card15);
    Player player18 = new Player("hi!", (int)'a', gameBoard12);
    Card card19 = player18.drawCard();
    player18.addActions((int)(short)1);
    boolean b22 = player18.hasActions();
    GameBoard gameBoard25 = new GameBoard(0, "hi!");
    Card card26 = Card.ambassador;
    gameBoard25.returnCard(card26);
    java.util.List<Card> list_card28 = gameBoard25.getActiveSupplyPiles();
    java.util.List<Card> list_card29 = gameBoard25.getTrash();
    java.util.List<Card> list_card31 = gameBoard25.kingdomCards(100);
    Card card32 = player18.getRandomBuyCard(gameBoard25);
    GameBoard gameBoard35 = new GameBoard(0, "hi!");
    Card card36 = Card.ambassador;
    gameBoard35.returnCard(card36);
    java.util.List<Card> list_card38 = gameBoard35.getActiveSupplyPiles();
    java.util.List<Card> list_card41 = gameBoard35.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card43 = gameBoard35.kingdomCards((int)(short)100);
    Card card44 = player18.getRandomBuyCard(gameBoard35);
    gameBoard4.trashCard(card44);
    Card card47 = Card.cutpurse;
    int i48 = card47.getCost();
    gameBoard4.opponentGainCard((int)(byte)-1, card47);
    Player player50 = new Player("hi!", (int)(byte)1, gameBoard4);
    player50.countTreasure();
    Card card52 = Card.remodel;
    GameBoard gameBoard55 = new GameBoard(0, "hi!");
    Card card56 = Card.ambassador;
    gameBoard55.returnCard(card56);
    boolean b58 = gameBoard55.gameDone();
    int i59 = gameBoard55.play();
    Card card60 = Card.feast;
    boolean b61 = gameBoard55.hasCardsAvailable(card60);
    player50.gainCardToHand(card52, gameBoard55);
    java.util.List<java.lang.String> list_str63 = card52.getTypes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.ambassador + "'", card13.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.cutpurse + "'", card15.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.copper + "'", card19.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.ambassador + "'", card26.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.copper + "'", card32.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.ambassador + "'", card36.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.copper + "'", card44.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.cutpurse + "'", card47.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 4);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.remodel + "'", card52.equals(Card.remodel));
    org.junit.Assert.assertTrue("'" + card56 + "' != '" + Card.ambassador + "'", card56.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 1);
    org.junit.Assert.assertTrue("'" + card60 + "' != '" + Card.feast + "'", card60.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str63);

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test113"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.lang.String str14 = player10.getName();
    player10.discardHandAndInPlay();
    player10.initPlayerTurn();
    java.util.List<java.lang.Integer> list_i17 = player10.getActionCardIndices();
    player10.countTreasure();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i17);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test114"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = Card.feast;
    int i12 = card11.getCost();
    GameBoard gameBoard15 = new GameBoard(3, "hi!");
    player10.buyCard(card11, gameBoard15);
    java.util.List<Card> list_card17 = player10.getHand();
    java.util.LinkedList<Card> linkedlist_card18 = player10.getDeck();
    boolean b19 = player10.hasBuys();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.feast + "'", card11.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test115"); }

    GameBoard gameBoard2 = new GameBoard((int)(byte)-1, "hi!");
    java.util.List<Card> list_card4 = gameBoard2.kingdomCards(4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card4);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test116"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    GameBoard gameBoard14 = new GameBoard((int)(byte)100, (-1));
    Card card15 = Card.gardens;
    int i16 = gameBoard14.numEmbargoTokens(card15);
    java.util.List<Card> list_card17 = gameBoard14.getTrash();
    GameBoard gameBoard20 = new GameBoard(0, "hi!");
    Card card21 = Card.ambassador;
    gameBoard20.returnCard(card21);
    boolean b23 = gameBoard20.gameDone();
    java.util.List<Card> list_card24 = gameBoard20.getActiveSupplyPiles();
    GameBoard gameBoard27 = new GameBoard(0, "hi!");
    Card card28 = Card.ambassador;
    gameBoard27.returnCard(card28);
    boolean b30 = gameBoard20.hasCardsAvailable(card28);
    gameBoard14.trashCard(card28);
    Card card32 = player10.getRandomBuyCard(gameBoard14);
    int i33 = player10.getBuys();
    boolean b34 = player10.hasBuys();
    int i35 = player10.getTotalVictoryPoints();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.gardens + "'", card15.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.ambassador + "'", card21.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.ambassador + "'", card28.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == (-3));

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test117"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.lang.String str14 = player10.getName();
    player10.discardHandAndInPlay();
    Card card16 = Card.salvager;
    GameBoard gameBoard21 = new GameBoard(0, "hi!");
    Card card22 = Card.ambassador;
    gameBoard21.returnCard(card22);
    Card card24 = Card.cutpurse;
    int i25 = card24.getCost();
    boolean b26 = gameBoard21.hasCardsAvailable(card24);
    Player player27 = new Player("hi!", (int)'a', gameBoard21);
    Card card28 = Card.feast;
    int i29 = card28.getCost();
    GameBoard gameBoard32 = new GameBoard(3, "hi!");
    player27.buyCard(card28, gameBoard32);
    player10.buyCard(card16, gameBoard32);
    java.lang.String str35 = player10.getName();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.salvager + "'", card16.equals(Card.salvager));
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.ambassador + "'", card22.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.cutpurse + "'", card24.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.feast + "'", card28.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "hi!"+ "'", str35.equals("hi!"));

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test118"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    boolean b7 = gameBoard4.gameDone();
    java.util.List<Card> list_card8 = gameBoard4.getTrash();
    Card card9 = Card.ambassador;
    int i10 = card9.getCost();
    gameBoard4.returnCard(card9);
    Player player12 = new Player("hi!", (-1), gameBoard4);
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    GameBoard gameBoard25 = new GameBoard(0, "hi!");
    Card card26 = Card.ambassador;
    gameBoard25.returnCard(card26);
    Card card28 = Card.cutpurse;
    int i29 = card28.getCost();
    boolean b30 = gameBoard25.hasCardsAvailable(card28);
    Player player31 = new Player("hi!", (int)'a', gameBoard25);
    Card card32 = Card.feast;
    int i33 = card32.getCost();
    GameBoard gameBoard36 = new GameBoard(3, "hi!");
    player31.buyCard(card32, gameBoard36);
    player12.gainCard(card19, gameBoard36);
    boolean b39 = player12.hasBuys();
    int i40 = player12.getCoins();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.ambassador + "'", card9.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.ambassador + "'", card26.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.cutpurse + "'", card28.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.feast + "'", card32.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test119"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = Card.feast;
    int i12 = card11.getCost();
    GameBoard gameBoard15 = new GameBoard(3, "hi!");
    player10.buyCard(card11, gameBoard15);
    java.lang.String str17 = player10.getName();
    boolean b18 = player10.hasActions();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.feast + "'", card11.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "hi!"+ "'", str17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test120"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card3 = gameBoard2.getActiveSupplyPiles();
    int i4 = gameBoard2.getTotalEmbargoTokens();
    GameBoard gameBoard7 = new GameBoard(0, "hi!");
    Card card8 = Card.ambassador;
    gameBoard7.returnCard(card8);
    boolean b10 = gameBoard7.gameDone();
    Card card11 = Card.cutpurse;
    int i12 = gameBoard7.numCardsAvailable(card11);
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card16 = gameBoard15.getActiveSupplyPiles();
    int i17 = gameBoard15.getTotalEmbargoTokens();
    Card card18 = Card.council_room;
    int i19 = card18.getVictory();
    int i20 = gameBoard15.numCardsAvailable(card18);
    Card card21 = null;
    Card card22 = Card.embargo;
    card22.setVictory(0);
    Card card25 = Card.gold;
    GameBoard gameBoard28 = new GameBoard((int)(byte)100, (-1));
    Card card29 = Card.gardens;
    int i30 = gameBoard28.numEmbargoTokens(card29);
    GameBoard gameBoard33 = new GameBoard(0, "hi!");
    Card card34 = Card.ambassador;
    gameBoard33.returnCard(card34);
    java.util.List<Card> list_card36 = gameBoard33.getActiveSupplyPiles();
    java.util.List<Card> list_card39 = gameBoard33.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card41 = gameBoard33.kingdomCards((int)(short)100);
    Card card42 = Card.cutpurse;
    int i43 = card42.getCost();
    int i44 = gameBoard33.numEmbargoTokens(card42);
    Card card45 = Card.estate;
    Card card46 = Card.estate;
    card46.setVictory((int)(short)-1);
    GameBoard gameBoard51 = new GameBoard(0, "hi!");
    Card card52 = Card.ambassador;
    gameBoard51.returnCard(card52);
    boolean b54 = gameBoard51.gameDone();
    java.util.List<Card> list_card55 = gameBoard51.getActiveSupplyPiles();
    GameBoard gameBoard58 = new GameBoard(0, "hi!");
    Card card59 = Card.ambassador;
    gameBoard58.returnCard(card59);
    int i61 = gameBoard51.numCardsAvailable(card59);
    GameBoard gameBoard64 = new GameBoard(0, "hi!");
    Card card65 = Card.ambassador;
    gameBoard64.returnCard(card65);
    java.util.List<Card> list_card67 = gameBoard7.kingdomCards(card18, card21, card22, card25, card29, card42, card45, card46, card59, card65);
    gameBoard2.takeCard(card59);
    Card card69 = Card.ambassador;
    gameBoard2.trashCard(card69);
    java.util.List<Card> list_card71 = gameBoard2.getTrash();
    java.util.List<Player> list_player72 = gameBoard2.getPlayers();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    org.junit.Assert.assertTrue("'" + card8 + "' != '" + Card.ambassador + "'", card8.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.cutpurse + "'", card11.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.council_room + "'", card18.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 10);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.embargo + "'", card22.equals(Card.embargo));
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.gold + "'", card25.equals(Card.gold));
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.gardens + "'", card29.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.ambassador + "'", card34.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.cutpurse + "'", card42.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.estate + "'", card45.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.estate + "'", card46.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.ambassador + "'", card52.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card55);
    org.junit.Assert.assertTrue("'" + card59 + "' != '" + Card.ambassador + "'", card59.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    org.junit.Assert.assertTrue("'" + card65 + "' != '" + Card.ambassador + "'", card65.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    org.junit.Assert.assertTrue("'" + card69 + "' != '" + Card.ambassador + "'", card69.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player72);

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test121"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    GameBoard gameBoard14 = new GameBoard(0, "hi!");
    Card card15 = Card.ambassador;
    gameBoard14.returnCard(card15);
    boolean b17 = gameBoard14.gameDone();
    Card card18 = Card.cutpurse;
    int i19 = gameBoard14.numCardsAvailable(card18);
    GameBoard gameBoard22 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card23 = gameBoard22.getActiveSupplyPiles();
    int i24 = gameBoard22.getTotalEmbargoTokens();
    Card card25 = Card.council_room;
    int i26 = card25.getVictory();
    int i27 = gameBoard22.numCardsAvailable(card25);
    Card card28 = null;
    Card card29 = Card.embargo;
    card29.setVictory(0);
    Card card32 = Card.gold;
    GameBoard gameBoard35 = new GameBoard((int)(byte)100, (-1));
    Card card36 = Card.gardens;
    int i37 = gameBoard35.numEmbargoTokens(card36);
    GameBoard gameBoard40 = new GameBoard(0, "hi!");
    Card card41 = Card.ambassador;
    gameBoard40.returnCard(card41);
    java.util.List<Card> list_card43 = gameBoard40.getActiveSupplyPiles();
    java.util.List<Card> list_card46 = gameBoard40.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card48 = gameBoard40.kingdomCards((int)(short)100);
    Card card49 = Card.cutpurse;
    int i50 = card49.getCost();
    int i51 = gameBoard40.numEmbargoTokens(card49);
    Card card52 = Card.estate;
    Card card53 = Card.estate;
    card53.setVictory((int)(short)-1);
    GameBoard gameBoard58 = new GameBoard(0, "hi!");
    Card card59 = Card.ambassador;
    gameBoard58.returnCard(card59);
    boolean b61 = gameBoard58.gameDone();
    java.util.List<Card> list_card62 = gameBoard58.getActiveSupplyPiles();
    GameBoard gameBoard65 = new GameBoard(0, "hi!");
    Card card66 = Card.ambassador;
    gameBoard65.returnCard(card66);
    int i68 = gameBoard58.numCardsAvailable(card66);
    GameBoard gameBoard71 = new GameBoard(0, "hi!");
    Card card72 = Card.ambassador;
    gameBoard71.returnCard(card72);
    java.util.List<Card> list_card74 = gameBoard14.kingdomCards(card25, card28, card29, card32, card36, card49, card52, card53, card66, card72);
    GameBoard gameBoard77 = new GameBoard(0, "hi!");
    Card card78 = Card.ambassador;
    gameBoard77.returnCard(card78);
    boolean b80 = gameBoard77.gameDone();
    Card card81 = Card.estate;
    gameBoard77.returnCard(card81);
    gameBoard77.opponentDraw((int)'4');
    int i85 = gameBoard77.play();
    Card card86 = Card.smithy;
    card86.setVictory((int)(byte)-1);
    int i89 = card86.getTreasure();
    int i90 = card86.getCost();
    int i91 = gameBoard77.numEmbargoTokens(card86);
    player10.buyCard(card25, gameBoard77);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.ambassador + "'", card15.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.cutpurse + "'", card18.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.council_room + "'", card25.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 10);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.embargo + "'", card29.equals(Card.embargo));
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.gold + "'", card32.equals(Card.gold));
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.gardens + "'", card36.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.ambassador + "'", card41.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    org.junit.Assert.assertTrue("'" + card49 + "' != '" + Card.cutpurse + "'", card49.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.estate + "'", card52.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card53 + "' != '" + Card.estate + "'", card53.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card59 + "' != '" + Card.ambassador + "'", card59.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);
    org.junit.Assert.assertTrue("'" + card66 + "' != '" + Card.ambassador + "'", card66.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    org.junit.Assert.assertTrue("'" + card72 + "' != '" + Card.ambassador + "'", card72.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card74);
    org.junit.Assert.assertTrue("'" + card78 + "' != '" + Card.ambassador + "'", card78.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    org.junit.Assert.assertTrue("'" + card81 + "' != '" + Card.estate + "'", card81.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 1);
    org.junit.Assert.assertTrue("'" + card86 + "' != '" + Card.smithy + "'", card86.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i90 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test122"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card3 = gameBoard2.getActiveSupplyPiles();
    java.util.List<Card> list_card6 = gameBoard2.getPurchaseableCards((-1), "hi!");
    java.util.List<Card> list_card8 = gameBoard2.kingdomCards((int)' ');
    GameBoard gameBoard13 = new GameBoard(0, "hi!");
    Card card14 = Card.ambassador;
    gameBoard13.returnCard(card14);
    Card card16 = Card.cutpurse;
    int i17 = card16.getCost();
    boolean b18 = gameBoard13.hasCardsAvailable(card16);
    Player player19 = new Player("hi!", (int)'a', gameBoard13);
    java.util.List<Card> list_card20 = player19.getPlayedCards();
    GameBoard gameBoard23 = new GameBoard((int)(byte)100, (-1));
    Card card24 = Card.gardens;
    int i25 = gameBoard23.numEmbargoTokens(card24);
    java.util.List<Card> list_card26 = gameBoard23.getTrash();
    GameBoard gameBoard29 = new GameBoard(0, "hi!");
    Card card30 = Card.ambassador;
    gameBoard29.returnCard(card30);
    boolean b32 = gameBoard29.gameDone();
    java.util.List<Card> list_card33 = gameBoard29.getActiveSupplyPiles();
    GameBoard gameBoard36 = new GameBoard(0, "hi!");
    Card card37 = Card.ambassador;
    gameBoard36.returnCard(card37);
    boolean b39 = gameBoard29.hasCardsAvailable(card37);
    gameBoard23.trashCard(card37);
    Card card41 = player19.getRandomBuyCard(gameBoard23);
    int i42 = player19.getBuys();
    boolean b43 = player19.hasBuys();
    int i44 = player19.getNum();
    Card card45 = player19.drawCard();
    boolean b46 = gameBoard2.hasCardsAvailable(card45);
    java.util.List<Card> list_card47 = gameBoard2.getActiveSupplyPiles();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.ambassador + "'", card14.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.cutpurse + "'", card16.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.gardens + "'", card24.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.ambassador + "'", card30.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.ambassador + "'", card37.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 97);
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.copper + "'", card45.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test123"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    boolean b5 = gameBoard2.gameDone();
    Card card6 = Card.estate;
    gameBoard2.returnCard(card6);
    gameBoard2.opponentDraw((int)'4');
    java.util.List<Card> list_card11 = gameBoard2.getPurchaseableCards((-1));
    java.util.List<Player> list_player12 = gameBoard2.getPlayers();
    java.util.List<Card> list_card14 = gameBoard2.kingdomCards(4);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.estate + "'", card6.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test124"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    int i12 = player10.getNum();
    int i13 = player10.getCoins();
    boolean b14 = player10.hasBuys();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test125"); }

    GameBoard gameBoard2 = new GameBoard(1, "hi!");
    java.util.List<Card> list_card4 = gameBoard2.kingdomCards((-3));
    GameBoard gameBoard7 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card8 = gameBoard7.getActiveSupplyPiles();
    int i9 = gameBoard7.getTotalEmbargoTokens();
    GameBoard gameBoard12 = new GameBoard(0, "hi!");
    Card card13 = Card.ambassador;
    gameBoard12.returnCard(card13);
    boolean b15 = gameBoard12.gameDone();
    Card card16 = Card.cutpurse;
    int i17 = gameBoard12.numCardsAvailable(card16);
    GameBoard gameBoard20 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card21 = gameBoard20.getActiveSupplyPiles();
    int i22 = gameBoard20.getTotalEmbargoTokens();
    Card card23 = Card.council_room;
    int i24 = card23.getVictory();
    int i25 = gameBoard20.numCardsAvailable(card23);
    Card card26 = null;
    Card card27 = Card.embargo;
    card27.setVictory(0);
    Card card30 = Card.gold;
    GameBoard gameBoard33 = new GameBoard((int)(byte)100, (-1));
    Card card34 = Card.gardens;
    int i35 = gameBoard33.numEmbargoTokens(card34);
    GameBoard gameBoard38 = new GameBoard(0, "hi!");
    Card card39 = Card.ambassador;
    gameBoard38.returnCard(card39);
    java.util.List<Card> list_card41 = gameBoard38.getActiveSupplyPiles();
    java.util.List<Card> list_card44 = gameBoard38.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card46 = gameBoard38.kingdomCards((int)(short)100);
    Card card47 = Card.cutpurse;
    int i48 = card47.getCost();
    int i49 = gameBoard38.numEmbargoTokens(card47);
    Card card50 = Card.estate;
    Card card51 = Card.estate;
    card51.setVictory((int)(short)-1);
    GameBoard gameBoard56 = new GameBoard(0, "hi!");
    Card card57 = Card.ambassador;
    gameBoard56.returnCard(card57);
    boolean b59 = gameBoard56.gameDone();
    java.util.List<Card> list_card60 = gameBoard56.getActiveSupplyPiles();
    GameBoard gameBoard63 = new GameBoard(0, "hi!");
    Card card64 = Card.ambassador;
    gameBoard63.returnCard(card64);
    int i66 = gameBoard56.numCardsAvailable(card64);
    GameBoard gameBoard69 = new GameBoard(0, "hi!");
    Card card70 = Card.ambassador;
    gameBoard69.returnCard(card70);
    java.util.List<Card> list_card72 = gameBoard12.kingdomCards(card23, card26, card27, card30, card34, card47, card50, card51, card64, card70);
    gameBoard7.takeCard(card64);
    int i74 = gameBoard2.numCardsAvailable(card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.ambassador + "'", card13.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.cutpurse + "'", card16.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.council_room + "'", card23.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 10);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.embargo + "'", card27.equals(Card.embargo));
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.gold + "'", card30.equals(Card.gold));
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.gardens + "'", card34.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.ambassador + "'", card39.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.cutpurse + "'", card47.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    org.junit.Assert.assertTrue("'" + card50 + "' != '" + Card.estate + "'", card50.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card51 + "' != '" + Card.estate + "'", card51.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card57 + "' != '" + Card.ambassador + "'", card57.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    org.junit.Assert.assertTrue("'" + card64 + "' != '" + Card.ambassador + "'", card64.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    org.junit.Assert.assertTrue("'" + card70 + "' != '" + Card.ambassador + "'", card70.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test126"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.lang.String str14 = player10.getName();
    player10.discardHandAndInPlay();
    player10.initPlayerTurn();
    Card card17 = Card.gardens;
    player10.Discard(card17);
    int i19 = player10.getTotalVictoryPoints();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.gardens + "'", card17.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-2));

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test127"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    int i5 = gameBoard2.play();
    int i6 = gameBoard2.getTotalEmbargoTokens();
    int i7 = gameBoard2.play();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test128"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card3 = gameBoard2.getActiveSupplyPiles();
    int i4 = gameBoard2.getTotalEmbargoTokens();
    java.util.List<Card> list_card6 = gameBoard2.kingdomCards(0);
    java.util.List<Card> list_card7 = gameBoard2.getAllKingdomCards();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test129"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    boolean b5 = gameBoard2.gameDone();
    Card card6 = Card.estate;
    gameBoard2.returnCard(card6);
    gameBoard2.opponentDraw((int)'4');
    java.util.List<Card> list_card11 = gameBoard2.getPurchaseableCards((-1));
    java.util.List<Player> list_player12 = gameBoard2.getPlayers();
    java.util.List<Card> list_card13 = gameBoard2.getTrash();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.estate + "'", card6.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test130"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.lang.String str14 = player10.getName();
    player10.discardHandAndInPlay();
    int i16 = player10.getTotalVictoryPoints();
    GameBoard gameBoard19 = new GameBoard(0, "hi!");
    Card card20 = Card.ambassador;
    gameBoard19.returnCard(card20);
    boolean b22 = gameBoard19.gameDone();
    Card card23 = Card.estate;
    gameBoard19.returnCard(card23);
    gameBoard19.opponentDraw((int)'4');
    java.util.List<Card> list_card27 = gameBoard19.getActiveSupplyPiles();
    GameBoard gameBoard30 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card31 = gameBoard30.getActiveSupplyPiles();
    boolean b32 = gameBoard30.gameDone();
    java.util.List<Card> list_card33 = gameBoard30.getTrash();
    GameBoard gameBoard37 = new GameBoard(0, "hi!");
    Card card38 = Card.ambassador;
    gameBoard37.returnCard(card38);
    java.util.List<Card> list_card40 = gameBoard37.getActiveSupplyPiles();
    java.util.List<Card> list_card43 = gameBoard37.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card45 = gameBoard37.kingdomCards((int)(short)100);
    Card card46 = Card.ambassador;
    int i47 = card46.getCost();
    int i48 = gameBoard37.numEmbargoTokens(card46);
    gameBoard30.opponentGainCard((int)(byte)0, card46);
    int i50 = gameBoard19.numEmbargoTokens(card46);
    boolean b51 = player10.hasCard(card46);
    java.util.List<java.lang.Integer> list_i52 = player10.getActionCardIndices();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-3));
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.ambassador + "'", card20.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.estate + "'", card23.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.ambassador + "'", card38.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.ambassador + "'", card46.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i52);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test131"); }

    GameBoard gameBoard2 = new GameBoard((int)(byte)100, (-1));
    java.util.List<Card> list_card4 = gameBoard2.getPurchaseableCards((int)(short)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card4);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test132"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    java.util.List<Card> list_card5 = gameBoard2.getActiveSupplyPiles();
    java.util.List<Card> list_card8 = gameBoard2.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card10 = gameBoard2.kingdomCards((int)(short)100);
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    Card card18 = Card.cutpurse;
    int i19 = card18.getCost();
    boolean b20 = gameBoard15.hasCardsAvailable(card18);
    Player player21 = new Player("hi!", (int)'a', gameBoard15);
    Card card22 = player21.drawCard();
    player21.addActions((int)(short)1);
    boolean b25 = player21.hasActions();
    int i26 = player21.getTotalVictoryPoints();
    player21.addActions(10);
    player21.addActions(0);
    GameBoard gameBoard33 = new GameBoard(0, "hi!");
    Card card34 = Card.ambassador;
    gameBoard33.returnCard(card34);
    java.util.List<Card> list_card36 = gameBoard33.getActiveSupplyPiles();
    java.util.List<Card> list_card37 = gameBoard33.getTrash();
    java.util.List<Player> list_player38 = gameBoard33.getPlayers();
    GameBoard gameBoard43 = new GameBoard(0, "hi!");
    Card card44 = Card.ambassador;
    gameBoard43.returnCard(card44);
    Card card46 = Card.cutpurse;
    int i47 = card46.getCost();
    boolean b48 = gameBoard43.hasCardsAvailable(card46);
    Player player49 = new Player("hi!", (int)'a', gameBoard43);
    Card card50 = player49.drawCard();
    player49.addActions((int)(short)1);
    boolean b53 = player49.hasActions();
    GameBoard gameBoard56 = new GameBoard(0, "hi!");
    Card card57 = Card.ambassador;
    gameBoard56.returnCard(card57);
    java.util.List<Card> list_card59 = gameBoard56.getActiveSupplyPiles();
    java.util.List<Card> list_card60 = gameBoard56.getTrash();
    java.util.List<Card> list_card62 = gameBoard56.kingdomCards(100);
    Card card63 = player49.getRandomBuyCard(gameBoard56);
    java.util.List<Card> list_card64 = player49.getHand();
    Card card65 = Card.baron;
    int i66 = card65.getTreasure();
    player49.Discard(card65);
    boolean b68 = gameBoard33.hasCardsAvailable(card65);
    Card card69 = Card.smithy;
    card69.setVictory((int)(byte)-1);
    int i72 = card69.getTreasure();
    gameBoard33.returnCard(card69);
    boolean b74 = player21.hasCard(card69);
    int i75 = gameBoard2.numEmbargoTokens(card69);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.cutpurse + "'", card18.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.copper + "'", card22.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == (-3));
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.ambassador + "'", card34.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player38);
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.ambassador + "'", card44.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.cutpurse + "'", card46.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    org.junit.Assert.assertTrue("'" + card50 + "' != '" + Card.copper + "'", card50.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    org.junit.Assert.assertTrue("'" + card57 + "' != '" + Card.ambassador + "'", card57.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);
    org.junit.Assert.assertTrue("'" + card63 + "' != '" + Card.copper + "'", card63.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);
    org.junit.Assert.assertTrue("'" + card65 + "' != '" + Card.baron + "'", card65.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    org.junit.Assert.assertTrue("'" + card69 + "' != '" + Card.smithy + "'", card69.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test133"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    java.util.List<Card> list_card12 = player10.getHand();
    java.util.List<Card> list_card13 = player10.getPlayedCards();
    GameBoard gameBoard16 = new GameBoard(0, "hi!");
    Card card17 = Card.ambassador;
    gameBoard16.returnCard(card17);
    boolean b19 = gameBoard16.gameDone();
    Card card20 = Card.cutpurse;
    int i21 = gameBoard16.numCardsAvailable(card20);
    GameBoard gameBoard24 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card25 = gameBoard24.getActiveSupplyPiles();
    int i26 = gameBoard24.getTotalEmbargoTokens();
    Card card27 = Card.council_room;
    int i28 = card27.getVictory();
    int i29 = gameBoard24.numCardsAvailable(card27);
    Card card30 = null;
    Card card31 = Card.embargo;
    card31.setVictory(0);
    Card card34 = Card.gold;
    GameBoard gameBoard37 = new GameBoard((int)(byte)100, (-1));
    Card card38 = Card.gardens;
    int i39 = gameBoard37.numEmbargoTokens(card38);
    GameBoard gameBoard42 = new GameBoard(0, "hi!");
    Card card43 = Card.ambassador;
    gameBoard42.returnCard(card43);
    java.util.List<Card> list_card45 = gameBoard42.getActiveSupplyPiles();
    java.util.List<Card> list_card48 = gameBoard42.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card50 = gameBoard42.kingdomCards((int)(short)100);
    Card card51 = Card.cutpurse;
    int i52 = card51.getCost();
    int i53 = gameBoard42.numEmbargoTokens(card51);
    Card card54 = Card.estate;
    Card card55 = Card.estate;
    card55.setVictory((int)(short)-1);
    GameBoard gameBoard60 = new GameBoard(0, "hi!");
    Card card61 = Card.ambassador;
    gameBoard60.returnCard(card61);
    boolean b63 = gameBoard60.gameDone();
    java.util.List<Card> list_card64 = gameBoard60.getActiveSupplyPiles();
    GameBoard gameBoard67 = new GameBoard(0, "hi!");
    Card card68 = Card.ambassador;
    gameBoard67.returnCard(card68);
    int i70 = gameBoard60.numCardsAvailable(card68);
    GameBoard gameBoard73 = new GameBoard(0, "hi!");
    Card card74 = Card.ambassador;
    gameBoard73.returnCard(card74);
    java.util.List<Card> list_card76 = gameBoard16.kingdomCards(card27, card30, card31, card34, card38, card51, card54, card55, card68, card74);
    GameBoard gameBoard79 = new GameBoard((-3), (int)(byte)10);
    boolean b80 = gameBoard79.gameDone();
    player10.buyCard(card54, gameBoard79);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.ambassador + "'", card17.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.cutpurse + "'", card20.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.council_room + "'", card27.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 10);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.embargo + "'", card31.equals(Card.embargo));
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.gold + "'", card34.equals(Card.gold));
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.gardens + "'", card38.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    org.junit.Assert.assertTrue("'" + card43 + "' != '" + Card.ambassador + "'", card43.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    org.junit.Assert.assertTrue("'" + card51 + "' != '" + Card.cutpurse + "'", card51.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    org.junit.Assert.assertTrue("'" + card54 + "' != '" + Card.estate + "'", card54.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card55 + "' != '" + Card.estate + "'", card55.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card61 + "' != '" + Card.ambassador + "'", card61.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);
    org.junit.Assert.assertTrue("'" + card68 + "' != '" + Card.ambassador + "'", card68.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);
    org.junit.Assert.assertTrue("'" + card74 + "' != '" + Card.ambassador + "'", card74.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test134"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    Card card12 = Card.adventurer;
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    gameBoard15.opponentDraw((int)'4');
    player10.buyCard(card12, gameBoard15);
    GameBoard gameBoard26 = new GameBoard(0, "hi!");
    Card card27 = Card.adventurer;
    gameBoard26.trashCard(card27);
    java.util.List<Player> list_player29 = gameBoard26.getPlayers();
    int i30 = gameBoard26.play();
    Card card31 = Card.salvager;
    int i32 = gameBoard26.numCardsAvailable(card31);
    int i33 = gameBoard15.numCardsAvailable(card31);
    int i34 = card31.getVictory();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.salvager + "'", card31.equals(Card.salvager));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test135"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    Card card12 = Card.adventurer;
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    gameBoard15.opponentDraw((int)'4');
    player10.buyCard(card12, gameBoard15);
    GameBoard gameBoard26 = new GameBoard(0, "hi!");
    Card card27 = Card.ambassador;
    gameBoard26.returnCard(card27);
    boolean b29 = gameBoard26.gameDone();
    int i30 = gameBoard26.play();
    Card card31 = player10.getRandomBuyCard(gameBoard26);
    Card card32 = player10.drawCard();
    java.lang.String str33 = player10.getName();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.ambassador + "'", card27.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.copper + "'", card31.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.copper + "'", card32.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "hi!"+ "'", str33.equals("hi!"));

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test136"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    java.util.List<Card> list_card5 = gameBoard2.getActiveSupplyPiles();
    java.util.List<Card> list_card8 = gameBoard2.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card11 = gameBoard2.getPurchaseableCards((int)(short)100, "");
    java.util.List<Card> list_card12 = gameBoard2.getTrash();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test137"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    boolean b14 = player10.hasActions();
    int i15 = player10.getTotalVictoryPoints();
    player10.addActions(10);
    player10.addActions(0);
    GameBoard gameBoard22 = new GameBoard(0, "hi!");
    Card card23 = Card.ambassador;
    gameBoard22.returnCard(card23);
    java.util.List<Card> list_card25 = gameBoard22.getActiveSupplyPiles();
    java.util.List<Card> list_card26 = gameBoard22.getTrash();
    java.util.List<Player> list_player27 = gameBoard22.getPlayers();
    GameBoard gameBoard32 = new GameBoard(0, "hi!");
    Card card33 = Card.ambassador;
    gameBoard32.returnCard(card33);
    Card card35 = Card.cutpurse;
    int i36 = card35.getCost();
    boolean b37 = gameBoard32.hasCardsAvailable(card35);
    Player player38 = new Player("hi!", (int)'a', gameBoard32);
    Card card39 = player38.drawCard();
    player38.addActions((int)(short)1);
    boolean b42 = player38.hasActions();
    GameBoard gameBoard45 = new GameBoard(0, "hi!");
    Card card46 = Card.ambassador;
    gameBoard45.returnCard(card46);
    java.util.List<Card> list_card48 = gameBoard45.getActiveSupplyPiles();
    java.util.List<Card> list_card49 = gameBoard45.getTrash();
    java.util.List<Card> list_card51 = gameBoard45.kingdomCards(100);
    Card card52 = player38.getRandomBuyCard(gameBoard45);
    java.util.List<Card> list_card53 = player38.getHand();
    Card card54 = Card.baron;
    int i55 = card54.getTreasure();
    player38.Discard(card54);
    boolean b57 = gameBoard22.hasCardsAvailable(card54);
    Card card58 = Card.smithy;
    card58.setVictory((int)(byte)-1);
    int i61 = card58.getTreasure();
    gameBoard22.returnCard(card58);
    boolean b63 = player10.hasCard(card58);
    java.util.List<Card> list_card64 = player10.getDiscard();
    java.util.LinkedList<Card> linkedlist_card65 = player10.getDeck();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-3));
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.ambassador + "'", card23.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player27);
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.ambassador + "'", card33.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.cutpurse + "'", card35.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.copper + "'", card39.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.ambassador + "'", card46.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.copper + "'", card52.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    org.junit.Assert.assertTrue("'" + card54 + "' != '" + Card.baron + "'", card54.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    org.junit.Assert.assertTrue("'" + card58 + "' != '" + Card.smithy + "'", card58.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card65);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test138"); }

    GameBoard gameBoard4 = new GameBoard((int)(byte)100, (-1));
    java.util.List<Card> list_card7 = gameBoard4.getPurchaseableCards((-1), "hi!");
    GameBoard gameBoard12 = new GameBoard(0, "hi!");
    Card card13 = Card.ambassador;
    gameBoard12.returnCard(card13);
    Card card15 = Card.cutpurse;
    int i16 = card15.getCost();
    boolean b17 = gameBoard12.hasCardsAvailable(card15);
    Player player18 = new Player("hi!", (int)'a', gameBoard12);
    Card card19 = player18.drawCard();
    player18.addActions((int)(short)1);
    boolean b22 = player18.hasActions();
    GameBoard gameBoard25 = new GameBoard(0, "hi!");
    Card card26 = Card.ambassador;
    gameBoard25.returnCard(card26);
    java.util.List<Card> list_card28 = gameBoard25.getActiveSupplyPiles();
    java.util.List<Card> list_card29 = gameBoard25.getTrash();
    java.util.List<Card> list_card31 = gameBoard25.kingdomCards(100);
    Card card32 = player18.getRandomBuyCard(gameBoard25);
    GameBoard gameBoard35 = new GameBoard(0, "hi!");
    Card card36 = Card.ambassador;
    gameBoard35.returnCard(card36);
    java.util.List<Card> list_card38 = gameBoard35.getActiveSupplyPiles();
    java.util.List<Card> list_card41 = gameBoard35.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card43 = gameBoard35.kingdomCards((int)(short)100);
    Card card44 = player18.getRandomBuyCard(gameBoard35);
    gameBoard4.trashCard(card44);
    Card card47 = Card.cutpurse;
    int i48 = card47.getCost();
    gameBoard4.opponentGainCard((int)(byte)-1, card47);
    Player player50 = new Player("hi!", (int)(byte)1, gameBoard4);
    player50.countTreasure();
    Card card52 = Card.remodel;
    GameBoard gameBoard55 = new GameBoard(0, "hi!");
    Card card56 = Card.ambassador;
    gameBoard55.returnCard(card56);
    boolean b58 = gameBoard55.gameDone();
    int i59 = gameBoard55.play();
    Card card60 = Card.feast;
    boolean b61 = gameBoard55.hasCardsAvailable(card60);
    player50.gainCardToHand(card52, gameBoard55);
    int i63 = player50.getNum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.ambassador + "'", card13.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.cutpurse + "'", card15.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.copper + "'", card19.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.ambassador + "'", card26.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.copper + "'", card32.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.ambassador + "'", card36.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.copper + "'", card44.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.cutpurse + "'", card47.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 4);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.remodel + "'", card52.equals(Card.remodel));
    org.junit.Assert.assertTrue("'" + card56 + "' != '" + Card.ambassador + "'", card56.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 1);
    org.junit.Assert.assertTrue("'" + card60 + "' != '" + Card.feast + "'", card60.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test139"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    GameBoard gameBoard14 = new GameBoard((int)(byte)100, (-1));
    Card card15 = Card.gardens;
    int i16 = gameBoard14.numEmbargoTokens(card15);
    java.util.List<Card> list_card17 = gameBoard14.getTrash();
    GameBoard gameBoard20 = new GameBoard(0, "hi!");
    Card card21 = Card.ambassador;
    gameBoard20.returnCard(card21);
    boolean b23 = gameBoard20.gameDone();
    java.util.List<Card> list_card24 = gameBoard20.getActiveSupplyPiles();
    GameBoard gameBoard27 = new GameBoard(0, "hi!");
    Card card28 = Card.ambassador;
    gameBoard27.returnCard(card28);
    boolean b30 = gameBoard20.hasCardsAvailable(card28);
    gameBoard14.trashCard(card28);
    Card card32 = player10.getRandomBuyCard(gameBoard14);
    boolean b33 = gameBoard14.gameDone();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.gardens + "'", card15.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.ambassador + "'", card21.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.ambassador + "'", card28.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test140"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getHand();
    java.util.List<Card> list_card12 = player10.getHand();
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card16 = gameBoard15.getActiveSupplyPiles();
    int i17 = gameBoard15.getTotalEmbargoTokens();
    Card card18 = Card.council_room;
    int i19 = card18.getVictory();
    int i20 = gameBoard15.numCardsAvailable(card18);
    Card card21 = player10.getRandomBuyCard(gameBoard15);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.council_room + "'", card18.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 10);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.copper + "'", card21.equals(Card.copper));

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test141"); }

    GameBoard gameBoard6 = new GameBoard(0, "hi!");
    Card card7 = Card.ambassador;
    gameBoard6.returnCard(card7);
    Card card9 = Card.cutpurse;
    int i10 = card9.getCost();
    boolean b11 = gameBoard6.hasCardsAvailable(card9);
    Player player12 = new Player("hi!", (int)'a', gameBoard6);
    Card card13 = player12.drawCard();
    player12.addActions((int)(short)1);
    java.lang.String str16 = player12.getName();
    player12.discardHandAndInPlay();
    player12.initPlayerTurn();
    Card card19 = Card.duchy;
    GameBoard gameBoard22 = new GameBoard(0, "hi!");
    Card card23 = Card.adventurer;
    gameBoard22.trashCard(card23);
    player12.gainCardToHand(card19, gameBoard22);
    Player player26 = new Player("", (int)(short)10, gameBoard22);
    Card card27 = Card.mine;
    boolean b28 = gameBoard22.placeEmbargo(card27);
    gameBoard22.opponentDiscardCopper((int)' ');
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.ambassador + "'", card7.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.cutpurse + "'", card9.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.copper + "'", card13.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "hi!"+ "'", str16.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.duchy + "'", card19.equals(Card.duchy));
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.adventurer + "'", card23.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.mine + "'", card27.equals(Card.mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test142"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    boolean b14 = player10.hasActions();
    GameBoard gameBoard17 = new GameBoard(0, "hi!");
    Card card18 = Card.ambassador;
    gameBoard17.returnCard(card18);
    java.util.List<Card> list_card20 = gameBoard17.getActiveSupplyPiles();
    java.util.List<Card> list_card21 = gameBoard17.getTrash();
    java.util.List<Card> list_card23 = gameBoard17.kingdomCards(100);
    Card card24 = player10.getRandomBuyCard(gameBoard17);
    int i25 = player10.getTotalVictoryPoints();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.ambassador + "'", card18.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.copper + "'", card24.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == (-3));

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test143"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    boolean b14 = player10.hasActions();
    int i15 = player10.getTotalVictoryPoints();
    player10.addActions(10);
    player10.addActions(0);
    GameBoard gameBoard22 = new GameBoard(0, "hi!");
    Card card23 = Card.ambassador;
    gameBoard22.returnCard(card23);
    java.util.List<Card> list_card25 = gameBoard22.getActiveSupplyPiles();
    java.util.List<Card> list_card26 = gameBoard22.getTrash();
    java.util.List<Player> list_player27 = gameBoard22.getPlayers();
    GameBoard gameBoard32 = new GameBoard(0, "hi!");
    Card card33 = Card.ambassador;
    gameBoard32.returnCard(card33);
    Card card35 = Card.cutpurse;
    int i36 = card35.getCost();
    boolean b37 = gameBoard32.hasCardsAvailable(card35);
    Player player38 = new Player("hi!", (int)'a', gameBoard32);
    Card card39 = player38.drawCard();
    player38.addActions((int)(short)1);
    boolean b42 = player38.hasActions();
    GameBoard gameBoard45 = new GameBoard(0, "hi!");
    Card card46 = Card.ambassador;
    gameBoard45.returnCard(card46);
    java.util.List<Card> list_card48 = gameBoard45.getActiveSupplyPiles();
    java.util.List<Card> list_card49 = gameBoard45.getTrash();
    java.util.List<Card> list_card51 = gameBoard45.kingdomCards(100);
    Card card52 = player38.getRandomBuyCard(gameBoard45);
    java.util.List<Card> list_card53 = player38.getHand();
    Card card54 = Card.baron;
    int i55 = card54.getTreasure();
    player38.Discard(card54);
    boolean b57 = gameBoard22.hasCardsAvailable(card54);
    Card card58 = Card.smithy;
    card58.setVictory((int)(byte)-1);
    int i61 = card58.getTreasure();
    gameBoard22.returnCard(card58);
    boolean b63 = player10.hasCard(card58);
    player10.initPlayerTurn();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-3));
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.ambassador + "'", card23.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player27);
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.ambassador + "'", card33.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.cutpurse + "'", card35.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.copper + "'", card39.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.ambassador + "'", card46.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.copper + "'", card52.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    org.junit.Assert.assertTrue("'" + card54 + "' != '" + Card.baron + "'", card54.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    org.junit.Assert.assertTrue("'" + card58 + "' != '" + Card.smithy + "'", card58.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test144"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    java.util.List<Card> list_card5 = gameBoard2.getActiveSupplyPiles();
    java.util.List<Card> list_card6 = gameBoard2.getTrash();
    java.util.List<Player> list_player7 = gameBoard2.getPlayers();
    java.util.List<Player> list_player8 = gameBoard2.getPlayers();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player8);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test145"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.lang.String str14 = player10.getName();
    java.util.List<Card> list_card15 = player10.getPlayedCards();
    int i16 = player10.getCoins();
    player10.addActions(4);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test146"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card3 = gameBoard2.getActiveSupplyPiles();
    int i4 = gameBoard2.getTotalEmbargoTokens();
    GameBoard gameBoard7 = new GameBoard(0, "hi!");
    Card card8 = Card.ambassador;
    gameBoard7.returnCard(card8);
    boolean b10 = gameBoard7.gameDone();
    Card card11 = Card.cutpurse;
    int i12 = gameBoard7.numCardsAvailable(card11);
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card16 = gameBoard15.getActiveSupplyPiles();
    int i17 = gameBoard15.getTotalEmbargoTokens();
    Card card18 = Card.council_room;
    int i19 = card18.getVictory();
    int i20 = gameBoard15.numCardsAvailable(card18);
    Card card21 = null;
    Card card22 = Card.embargo;
    card22.setVictory(0);
    Card card25 = Card.gold;
    GameBoard gameBoard28 = new GameBoard((int)(byte)100, (-1));
    Card card29 = Card.gardens;
    int i30 = gameBoard28.numEmbargoTokens(card29);
    GameBoard gameBoard33 = new GameBoard(0, "hi!");
    Card card34 = Card.ambassador;
    gameBoard33.returnCard(card34);
    java.util.List<Card> list_card36 = gameBoard33.getActiveSupplyPiles();
    java.util.List<Card> list_card39 = gameBoard33.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card41 = gameBoard33.kingdomCards((int)(short)100);
    Card card42 = Card.cutpurse;
    int i43 = card42.getCost();
    int i44 = gameBoard33.numEmbargoTokens(card42);
    Card card45 = Card.estate;
    Card card46 = Card.estate;
    card46.setVictory((int)(short)-1);
    GameBoard gameBoard51 = new GameBoard(0, "hi!");
    Card card52 = Card.ambassador;
    gameBoard51.returnCard(card52);
    boolean b54 = gameBoard51.gameDone();
    java.util.List<Card> list_card55 = gameBoard51.getActiveSupplyPiles();
    GameBoard gameBoard58 = new GameBoard(0, "hi!");
    Card card59 = Card.ambassador;
    gameBoard58.returnCard(card59);
    int i61 = gameBoard51.numCardsAvailable(card59);
    GameBoard gameBoard64 = new GameBoard(0, "hi!");
    Card card65 = Card.ambassador;
    gameBoard64.returnCard(card65);
    java.util.List<Card> list_card67 = gameBoard7.kingdomCards(card18, card21, card22, card25, card29, card42, card45, card46, card59, card65);
    gameBoard2.takeCard(card59);
    Card card69 = Card.ambassador;
    gameBoard2.trashCard(card69);
    java.util.List<Card> list_card71 = gameBoard2.getTrash();
    GameBoard gameBoard74 = new GameBoard(3, "hi!");
    Card card75 = Card.adventurer;
    int i76 = gameBoard74.numEmbargoTokens(card75);
    boolean b77 = gameBoard2.hasCardsAvailable(card75);
    java.util.List<Card> list_card78 = gameBoard2.getActiveSupplyPiles();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    org.junit.Assert.assertTrue("'" + card8 + "' != '" + Card.ambassador + "'", card8.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.cutpurse + "'", card11.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.council_room + "'", card18.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 10);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.embargo + "'", card22.equals(Card.embargo));
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.gold + "'", card25.equals(Card.gold));
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.gardens + "'", card29.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.ambassador + "'", card34.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.cutpurse + "'", card42.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.estate + "'", card45.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.estate + "'", card46.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.ambassador + "'", card52.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card55);
    org.junit.Assert.assertTrue("'" + card59 + "' != '" + Card.ambassador + "'", card59.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    org.junit.Assert.assertTrue("'" + card65 + "' != '" + Card.ambassador + "'", card65.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    org.junit.Assert.assertTrue("'" + card69 + "' != '" + Card.ambassador + "'", card69.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card71);
    org.junit.Assert.assertTrue("'" + card75 + "' != '" + Card.adventurer + "'", card75.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card78);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test147"); }

    GameBoard gameBoard2 = new GameBoard(6, (int)(byte)10);
    java.util.List<Card> list_card5 = gameBoard2.getPurchaseableCards((int)(byte)-1, "");
    java.util.List<Card> list_card6 = gameBoard2.getAllKingdomCards();
    java.util.List<Card> list_card8 = gameBoard2.kingdomCards(4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test148"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.lang.String str14 = player10.getName();
    player10.discardHandAndInPlay();
    int i16 = player10.getNum();
    java.util.List<java.lang.Integer> list_i17 = player10.getActionCardIndices();
    int i18 = player10.getNumActions();
    java.lang.String str19 = player10.getName();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "hi!"+ "'", str19.equals("hi!"));

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test149"); }

    Card card0 = Card.province;
    card0.setVictory(7);
    org.junit.Assert.assertTrue("'" + card0 + "' != '" + Card.province + "'", card0.equals(Card.province));

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test150"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    Card card12 = Card.adventurer;
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    gameBoard15.opponentDraw((int)'4');
    player10.buyCard(card12, gameBoard15);
    GameBoard gameBoard26 = new GameBoard(0, "hi!");
    Card card27 = Card.ambassador;
    gameBoard26.returnCard(card27);
    boolean b29 = gameBoard26.gameDone();
    int i30 = gameBoard26.play();
    Card card31 = player10.getRandomBuyCard(gameBoard26);
    java.lang.String str32 = player10.getName();
    int i33 = player10.getCoins();
    int i34 = player10.getBuys();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.ambassador + "'", card27.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.copper + "'", card31.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "hi!"+ "'", str32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test151"); }

    GameBoard gameBoard2 = new GameBoard(1, "hi!");
    java.util.List<Card> list_card4 = gameBoard2.kingdomCards((-3));
    gameBoard2.opponentDiscardCopper((int)(short)10);
    GameBoard gameBoard11 = new GameBoard(0, "hi!");
    Card card12 = Card.ambassador;
    gameBoard11.returnCard(card12);
    Card card14 = Card.cutpurse;
    int i15 = card14.getCost();
    boolean b16 = gameBoard11.hasCardsAvailable(card14);
    Player player17 = new Player("hi!", (int)'a', gameBoard11);
    Card card18 = player17.drawCard();
    player17.addActions((int)(short)1);
    java.lang.String str21 = player17.getName();
    player17.discardHandAndInPlay();
    player17.initPlayerTurn();
    Card card24 = player17.drawCard();
    boolean b25 = gameBoard2.hasCardsAvailable(card24);
    GameBoard gameBoard28 = new GameBoard(0, "hi!");
    Card card29 = Card.ambassador;
    gameBoard28.returnCard(card29);
    boolean b31 = gameBoard28.gameDone();
    java.util.List<Card> list_card32 = gameBoard28.getActiveSupplyPiles();
    GameBoard gameBoard35 = new GameBoard(0, "hi!");
    Card card36 = Card.ambassador;
    gameBoard35.returnCard(card36);
    int i38 = gameBoard28.numCardsAvailable(card36);
    Card card40 = Card.council_room;
    gameBoard28.opponentGainCard((int)(byte)1, card40);
    GameBoard gameBoard46 = new GameBoard(0, "hi!");
    Card card47 = Card.ambassador;
    gameBoard46.returnCard(card47);
    Card card49 = Card.cutpurse;
    int i50 = card49.getCost();
    boolean b51 = gameBoard46.hasCardsAvailable(card49);
    Player player52 = new Player("hi!", (int)'a', gameBoard46);
    Card card53 = player52.drawCard();
    player52.addActions((int)(short)1);
    boolean b56 = player52.hasActions();
    GameBoard gameBoard59 = new GameBoard(0, "hi!");
    Card card60 = Card.ambassador;
    gameBoard59.returnCard(card60);
    java.util.List<Card> list_card62 = gameBoard59.getActiveSupplyPiles();
    java.util.List<Card> list_card63 = gameBoard59.getTrash();
    java.util.List<Card> list_card65 = gameBoard59.kingdomCards(100);
    Card card66 = player52.getRandomBuyCard(gameBoard59);
    int i67 = gameBoard28.numEmbargoTokens(card66);
    gameBoard2.takeCard(card66);
    Card card70 = Card.gold;
    gameBoard2.opponentGainCard((int)(short)1, card70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card4);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.ambassador + "'", card12.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.cutpurse + "'", card14.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.copper + "'", card18.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "hi!"+ "'", str21.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.copper + "'", card24.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.ambassador + "'", card29.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.ambassador + "'", card36.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.council_room + "'", card40.equals(Card.council_room));
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.ambassador + "'", card47.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card49 + "' != '" + Card.cutpurse + "'", card49.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    org.junit.Assert.assertTrue("'" + card53 + "' != '" + Card.copper + "'", card53.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    org.junit.Assert.assertTrue("'" + card60 + "' != '" + Card.ambassador + "'", card60.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card65);
    org.junit.Assert.assertTrue("'" + card66 + "' != '" + Card.copper + "'", card66.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    org.junit.Assert.assertTrue("'" + card70 + "' != '" + Card.gold + "'", card70.equals(Card.gold));

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test152"); }

    GameBoard gameBoard2 = new GameBoard((int)' ', "");

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test153"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    boolean b7 = gameBoard4.gameDone();
    java.util.List<Card> list_card8 = gameBoard4.getTrash();
    Card card9 = Card.ambassador;
    int i10 = card9.getCost();
    gameBoard4.returnCard(card9);
    Player player12 = new Player("hi!", (-1), gameBoard4);
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    GameBoard gameBoard25 = new GameBoard(0, "hi!");
    Card card26 = Card.ambassador;
    gameBoard25.returnCard(card26);
    Card card28 = Card.cutpurse;
    int i29 = card28.getCost();
    boolean b30 = gameBoard25.hasCardsAvailable(card28);
    Player player31 = new Player("hi!", (int)'a', gameBoard25);
    Card card32 = Card.feast;
    int i33 = card32.getCost();
    GameBoard gameBoard36 = new GameBoard(3, "hi!");
    player31.buyCard(card32, gameBoard36);
    player12.gainCard(card19, gameBoard36);
    int i39 = player12.getNum();
    boolean b40 = player12.hasBuys();
    GameBoard gameBoard43 = new GameBoard(0, "hi!");
    Card card44 = Card.ambassador;
    gameBoard43.returnCard(card44);
    java.util.List<Card> list_card46 = gameBoard43.getActiveSupplyPiles();
    java.util.List<Card> list_card49 = gameBoard43.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card51 = gameBoard43.kingdomCards((int)(short)100);
    Card card52 = Card.ambassador;
    int i53 = card52.getCost();
    int i54 = gameBoard43.numEmbargoTokens(card52);
    int i55 = gameBoard43.play();
    Card card56 = player12.getRandomBuyCard(gameBoard43);
    player12.countTreasure();
    player12.countTreasure();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.ambassador + "'", card9.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.ambassador + "'", card26.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.cutpurse + "'", card28.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.feast + "'", card32.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.ambassador + "'", card44.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.ambassador + "'", card52.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    org.junit.Assert.assertTrue("'" + card56 + "' != '" + Card.copper + "'", card56.equals(Card.copper));

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test154"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    int i12 = player10.getNum();
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    java.util.List<Card> list_card18 = gameBoard15.getActiveSupplyPiles();
    java.util.List<Card> list_card21 = gameBoard15.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card23 = gameBoard15.kingdomCards((int)(short)100);
    Card card24 = Card.cutpurse;
    int i25 = card24.getCost();
    int i26 = gameBoard15.numEmbargoTokens(card24);
    GameBoard gameBoard29 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card30 = gameBoard29.getActiveSupplyPiles();
    player10.gainCard(card24, gameBoard29);
    player10.addActions(10);
    int i34 = player10.getNumActions();
    int i35 = player10.getTotalVictoryPoints();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 97);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.cutpurse + "'", card24.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == (-3));

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test155"); }

    Card card0 = Card.gold;
    card0.setVictory(1);
    org.junit.Assert.assertTrue("'" + card0 + "' != '" + Card.gold + "'", card0.equals(Card.gold));

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test156"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    java.util.List<Card> list_card5 = gameBoard2.getActiveSupplyPiles();
    java.util.List<Card> list_card8 = gameBoard2.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card10 = gameBoard2.kingdomCards((int)(short)100);
    Card card11 = Card.ambassador;
    int i12 = card11.getCost();
    int i13 = gameBoard2.numEmbargoTokens(card11);
    int i14 = gameBoard2.play();
    boolean b15 = gameBoard2.gameDone();
    Card card17 = Card.smithy;
    gameBoard2.opponentGainCard((int)(short)100, card17);
    java.util.List<Card> list_card19 = gameBoard2.getAllKingdomCards();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.ambassador + "'", card11.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.smithy + "'", card17.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test157"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    boolean b5 = gameBoard2.gameDone();
    java.util.List<Card> list_card6 = gameBoard2.getActiveSupplyPiles();
    GameBoard gameBoard9 = new GameBoard(0, "hi!");
    Card card10 = Card.ambassador;
    gameBoard9.returnCard(card10);
    int i12 = gameBoard2.numCardsAvailable(card10);
    java.util.List<Card> list_card15 = gameBoard2.getPurchaseableCards((int)' ', "");
    GameBoard gameBoard18 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card19 = gameBoard18.getActiveSupplyPiles();
    boolean b20 = gameBoard18.gameDone();
    java.util.List<Card> list_card21 = gameBoard18.getTrash();
    GameBoard gameBoard25 = new GameBoard(0, "hi!");
    Card card26 = Card.ambassador;
    gameBoard25.returnCard(card26);
    java.util.List<Card> list_card28 = gameBoard25.getActiveSupplyPiles();
    java.util.List<Card> list_card31 = gameBoard25.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card33 = gameBoard25.kingdomCards((int)(short)100);
    Card card34 = Card.ambassador;
    int i35 = card34.getCost();
    int i36 = gameBoard25.numEmbargoTokens(card34);
    gameBoard18.opponentGainCard((int)(byte)0, card34);
    int i38 = card34.getCost();
    gameBoard2.takeCard(card34);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.ambassador + "'", card10.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.ambassador + "'", card26.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.ambassador + "'", card34.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 3);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test158"); }

    GameBoard gameBoard2 = new GameBoard(6, (int)(byte)10);
    java.util.List<Card> list_card5 = gameBoard2.getPurchaseableCards((int)(byte)-1, "");
    java.util.List<Card> list_card6 = gameBoard2.getAllKingdomCards();
    int i7 = gameBoard2.getTotalEmbargoTokens();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test159"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    boolean b5 = gameBoard2.gameDone();
    java.util.List<Card> list_card6 = gameBoard2.getTrash();
    java.util.List<Card> list_card8 = gameBoard2.getPurchaseableCards(8);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test160"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    gameBoard2.opponentDiscardCopper((int)(byte)10);
    GameBoard gameBoard7 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card8 = gameBoard7.getActiveSupplyPiles();
    java.util.List<Card> list_card11 = gameBoard7.getPurchaseableCards((-1), "hi!");
    java.util.List<Card> list_card13 = gameBoard7.kingdomCards((int)' ');
    GameBoard gameBoard18 = new GameBoard(0, "hi!");
    Card card19 = Card.ambassador;
    gameBoard18.returnCard(card19);
    Card card21 = Card.cutpurse;
    int i22 = card21.getCost();
    boolean b23 = gameBoard18.hasCardsAvailable(card21);
    Player player24 = new Player("hi!", (int)'a', gameBoard18);
    java.util.List<Card> list_card25 = player24.getPlayedCards();
    GameBoard gameBoard28 = new GameBoard((int)(byte)100, (-1));
    Card card29 = Card.gardens;
    int i30 = gameBoard28.numEmbargoTokens(card29);
    java.util.List<Card> list_card31 = gameBoard28.getTrash();
    GameBoard gameBoard34 = new GameBoard(0, "hi!");
    Card card35 = Card.ambassador;
    gameBoard34.returnCard(card35);
    boolean b37 = gameBoard34.gameDone();
    java.util.List<Card> list_card38 = gameBoard34.getActiveSupplyPiles();
    GameBoard gameBoard41 = new GameBoard(0, "hi!");
    Card card42 = Card.ambassador;
    gameBoard41.returnCard(card42);
    boolean b44 = gameBoard34.hasCardsAvailable(card42);
    gameBoard28.trashCard(card42);
    Card card46 = player24.getRandomBuyCard(gameBoard28);
    int i47 = player24.getBuys();
    boolean b48 = player24.hasBuys();
    int i49 = player24.getNum();
    Card card50 = player24.drawCard();
    boolean b51 = gameBoard7.hasCardsAvailable(card50);
    boolean b52 = gameBoard2.hasCardsAvailable(card50);
    gameBoard2.opponentDraw(97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.ambassador + "'", card19.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.cutpurse + "'", card21.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.gardens + "'", card29.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.ambassador + "'", card35.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.ambassador + "'", card42.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 97);
    org.junit.Assert.assertTrue("'" + card50 + "' != '" + Card.copper + "'", card50.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test161"); }

    GameBoard gameBoard4 = new GameBoard((int)(byte)100, (-1));
    java.util.List<Card> list_card7 = gameBoard4.getPurchaseableCards((-1), "hi!");
    GameBoard gameBoard12 = new GameBoard(0, "hi!");
    Card card13 = Card.ambassador;
    gameBoard12.returnCard(card13);
    Card card15 = Card.cutpurse;
    int i16 = card15.getCost();
    boolean b17 = gameBoard12.hasCardsAvailable(card15);
    Player player18 = new Player("hi!", (int)'a', gameBoard12);
    Card card19 = player18.drawCard();
    player18.addActions((int)(short)1);
    boolean b22 = player18.hasActions();
    GameBoard gameBoard25 = new GameBoard(0, "hi!");
    Card card26 = Card.ambassador;
    gameBoard25.returnCard(card26);
    java.util.List<Card> list_card28 = gameBoard25.getActiveSupplyPiles();
    java.util.List<Card> list_card29 = gameBoard25.getTrash();
    java.util.List<Card> list_card31 = gameBoard25.kingdomCards(100);
    Card card32 = player18.getRandomBuyCard(gameBoard25);
    GameBoard gameBoard35 = new GameBoard(0, "hi!");
    Card card36 = Card.ambassador;
    gameBoard35.returnCard(card36);
    java.util.List<Card> list_card38 = gameBoard35.getActiveSupplyPiles();
    java.util.List<Card> list_card41 = gameBoard35.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card43 = gameBoard35.kingdomCards((int)(short)100);
    Card card44 = player18.getRandomBuyCard(gameBoard35);
    gameBoard4.trashCard(card44);
    Card card47 = Card.cutpurse;
    int i48 = card47.getCost();
    gameBoard4.opponentGainCard((int)(byte)-1, card47);
    Player player50 = new Player("hi!", (int)(byte)1, gameBoard4);
    player50.countTreasure();
    int i52 = player50.getBuys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.ambassador + "'", card13.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.cutpurse + "'", card15.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.copper + "'", card19.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.ambassador + "'", card26.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.copper + "'", card32.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.ambassador + "'", card36.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.copper + "'", card44.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.cutpurse + "'", card47.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test162"); }

    GameBoard gameBoard6 = new GameBoard(0, "hi!");
    Card card7 = Card.ambassador;
    gameBoard6.returnCard(card7);
    Card card9 = Card.cutpurse;
    int i10 = card9.getCost();
    boolean b11 = gameBoard6.hasCardsAvailable(card9);
    Player player12 = new Player("hi!", (int)'a', gameBoard6);
    Card card13 = player12.drawCard();
    player12.addActions((int)(short)1);
    java.lang.String str16 = player12.getName();
    player12.discardHandAndInPlay();
    player12.initPlayerTurn();
    Card card19 = Card.duchy;
    GameBoard gameBoard22 = new GameBoard(0, "hi!");
    Card card23 = Card.adventurer;
    gameBoard22.trashCard(card23);
    player12.gainCardToHand(card19, gameBoard22);
    boolean b26 = player12.hasActionCard();
    GameBoard gameBoard29 = new GameBoard((int)(byte)100, (-1));
    java.util.List<Card> list_card32 = gameBoard29.getPurchaseableCards((-1), "hi!");
    Card card33 = player12.getRandomBuyCard(gameBoard29);
    java.util.List<Card> list_card34 = gameBoard29.getActiveSupplyPiles();
    int i35 = gameBoard29.play();
    Player player36 = new Player("", (int)(byte)10, gameBoard29);
    GameBoard gameBoard41 = new GameBoard(0, "hi!");
    Card card42 = Card.ambassador;
    gameBoard41.returnCard(card42);
    Card card44 = Card.cutpurse;
    int i45 = card44.getCost();
    boolean b46 = gameBoard41.hasCardsAvailable(card44);
    Player player47 = new Player("hi!", (int)'a', gameBoard41);
    Card card48 = player47.drawCard();
    player47.addActions((int)(short)1);
    java.lang.String str51 = player47.getName();
    player47.discardHandAndInPlay();
    player47.initPlayerTurn();
    Card card54 = Card.gardens;
    player47.Discard(card54);
    gameBoard29.trashCard(card54);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.ambassador + "'", card7.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.cutpurse + "'", card9.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.copper + "'", card13.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "hi!"+ "'", str16.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.duchy + "'", card19.equals(Card.duchy));
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.adventurer + "'", card23.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.ambassador + "'", card42.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.cutpurse + "'", card44.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    org.junit.Assert.assertTrue("'" + card48 + "' != '" + Card.copper + "'", card48.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "hi!"+ "'", str51.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card54 + "' != '" + Card.gardens + "'", card54.equals(Card.gardens));

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test163"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card3 = gameBoard2.getActiveSupplyPiles();
    int i4 = gameBoard2.getTotalEmbargoTokens();
    Card card5 = Card.council_room;
    int i6 = card5.getVictory();
    int i7 = gameBoard2.numCardsAvailable(card5);
    java.util.List<Card> list_card10 = gameBoard2.getPurchaseableCards((int)'a', "");
    int i11 = gameBoard2.play();
    GameBoard gameBoard16 = new GameBoard(0, "hi!");
    Card card17 = Card.ambassador;
    gameBoard16.returnCard(card17);
    Card card19 = Card.cutpurse;
    int i20 = card19.getCost();
    boolean b21 = gameBoard16.hasCardsAvailable(card19);
    Player player22 = new Player("hi!", (int)'a', gameBoard16);
    Card card23 = player22.drawCard();
    player22.addActions((int)(short)1);
    boolean b26 = player22.hasActions();
    GameBoard gameBoard29 = new GameBoard(0, "hi!");
    Card card30 = Card.ambassador;
    gameBoard29.returnCard(card30);
    java.util.List<Card> list_card32 = gameBoard29.getActiveSupplyPiles();
    java.util.List<Card> list_card33 = gameBoard29.getTrash();
    java.util.List<Card> list_card35 = gameBoard29.kingdomCards(100);
    Card card36 = player22.getRandomBuyCard(gameBoard29);
    GameBoard gameBoard39 = new GameBoard(0, "hi!");
    Card card40 = Card.ambassador;
    gameBoard39.returnCard(card40);
    java.util.List<Card> list_card42 = gameBoard39.getActiveSupplyPiles();
    java.util.List<Card> list_card45 = gameBoard39.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card47 = gameBoard39.kingdomCards((int)(short)100);
    Card card48 = player22.getRandomBuyCard(gameBoard39);
    int i49 = card48.getCost();
    boolean b50 = gameBoard2.hasCardsAvailable(card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.council_room + "'", card5.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.ambassador + "'", card17.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.cutpurse + "'", card19.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.copper + "'", card23.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.ambassador + "'", card30.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.copper + "'", card36.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.ambassador + "'", card40.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    org.junit.Assert.assertTrue("'" + card48 + "' != '" + Card.copper + "'", card48.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test164"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    boolean b5 = gameBoard2.gameDone();
    java.util.List<Card> list_card6 = gameBoard2.getTrash();
    Card card7 = Card.ambassador;
    int i8 = card7.getCost();
    gameBoard2.returnCard(card7);
    Card card10 = Card.remodel;
    boolean b11 = gameBoard2.placeEmbargo(card10);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.ambassador + "'", card7.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.remodel + "'", card10.equals(Card.remodel));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test165"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    GameBoard gameBoard14 = new GameBoard((int)(byte)100, (-1));
    Card card15 = Card.gardens;
    int i16 = gameBoard14.numEmbargoTokens(card15);
    java.util.List<Card> list_card17 = gameBoard14.getTrash();
    GameBoard gameBoard20 = new GameBoard(0, "hi!");
    Card card21 = Card.ambassador;
    gameBoard20.returnCard(card21);
    boolean b23 = gameBoard20.gameDone();
    java.util.List<Card> list_card24 = gameBoard20.getActiveSupplyPiles();
    GameBoard gameBoard27 = new GameBoard(0, "hi!");
    Card card28 = Card.ambassador;
    gameBoard27.returnCard(card28);
    boolean b30 = gameBoard20.hasCardsAvailable(card28);
    gameBoard14.trashCard(card28);
    Card card32 = player10.getRandomBuyCard(gameBoard14);
    player10.countTreasure();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.gardens + "'", card15.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.ambassador + "'", card21.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.ambassador + "'", card28.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test166"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    boolean b7 = gameBoard4.gameDone();
    Card card8 = Card.estate;
    gameBoard4.returnCard(card8);
    gameBoard4.opponentDraw((int)'4');
    java.util.List<Card> list_card12 = gameBoard4.getActiveSupplyPiles();
    Player player13 = new Player("", (int)(short)-1, gameBoard4);
    GameBoard gameBoard16 = new GameBoard(0, "hi!");
    Card card17 = Card.ambassador;
    gameBoard16.returnCard(card17);
    java.util.List<Card> list_card19 = gameBoard16.getActiveSupplyPiles();
    java.util.List<Card> list_card22 = gameBoard16.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card24 = gameBoard16.kingdomCards((int)(short)100);
    Card card25 = Card.ambassador;
    int i26 = card25.getCost();
    int i27 = gameBoard16.numEmbargoTokens(card25);
    GameBoard gameBoard30 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card31 = gameBoard30.getActiveSupplyPiles();
    int i32 = gameBoard30.getTotalEmbargoTokens();
    Card card33 = Card.council_room;
    int i34 = card33.getVictory();
    int i35 = gameBoard30.numCardsAvailable(card33);
    java.util.List<Card> list_card38 = gameBoard30.getPurchaseableCards((int)'a', "");
    gameBoard30.opponentDiscardCopper((int)(byte)0);
    Card card41 = Card.smithy;
    card41.setVictory((int)(byte)-1);
    int i44 = card41.getTreasure();
    gameBoard30.takeCard(card41);
    Card card46 = Card.smithy;
    card46.setVictory((int)(byte)-1);
    int i49 = card46.getTreasure();
    int i50 = card46.getCost();
    boolean b51 = gameBoard30.hasCardsAvailable(card46);
    GameBoard gameBoard54 = new GameBoard(0, "hi!");
    Card card55 = Card.ambassador;
    gameBoard54.returnCard(card55);
    boolean b57 = gameBoard30.placeEmbargo(card55);
    boolean b58 = gameBoard16.hasCardsAvailable(card55);
    boolean b59 = player13.hasCard(card55);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + card8 + "' != '" + Card.estate + "'", card8.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.ambassador + "'", card17.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.ambassador + "'", card25.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.council_room + "'", card33.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.smithy + "'", card41.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.smithy + "'", card46.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    org.junit.Assert.assertTrue("'" + card55 + "' != '" + Card.ambassador + "'", card55.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test167"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card3 = gameBoard2.getActiveSupplyPiles();
    int i4 = gameBoard2.getTotalEmbargoTokens();
    GameBoard gameBoard7 = new GameBoard(0, "hi!");
    Card card8 = Card.ambassador;
    gameBoard7.returnCard(card8);
    boolean b10 = gameBoard7.gameDone();
    Card card11 = Card.cutpurse;
    int i12 = gameBoard7.numCardsAvailable(card11);
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card16 = gameBoard15.getActiveSupplyPiles();
    int i17 = gameBoard15.getTotalEmbargoTokens();
    Card card18 = Card.council_room;
    int i19 = card18.getVictory();
    int i20 = gameBoard15.numCardsAvailable(card18);
    Card card21 = null;
    Card card22 = Card.embargo;
    card22.setVictory(0);
    Card card25 = Card.gold;
    GameBoard gameBoard28 = new GameBoard((int)(byte)100, (-1));
    Card card29 = Card.gardens;
    int i30 = gameBoard28.numEmbargoTokens(card29);
    GameBoard gameBoard33 = new GameBoard(0, "hi!");
    Card card34 = Card.ambassador;
    gameBoard33.returnCard(card34);
    java.util.List<Card> list_card36 = gameBoard33.getActiveSupplyPiles();
    java.util.List<Card> list_card39 = gameBoard33.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card41 = gameBoard33.kingdomCards((int)(short)100);
    Card card42 = Card.cutpurse;
    int i43 = card42.getCost();
    int i44 = gameBoard33.numEmbargoTokens(card42);
    Card card45 = Card.estate;
    Card card46 = Card.estate;
    card46.setVictory((int)(short)-1);
    GameBoard gameBoard51 = new GameBoard(0, "hi!");
    Card card52 = Card.ambassador;
    gameBoard51.returnCard(card52);
    boolean b54 = gameBoard51.gameDone();
    java.util.List<Card> list_card55 = gameBoard51.getActiveSupplyPiles();
    GameBoard gameBoard58 = new GameBoard(0, "hi!");
    Card card59 = Card.ambassador;
    gameBoard58.returnCard(card59);
    int i61 = gameBoard51.numCardsAvailable(card59);
    GameBoard gameBoard64 = new GameBoard(0, "hi!");
    Card card65 = Card.ambassador;
    gameBoard64.returnCard(card65);
    java.util.List<Card> list_card67 = gameBoard7.kingdomCards(card18, card21, card22, card25, card29, card42, card45, card46, card59, card65);
    gameBoard2.takeCard(card59);
    GameBoard gameBoard73 = new GameBoard(0, "hi!");
    Card card74 = Card.ambassador;
    gameBoard73.returnCard(card74);
    Card card76 = Card.cutpurse;
    int i77 = card76.getCost();
    boolean b78 = gameBoard73.hasCardsAvailable(card76);
    Player player79 = new Player("hi!", (int)'a', gameBoard73);
    Card card80 = player79.drawCard();
    player79.addActions((int)(short)1);
    java.lang.String str83 = player79.getName();
    player79.discardHandAndInPlay();
    player79.initPlayerTurn();
    Card card86 = Card.duchy;
    GameBoard gameBoard89 = new GameBoard(0, "hi!");
    Card card90 = Card.adventurer;
    gameBoard89.trashCard(card90);
    player79.gainCardToHand(card86, gameBoard89);
    gameBoard2.trashCard(card86);
    int i94 = gameBoard2.getTotalEmbargoTokens();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    org.junit.Assert.assertTrue("'" + card8 + "' != '" + Card.ambassador + "'", card8.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.cutpurse + "'", card11.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.council_room + "'", card18.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 10);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.embargo + "'", card22.equals(Card.embargo));
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.gold + "'", card25.equals(Card.gold));
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.gardens + "'", card29.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.ambassador + "'", card34.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.cutpurse + "'", card42.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.estate + "'", card45.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.estate + "'", card46.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.ambassador + "'", card52.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card55);
    org.junit.Assert.assertTrue("'" + card59 + "' != '" + Card.ambassador + "'", card59.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    org.junit.Assert.assertTrue("'" + card65 + "' != '" + Card.ambassador + "'", card65.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    org.junit.Assert.assertTrue("'" + card74 + "' != '" + Card.ambassador + "'", card74.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card76 + "' != '" + Card.cutpurse + "'", card76.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    org.junit.Assert.assertTrue("'" + card80 + "' != '" + Card.copper + "'", card80.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "hi!"+ "'", str83.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card86 + "' != '" + Card.duchy + "'", card86.equals(Card.duchy));
    org.junit.Assert.assertTrue("'" + card90 + "' != '" + Card.adventurer + "'", card90.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test168"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = Card.feast;
    int i12 = card11.getCost();
    GameBoard gameBoard15 = new GameBoard(3, "hi!");
    player10.buyCard(card11, gameBoard15);
    int i17 = player10.getNumActions();
    player10.countTreasure();
    player10.discardHandAndInPlay();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.feast + "'", card11.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test169"); }

    GameBoard gameBoard2 = new GameBoard(6, (int)(byte)10);
    java.util.List<Card> list_card5 = gameBoard2.getPurchaseableCards((int)(byte)-1, "");
    GameBoard gameBoard8 = new GameBoard(1, "hi!");
    java.util.List<Card> list_card10 = gameBoard8.kingdomCards((-3));
    gameBoard8.opponentDiscardCopper((int)(short)10);
    GameBoard gameBoard17 = new GameBoard(0, "hi!");
    Card card18 = Card.ambassador;
    gameBoard17.returnCard(card18);
    Card card20 = Card.cutpurse;
    int i21 = card20.getCost();
    boolean b22 = gameBoard17.hasCardsAvailable(card20);
    Player player23 = new Player("hi!", (int)'a', gameBoard17);
    Card card24 = player23.drawCard();
    player23.addActions((int)(short)1);
    java.lang.String str27 = player23.getName();
    player23.discardHandAndInPlay();
    player23.initPlayerTurn();
    Card card30 = player23.drawCard();
    boolean b31 = gameBoard8.hasCardsAvailable(card30);
    GameBoard gameBoard34 = new GameBoard(0, "hi!");
    Card card35 = Card.ambassador;
    gameBoard34.returnCard(card35);
    boolean b37 = gameBoard34.gameDone();
    java.util.List<Card> list_card38 = gameBoard34.getActiveSupplyPiles();
    GameBoard gameBoard41 = new GameBoard(0, "hi!");
    Card card42 = Card.ambassador;
    gameBoard41.returnCard(card42);
    int i44 = gameBoard34.numCardsAvailable(card42);
    Card card46 = Card.council_room;
    gameBoard34.opponentGainCard((int)(byte)1, card46);
    GameBoard gameBoard52 = new GameBoard(0, "hi!");
    Card card53 = Card.ambassador;
    gameBoard52.returnCard(card53);
    Card card55 = Card.cutpurse;
    int i56 = card55.getCost();
    boolean b57 = gameBoard52.hasCardsAvailable(card55);
    Player player58 = new Player("hi!", (int)'a', gameBoard52);
    Card card59 = player58.drawCard();
    player58.addActions((int)(short)1);
    boolean b62 = player58.hasActions();
    GameBoard gameBoard65 = new GameBoard(0, "hi!");
    Card card66 = Card.ambassador;
    gameBoard65.returnCard(card66);
    java.util.List<Card> list_card68 = gameBoard65.getActiveSupplyPiles();
    java.util.List<Card> list_card69 = gameBoard65.getTrash();
    java.util.List<Card> list_card71 = gameBoard65.kingdomCards(100);
    Card card72 = player58.getRandomBuyCard(gameBoard65);
    int i73 = gameBoard34.numEmbargoTokens(card72);
    gameBoard8.takeCard(card72);
    gameBoard2.trashCard(card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.ambassador + "'", card18.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.cutpurse + "'", card20.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.copper + "'", card24.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "hi!"+ "'", str27.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.copper + "'", card30.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.ambassador + "'", card35.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.ambassador + "'", card42.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.council_room + "'", card46.equals(Card.council_room));
    org.junit.Assert.assertTrue("'" + card53 + "' != '" + Card.ambassador + "'", card53.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card55 + "' != '" + Card.cutpurse + "'", card55.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    org.junit.Assert.assertTrue("'" + card59 + "' != '" + Card.copper + "'", card59.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    org.junit.Assert.assertTrue("'" + card66 + "' != '" + Card.ambassador + "'", card66.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card71);
    org.junit.Assert.assertTrue("'" + card72 + "' != '" + Card.copper + "'", card72.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test170"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    boolean b14 = player10.hasActions();
    GameBoard gameBoard17 = new GameBoard(0, "hi!");
    Card card18 = Card.ambassador;
    gameBoard17.returnCard(card18);
    java.util.List<Card> list_card20 = gameBoard17.getActiveSupplyPiles();
    java.util.List<Card> list_card21 = gameBoard17.getTrash();
    java.util.List<Card> list_card23 = gameBoard17.kingdomCards(100);
    Card card24 = player10.getRandomBuyCard(gameBoard17);
    Card card25 = Card.estate;
    card25.setVictory((int)' ');
    boolean b28 = gameBoard17.placeEmbargo(card25);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.ambassador + "'", card18.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.copper + "'", card24.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.estate + "'", card25.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test171"); }

    GameBoard gameBoard6 = new GameBoard(0, "hi!");
    Card card7 = Card.ambassador;
    gameBoard6.returnCard(card7);
    Card card9 = Card.cutpurse;
    int i10 = card9.getCost();
    boolean b11 = gameBoard6.hasCardsAvailable(card9);
    Player player12 = new Player("hi!", (int)'a', gameBoard6);
    Card card13 = player12.drawCard();
    player12.addActions((int)(short)1);
    java.lang.String str16 = player12.getName();
    player12.discardHandAndInPlay();
    player12.initPlayerTurn();
    Card card19 = Card.duchy;
    GameBoard gameBoard22 = new GameBoard(0, "hi!");
    Card card23 = Card.adventurer;
    gameBoard22.trashCard(card23);
    player12.gainCardToHand(card19, gameBoard22);
    Player player26 = new Player("", (int)(short)10, gameBoard22);
    gameBoard22.opponentDraw((int)'#');
    java.util.List<Card> list_card29 = gameBoard22.getAllKingdomCards();
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.ambassador + "'", card7.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.cutpurse + "'", card9.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.copper + "'", card13.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "hi!"+ "'", str16.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.duchy + "'", card19.equals(Card.duchy));
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.adventurer + "'", card23.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test172"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.lang.String str14 = player10.getName();
    player10.discardHandAndInPlay();
    player10.initPlayerTurn();
    int i17 = player10.getNumActions();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test173"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.adventurer;
    gameBoard2.trashCard(card3);
    java.util.List<Player> list_player5 = gameBoard2.getPlayers();
    GameBoard gameBoard10 = new GameBoard(0, "hi!");
    Card card11 = Card.ambassador;
    gameBoard10.returnCard(card11);
    Card card13 = Card.cutpurse;
    int i14 = card13.getCost();
    boolean b15 = gameBoard10.hasCardsAvailable(card13);
    Player player16 = new Player("hi!", (int)'a', gameBoard10);
    Card card17 = player16.drawCard();
    player16.addActions((int)(short)1);
    java.lang.String str20 = player16.getName();
    player16.discardHandAndInPlay();
    player16.initPlayerTurn();
    Card card23 = Card.duchy;
    GameBoard gameBoard26 = new GameBoard(0, "hi!");
    Card card27 = Card.adventurer;
    gameBoard26.trashCard(card27);
    player16.gainCardToHand(card23, gameBoard26);
    boolean b30 = player16.hasActionCard();
    GameBoard gameBoard33 = new GameBoard((int)(byte)100, (-1));
    java.util.List<Card> list_card36 = gameBoard33.getPurchaseableCards((-1), "hi!");
    Card card37 = player16.getRandomBuyCard(gameBoard33);
    java.util.List<Card> list_card38 = gameBoard33.getActiveSupplyPiles();
    boolean b39 = gameBoard33.gameDone();
    GameBoard gameBoard42 = new GameBoard(0, "hi!");
    Card card43 = Card.ambassador;
    gameBoard42.returnCard(card43);
    boolean b45 = gameBoard42.gameDone();
    Card card46 = Card.estate;
    gameBoard42.returnCard(card46);
    gameBoard42.opponentDraw((int)'4');
    int i50 = gameBoard42.play();
    Card card51 = Card.smithy;
    card51.setVictory((int)(byte)-1);
    int i54 = card51.getTreasure();
    int i55 = card51.getCost();
    int i56 = gameBoard42.numEmbargoTokens(card51);
    int i57 = card51.getCost();
    int i58 = gameBoard33.numEmbargoTokens(card51);
    boolean b59 = gameBoard2.hasCardsAvailable(card51);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.adventurer + "'", card3.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.ambassador + "'", card11.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.cutpurse + "'", card13.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.copper + "'", card17.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "hi!"+ "'", str20.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.duchy + "'", card23.equals(Card.duchy));
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    org.junit.Assert.assertTrue("'" + card43 + "' != '" + Card.ambassador + "'", card43.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.estate + "'", card46.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    org.junit.Assert.assertTrue("'" + card51 + "' != '" + Card.smithy + "'", card51.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test174"); }

    GameBoard gameBoard2 = new GameBoard(10, (int)(byte)0);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test175"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    boolean b7 = gameBoard4.gameDone();
    java.util.List<Card> list_card8 = gameBoard4.getTrash();
    Card card9 = Card.ambassador;
    int i10 = card9.getCost();
    gameBoard4.returnCard(card9);
    Player player12 = new Player("hi!", (-1), gameBoard4);
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    GameBoard gameBoard25 = new GameBoard(0, "hi!");
    Card card26 = Card.ambassador;
    gameBoard25.returnCard(card26);
    Card card28 = Card.cutpurse;
    int i29 = card28.getCost();
    boolean b30 = gameBoard25.hasCardsAvailable(card28);
    Player player31 = new Player("hi!", (int)'a', gameBoard25);
    Card card32 = Card.feast;
    int i33 = card32.getCost();
    GameBoard gameBoard36 = new GameBoard(3, "hi!");
    player31.buyCard(card32, gameBoard36);
    player12.gainCard(card19, gameBoard36);
    int i39 = player12.getNum();
    boolean b40 = player12.hasBuys();
    player12.discardHandAndInPlay();
    player12.addActions((int)' ');
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.ambassador + "'", card9.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.ambassador + "'", card26.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.cutpurse + "'", card28.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.feast + "'", card32.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test176"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card3 = gameBoard2.getActiveSupplyPiles();
    int i4 = gameBoard2.getTotalEmbargoTokens();
    java.util.List<Card> list_card6 = gameBoard2.kingdomCards(0);
    java.util.List<Card> list_card7 = gameBoard2.getActiveSupplyPiles();
    java.util.List<Card> list_card8 = gameBoard2.getActiveSupplyPiles();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test177"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    boolean b7 = gameBoard4.gameDone();
    java.util.List<Card> list_card8 = gameBoard4.getTrash();
    Card card9 = Card.ambassador;
    int i10 = card9.getCost();
    gameBoard4.returnCard(card9);
    Player player12 = new Player("hi!", (-1), gameBoard4);
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.cutpurse;
    int i20 = gameBoard15.numCardsAvailable(card19);
    GameBoard gameBoard23 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card24 = gameBoard23.getActiveSupplyPiles();
    int i25 = gameBoard23.getTotalEmbargoTokens();
    Card card26 = Card.council_room;
    int i27 = card26.getVictory();
    int i28 = gameBoard23.numCardsAvailable(card26);
    Card card29 = null;
    Card card30 = Card.embargo;
    card30.setVictory(0);
    Card card33 = Card.gold;
    GameBoard gameBoard36 = new GameBoard((int)(byte)100, (-1));
    Card card37 = Card.gardens;
    int i38 = gameBoard36.numEmbargoTokens(card37);
    GameBoard gameBoard41 = new GameBoard(0, "hi!");
    Card card42 = Card.ambassador;
    gameBoard41.returnCard(card42);
    java.util.List<Card> list_card44 = gameBoard41.getActiveSupplyPiles();
    java.util.List<Card> list_card47 = gameBoard41.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card49 = gameBoard41.kingdomCards((int)(short)100);
    Card card50 = Card.cutpurse;
    int i51 = card50.getCost();
    int i52 = gameBoard41.numEmbargoTokens(card50);
    Card card53 = Card.estate;
    Card card54 = Card.estate;
    card54.setVictory((int)(short)-1);
    GameBoard gameBoard59 = new GameBoard(0, "hi!");
    Card card60 = Card.ambassador;
    gameBoard59.returnCard(card60);
    boolean b62 = gameBoard59.gameDone();
    java.util.List<Card> list_card63 = gameBoard59.getActiveSupplyPiles();
    GameBoard gameBoard66 = new GameBoard(0, "hi!");
    Card card67 = Card.ambassador;
    gameBoard66.returnCard(card67);
    int i69 = gameBoard59.numCardsAvailable(card67);
    GameBoard gameBoard72 = new GameBoard(0, "hi!");
    Card card73 = Card.ambassador;
    gameBoard72.returnCard(card73);
    java.util.List<Card> list_card75 = gameBoard15.kingdomCards(card26, card29, card30, card33, card37, card50, card53, card54, card67, card73);
    gameBoard4.returnCard(card73);
    GameBoard gameBoard79 = new GameBoard(0, "hi!");
    Card card80 = Card.adventurer;
    gameBoard79.trashCard(card80);
    GameBoard gameBoard84 = new GameBoard(0, "hi!");
    Card card85 = Card.adventurer;
    gameBoard84.trashCard(card85);
    gameBoard79.takeCard(card85);
    int i88 = gameBoard4.numEmbargoTokens(card85);
    int i89 = card85.getCost();
    card85.setVictory((int)'#');
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.ambassador + "'", card9.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.cutpurse + "'", card19.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.council_room + "'", card26.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 10);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.embargo + "'", card30.equals(Card.embargo));
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.gold + "'", card33.equals(Card.gold));
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.gardens + "'", card37.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.ambassador + "'", card42.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    org.junit.Assert.assertTrue("'" + card50 + "' != '" + Card.cutpurse + "'", card50.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    org.junit.Assert.assertTrue("'" + card53 + "' != '" + Card.estate + "'", card53.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card54 + "' != '" + Card.estate + "'", card54.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card60 + "' != '" + Card.ambassador + "'", card60.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    org.junit.Assert.assertTrue("'" + card67 + "' != '" + Card.ambassador + "'", card67.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    org.junit.Assert.assertTrue("'" + card73 + "' != '" + Card.ambassador + "'", card73.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card75);
    org.junit.Assert.assertTrue("'" + card80 + "' != '" + Card.adventurer + "'", card80.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card85 + "' != '" + Card.adventurer + "'", card85.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 6);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test178"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    boolean b14 = player10.hasActions();
    GameBoard gameBoard17 = new GameBoard(0, "hi!");
    Card card18 = Card.ambassador;
    gameBoard17.returnCard(card18);
    java.util.List<Card> list_card20 = gameBoard17.getActiveSupplyPiles();
    java.util.List<Card> list_card21 = gameBoard17.getTrash();
    java.util.List<Card> list_card23 = gameBoard17.kingdomCards(100);
    Card card24 = player10.getRandomBuyCard(gameBoard17);
    java.util.List<Card> list_card25 = player10.getHand();
    Card card26 = player10.drawCard();
    GameBoard gameBoard31 = new GameBoard(0, "hi!");
    Card card32 = Card.ambassador;
    gameBoard31.returnCard(card32);
    Card card34 = Card.cutpurse;
    int i35 = card34.getCost();
    boolean b36 = gameBoard31.hasCardsAvailable(card34);
    Player player37 = new Player("hi!", (int)'a', gameBoard31);
    Card card38 = player37.drawCard();
    player37.addActions((int)(short)1);
    boolean b41 = player37.hasActions();
    GameBoard gameBoard44 = new GameBoard(0, "hi!");
    Card card45 = Card.ambassador;
    gameBoard44.returnCard(card45);
    java.util.List<Card> list_card47 = gameBoard44.getActiveSupplyPiles();
    java.util.List<Card> list_card48 = gameBoard44.getTrash();
    java.util.List<Card> list_card50 = gameBoard44.kingdomCards(100);
    Card card51 = player37.getRandomBuyCard(gameBoard44);
    GameBoard gameBoard54 = new GameBoard(0, "hi!");
    Card card55 = Card.ambassador;
    gameBoard54.returnCard(card55);
    boolean b57 = gameBoard54.gameDone();
    java.util.List<Card> list_card58 = gameBoard54.getActiveSupplyPiles();
    GameBoard gameBoard61 = new GameBoard(0, "hi!");
    Card card62 = Card.ambassador;
    gameBoard61.returnCard(card62);
    int i64 = gameBoard54.numCardsAvailable(card62);
    Card card66 = Card.council_room;
    gameBoard54.opponentGainCard((int)(byte)1, card66);
    player10.buyCard(card51, gameBoard54);
    Card card69 = Card.council_room;
    boolean b70 = gameBoard54.placeEmbargo(card69);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.ambassador + "'", card18.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.copper + "'", card24.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.ambassador + "'", card32.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.cutpurse + "'", card34.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.copper + "'", card38.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.ambassador + "'", card45.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    org.junit.Assert.assertTrue("'" + card51 + "' != '" + Card.copper + "'", card51.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card55 + "' != '" + Card.ambassador + "'", card55.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card58);
    org.junit.Assert.assertTrue("'" + card62 + "' != '" + Card.ambassador + "'", card62.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    org.junit.Assert.assertTrue("'" + card66 + "' != '" + Card.council_room + "'", card66.equals(Card.council_room));
    org.junit.Assert.assertTrue("'" + card69 + "' != '" + Card.council_room + "'", card69.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test179"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    boolean b14 = player10.hasActions();
    GameBoard gameBoard17 = new GameBoard(0, "hi!");
    Card card18 = Card.ambassador;
    gameBoard17.returnCard(card18);
    java.util.List<Card> list_card20 = gameBoard17.getActiveSupplyPiles();
    java.util.List<Card> list_card21 = gameBoard17.getTrash();
    java.util.List<Card> list_card23 = gameBoard17.kingdomCards(100);
    Card card24 = player10.getRandomBuyCard(gameBoard17);
    GameBoard gameBoard27 = new GameBoard(0, "hi!");
    Card card28 = Card.ambassador;
    gameBoard27.returnCard(card28);
    java.util.List<Card> list_card30 = gameBoard27.getActiveSupplyPiles();
    java.util.List<Card> list_card33 = gameBoard27.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card35 = gameBoard27.kingdomCards((int)(short)100);
    Card card36 = player10.getRandomBuyCard(gameBoard27);
    GameBoard gameBoard40 = new GameBoard(6, (int)(byte)10);
    // The following exception was thrown during execution in test generation
    try {
    player10.playCard(8, gameBoard40);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.ambassador + "'", card18.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.copper + "'", card24.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.ambassador + "'", card28.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.copper + "'", card36.equals(Card.copper));

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test180"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    int i11 = gameBoard4.play();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test181"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = Card.feast;
    int i12 = card11.getCost();
    GameBoard gameBoard15 = new GameBoard(3, "hi!");
    player10.buyCard(card11, gameBoard15);
    java.lang.String str17 = player10.getName();
    GameBoard gameBoard22 = new GameBoard(0, "hi!");
    Card card23 = Card.ambassador;
    gameBoard22.returnCard(card23);
    Card card25 = Card.cutpurse;
    int i26 = card25.getCost();
    boolean b27 = gameBoard22.hasCardsAvailable(card25);
    Player player28 = new Player("hi!", (int)'a', gameBoard22);
    Card card29 = player28.drawCard();
    player28.addActions((int)(short)1);
    java.lang.String str32 = player28.getName();
    player28.discardHandAndInPlay();
    player28.initPlayerTurn();
    Card card35 = Card.gardens;
    player28.Discard(card35);
    GameBoard gameBoard39 = new GameBoard(1, "hi!");
    player10.gainCardToHand(card35, gameBoard39);
    Card card41 = player10.drawCard();
    GameBoard gameBoard44 = new GameBoard(3, "hi!");
    Card card45 = Card.adventurer;
    int i46 = gameBoard44.numEmbargoTokens(card45);
    GameBoard gameBoard49 = new GameBoard(0, "hi!");
    Card card50 = Card.ambassador;
    gameBoard49.returnCard(card50);
    boolean b52 = gameBoard49.gameDone();
    Card card53 = Card.estate;
    gameBoard49.returnCard(card53);
    java.util.List<Card> list_card55 = gameBoard49.getTrash();
    player10.gainCard(card45, gameBoard49);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.feast + "'", card11.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "hi!"+ "'", str17.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.ambassador + "'", card23.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.cutpurse + "'", card25.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.copper + "'", card29.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "hi!"+ "'", str32.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.gardens + "'", card35.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.copper + "'", card41.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.adventurer + "'", card45.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    org.junit.Assert.assertTrue("'" + card50 + "' != '" + Card.ambassador + "'", card50.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    org.junit.Assert.assertTrue("'" + card53 + "' != '" + Card.estate + "'", card53.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card55);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test182"); }

    GameBoard gameBoard2 = new GameBoard((-3), "hi!");
    java.util.List<Card> list_card3 = gameBoard2.getActiveSupplyPiles();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card3);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test183"); }

    GameBoard gameBoard2 = new GameBoard(6, (int)(byte)10);
    Card card3 = Card.curse;
    gameBoard2.returnCard(card3);
    int i5 = card3.getTreasure();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.curse + "'", card3.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test184"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    boolean b5 = gameBoard2.gameDone();
    java.util.List<Card> list_card6 = gameBoard2.getActiveSupplyPiles();
    GameBoard gameBoard9 = new GameBoard(0, "hi!");
    Card card10 = Card.ambassador;
    gameBoard9.returnCard(card10);
    int i12 = gameBoard2.numCardsAvailable(card10);
    GameBoard gameBoard17 = new GameBoard(0, "hi!");
    Card card18 = Card.ambassador;
    gameBoard17.returnCard(card18);
    Card card20 = Card.cutpurse;
    int i21 = card20.getCost();
    boolean b22 = gameBoard17.hasCardsAvailable(card20);
    Player player23 = new Player("hi!", (int)'a', gameBoard17);
    java.util.List<Card> list_card24 = player23.getPlayedCards();
    Card card25 = Card.adventurer;
    GameBoard gameBoard28 = new GameBoard(0, "hi!");
    Card card29 = Card.ambassador;
    gameBoard28.returnCard(card29);
    boolean b31 = gameBoard28.gameDone();
    Card card32 = Card.estate;
    gameBoard28.returnCard(card32);
    gameBoard28.opponentDraw((int)'4');
    player23.buyCard(card25, gameBoard28);
    GameBoard gameBoard39 = new GameBoard(0, "hi!");
    Card card40 = Card.ambassador;
    gameBoard39.returnCard(card40);
    boolean b42 = gameBoard39.gameDone();
    int i43 = gameBoard39.play();
    Card card44 = player23.getRandomBuyCard(gameBoard39);
    Card card45 = player23.drawCard();
    boolean b46 = gameBoard2.placeEmbargo(card45);
    boolean b47 = gameBoard2.gameDone();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.ambassador + "'", card10.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.ambassador + "'", card18.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.cutpurse + "'", card20.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.adventurer + "'", card25.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.ambassador + "'", card29.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.estate + "'", card32.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.ambassador + "'", card40.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.copper + "'", card44.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.copper + "'", card45.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test185"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    boolean b7 = gameBoard4.gameDone();
    java.util.List<Card> list_card8 = gameBoard4.getTrash();
    Card card9 = Card.ambassador;
    int i10 = card9.getCost();
    gameBoard4.returnCard(card9);
    Player player12 = new Player("hi!", (-1), gameBoard4);
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    GameBoard gameBoard25 = new GameBoard(0, "hi!");
    Card card26 = Card.ambassador;
    gameBoard25.returnCard(card26);
    Card card28 = Card.cutpurse;
    int i29 = card28.getCost();
    boolean b30 = gameBoard25.hasCardsAvailable(card28);
    Player player31 = new Player("hi!", (int)'a', gameBoard25);
    Card card32 = Card.feast;
    int i33 = card32.getCost();
    GameBoard gameBoard36 = new GameBoard(3, "hi!");
    player31.buyCard(card32, gameBoard36);
    player12.gainCard(card19, gameBoard36);
    int i39 = player12.getNum();
    java.util.List<Card> list_card40 = player12.getPlayedCards();
    player12.initPlayerTurn();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.ambassador + "'", card9.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.ambassador + "'", card26.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.cutpurse + "'", card28.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.feast + "'", card32.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test186"); }

    GameBoard gameBoard6 = new GameBoard(0, "hi!");
    Card card7 = Card.ambassador;
    gameBoard6.returnCard(card7);
    Card card9 = Card.cutpurse;
    int i10 = card9.getCost();
    boolean b11 = gameBoard6.hasCardsAvailable(card9);
    Player player12 = new Player("hi!", (int)'a', gameBoard6);
    Card card13 = player12.drawCard();
    player12.addActions((int)(short)1);
    java.lang.String str16 = player12.getName();
    player12.discardHandAndInPlay();
    player12.initPlayerTurn();
    Card card19 = Card.duchy;
    GameBoard gameBoard22 = new GameBoard(0, "hi!");
    Card card23 = Card.adventurer;
    gameBoard22.trashCard(card23);
    player12.gainCardToHand(card19, gameBoard22);
    Player player26 = new Player("", (int)(short)10, gameBoard22);
    java.lang.String str27 = player26.getName();
    player26.initPlayerTurn();
    boolean b29 = player26.hasActionCard();
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.ambassador + "'", card7.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.cutpurse + "'", card9.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.copper + "'", card13.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "hi!"+ "'", str16.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.duchy + "'", card19.equals(Card.duchy));
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.adventurer + "'", card23.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test187"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.lang.String str14 = player10.getName();
    player10.discardHandAndInPlay();
    player10.initPlayerTurn();
    Card card17 = Card.duchy;
    GameBoard gameBoard20 = new GameBoard(0, "hi!");
    Card card21 = Card.adventurer;
    gameBoard20.trashCard(card21);
    player10.gainCardToHand(card17, gameBoard20);
    boolean b24 = player10.hasActionCard();
    GameBoard gameBoard27 = new GameBoard((int)(byte)100, (-1));
    java.util.List<Card> list_card30 = gameBoard27.getPurchaseableCards((-1), "hi!");
    Card card31 = player10.getRandomBuyCard(gameBoard27);
    java.util.List<Card> list_card32 = player10.getDiscard();
    GameBoard gameBoard36 = new GameBoard(0, "hi!");
    Card card37 = Card.ambassador;
    gameBoard36.returnCard(card37);
    java.util.List<Card> list_card39 = gameBoard36.getActiveSupplyPiles();
    java.util.List<Card> list_card42 = gameBoard36.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card44 = gameBoard36.kingdomCards((int)(short)100);
    Card card45 = Card.ambassador;
    int i46 = card45.getCost();
    int i47 = gameBoard36.numEmbargoTokens(card45);
    int i48 = gameBoard36.play();
    java.util.List<Card> list_card50 = gameBoard36.getPurchaseableCards(0);
    player10.playCard((int)(byte)1, gameBoard36);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.duchy + "'", card17.equals(Card.duchy));
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.ambassador + "'", card37.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.ambassador + "'", card45.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test188"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    int i12 = player10.getNum();
    Card card13 = Card.ambassador;
    int i14 = card13.getCost();
    GameBoard gameBoard17 = new GameBoard(0, "hi!");
    Card card18 = Card.ambassador;
    gameBoard17.returnCard(card18);
    boolean b20 = gameBoard17.gameDone();
    Card card21 = Card.estate;
    gameBoard17.returnCard(card21);
    gameBoard17.opponentDraw((int)'4');
    int i25 = gameBoard17.play();
    Card card26 = null;
    gameBoard17.takeCard(card26);
    player10.buyCard(card13, gameBoard17);
    player10.countTreasure();
    boolean b30 = player10.hasBuys();
    Card card31 = Card.embargo;
    card31.setVictory(0);
    java.util.List<java.lang.String> list_str34 = card31.getTypes();
    boolean b35 = player10.hasCard(card31);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 97);
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.ambassador + "'", card13.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 3);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.ambassador + "'", card18.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.estate + "'", card21.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.embargo + "'", card31.equals(Card.embargo));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test189"); }

    GameBoard gameBoard6 = new GameBoard(0, "hi!");
    Card card7 = Card.ambassador;
    gameBoard6.returnCard(card7);
    Card card9 = Card.cutpurse;
    int i10 = card9.getCost();
    boolean b11 = gameBoard6.hasCardsAvailable(card9);
    Player player12 = new Player("hi!", (int)'a', gameBoard6);
    Card card13 = player12.drawCard();
    player12.addActions((int)(short)1);
    java.lang.String str16 = player12.getName();
    player12.discardHandAndInPlay();
    player12.initPlayerTurn();
    Card card19 = Card.duchy;
    GameBoard gameBoard22 = new GameBoard(0, "hi!");
    Card card23 = Card.adventurer;
    gameBoard22.trashCard(card23);
    player12.gainCardToHand(card19, gameBoard22);
    boolean b26 = player12.hasActionCard();
    GameBoard gameBoard29 = new GameBoard((int)(byte)100, (-1));
    java.util.List<Card> list_card32 = gameBoard29.getPurchaseableCards((-1), "hi!");
    Card card33 = player12.getRandomBuyCard(gameBoard29);
    java.util.List<Card> list_card34 = gameBoard29.getActiveSupplyPiles();
    int i35 = gameBoard29.play();
    Player player36 = new Player("", (int)(byte)10, gameBoard29);
    player36.initPlayerTurn();
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.ambassador + "'", card7.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.cutpurse + "'", card9.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.copper + "'", card13.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "hi!"+ "'", str16.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.duchy + "'", card19.equals(Card.duchy));
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.adventurer + "'", card23.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test190"); }

    GameBoard gameBoard2 = new GameBoard((-1), "hi!");

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test191"); }

    Card card0 = Card.smithy;
    card0.setVictory((int)(byte)-1);
    int i3 = card0.getTreasure();
    int i4 = card0.getCost();
    int i5 = card0.getVictory();
    org.junit.Assert.assertTrue("'" + card0 + "' != '" + Card.smithy + "'", card0.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test192"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    java.util.List<Card> list_card5 = gameBoard2.getActiveSupplyPiles();
    int i6 = gameBoard2.getTotalEmbargoTokens();
    gameBoard2.opponentDraw(0);
    gameBoard2.opponentDiscardCopper(4);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test193"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    boolean b7 = gameBoard4.gameDone();
    java.util.List<Card> list_card8 = gameBoard4.getTrash();
    Card card9 = Card.ambassador;
    int i10 = card9.getCost();
    gameBoard4.returnCard(card9);
    Player player12 = new Player("hi!", (-1), gameBoard4);
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.cutpurse;
    int i20 = gameBoard15.numCardsAvailable(card19);
    GameBoard gameBoard23 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card24 = gameBoard23.getActiveSupplyPiles();
    int i25 = gameBoard23.getTotalEmbargoTokens();
    Card card26 = Card.council_room;
    int i27 = card26.getVictory();
    int i28 = gameBoard23.numCardsAvailable(card26);
    Card card29 = null;
    Card card30 = Card.embargo;
    card30.setVictory(0);
    Card card33 = Card.gold;
    GameBoard gameBoard36 = new GameBoard((int)(byte)100, (-1));
    Card card37 = Card.gardens;
    int i38 = gameBoard36.numEmbargoTokens(card37);
    GameBoard gameBoard41 = new GameBoard(0, "hi!");
    Card card42 = Card.ambassador;
    gameBoard41.returnCard(card42);
    java.util.List<Card> list_card44 = gameBoard41.getActiveSupplyPiles();
    java.util.List<Card> list_card47 = gameBoard41.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card49 = gameBoard41.kingdomCards((int)(short)100);
    Card card50 = Card.cutpurse;
    int i51 = card50.getCost();
    int i52 = gameBoard41.numEmbargoTokens(card50);
    Card card53 = Card.estate;
    Card card54 = Card.estate;
    card54.setVictory((int)(short)-1);
    GameBoard gameBoard59 = new GameBoard(0, "hi!");
    Card card60 = Card.ambassador;
    gameBoard59.returnCard(card60);
    boolean b62 = gameBoard59.gameDone();
    java.util.List<Card> list_card63 = gameBoard59.getActiveSupplyPiles();
    GameBoard gameBoard66 = new GameBoard(0, "hi!");
    Card card67 = Card.ambassador;
    gameBoard66.returnCard(card67);
    int i69 = gameBoard59.numCardsAvailable(card67);
    GameBoard gameBoard72 = new GameBoard(0, "hi!");
    Card card73 = Card.ambassador;
    gameBoard72.returnCard(card73);
    java.util.List<Card> list_card75 = gameBoard15.kingdomCards(card26, card29, card30, card33, card37, card50, card53, card54, card67, card73);
    gameBoard4.returnCard(card73);
    GameBoard gameBoard79 = new GameBoard(0, "hi!");
    Card card80 = Card.adventurer;
    gameBoard79.trashCard(card80);
    GameBoard gameBoard84 = new GameBoard(0, "hi!");
    Card card85 = Card.adventurer;
    gameBoard84.trashCard(card85);
    gameBoard79.takeCard(card85);
    int i88 = gameBoard4.numEmbargoTokens(card85);
    java.util.List<Card> list_card89 = gameBoard4.getActiveSupplyPiles();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.ambassador + "'", card9.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.cutpurse + "'", card19.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.council_room + "'", card26.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 10);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.embargo + "'", card30.equals(Card.embargo));
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.gold + "'", card33.equals(Card.gold));
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.gardens + "'", card37.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.ambassador + "'", card42.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    org.junit.Assert.assertTrue("'" + card50 + "' != '" + Card.cutpurse + "'", card50.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    org.junit.Assert.assertTrue("'" + card53 + "' != '" + Card.estate + "'", card53.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card54 + "' != '" + Card.estate + "'", card54.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card60 + "' != '" + Card.ambassador + "'", card60.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    org.junit.Assert.assertTrue("'" + card67 + "' != '" + Card.ambassador + "'", card67.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    org.junit.Assert.assertTrue("'" + card73 + "' != '" + Card.ambassador + "'", card73.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card75);
    org.junit.Assert.assertTrue("'" + card80 + "' != '" + Card.adventurer + "'", card80.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card85 + "' != '" + Card.adventurer + "'", card85.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card89);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test194"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    Card card12 = Card.adventurer;
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    gameBoard15.opponentDraw((int)'4');
    player10.buyCard(card12, gameBoard15);
    java.util.List<Card> list_card24 = player10.getPlayedCards();
    player10.countTreasure();
    GameBoard gameBoard28 = new GameBoard(1, "hi!");
    Card card29 = player10.getRandomBuyCard(gameBoard28);
    int i30 = player10.getNum();
    player10.initPlayerTurn();
    boolean b32 = player10.hasActionCard();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.smithy + "'", card29.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test195"); }

    Card card0 = Card.embargo;
    card0.setVictory(0);
    int i3 = card0.getCost();
    org.junit.Assert.assertTrue("'" + card0 + "' != '" + Card.embargo + "'", card0.equals(Card.embargo));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test196"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card3 = gameBoard2.getActiveSupplyPiles();
    java.util.List<Card> list_card5 = gameBoard2.kingdomCards((int)(byte)100);
    GameBoard gameBoard10 = new GameBoard(0, "hi!");
    Card card11 = Card.ambassador;
    gameBoard10.returnCard(card11);
    Card card13 = Card.cutpurse;
    int i14 = card13.getCost();
    boolean b15 = gameBoard10.hasCardsAvailable(card13);
    Player player16 = new Player("hi!", (int)'a', gameBoard10);
    java.util.List<Card> list_card17 = player16.getPlayedCards();
    Card card18 = Card.adventurer;
    GameBoard gameBoard21 = new GameBoard(0, "hi!");
    Card card22 = Card.ambassador;
    gameBoard21.returnCard(card22);
    boolean b24 = gameBoard21.gameDone();
    Card card25 = Card.estate;
    gameBoard21.returnCard(card25);
    gameBoard21.opponentDraw((int)'4');
    player16.buyCard(card18, gameBoard21);
    GameBoard gameBoard32 = new GameBoard(0, "hi!");
    Card card33 = Card.ambassador;
    gameBoard32.returnCard(card33);
    boolean b35 = gameBoard32.gameDone();
    int i36 = gameBoard32.play();
    Card card37 = player16.getRandomBuyCard(gameBoard32);
    Card card38 = player16.drawCard();
    boolean b39 = gameBoard2.placeEmbargo(card38);
    gameBoard2.opponentDiscardCopper((int)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.ambassador + "'", card11.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.cutpurse + "'", card13.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.adventurer + "'", card18.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.ambassador + "'", card22.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.estate + "'", card25.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.ambassador + "'", card33.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 1);
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.copper + "'", card37.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.copper + "'", card38.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test197"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getHand();
    GameBoard gameBoard14 = new GameBoard((int)(short)0, (int)(byte)1);
    GameBoard gameBoard17 = new GameBoard(1, "hi!");
    java.util.List<Card> list_card19 = gameBoard17.kingdomCards((-3));
    GameBoard gameBoard24 = new GameBoard(0, "hi!");
    Card card25 = Card.ambassador;
    gameBoard24.returnCard(card25);
    Card card27 = Card.cutpurse;
    int i28 = card27.getCost();
    boolean b29 = gameBoard24.hasCardsAvailable(card27);
    Player player30 = new Player("hi!", (int)'a', gameBoard24);
    Card card31 = Card.feast;
    int i32 = card31.getCost();
    GameBoard gameBoard35 = new GameBoard(3, "hi!");
    player30.buyCard(card31, gameBoard35);
    boolean b37 = gameBoard17.placeEmbargo(card31);
    gameBoard14.trashCard(card31);
    GameBoard gameBoard41 = new GameBoard((int)(byte)100, (-1));
    Card card42 = Card.gardens;
    int i43 = gameBoard41.numEmbargoTokens(card42);
    java.util.List<Card> list_card44 = gameBoard41.getTrash();
    gameBoard41.opponentDraw(8);
    player10.gainCard(card31, gameBoard41);
    int i48 = player10.getTotalVictoryPoints();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.ambassador + "'", card25.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.cutpurse + "'", card27.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.feast + "'", card31.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.gardens + "'", card42.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 96);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test198"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    Card card5 = Card.cutpurse;
    int i6 = card5.getCost();
    boolean b7 = gameBoard2.hasCardsAvailable(card5);
    java.util.List<Card> list_card8 = gameBoard2.getAllKingdomCards();
    java.util.List<Card> list_card10 = gameBoard2.getPurchaseableCards((-1));
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.cutpurse + "'", card5.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test199"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    Card card12 = Card.adventurer;
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    gameBoard15.opponentDraw((int)'4');
    player10.buyCard(card12, gameBoard15);
    java.util.List<Card> list_card24 = player10.getPlayedCards();
    player10.countTreasure();
    GameBoard gameBoard28 = new GameBoard(1, "hi!");
    Card card29 = player10.getRandomBuyCard(gameBoard28);
    java.util.List<Card> list_card30 = gameBoard28.getTrash();
    java.util.List<Card> list_card31 = gameBoard28.getAllKingdomCards();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.great_hall + "'", card29.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test200"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.lang.String str14 = player10.getName();
    player10.initPlayerTurn();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test201"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    GameBoard gameBoard14 = new GameBoard((int)(byte)100, (-1));
    Card card15 = Card.gardens;
    int i16 = gameBoard14.numEmbargoTokens(card15);
    java.util.List<Card> list_card17 = gameBoard14.getTrash();
    GameBoard gameBoard20 = new GameBoard(0, "hi!");
    Card card21 = Card.ambassador;
    gameBoard20.returnCard(card21);
    boolean b23 = gameBoard20.gameDone();
    java.util.List<Card> list_card24 = gameBoard20.getActiveSupplyPiles();
    GameBoard gameBoard27 = new GameBoard(0, "hi!");
    Card card28 = Card.ambassador;
    gameBoard27.returnCard(card28);
    boolean b30 = gameBoard20.hasCardsAvailable(card28);
    gameBoard14.trashCard(card28);
    Card card32 = player10.getRandomBuyCard(gameBoard14);
    GameBoard gameBoard35 = new GameBoard(6, (int)(byte)10);
    Card card36 = Card.curse;
    gameBoard35.returnCard(card36);
    int i38 = gameBoard14.numCardsAvailable(card36);
    int i39 = card36.getCost();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.gardens + "'", card15.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.ambassador + "'", card21.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.ambassador + "'", card28.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.curse + "'", card36.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 10);

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test202"); }

    Card card0 = Card.remodel;
    card0.setVictory((-3));
    org.junit.Assert.assertTrue("'" + card0 + "' != '" + Card.remodel + "'", card0.equals(Card.remodel));

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test203"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    boolean b14 = player10.hasActions();
    GameBoard gameBoard17 = new GameBoard(0, "hi!");
    Card card18 = Card.ambassador;
    gameBoard17.returnCard(card18);
    java.util.List<Card> list_card20 = gameBoard17.getActiveSupplyPiles();
    java.util.List<Card> list_card21 = gameBoard17.getTrash();
    java.util.List<Card> list_card23 = gameBoard17.kingdomCards(100);
    Card card24 = player10.getRandomBuyCard(gameBoard17);
    java.util.List<Card> list_card25 = player10.getHand();
    Card card26 = player10.drawCard();
    GameBoard gameBoard31 = new GameBoard(0, "hi!");
    Card card32 = Card.ambassador;
    gameBoard31.returnCard(card32);
    Card card34 = Card.cutpurse;
    int i35 = card34.getCost();
    boolean b36 = gameBoard31.hasCardsAvailable(card34);
    Player player37 = new Player("hi!", (int)'a', gameBoard31);
    Card card38 = player37.drawCard();
    player37.addActions((int)(short)1);
    boolean b41 = player37.hasActions();
    GameBoard gameBoard44 = new GameBoard(0, "hi!");
    Card card45 = Card.ambassador;
    gameBoard44.returnCard(card45);
    java.util.List<Card> list_card47 = gameBoard44.getActiveSupplyPiles();
    java.util.List<Card> list_card48 = gameBoard44.getTrash();
    java.util.List<Card> list_card50 = gameBoard44.kingdomCards(100);
    Card card51 = player37.getRandomBuyCard(gameBoard44);
    GameBoard gameBoard54 = new GameBoard(0, "hi!");
    Card card55 = Card.ambassador;
    gameBoard54.returnCard(card55);
    boolean b57 = gameBoard54.gameDone();
    java.util.List<Card> list_card58 = gameBoard54.getActiveSupplyPiles();
    GameBoard gameBoard61 = new GameBoard(0, "hi!");
    Card card62 = Card.ambassador;
    gameBoard61.returnCard(card62);
    int i64 = gameBoard54.numCardsAvailable(card62);
    Card card66 = Card.council_room;
    gameBoard54.opponentGainCard((int)(byte)1, card66);
    player10.buyCard(card51, gameBoard54);
    java.util.List<Card> list_card69 = gameBoard54.getActiveSupplyPiles();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.ambassador + "'", card18.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.copper + "'", card24.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.ambassador + "'", card32.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.cutpurse + "'", card34.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.copper + "'", card38.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.ambassador + "'", card45.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    org.junit.Assert.assertTrue("'" + card51 + "' != '" + Card.copper + "'", card51.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card55 + "' != '" + Card.ambassador + "'", card55.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card58);
    org.junit.Assert.assertTrue("'" + card62 + "' != '" + Card.ambassador + "'", card62.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    org.junit.Assert.assertTrue("'" + card66 + "' != '" + Card.council_room + "'", card66.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card69);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test204"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    boolean b5 = gameBoard2.gameDone();
    java.util.List<Card> list_card6 = gameBoard2.getActiveSupplyPiles();
    GameBoard gameBoard9 = new GameBoard(0, "hi!");
    Card card10 = Card.ambassador;
    gameBoard9.returnCard(card10);
    int i12 = gameBoard2.numCardsAvailable(card10);
    GameBoard gameBoard17 = new GameBoard(0, "hi!");
    Card card18 = Card.ambassador;
    gameBoard17.returnCard(card18);
    Card card20 = Card.cutpurse;
    int i21 = card20.getCost();
    boolean b22 = gameBoard17.hasCardsAvailable(card20);
    Player player23 = new Player("hi!", (int)'a', gameBoard17);
    java.util.List<Card> list_card24 = player23.getPlayedCards();
    Card card25 = Card.adventurer;
    GameBoard gameBoard28 = new GameBoard(0, "hi!");
    Card card29 = Card.ambassador;
    gameBoard28.returnCard(card29);
    boolean b31 = gameBoard28.gameDone();
    Card card32 = Card.estate;
    gameBoard28.returnCard(card32);
    gameBoard28.opponentDraw((int)'4');
    player23.buyCard(card25, gameBoard28);
    GameBoard gameBoard39 = new GameBoard(0, "hi!");
    Card card40 = Card.ambassador;
    gameBoard39.returnCard(card40);
    boolean b42 = gameBoard39.gameDone();
    int i43 = gameBoard39.play();
    Card card44 = player23.getRandomBuyCard(gameBoard39);
    Card card45 = player23.drawCard();
    boolean b46 = gameBoard2.placeEmbargo(card45);
    GameBoard gameBoard51 = new GameBoard(0, "hi!");
    Card card52 = Card.ambassador;
    gameBoard51.returnCard(card52);
    Card card54 = Card.cutpurse;
    int i55 = card54.getCost();
    boolean b56 = gameBoard51.hasCardsAvailable(card54);
    Player player57 = new Player("hi!", (int)'a', gameBoard51);
    Card card58 = player57.drawCard();
    player57.addActions((int)(short)1);
    boolean b61 = player57.hasActions();
    GameBoard gameBoard64 = new GameBoard(0, "hi!");
    Card card65 = Card.ambassador;
    gameBoard64.returnCard(card65);
    java.util.List<Card> list_card67 = gameBoard64.getActiveSupplyPiles();
    java.util.List<Card> list_card68 = gameBoard64.getTrash();
    java.util.List<Card> list_card70 = gameBoard64.kingdomCards(100);
    Card card71 = player57.getRandomBuyCard(gameBoard64);
    gameBoard2.takeCard(card71);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.ambassador + "'", card10.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.ambassador + "'", card18.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.cutpurse + "'", card20.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.adventurer + "'", card25.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.ambassador + "'", card29.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.estate + "'", card32.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.ambassador + "'", card40.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.copper + "'", card44.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.copper + "'", card45.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.ambassador + "'", card52.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card54 + "' != '" + Card.cutpurse + "'", card54.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    org.junit.Assert.assertTrue("'" + card58 + "' != '" + Card.copper + "'", card58.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    org.junit.Assert.assertTrue("'" + card65 + "' != '" + Card.ambassador + "'", card65.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card70);
    org.junit.Assert.assertTrue("'" + card71 + "' != '" + Card.copper + "'", card71.equals(Card.copper));

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test205"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    boolean b7 = gameBoard4.gameDone();
    java.util.List<Card> list_card8 = gameBoard4.getTrash();
    Card card9 = Card.ambassador;
    int i10 = card9.getCost();
    gameBoard4.returnCard(card9);
    Player player12 = new Player("hi!", (-1), gameBoard4);
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    GameBoard gameBoard25 = new GameBoard(0, "hi!");
    Card card26 = Card.ambassador;
    gameBoard25.returnCard(card26);
    Card card28 = Card.cutpurse;
    int i29 = card28.getCost();
    boolean b30 = gameBoard25.hasCardsAvailable(card28);
    Player player31 = new Player("hi!", (int)'a', gameBoard25);
    Card card32 = Card.feast;
    int i33 = card32.getCost();
    GameBoard gameBoard36 = new GameBoard(3, "hi!");
    player31.buyCard(card32, gameBoard36);
    player12.gainCard(card19, gameBoard36);
    int i39 = player12.getNum();
    java.util.List<Card> list_card40 = player12.getPlayedCards();
    int i41 = player12.getCoins();
    java.util.LinkedList<Card> linkedlist_card42 = player12.getDeck();
    int i43 = player12.getNumActions();
    java.util.List<Card> list_card44 = player12.getDiscard();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.ambassador + "'", card9.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.ambassador + "'", card26.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.cutpurse + "'", card28.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.feast + "'", card32.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test206"); }

    Card card0 = Card.remodel;
    int i1 = card0.getVictory();
    org.junit.Assert.assertTrue("'" + card0 + "' != '" + Card.remodel + "'", card0.equals(Card.remodel));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == (-3));

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test207"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    int i11 = player10.getCoins();
    java.util.List<java.lang.Integer> list_i12 = player10.getActionCardIndices();
    player10.initPlayerTurn();
    java.util.List<Card> list_card14 = player10.getHand();
    java.util.List<java.lang.Integer> list_i15 = player10.getActionCardIndices();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i15);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test208"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.lang.String str14 = player10.getName();
    player10.discardHandAndInPlay();
    player10.initPlayerTurn();
    Card card17 = Card.duchy;
    GameBoard gameBoard20 = new GameBoard(0, "hi!");
    Card card21 = Card.adventurer;
    gameBoard20.trashCard(card21);
    player10.gainCardToHand(card17, gameBoard20);
    boolean b24 = player10.hasActionCard();
    GameBoard gameBoard27 = new GameBoard((int)(byte)100, (-1));
    java.util.List<Card> list_card30 = gameBoard27.getPurchaseableCards((-1), "hi!");
    Card card31 = player10.getRandomBuyCard(gameBoard27);
    java.util.List<Card> list_card32 = gameBoard27.getActiveSupplyPiles();
    boolean b33 = gameBoard27.gameDone();
    java.util.List<Card> list_card35 = gameBoard27.kingdomCards((int)'#');
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.duchy + "'", card17.equals(Card.duchy));
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test209"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    Card card12 = Card.adventurer;
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    gameBoard15.opponentDraw((int)'4');
    player10.buyCard(card12, gameBoard15);
    GameBoard gameBoard26 = new GameBoard(0, "hi!");
    Card card27 = Card.ambassador;
    gameBoard26.returnCard(card27);
    boolean b29 = gameBoard26.gameDone();
    int i30 = gameBoard26.play();
    Card card31 = player10.getRandomBuyCard(gameBoard26);
    java.lang.String str32 = player10.getName();
    java.util.LinkedList<Card> linkedlist_card33 = player10.getDeck();
    player10.addActions((-1));
    java.util.List<Card> list_card36 = player10.getHand();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.ambassador + "'", card27.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.copper + "'", card31.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "hi!"+ "'", str32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test210"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    Card card12 = Card.adventurer;
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    gameBoard15.opponentDraw((int)'4');
    player10.buyCard(card12, gameBoard15);
    java.util.List<Card> list_card24 = player10.getPlayedCards();
    player10.countTreasure();
    int i26 = player10.getTotalVictoryPoints();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 96);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test211"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    boolean b14 = player10.hasActions();
    GameBoard gameBoard17 = new GameBoard(0, "hi!");
    Card card18 = Card.ambassador;
    gameBoard17.returnCard(card18);
    java.util.List<Card> list_card20 = gameBoard17.getActiveSupplyPiles();
    java.util.List<Card> list_card21 = gameBoard17.getTrash();
    java.util.List<Card> list_card23 = gameBoard17.kingdomCards(100);
    Card card24 = player10.getRandomBuyCard(gameBoard17);
    GameBoard gameBoard27 = new GameBoard(0, "hi!");
    Card card28 = Card.ambassador;
    gameBoard27.returnCard(card28);
    java.util.List<Card> list_card30 = gameBoard27.getActiveSupplyPiles();
    java.util.List<Card> list_card33 = gameBoard27.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card35 = gameBoard27.kingdomCards((int)(short)100);
    Card card36 = player10.getRandomBuyCard(gameBoard27);
    GameBoard gameBoard39 = new GameBoard(0, "hi!");
    Card card40 = Card.ambassador;
    gameBoard39.returnCard(card40);
    boolean b42 = gameBoard39.gameDone();
    java.util.List<Card> list_card43 = gameBoard39.getActiveSupplyPiles();
    GameBoard gameBoard46 = new GameBoard(0, "hi!");
    Card card47 = Card.ambassador;
    gameBoard46.returnCard(card47);
    boolean b49 = gameBoard39.hasCardsAvailable(card47);
    GameBoard gameBoard52 = new GameBoard(0, "hi!");
    Card card53 = Card.ambassador;
    gameBoard52.returnCard(card53);
    int i55 = gameBoard52.play();
    player10.buyCard(card47, gameBoard52);
    java.util.List<Card> list_card57 = player10.getHand();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.ambassador + "'", card18.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.copper + "'", card24.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.ambassador + "'", card28.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.copper + "'", card36.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.ambassador + "'", card40.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.ambassador + "'", card47.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    org.junit.Assert.assertTrue("'" + card53 + "' != '" + Card.ambassador + "'", card53.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test212"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = Card.feast;
    int i12 = card11.getCost();
    GameBoard gameBoard15 = new GameBoard(3, "hi!");
    player10.buyCard(card11, gameBoard15);
    java.util.List<Card> list_card17 = player10.getHand();
    java.util.LinkedList<Card> linkedlist_card18 = player10.getDeck();
    java.lang.String str19 = player10.getName();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.feast + "'", card11.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "hi!"+ "'", str19.equals("hi!"));

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test213"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    boolean b14 = player10.hasActions();
    int i15 = player10.getTotalVictoryPoints();
    player10.addActions(10);
    player10.addActions(0);
    Card card20 = player10.drawCard();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 96);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.copper + "'", card20.equals(Card.copper));

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test214"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    boolean b12 = player10.hasActionCard();
    java.util.LinkedList<Card> linkedlist_card13 = player10.getDeck();
    Card card14 = Card.adventurer;
    java.util.List<java.lang.String> list_str15 = card14.getTypes();
    GameBoard gameBoard18 = new GameBoard(0, "hi!");
    Card card19 = Card.ambassador;
    gameBoard18.returnCard(card19);
    boolean b21 = gameBoard18.gameDone();
    java.util.List<Card> list_card22 = gameBoard18.getActiveSupplyPiles();
    GameBoard gameBoard25 = new GameBoard(0, "hi!");
    Card card26 = Card.ambassador;
    gameBoard25.returnCard(card26);
    int i28 = gameBoard18.numCardsAvailable(card26);
    java.util.List<Card> list_card29 = gameBoard18.getAllKingdomCards();
    player10.gainCard(card14, gameBoard18);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card13);
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.adventurer + "'", card14.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str15);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.ambassador + "'", card19.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.ambassador + "'", card26.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test215"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    int i12 = player10.getNum();
    java.util.List<Card> list_card13 = player10.getDiscard();
    boolean b14 = player10.hasActions();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test216"); }

    GameBoard gameBoard2 = new GameBoard(5, (int)(byte)0);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test217"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getHand();
    java.util.List<Card> list_card12 = player10.getPlayedCards();
    GameBoard gameBoard17 = new GameBoard(0, "hi!");
    Card card18 = Card.ambassador;
    gameBoard17.returnCard(card18);
    Card card20 = Card.cutpurse;
    int i21 = card20.getCost();
    boolean b22 = gameBoard17.hasCardsAvailable(card20);
    Player player23 = new Player("hi!", (int)'a', gameBoard17);
    java.util.List<Card> list_card24 = player23.getPlayedCards();
    Card card25 = Card.adventurer;
    GameBoard gameBoard28 = new GameBoard(0, "hi!");
    Card card29 = Card.ambassador;
    gameBoard28.returnCard(card29);
    boolean b31 = gameBoard28.gameDone();
    Card card32 = Card.estate;
    gameBoard28.returnCard(card32);
    gameBoard28.opponentDraw((int)'4');
    player23.buyCard(card25, gameBoard28);
    java.util.List<Card> list_card37 = player23.getPlayedCards();
    player23.countTreasure();
    GameBoard gameBoard41 = new GameBoard(1, "hi!");
    Card card42 = player23.getRandomBuyCard(gameBoard41);
    GameBoard gameBoard45 = new GameBoard(0, "hi!");
    Card card46 = Card.adventurer;
    gameBoard45.trashCard(card46);
    java.util.List<Card> list_card50 = gameBoard45.getPurchaseableCards(10, "");
    player10.buyCard(card42, gameBoard45);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.ambassador + "'", card18.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.cutpurse + "'", card20.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.adventurer + "'", card25.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.ambassador + "'", card29.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.estate + "'", card32.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.remodel + "'", card42.equals(Card.remodel));
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.adventurer + "'", card46.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test218"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getHand();
    java.util.List<Card> list_card12 = player10.getHand();
    int i13 = player10.getBuys();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test219"); }

    GameBoard gameBoard2 = new GameBoard((int)'a', (int)'#');
    GameBoard gameBoard5 = new GameBoard(0, "hi!");
    Card card6 = Card.adventurer;
    gameBoard5.trashCard(card6);
    GameBoard gameBoard10 = new GameBoard(0, "hi!");
    Card card11 = Card.adventurer;
    gameBoard10.trashCard(card11);
    gameBoard5.takeCard(card11);
    gameBoard2.takeCard(card11);
    java.util.List<Card> list_card16 = gameBoard2.getPurchaseableCards((int)(byte)100);
    java.util.List<Card> list_card18 = gameBoard2.kingdomCards(0);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.adventurer + "'", card6.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.adventurer + "'", card11.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test220"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.adventurer;
    gameBoard2.trashCard(card3);
    java.util.List<Card> list_card5 = gameBoard2.getAllKingdomCards();
    GameBoard gameBoard9 = new GameBoard(0, "hi!");
    Card card10 = Card.ambassador;
    gameBoard9.returnCard(card10);
    boolean b12 = gameBoard9.gameDone();
    Card card13 = Card.cutpurse;
    int i14 = gameBoard9.numCardsAvailable(card13);
    GameBoard gameBoard17 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card18 = gameBoard17.getActiveSupplyPiles();
    int i19 = gameBoard17.getTotalEmbargoTokens();
    Card card20 = Card.council_room;
    int i21 = card20.getVictory();
    int i22 = gameBoard17.numCardsAvailable(card20);
    Card card23 = null;
    Card card24 = Card.embargo;
    card24.setVictory(0);
    Card card27 = Card.gold;
    GameBoard gameBoard30 = new GameBoard((int)(byte)100, (-1));
    Card card31 = Card.gardens;
    int i32 = gameBoard30.numEmbargoTokens(card31);
    GameBoard gameBoard35 = new GameBoard(0, "hi!");
    Card card36 = Card.ambassador;
    gameBoard35.returnCard(card36);
    java.util.List<Card> list_card38 = gameBoard35.getActiveSupplyPiles();
    java.util.List<Card> list_card41 = gameBoard35.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card43 = gameBoard35.kingdomCards((int)(short)100);
    Card card44 = Card.cutpurse;
    int i45 = card44.getCost();
    int i46 = gameBoard35.numEmbargoTokens(card44);
    Card card47 = Card.estate;
    Card card48 = Card.estate;
    card48.setVictory((int)(short)-1);
    GameBoard gameBoard53 = new GameBoard(0, "hi!");
    Card card54 = Card.ambassador;
    gameBoard53.returnCard(card54);
    boolean b56 = gameBoard53.gameDone();
    java.util.List<Card> list_card57 = gameBoard53.getActiveSupplyPiles();
    GameBoard gameBoard60 = new GameBoard(0, "hi!");
    Card card61 = Card.ambassador;
    gameBoard60.returnCard(card61);
    int i63 = gameBoard53.numCardsAvailable(card61);
    GameBoard gameBoard66 = new GameBoard(0, "hi!");
    Card card67 = Card.ambassador;
    gameBoard66.returnCard(card67);
    java.util.List<Card> list_card69 = gameBoard9.kingdomCards(card20, card23, card24, card27, card31, card44, card47, card48, card61, card67);
    gameBoard2.opponentGainCard((int)(byte)0, card67);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.adventurer + "'", card3.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.ambassador + "'", card10.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.cutpurse + "'", card13.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.council_room + "'", card20.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 10);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.embargo + "'", card24.equals(Card.embargo));
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.gold + "'", card27.equals(Card.gold));
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.gardens + "'", card31.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.ambassador + "'", card36.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.cutpurse + "'", card44.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.estate + "'", card47.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card48 + "' != '" + Card.estate + "'", card48.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card54 + "' != '" + Card.ambassador + "'", card54.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    org.junit.Assert.assertTrue("'" + card61 + "' != '" + Card.ambassador + "'", card61.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    org.junit.Assert.assertTrue("'" + card67 + "' != '" + Card.ambassador + "'", card67.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card69);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test221"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    int i12 = player10.getBuys();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test222"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    boolean b14 = player10.hasActions();
    int i15 = player10.getTotalVictoryPoints();
    player10.addActions(10);
    player10.addActions(0);
    GameBoard gameBoard22 = new GameBoard(0, "hi!");
    Card card23 = Card.ambassador;
    gameBoard22.returnCard(card23);
    java.util.List<Card> list_card25 = gameBoard22.getActiveSupplyPiles();
    java.util.List<Card> list_card26 = gameBoard22.getTrash();
    java.util.List<Player> list_player27 = gameBoard22.getPlayers();
    GameBoard gameBoard32 = new GameBoard(0, "hi!");
    Card card33 = Card.ambassador;
    gameBoard32.returnCard(card33);
    Card card35 = Card.cutpurse;
    int i36 = card35.getCost();
    boolean b37 = gameBoard32.hasCardsAvailable(card35);
    Player player38 = new Player("hi!", (int)'a', gameBoard32);
    Card card39 = player38.drawCard();
    player38.addActions((int)(short)1);
    boolean b42 = player38.hasActions();
    GameBoard gameBoard45 = new GameBoard(0, "hi!");
    Card card46 = Card.ambassador;
    gameBoard45.returnCard(card46);
    java.util.List<Card> list_card48 = gameBoard45.getActiveSupplyPiles();
    java.util.List<Card> list_card49 = gameBoard45.getTrash();
    java.util.List<Card> list_card51 = gameBoard45.kingdomCards(100);
    Card card52 = player38.getRandomBuyCard(gameBoard45);
    java.util.List<Card> list_card53 = player38.getHand();
    Card card54 = Card.baron;
    int i55 = card54.getTreasure();
    player38.Discard(card54);
    boolean b57 = gameBoard22.hasCardsAvailable(card54);
    Card card58 = Card.smithy;
    card58.setVictory((int)(byte)-1);
    int i61 = card58.getTreasure();
    gameBoard22.returnCard(card58);
    boolean b63 = player10.hasCard(card58);
    player10.discardHandAndInPlay();
    java.util.List<Card> list_card65 = player10.getPlayedCards();
    Card card66 = null;
    GameBoard gameBoard69 = new GameBoard(30, 100);
    player10.gainCard(card66, gameBoard69);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-3));
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.ambassador + "'", card23.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player27);
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.ambassador + "'", card33.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.cutpurse + "'", card35.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.copper + "'", card39.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.ambassador + "'", card46.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.copper + "'", card52.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    org.junit.Assert.assertTrue("'" + card54 + "' != '" + Card.baron + "'", card54.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    org.junit.Assert.assertTrue("'" + card58 + "' != '" + Card.smithy + "'", card58.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card65);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test223"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    boolean b5 = gameBoard2.gameDone();
    Card card6 = Card.estate;
    gameBoard2.returnCard(card6);
    gameBoard2.opponentDraw((int)'4');
    java.util.List<Card> list_card11 = gameBoard2.getPurchaseableCards((-1));
    gameBoard2.opponentDiscardCopper(0);
    java.util.List<Card> list_card15 = gameBoard2.kingdomCards((int)(short)100);
    GameBoard gameBoard18 = new GameBoard(1, "hi!");
    java.util.List<Card> list_card20 = gameBoard18.kingdomCards((-3));
    gameBoard18.opponentDiscardCopper((int)(short)10);
    GameBoard gameBoard27 = new GameBoard(0, "hi!");
    Card card28 = Card.ambassador;
    gameBoard27.returnCard(card28);
    Card card30 = Card.cutpurse;
    int i31 = card30.getCost();
    boolean b32 = gameBoard27.hasCardsAvailable(card30);
    Player player33 = new Player("hi!", (int)'a', gameBoard27);
    Card card34 = player33.drawCard();
    player33.addActions((int)(short)1);
    java.lang.String str37 = player33.getName();
    player33.discardHandAndInPlay();
    player33.initPlayerTurn();
    Card card40 = player33.drawCard();
    boolean b41 = gameBoard18.hasCardsAvailable(card40);
    GameBoard gameBoard44 = new GameBoard(0, "hi!");
    Card card45 = Card.ambassador;
    gameBoard44.returnCard(card45);
    boolean b47 = gameBoard44.gameDone();
    java.util.List<Card> list_card48 = gameBoard44.getActiveSupplyPiles();
    GameBoard gameBoard51 = new GameBoard(0, "hi!");
    Card card52 = Card.ambassador;
    gameBoard51.returnCard(card52);
    int i54 = gameBoard44.numCardsAvailable(card52);
    Card card56 = Card.council_room;
    gameBoard44.opponentGainCard((int)(byte)1, card56);
    GameBoard gameBoard62 = new GameBoard(0, "hi!");
    Card card63 = Card.ambassador;
    gameBoard62.returnCard(card63);
    Card card65 = Card.cutpurse;
    int i66 = card65.getCost();
    boolean b67 = gameBoard62.hasCardsAvailable(card65);
    Player player68 = new Player("hi!", (int)'a', gameBoard62);
    Card card69 = player68.drawCard();
    player68.addActions((int)(short)1);
    boolean b72 = player68.hasActions();
    GameBoard gameBoard75 = new GameBoard(0, "hi!");
    Card card76 = Card.ambassador;
    gameBoard75.returnCard(card76);
    java.util.List<Card> list_card78 = gameBoard75.getActiveSupplyPiles();
    java.util.List<Card> list_card79 = gameBoard75.getTrash();
    java.util.List<Card> list_card81 = gameBoard75.kingdomCards(100);
    Card card82 = player68.getRandomBuyCard(gameBoard75);
    int i83 = gameBoard44.numEmbargoTokens(card82);
    gameBoard18.takeCard(card82);
    gameBoard2.takeCard(card82);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.estate + "'", card6.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.ambassador + "'", card28.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.cutpurse + "'", card30.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.copper + "'", card34.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "hi!"+ "'", str37.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.copper + "'", card40.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.ambassador + "'", card45.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.ambassador + "'", card52.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    org.junit.Assert.assertTrue("'" + card56 + "' != '" + Card.council_room + "'", card56.equals(Card.council_room));
    org.junit.Assert.assertTrue("'" + card63 + "' != '" + Card.ambassador + "'", card63.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card65 + "' != '" + Card.cutpurse + "'", card65.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    org.junit.Assert.assertTrue("'" + card69 + "' != '" + Card.copper + "'", card69.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    org.junit.Assert.assertTrue("'" + card76 + "' != '" + Card.ambassador + "'", card76.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card81);
    org.junit.Assert.assertTrue("'" + card82 + "' != '" + Card.copper + "'", card82.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test224"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card5 = gameBoard4.getActiveSupplyPiles();
    boolean b6 = gameBoard4.gameDone();
    java.util.List<Card> list_card7 = gameBoard4.getTrash();
    GameBoard gameBoard11 = new GameBoard(0, "hi!");
    Card card12 = Card.ambassador;
    gameBoard11.returnCard(card12);
    java.util.List<Card> list_card14 = gameBoard11.getActiveSupplyPiles();
    java.util.List<Card> list_card17 = gameBoard11.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card19 = gameBoard11.kingdomCards((int)(short)100);
    Card card20 = Card.ambassador;
    int i21 = card20.getCost();
    int i22 = gameBoard11.numEmbargoTokens(card20);
    gameBoard4.opponentGainCard((int)(byte)0, card20);
    Player player24 = new Player("", 0, gameBoard4);
    Card card25 = Card.council_room;
    int i26 = card25.getVictory();
    boolean b27 = gameBoard4.placeEmbargo(card25);
    java.util.List<Card> list_card30 = gameBoard4.getPurchaseableCards((int)'#', "hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.ambassador + "'", card12.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.ambassador + "'", card20.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.council_room + "'", card25.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test225"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card5 = gameBoard4.getActiveSupplyPiles();
    boolean b6 = gameBoard4.gameDone();
    java.util.List<Card> list_card7 = gameBoard4.getTrash();
    GameBoard gameBoard11 = new GameBoard(0, "hi!");
    Card card12 = Card.ambassador;
    gameBoard11.returnCard(card12);
    java.util.List<Card> list_card14 = gameBoard11.getActiveSupplyPiles();
    java.util.List<Card> list_card17 = gameBoard11.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card19 = gameBoard11.kingdomCards((int)(short)100);
    Card card20 = Card.ambassador;
    int i21 = card20.getCost();
    int i22 = gameBoard11.numEmbargoTokens(card20);
    gameBoard4.opponentGainCard((int)(byte)0, card20);
    Player player24 = new Player("", 0, gameBoard4);
    int i25 = player24.getNum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.ambassador + "'", card12.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.ambassador + "'", card20.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test226"); }

    GameBoard gameBoard2 = new GameBoard(1, "hi!");
    java.util.List<Card> list_card4 = gameBoard2.kingdomCards((-3));
    GameBoard gameBoard9 = new GameBoard(0, "hi!");
    Card card10 = Card.ambassador;
    gameBoard9.returnCard(card10);
    Card card12 = Card.cutpurse;
    int i13 = card12.getCost();
    boolean b14 = gameBoard9.hasCardsAvailable(card12);
    Player player15 = new Player("hi!", (int)'a', gameBoard9);
    Card card16 = Card.feast;
    int i17 = card16.getCost();
    GameBoard gameBoard20 = new GameBoard(3, "hi!");
    player15.buyCard(card16, gameBoard20);
    boolean b22 = gameBoard2.placeEmbargo(card16);
    java.util.List<java.lang.String> list_str23 = card16.getTypes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card4);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.ambassador + "'", card10.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.cutpurse + "'", card12.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.feast + "'", card16.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str23);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test227"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = Card.feast;
    int i12 = card11.getCost();
    GameBoard gameBoard15 = new GameBoard(3, "hi!");
    player10.buyCard(card11, gameBoard15);
    java.util.List<Card> list_card17 = player10.getHand();
    java.util.LinkedList<Card> linkedlist_card18 = player10.getDeck();
    player10.countTreasure();
    player10.initPlayerTurn();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.feast + "'", card11.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card18);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test228"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.lang.String str14 = player10.getName();
    player10.discardHandAndInPlay();
    player10.initPlayerTurn();
    Card card17 = Card.duchy;
    GameBoard gameBoard20 = new GameBoard(0, "hi!");
    Card card21 = Card.adventurer;
    gameBoard20.trashCard(card21);
    player10.gainCardToHand(card17, gameBoard20);
    boolean b24 = player10.hasActionCard();
    GameBoard gameBoard27 = new GameBoard((int)(byte)100, (-1));
    java.util.List<Card> list_card30 = gameBoard27.getPurchaseableCards((-1), "hi!");
    Card card31 = player10.getRandomBuyCard(gameBoard27);
    Card card32 = Card.smithy;
    card32.setVictory((int)(byte)-1);
    player10.Discard(card32);
    GameBoard gameBoard38 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card39 = gameBoard38.getActiveSupplyPiles();
    int i40 = gameBoard38.getTotalEmbargoTokens();
    Card card41 = Card.council_room;
    int i42 = card41.getVictory();
    int i43 = gameBoard38.numCardsAvailable(card41);
    java.util.List<Card> list_card46 = gameBoard38.getPurchaseableCards((int)'a', "");
    int i47 = gameBoard38.play();
    Card card48 = Card.baron;
    boolean b49 = gameBoard38.placeEmbargo(card48);
    Card card50 = player10.getRandomBuyCard(gameBoard38);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.duchy + "'", card17.equals(Card.duchy));
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.smithy + "'", card32.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.council_room + "'", card41.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    org.junit.Assert.assertTrue("'" + card48 + "' != '" + Card.baron + "'", card48.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    org.junit.Assert.assertTrue("'" + card50 + "' != '" + Card.copper + "'", card50.equals(Card.copper));

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test229"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    Card card12 = Card.adventurer;
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    gameBoard15.opponentDraw((int)'4');
    player10.buyCard(card12, gameBoard15);
    GameBoard gameBoard26 = new GameBoard(0, "hi!");
    Card card27 = Card.ambassador;
    gameBoard26.returnCard(card27);
    boolean b29 = gameBoard26.gameDone();
    int i30 = gameBoard26.play();
    Card card31 = player10.getRandomBuyCard(gameBoard26);
    int i32 = player10.getNum();
    GameBoard gameBoard35 = new GameBoard(3, "hi!");
    Card card36 = Card.cutpurse;
    int i37 = card36.getCost();
    int i38 = card36.getVictory();
    int i39 = gameBoard35.numEmbargoTokens(card36);
    gameBoard35.opponentDraw((int)(short)10);
    GameBoard gameBoard44 = new GameBoard(0, "hi!");
    Card card45 = Card.ambassador;
    gameBoard44.returnCard(card45);
    boolean b47 = gameBoard44.gameDone();
    java.util.List<Card> list_card48 = gameBoard44.getTrash();
    Card card49 = Card.ambassador;
    int i50 = card49.getCost();
    gameBoard44.returnCard(card49);
    boolean b52 = gameBoard35.hasCardsAvailable(card49);
    GameBoard gameBoard55 = new GameBoard(0, "hi!");
    Card card56 = Card.ambassador;
    gameBoard55.returnCard(card56);
    int i58 = gameBoard55.play();
    int i59 = gameBoard55.getTotalEmbargoTokens();
    java.util.List<Card> list_card62 = gameBoard55.getPurchaseableCards(97, "hi!");
    player10.gainCard(card49, gameBoard55);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.ambassador + "'", card27.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.copper + "'", card31.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 97);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.cutpurse + "'", card36.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.ambassador + "'", card45.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    org.junit.Assert.assertTrue("'" + card49 + "' != '" + Card.ambassador + "'", card49.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    org.junit.Assert.assertTrue("'" + card56 + "' != '" + Card.ambassador + "'", card56.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test230"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    GameBoard gameBoard14 = new GameBoard((int)(byte)100, (-1));
    Card card15 = Card.gardens;
    int i16 = gameBoard14.numEmbargoTokens(card15);
    java.util.List<Card> list_card17 = gameBoard14.getTrash();
    GameBoard gameBoard20 = new GameBoard(0, "hi!");
    Card card21 = Card.ambassador;
    gameBoard20.returnCard(card21);
    boolean b23 = gameBoard20.gameDone();
    java.util.List<Card> list_card24 = gameBoard20.getActiveSupplyPiles();
    GameBoard gameBoard27 = new GameBoard(0, "hi!");
    Card card28 = Card.ambassador;
    gameBoard27.returnCard(card28);
    boolean b30 = gameBoard20.hasCardsAvailable(card28);
    gameBoard14.trashCard(card28);
    Card card32 = player10.getRandomBuyCard(gameBoard14);
    GameBoard gameBoard35 = new GameBoard(6, (int)(byte)10);
    Card card36 = Card.curse;
    gameBoard35.returnCard(card36);
    int i38 = gameBoard14.numCardsAvailable(card36);
    GameBoard gameBoard43 = new GameBoard(0, "hi!");
    Card card44 = Card.ambassador;
    gameBoard43.returnCard(card44);
    Card card46 = Card.cutpurse;
    int i47 = card46.getCost();
    boolean b48 = gameBoard43.hasCardsAvailable(card46);
    Player player49 = new Player("hi!", (int)'a', gameBoard43);
    Card card50 = player49.drawCard();
    player49.addActions((int)(short)1);
    java.lang.String str53 = player49.getName();
    player49.discardHandAndInPlay();
    player49.initPlayerTurn();
    Card card56 = Card.duchy;
    GameBoard gameBoard59 = new GameBoard(0, "hi!");
    Card card60 = Card.adventurer;
    gameBoard59.trashCard(card60);
    player49.gainCardToHand(card56, gameBoard59);
    boolean b63 = player49.hasActionCard();
    GameBoard gameBoard66 = new GameBoard((int)(byte)100, (-1));
    java.util.List<Card> list_card69 = gameBoard66.getPurchaseableCards((-1), "hi!");
    Card card70 = player49.getRandomBuyCard(gameBoard66);
    java.util.List<Card> list_card71 = gameBoard66.getActiveSupplyPiles();
    int i72 = gameBoard66.play();
    GameBoard gameBoard75 = new GameBoard(0, "hi!");
    Card card76 = Card.ambassador;
    gameBoard75.returnCard(card76);
    boolean b78 = gameBoard75.gameDone();
    java.util.List<Card> list_card79 = gameBoard75.getActiveSupplyPiles();
    GameBoard gameBoard82 = new GameBoard(0, "hi!");
    Card card83 = Card.ambassador;
    gameBoard82.returnCard(card83);
    boolean b85 = gameBoard75.hasCardsAvailable(card83);
    gameBoard66.returnCard(card83);
    int i87 = gameBoard14.numEmbargoTokens(card83);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.gardens + "'", card15.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.ambassador + "'", card21.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.ambassador + "'", card28.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.curse + "'", card36.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 30);
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.ambassador + "'", card44.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.cutpurse + "'", card46.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    org.junit.Assert.assertTrue("'" + card50 + "' != '" + Card.copper + "'", card50.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "hi!"+ "'", str53.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card56 + "' != '" + Card.duchy + "'", card56.equals(Card.duchy));
    org.junit.Assert.assertTrue("'" + card60 + "' != '" + Card.adventurer + "'", card60.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 1);
    org.junit.Assert.assertTrue("'" + card76 + "' != '" + Card.ambassador + "'", card76.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card79);
    org.junit.Assert.assertTrue("'" + card83 + "' != '" + Card.ambassador + "'", card83.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test231"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    boolean b5 = gameBoard2.gameDone();
    Card card6 = Card.estate;
    gameBoard2.returnCard(card6);
    gameBoard2.opponentDraw((int)'4');
    java.util.List<Card> list_card11 = gameBoard2.getPurchaseableCards((-1));
    Card card12 = Card.smithy;
    card12.setVictory((int)(byte)-1);
    int i15 = card12.getTreasure();
    int i16 = card12.getCost();
    int i17 = card12.getTreasure();
    gameBoard2.returnCard(card12);
    int i19 = gameBoard2.play();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.estate + "'", card6.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.smithy + "'", card12.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test232"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.lang.String str14 = player10.getName();
    player10.discardHandAndInPlay();
    int i16 = player10.getTotalVictoryPoints();
    GameBoard gameBoard19 = new GameBoard(0, "hi!");
    Card card20 = Card.ambassador;
    gameBoard19.returnCard(card20);
    boolean b22 = gameBoard19.gameDone();
    Card card23 = Card.estate;
    gameBoard19.returnCard(card23);
    gameBoard19.opponentDraw((int)'4');
    java.util.List<Card> list_card27 = gameBoard19.getActiveSupplyPiles();
    GameBoard gameBoard30 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card31 = gameBoard30.getActiveSupplyPiles();
    boolean b32 = gameBoard30.gameDone();
    java.util.List<Card> list_card33 = gameBoard30.getTrash();
    GameBoard gameBoard37 = new GameBoard(0, "hi!");
    Card card38 = Card.ambassador;
    gameBoard37.returnCard(card38);
    java.util.List<Card> list_card40 = gameBoard37.getActiveSupplyPiles();
    java.util.List<Card> list_card43 = gameBoard37.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card45 = gameBoard37.kingdomCards((int)(short)100);
    Card card46 = Card.ambassador;
    int i47 = card46.getCost();
    int i48 = gameBoard37.numEmbargoTokens(card46);
    gameBoard30.opponentGainCard((int)(byte)0, card46);
    int i50 = gameBoard19.numEmbargoTokens(card46);
    boolean b51 = player10.hasCard(card46);
    int i52 = player10.getNumActions();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-3));
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.ambassador + "'", card20.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.estate + "'", card23.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.ambassador + "'", card38.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.ambassador + "'", card46.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 2);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test233"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    boolean b7 = gameBoard4.gameDone();
    int i8 = gameBoard4.play();
    Player player9 = new Player("", 11, gameBoard4);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test234"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    Card card5 = Card.cutpurse;
    int i6 = card5.getCost();
    boolean b7 = gameBoard2.hasCardsAvailable(card5);
    gameBoard2.opponentDiscardCopper((int)(byte)-1);
    java.util.List<Card> list_card10 = gameBoard2.getActiveSupplyPiles();
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    Card card18 = Card.cutpurse;
    int i19 = card18.getCost();
    boolean b20 = gameBoard15.hasCardsAvailable(card18);
    Player player21 = new Player("hi!", (int)'a', gameBoard15);
    Card card22 = player21.drawCard();
    player21.addActions((int)(short)1);
    boolean b25 = player21.hasActions();
    GameBoard gameBoard28 = new GameBoard(0, "hi!");
    Card card29 = Card.ambassador;
    gameBoard28.returnCard(card29);
    java.util.List<Card> list_card31 = gameBoard28.getActiveSupplyPiles();
    java.util.List<Card> list_card32 = gameBoard28.getTrash();
    java.util.List<Card> list_card34 = gameBoard28.kingdomCards(100);
    Card card35 = player21.getRandomBuyCard(gameBoard28);
    java.util.List<Card> list_card36 = player21.getHand();
    Card card37 = player21.drawCard();
    int i38 = card37.getTreasure();
    boolean b39 = gameBoard2.hasCardsAvailable(card37);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.cutpurse + "'", card5.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.cutpurse + "'", card18.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.copper + "'", card22.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.ambassador + "'", card29.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.copper + "'", card35.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.copper + "'", card37.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test235"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    Card card12 = Card.adventurer;
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    gameBoard15.opponentDraw((int)'4');
    player10.buyCard(card12, gameBoard15);
    java.util.List<Card> list_card24 = player10.getPlayedCards();
    player10.countTreasure();
    GameBoard gameBoard28 = new GameBoard(1, "hi!");
    Card card29 = player10.getRandomBuyCard(gameBoard28);
    int i30 = player10.getTotalVictoryPoints();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.duchy + "'", card29.equals(Card.duchy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == (-3));

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test236"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.countTreasure();
    java.util.LinkedList<Card> linkedlist_card13 = player10.getDeck();
    boolean b14 = player10.hasActionCard();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test237"); }

    GameBoard gameBoard6 = new GameBoard(0, "hi!");
    Card card7 = Card.ambassador;
    gameBoard6.returnCard(card7);
    boolean b9 = gameBoard6.gameDone();
    java.util.List<Card> list_card10 = gameBoard6.getTrash();
    Card card11 = Card.ambassador;
    int i12 = card11.getCost();
    gameBoard6.returnCard(card11);
    Player player14 = new Player("hi!", (-1), gameBoard6);
    GameBoard gameBoard17 = new GameBoard(0, "hi!");
    Card card18 = Card.ambassador;
    gameBoard17.returnCard(card18);
    boolean b20 = gameBoard17.gameDone();
    Card card21 = Card.estate;
    gameBoard17.returnCard(card21);
    GameBoard gameBoard27 = new GameBoard(0, "hi!");
    Card card28 = Card.ambassador;
    gameBoard27.returnCard(card28);
    Card card30 = Card.cutpurse;
    int i31 = card30.getCost();
    boolean b32 = gameBoard27.hasCardsAvailable(card30);
    Player player33 = new Player("hi!", (int)'a', gameBoard27);
    Card card34 = Card.feast;
    int i35 = card34.getCost();
    GameBoard gameBoard38 = new GameBoard(3, "hi!");
    player33.buyCard(card34, gameBoard38);
    player14.gainCard(card21, gameBoard38);
    Card card41 = Card.province;
    int i42 = card41.getVictory();
    gameBoard38.takeCard(card41);
    Player player44 = new Player("hi!", 291, gameBoard38);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.ambassador + "'", card7.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.ambassador + "'", card11.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 3);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.ambassador + "'", card18.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.estate + "'", card21.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.ambassador + "'", card28.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.cutpurse + "'", card30.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.feast + "'", card34.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 4);
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.province + "'", card41.equals(Card.province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 7);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test238"); }

    Card card0 = Card.baron;
    int i1 = card0.getTreasure();
    java.util.List<java.lang.String> list_str2 = card0.getTypes();
    org.junit.Assert.assertTrue("'" + card0 + "' != '" + Card.baron + "'", card0.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str2);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test239"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = Card.feast;
    int i12 = card11.getCost();
    GameBoard gameBoard15 = new GameBoard(3, "hi!");
    player10.buyCard(card11, gameBoard15);
    java.util.List<Card> list_card17 = player10.getHand();
    java.util.LinkedList<Card> linkedlist_card18 = player10.getDeck();
    player10.countTreasure();
    GameBoard gameBoard24 = new GameBoard(0, "hi!");
    Card card25 = Card.ambassador;
    gameBoard24.returnCard(card25);
    Card card27 = Card.cutpurse;
    int i28 = card27.getCost();
    boolean b29 = gameBoard24.hasCardsAvailable(card27);
    Player player30 = new Player("hi!", (int)'a', gameBoard24);
    Card card31 = player30.drawCard();
    card31.setVictory((int)(short)0);
    player10.Discard(card31);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.feast + "'", card11.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card18);
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.ambassador + "'", card25.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.cutpurse + "'", card27.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.copper + "'", card31.equals(Card.copper));

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test240"); }

    GameBoard gameBoard6 = new GameBoard((int)(byte)100, (-1));
    java.util.List<Card> list_card9 = gameBoard6.getPurchaseableCards((-1), "hi!");
    GameBoard gameBoard14 = new GameBoard(0, "hi!");
    Card card15 = Card.ambassador;
    gameBoard14.returnCard(card15);
    Card card17 = Card.cutpurse;
    int i18 = card17.getCost();
    boolean b19 = gameBoard14.hasCardsAvailable(card17);
    Player player20 = new Player("hi!", (int)'a', gameBoard14);
    Card card21 = player20.drawCard();
    player20.addActions((int)(short)1);
    boolean b24 = player20.hasActions();
    GameBoard gameBoard27 = new GameBoard(0, "hi!");
    Card card28 = Card.ambassador;
    gameBoard27.returnCard(card28);
    java.util.List<Card> list_card30 = gameBoard27.getActiveSupplyPiles();
    java.util.List<Card> list_card31 = gameBoard27.getTrash();
    java.util.List<Card> list_card33 = gameBoard27.kingdomCards(100);
    Card card34 = player20.getRandomBuyCard(gameBoard27);
    GameBoard gameBoard37 = new GameBoard(0, "hi!");
    Card card38 = Card.ambassador;
    gameBoard37.returnCard(card38);
    java.util.List<Card> list_card40 = gameBoard37.getActiveSupplyPiles();
    java.util.List<Card> list_card43 = gameBoard37.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card45 = gameBoard37.kingdomCards((int)(short)100);
    Card card46 = player20.getRandomBuyCard(gameBoard37);
    gameBoard6.trashCard(card46);
    Card card49 = Card.cutpurse;
    int i50 = card49.getCost();
    gameBoard6.opponentGainCard((int)(byte)-1, card49);
    Player player52 = new Player("hi!", (int)(byte)1, gameBoard6);
    java.util.List<Card> list_card53 = gameBoard6.getActiveSupplyPiles();
    Player player54 = new Player("", (-3), gameBoard6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.ambassador + "'", card15.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.cutpurse + "'", card17.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.copper + "'", card21.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.ambassador + "'", card28.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.copper + "'", card34.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.ambassador + "'", card38.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.copper + "'", card46.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card49 + "' != '" + Card.cutpurse + "'", card49.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test241"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    java.util.List<Card> list_card12 = player10.getHand();
    int i13 = player10.getBuys();
    boolean b14 = player10.hasActionCard();
    GameBoard gameBoard19 = new GameBoard(0, "hi!");
    Card card20 = Card.ambassador;
    gameBoard19.returnCard(card20);
    Card card22 = Card.cutpurse;
    int i23 = card22.getCost();
    boolean b24 = gameBoard19.hasCardsAvailable(card22);
    Player player25 = new Player("hi!", (int)'a', gameBoard19);
    Card card26 = player25.drawCard();
    java.util.List<Card> list_card27 = player25.getHand();
    GameBoard gameBoard30 = new GameBoard(0, "hi!");
    Card card31 = Card.ambassador;
    gameBoard30.returnCard(card31);
    boolean b33 = gameBoard30.gameDone();
    Card card34 = Card.estate;
    gameBoard30.returnCard(card34);
    GameBoard gameBoard40 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card41 = gameBoard40.getActiveSupplyPiles();
    boolean b42 = gameBoard40.gameDone();
    java.util.List<Card> list_card43 = gameBoard40.getTrash();
    GameBoard gameBoard47 = new GameBoard(0, "hi!");
    Card card48 = Card.ambassador;
    gameBoard47.returnCard(card48);
    java.util.List<Card> list_card50 = gameBoard47.getActiveSupplyPiles();
    java.util.List<Card> list_card53 = gameBoard47.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card55 = gameBoard47.kingdomCards((int)(short)100);
    Card card56 = Card.ambassador;
    int i57 = card56.getCost();
    int i58 = gameBoard47.numEmbargoTokens(card56);
    gameBoard40.opponentGainCard((int)(byte)0, card56);
    Player player60 = new Player("", 0, gameBoard40);
    GameBoard gameBoard63 = new GameBoard(0, "hi!");
    Card card64 = Card.ambassador;
    gameBoard63.returnCard(card64);
    java.util.List<Card> list_card66 = gameBoard63.getActiveSupplyPiles();
    java.util.List<Card> list_card69 = gameBoard63.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card71 = gameBoard63.kingdomCards((int)(short)100);
    Card card72 = Card.ambassador;
    int i73 = card72.getCost();
    int i74 = gameBoard63.numEmbargoTokens(card72);
    int i75 = gameBoard63.play();
    boolean b76 = gameBoard63.gameDone();
    Card card78 = Card.smithy;
    gameBoard63.opponentGainCard((int)(short)100, card78);
    gameBoard40.takeCard(card78);
    boolean b81 = gameBoard40.gameDone();
    player25.gainCardToHand(card34, gameBoard40);
    GameBoard gameBoard85 = new GameBoard((int)(short)0, (int)(byte)1);
    java.util.List<Card> list_card87 = gameBoard85.getPurchaseableCards((int)(short)0);
    player10.gainCardToHand(card34, gameBoard85);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.ambassador + "'", card20.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.cutpurse + "'", card22.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.copper + "'", card26.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.ambassador + "'", card31.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.estate + "'", card34.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    org.junit.Assert.assertTrue("'" + card48 + "' != '" + Card.ambassador + "'", card48.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card55);
    org.junit.Assert.assertTrue("'" + card56 + "' != '" + Card.ambassador + "'", card56.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    org.junit.Assert.assertTrue("'" + card64 + "' != '" + Card.ambassador + "'", card64.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card71);
    org.junit.Assert.assertTrue("'" + card72 + "' != '" + Card.ambassador + "'", card72.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    org.junit.Assert.assertTrue("'" + card78 + "' != '" + Card.smithy + "'", card78.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card87);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test242"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    Card card12 = Card.adventurer;
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    gameBoard15.opponentDraw((int)'4');
    player10.buyCard(card12, gameBoard15);
    java.util.List<Card> list_card24 = player10.getPlayedCards();
    player10.countTreasure();
    GameBoard gameBoard28 = new GameBoard(1, "hi!");
    Card card29 = player10.getRandomBuyCard(gameBoard28);
    java.util.List<Card> list_card30 = gameBoard28.getTrash();
    GameBoard gameBoard33 = new GameBoard(0, "hi!");
    gameBoard33.opponentDiscardCopper((int)(byte)10);
    GameBoard gameBoard38 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card39 = gameBoard38.getActiveSupplyPiles();
    boolean b40 = gameBoard38.gameDone();
    java.util.List<Card> list_card43 = gameBoard38.getPurchaseableCards((-1), "");
    GameBoard gameBoard48 = new GameBoard(0, "hi!");
    Card card49 = Card.ambassador;
    gameBoard48.returnCard(card49);
    Card card51 = Card.cutpurse;
    int i52 = card51.getCost();
    boolean b53 = gameBoard48.hasCardsAvailable(card51);
    Player player54 = new Player("hi!", (int)'a', gameBoard48);
    Card card55 = player54.drawCard();
    player54.addActions((int)(short)1);
    boolean b58 = player54.hasActions();
    GameBoard gameBoard61 = new GameBoard(0, "hi!");
    Card card62 = Card.ambassador;
    gameBoard61.returnCard(card62);
    java.util.List<Card> list_card64 = gameBoard61.getActiveSupplyPiles();
    java.util.List<Card> list_card65 = gameBoard61.getTrash();
    java.util.List<Card> list_card67 = gameBoard61.kingdomCards(100);
    Card card68 = player54.getRandomBuyCard(gameBoard61);
    java.util.List<Card> list_card69 = player54.getHand();
    Card card70 = player54.drawCard();
    gameBoard38.takeCard(card70);
    boolean b72 = gameBoard33.placeEmbargo(card70);
    int i73 = gameBoard28.numCardsAvailable(card70);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.council_room + "'", card29.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    org.junit.Assert.assertTrue("'" + card49 + "' != '" + Card.ambassador + "'", card49.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card51 + "' != '" + Card.cutpurse + "'", card51.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    org.junit.Assert.assertTrue("'" + card55 + "' != '" + Card.copper + "'", card55.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    org.junit.Assert.assertTrue("'" + card62 + "' != '" + Card.ambassador + "'", card62.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    org.junit.Assert.assertTrue("'" + card68 + "' != '" + Card.copper + "'", card68.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card69);
    org.junit.Assert.assertTrue("'" + card70 + "' != '" + Card.copper + "'", card70.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 46);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test243"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    boolean b7 = gameBoard4.gameDone();
    java.util.List<Card> list_card8 = gameBoard4.getTrash();
    Card card9 = Card.ambassador;
    int i10 = card9.getCost();
    gameBoard4.returnCard(card9);
    Player player12 = new Player("hi!", (-1), gameBoard4);
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    GameBoard gameBoard25 = new GameBoard(0, "hi!");
    Card card26 = Card.ambassador;
    gameBoard25.returnCard(card26);
    Card card28 = Card.cutpurse;
    int i29 = card28.getCost();
    boolean b30 = gameBoard25.hasCardsAvailable(card28);
    Player player31 = new Player("hi!", (int)'a', gameBoard25);
    Card card32 = Card.feast;
    int i33 = card32.getCost();
    GameBoard gameBoard36 = new GameBoard(3, "hi!");
    player31.buyCard(card32, gameBoard36);
    player12.gainCard(card19, gameBoard36);
    int i39 = player12.getNum();
    java.util.List<Card> list_card40 = player12.getDiscard();
    GameBoard gameBoard43 = new GameBoard(0, "hi!");
    Card card44 = Card.ambassador;
    gameBoard43.returnCard(card44);
    java.util.List<Card> list_card46 = gameBoard43.getActiveSupplyPiles();
    java.util.List<Card> list_card49 = gameBoard43.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card51 = gameBoard43.kingdomCards((int)(short)100);
    Card card52 = Card.ambassador;
    int i53 = card52.getCost();
    int i54 = gameBoard43.numEmbargoTokens(card52);
    int i55 = gameBoard43.play();
    boolean b56 = gameBoard43.gameDone();
    Card card58 = Card.smithy;
    gameBoard43.opponentGainCard((int)(short)100, card58);
    GameBoard gameBoard62 = new GameBoard(0, "hi!");
    Card card63 = Card.ambassador;
    gameBoard62.returnCard(card63);
    java.util.List<Card> list_card65 = gameBoard62.getActiveSupplyPiles();
    player12.gainCardToHand(card58, gameBoard62);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.ambassador + "'", card9.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.ambassador + "'", card26.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.cutpurse + "'", card28.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.feast + "'", card32.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.ambassador + "'", card44.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.ambassador + "'", card52.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    org.junit.Assert.assertTrue("'" + card58 + "' != '" + Card.smithy + "'", card58.equals(Card.smithy));
    org.junit.Assert.assertTrue("'" + card63 + "' != '" + Card.ambassador + "'", card63.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card65);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test244"); }

    GameBoard gameBoard2 = new GameBoard((int)'#', "");

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test245"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    boolean b14 = player10.hasActions();
    int i15 = player10.getTotalVictoryPoints();
    player10.addActions(10);
    player10.addActions(0);
    GameBoard gameBoard22 = new GameBoard((int)(byte)10, (int)(byte)-1);
    GameBoard gameBoard25 = new GameBoard(0, "hi!");
    Card card26 = Card.ambassador;
    gameBoard25.returnCard(card26);
    boolean b28 = gameBoard25.gameDone();
    java.util.List<Card> list_card29 = gameBoard25.getActiveSupplyPiles();
    GameBoard gameBoard32 = new GameBoard(0, "hi!");
    Card card33 = Card.ambassador;
    gameBoard32.returnCard(card33);
    int i35 = gameBoard25.numCardsAvailable(card33);
    Card card37 = Card.council_room;
    gameBoard25.opponentGainCard((int)(byte)1, card37);
    GameBoard gameBoard43 = new GameBoard(0, "hi!");
    Card card44 = Card.ambassador;
    gameBoard43.returnCard(card44);
    Card card46 = Card.cutpurse;
    int i47 = card46.getCost();
    boolean b48 = gameBoard43.hasCardsAvailable(card46);
    Player player49 = new Player("hi!", (int)'a', gameBoard43);
    Card card50 = player49.drawCard();
    player49.addActions((int)(short)1);
    boolean b53 = player49.hasActions();
    GameBoard gameBoard56 = new GameBoard(0, "hi!");
    Card card57 = Card.ambassador;
    gameBoard56.returnCard(card57);
    java.util.List<Card> list_card59 = gameBoard56.getActiveSupplyPiles();
    java.util.List<Card> list_card60 = gameBoard56.getTrash();
    java.util.List<Card> list_card62 = gameBoard56.kingdomCards(100);
    Card card63 = player49.getRandomBuyCard(gameBoard56);
    int i64 = gameBoard25.numEmbargoTokens(card63);
    gameBoard22.returnCard(card63);
    player10.Discard(card63);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-3));
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.ambassador + "'", card26.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.ambassador + "'", card33.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.council_room + "'", card37.equals(Card.council_room));
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.ambassador + "'", card44.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.cutpurse + "'", card46.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    org.junit.Assert.assertTrue("'" + card50 + "' != '" + Card.copper + "'", card50.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    org.junit.Assert.assertTrue("'" + card57 + "' != '" + Card.ambassador + "'", card57.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);
    org.junit.Assert.assertTrue("'" + card63 + "' != '" + Card.copper + "'", card63.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test246"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    Card card12 = Card.adventurer;
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    gameBoard15.opponentDraw((int)'4');
    player10.buyCard(card12, gameBoard15);
    GameBoard gameBoard26 = new GameBoard(0, "hi!");
    Card card27 = Card.ambassador;
    gameBoard26.returnCard(card27);
    boolean b29 = gameBoard26.gameDone();
    int i30 = gameBoard26.play();
    Card card31 = player10.getRandomBuyCard(gameBoard26);
    java.lang.String str32 = player10.getName();
    GameBoard gameBoard36 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card37 = gameBoard36.getActiveSupplyPiles();
    int i38 = gameBoard36.getTotalEmbargoTokens();
    java.util.List<Card> list_card40 = gameBoard36.kingdomCards(0);
    gameBoard36.opponentDraw(46);
    // The following exception was thrown during execution in test generation
    try {
    player10.playCard(100, gameBoard36);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.ambassador + "'", card27.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.copper + "'", card31.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "hi!"+ "'", str32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test247"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card5 = gameBoard4.getActiveSupplyPiles();
    boolean b6 = gameBoard4.gameDone();
    java.util.List<Card> list_card7 = gameBoard4.getTrash();
    GameBoard gameBoard11 = new GameBoard(0, "hi!");
    Card card12 = Card.ambassador;
    gameBoard11.returnCard(card12);
    java.util.List<Card> list_card14 = gameBoard11.getActiveSupplyPiles();
    java.util.List<Card> list_card17 = gameBoard11.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card19 = gameBoard11.kingdomCards((int)(short)100);
    Card card20 = Card.ambassador;
    int i21 = card20.getCost();
    int i22 = gameBoard11.numEmbargoTokens(card20);
    gameBoard4.opponentGainCard((int)(byte)0, card20);
    Player player24 = new Player("", 0, gameBoard4);
    java.util.List<Card> list_card26 = gameBoard4.getPurchaseableCards((int)(short)10);
    gameBoard4.opponentDiscardCopper(5);
    gameBoard4.opponentDraw(5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.ambassador + "'", card12.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.ambassador + "'", card20.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test248"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    Card card12 = Card.adventurer;
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    gameBoard15.opponentDraw((int)'4');
    player10.buyCard(card12, gameBoard15);
    java.util.List<Card> list_card24 = player10.getPlayedCards();
    player10.initPlayerTurn();
    java.util.LinkedList<Card> linkedlist_card26 = player10.getDeck();
    player10.discardHandAndInPlay();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card26);

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test249"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.countTreasure();
    java.util.LinkedList<Card> linkedlist_card13 = player10.getDeck();
    player10.initPlayerTurn();
    int i15 = player10.getCoins();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test250"); }

    Card card0 = Card.great_hall;
    int i1 = card0.getCost();
    org.junit.Assert.assertTrue("'" + card0 + "' != '" + Card.great_hall + "'", card0.equals(Card.great_hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 3);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test251"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.countTreasure();
    player10.countTreasure();
    int i14 = player10.getCoins();
    GameBoard gameBoard17 = new GameBoard(3, "hi!");
    Card card18 = Card.adventurer;
    int i19 = gameBoard17.numEmbargoTokens(card18);
    Card card20 = player10.getRandomBuyCard(gameBoard17);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 6);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.adventurer + "'", card18.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.great_hall + "'", card20.equals(Card.great_hall));

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test252"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.adventurer;
    gameBoard2.trashCard(card3);
    java.util.List<Card> list_card5 = gameBoard2.getAllKingdomCards();
    GameBoard gameBoard8 = new GameBoard(0, "hi!");
    Card card9 = Card.ambassador;
    gameBoard8.returnCard(card9);
    boolean b11 = gameBoard8.gameDone();
    Card card12 = Card.cutpurse;
    int i13 = gameBoard8.numCardsAvailable(card12);
    GameBoard gameBoard18 = new GameBoard(0, "hi!");
    Card card19 = Card.ambassador;
    gameBoard18.returnCard(card19);
    Card card21 = Card.cutpurse;
    int i22 = card21.getCost();
    boolean b23 = gameBoard18.hasCardsAvailable(card21);
    Player player24 = new Player("hi!", (int)'a', gameBoard18);
    Card card25 = player24.drawCard();
    int i26 = player24.getNum();
    Card card27 = Card.ambassador;
    int i28 = card27.getCost();
    GameBoard gameBoard31 = new GameBoard(0, "hi!");
    Card card32 = Card.ambassador;
    gameBoard31.returnCard(card32);
    boolean b34 = gameBoard31.gameDone();
    Card card35 = Card.estate;
    gameBoard31.returnCard(card35);
    gameBoard31.opponentDraw((int)'4');
    int i39 = gameBoard31.play();
    Card card40 = null;
    gameBoard31.takeCard(card40);
    player24.buyCard(card27, gameBoard31);
    int i43 = gameBoard8.numEmbargoTokens(card27);
    gameBoard2.returnCard(card27);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.adventurer + "'", card3.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.ambassador + "'", card9.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.cutpurse + "'", card12.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.ambassador + "'", card19.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.cutpurse + "'", card21.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.copper + "'", card25.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 97);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.ambassador + "'", card27.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 3);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.ambassador + "'", card32.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.estate + "'", card35.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test253"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    boolean b5 = gameBoard2.gameDone();
    java.util.List<Card> list_card6 = gameBoard2.getActiveSupplyPiles();
    GameBoard gameBoard9 = new GameBoard(0, "hi!");
    Card card10 = Card.ambassador;
    gameBoard9.returnCard(card10);
    boolean b12 = gameBoard2.hasCardsAvailable(card10);
    int i13 = card10.getTreasure();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.ambassador + "'", card10.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test254"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    Card card12 = Card.adventurer;
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    gameBoard15.opponentDraw((int)'4');
    player10.buyCard(card12, gameBoard15);
    GameBoard gameBoard26 = new GameBoard(0, "hi!");
    Card card27 = Card.ambassador;
    gameBoard26.returnCard(card27);
    boolean b29 = gameBoard26.gameDone();
    int i30 = gameBoard26.play();
    Card card31 = player10.getRandomBuyCard(gameBoard26);
    Card card32 = player10.drawCard();
    GameBoard gameBoard35 = new GameBoard(0, "hi!");
    Card card36 = Card.ambassador;
    gameBoard35.returnCard(card36);
    boolean b38 = gameBoard35.gameDone();
    java.util.List<Card> list_card39 = gameBoard35.getActiveSupplyPiles();
    GameBoard gameBoard42 = new GameBoard(0, "hi!");
    Card card43 = Card.ambassador;
    gameBoard42.returnCard(card43);
    boolean b45 = gameBoard35.hasCardsAvailable(card43);
    card43.setVictory((int)(short)10);
    GameBoard gameBoard50 = new GameBoard((int)'a', (int)'#');
    GameBoard gameBoard53 = new GameBoard(0, "hi!");
    Card card54 = Card.adventurer;
    gameBoard53.trashCard(card54);
    GameBoard gameBoard58 = new GameBoard(0, "hi!");
    Card card59 = Card.adventurer;
    gameBoard58.trashCard(card59);
    gameBoard53.takeCard(card59);
    gameBoard50.takeCard(card59);
    java.util.List<Card> list_card64 = gameBoard50.getPurchaseableCards((int)(byte)100);
    player10.buyCard(card43, gameBoard50);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.ambassador + "'", card27.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.copper + "'", card31.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.copper + "'", card32.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.ambassador + "'", card36.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    org.junit.Assert.assertTrue("'" + card43 + "' != '" + Card.ambassador + "'", card43.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + card54 + "' != '" + Card.adventurer + "'", card54.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card59 + "' != '" + Card.adventurer + "'", card59.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test255"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    java.util.List<Card> list_card5 = gameBoard2.getActiveSupplyPiles();
    java.util.List<Card> list_card8 = gameBoard2.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card10 = gameBoard2.kingdomCards((int)(short)100);
    java.util.List<Card> list_card13 = gameBoard2.getPurchaseableCards(6, "");
    int i14 = gameBoard2.getTotalEmbargoTokens();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test256"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    boolean b5 = gameBoard2.gameDone();
    java.util.List<Card> list_card6 = gameBoard2.getActiveSupplyPiles();
    GameBoard gameBoard12 = new GameBoard(0, "hi!");
    Card card13 = Card.ambassador;
    gameBoard12.returnCard(card13);
    Card card15 = Card.cutpurse;
    int i16 = card15.getCost();
    boolean b17 = gameBoard12.hasCardsAvailable(card15);
    Player player18 = new Player("hi!", (int)'a', gameBoard12);
    java.util.List<Card> list_card19 = player18.getPlayedCards();
    GameBoard gameBoard22 = new GameBoard((int)(byte)100, (-1));
    Card card23 = Card.gardens;
    int i24 = gameBoard22.numEmbargoTokens(card23);
    java.util.List<Card> list_card25 = gameBoard22.getTrash();
    GameBoard gameBoard28 = new GameBoard(0, "hi!");
    Card card29 = Card.ambassador;
    gameBoard28.returnCard(card29);
    boolean b31 = gameBoard28.gameDone();
    java.util.List<Card> list_card32 = gameBoard28.getActiveSupplyPiles();
    GameBoard gameBoard35 = new GameBoard(0, "hi!");
    Card card36 = Card.ambassador;
    gameBoard35.returnCard(card36);
    boolean b38 = gameBoard28.hasCardsAvailable(card36);
    gameBoard22.trashCard(card36);
    Card card40 = player18.getRandomBuyCard(gameBoard22);
    GameBoard gameBoard43 = new GameBoard(6, (int)(byte)10);
    Card card44 = Card.curse;
    gameBoard43.returnCard(card44);
    int i46 = gameBoard22.numCardsAvailable(card44);
    gameBoard2.opponentGainCard((-3), card44);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.ambassador + "'", card13.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.cutpurse + "'", card15.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.gardens + "'", card23.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.ambassador + "'", card29.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.ambassador + "'", card36.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.curse + "'", card44.equals(Card.curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 30);

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test257"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    java.util.List<Card> list_card12 = player10.getHand();
    player10.initPlayerTurn();
    java.util.LinkedList<Card> linkedlist_card14 = player10.getDeck();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card14);

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test258"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    int i5 = gameBoard2.play();
    int i6 = gameBoard2.getTotalEmbargoTokens();
    GameBoard gameBoard11 = new GameBoard(0, "hi!");
    Card card12 = Card.ambassador;
    gameBoard11.returnCard(card12);
    Card card14 = Card.cutpurse;
    int i15 = card14.getCost();
    boolean b16 = gameBoard11.hasCardsAvailable(card14);
    Player player17 = new Player("hi!", (int)'a', gameBoard11);
    Card card18 = player17.drawCard();
    player17.addActions((int)(short)1);
    java.lang.String str21 = player17.getName();
    player17.discardHandAndInPlay();
    int i23 = player17.getTotalVictoryPoints();
    GameBoard gameBoard26 = new GameBoard(0, "hi!");
    Card card27 = Card.ambassador;
    gameBoard26.returnCard(card27);
    boolean b29 = gameBoard26.gameDone();
    Card card30 = Card.estate;
    gameBoard26.returnCard(card30);
    gameBoard26.opponentDraw((int)'4');
    java.util.List<Card> list_card34 = gameBoard26.getActiveSupplyPiles();
    GameBoard gameBoard37 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card38 = gameBoard37.getActiveSupplyPiles();
    boolean b39 = gameBoard37.gameDone();
    java.util.List<Card> list_card40 = gameBoard37.getTrash();
    GameBoard gameBoard44 = new GameBoard(0, "hi!");
    Card card45 = Card.ambassador;
    gameBoard44.returnCard(card45);
    java.util.List<Card> list_card47 = gameBoard44.getActiveSupplyPiles();
    java.util.List<Card> list_card50 = gameBoard44.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card52 = gameBoard44.kingdomCards((int)(short)100);
    Card card53 = Card.ambassador;
    int i54 = card53.getCost();
    int i55 = gameBoard44.numEmbargoTokens(card53);
    gameBoard37.opponentGainCard((int)(byte)0, card53);
    int i57 = gameBoard26.numEmbargoTokens(card53);
    boolean b58 = player17.hasCard(card53);
    int i59 = card53.getTreasure();
    gameBoard2.takeCard(card53);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 7);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.ambassador + "'", card12.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.cutpurse + "'", card14.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.copper + "'", card18.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "hi!"+ "'", str21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == (-3));
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.ambassador + "'", card27.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.estate + "'", card30.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.ambassador + "'", card45.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    org.junit.Assert.assertTrue("'" + card53 + "' != '" + Card.ambassador + "'", card53.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test259"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    boolean b5 = gameBoard2.gameDone();
    Card card6 = Card.cutpurse;
    int i7 = gameBoard2.numCardsAvailable(card6);
    GameBoard gameBoard12 = new GameBoard(0, "hi!");
    Card card13 = Card.ambassador;
    gameBoard12.returnCard(card13);
    Card card15 = Card.cutpurse;
    int i16 = card15.getCost();
    boolean b17 = gameBoard12.hasCardsAvailable(card15);
    Player player18 = new Player("hi!", (int)'a', gameBoard12);
    Card card19 = player18.drawCard();
    int i20 = player18.getNum();
    Card card21 = Card.ambassador;
    int i22 = card21.getCost();
    GameBoard gameBoard25 = new GameBoard(0, "hi!");
    Card card26 = Card.ambassador;
    gameBoard25.returnCard(card26);
    boolean b28 = gameBoard25.gameDone();
    Card card29 = Card.estate;
    gameBoard25.returnCard(card29);
    gameBoard25.opponentDraw((int)'4');
    int i33 = gameBoard25.play();
    Card card34 = null;
    gameBoard25.takeCard(card34);
    player18.buyCard(card21, gameBoard25);
    int i37 = gameBoard2.numEmbargoTokens(card21);
    java.util.List<Card> list_card39 = gameBoard2.getPurchaseableCards((int)(byte)10);
    Card card40 = Card.cutpurse;
    int i41 = card40.getVictory();
    gameBoard2.trashCard(card40);
    card40.setVictory((int)(byte)-1);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.cutpurse + "'", card6.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.ambassador + "'", card13.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.cutpurse + "'", card15.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.copper + "'", card19.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 97);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.ambassador + "'", card21.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 3);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.ambassador + "'", card26.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.estate + "'", card29.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.cutpurse + "'", card40.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test260"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    GameBoard gameBoard14 = new GameBoard((int)(byte)100, (-1));
    Card card15 = Card.gardens;
    int i16 = gameBoard14.numEmbargoTokens(card15);
    java.util.List<Card> list_card17 = gameBoard14.getTrash();
    GameBoard gameBoard20 = new GameBoard(0, "hi!");
    Card card21 = Card.ambassador;
    gameBoard20.returnCard(card21);
    boolean b23 = gameBoard20.gameDone();
    java.util.List<Card> list_card24 = gameBoard20.getActiveSupplyPiles();
    GameBoard gameBoard27 = new GameBoard(0, "hi!");
    Card card28 = Card.ambassador;
    gameBoard27.returnCard(card28);
    boolean b30 = gameBoard20.hasCardsAvailable(card28);
    gameBoard14.trashCard(card28);
    Card card32 = player10.getRandomBuyCard(gameBoard14);
    java.util.List<Card> list_card33 = gameBoard14.getTrash();
    java.util.List<Card> list_card35 = gameBoard14.getPurchaseableCards((int)'4');
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.gardens + "'", card15.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.ambassador + "'", card21.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.ambassador + "'", card28.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test261"); }

    GameBoard gameBoard6 = new GameBoard(0, "hi!");
    Card card7 = Card.ambassador;
    gameBoard6.returnCard(card7);
    Card card9 = Card.cutpurse;
    int i10 = card9.getCost();
    boolean b11 = gameBoard6.hasCardsAvailable(card9);
    Player player12 = new Player("hi!", (int)'a', gameBoard6);
    java.util.List<Card> list_card13 = player12.getPlayedCards();
    Card card14 = Card.adventurer;
    GameBoard gameBoard17 = new GameBoard(0, "hi!");
    Card card18 = Card.ambassador;
    gameBoard17.returnCard(card18);
    boolean b20 = gameBoard17.gameDone();
    Card card21 = Card.estate;
    gameBoard17.returnCard(card21);
    gameBoard17.opponentDraw((int)'4');
    player12.buyCard(card14, gameBoard17);
    GameBoard gameBoard28 = new GameBoard(0, "hi!");
    Card card29 = Card.adventurer;
    gameBoard28.trashCard(card29);
    java.util.List<Player> list_player31 = gameBoard28.getPlayers();
    int i32 = gameBoard28.play();
    Card card33 = Card.salvager;
    int i34 = gameBoard28.numCardsAvailable(card33);
    int i35 = gameBoard17.numCardsAvailable(card33);
    Player player36 = new Player("", 97, gameBoard17);
    int i37 = player36.getBuys();
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.ambassador + "'", card7.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.cutpurse + "'", card9.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.adventurer + "'", card14.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.ambassador + "'", card18.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.estate + "'", card21.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.adventurer + "'", card29.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.salvager + "'", card33.equals(Card.salvager));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 1);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test262"); }

    GameBoard gameBoard6 = new GameBoard(0, "hi!");
    Card card7 = Card.ambassador;
    gameBoard6.returnCard(card7);
    Card card9 = Card.cutpurse;
    int i10 = card9.getCost();
    boolean b11 = gameBoard6.hasCardsAvailable(card9);
    Player player12 = new Player("hi!", (int)'a', gameBoard6);
    java.util.List<Card> list_card13 = player12.getPlayedCards();
    Card card14 = Card.adventurer;
    GameBoard gameBoard17 = new GameBoard(0, "hi!");
    Card card18 = Card.ambassador;
    gameBoard17.returnCard(card18);
    boolean b20 = gameBoard17.gameDone();
    Card card21 = Card.estate;
    gameBoard17.returnCard(card21);
    gameBoard17.opponentDraw((int)'4');
    player12.buyCard(card14, gameBoard17);
    GameBoard gameBoard28 = new GameBoard(0, "hi!");
    Card card29 = Card.adventurer;
    gameBoard28.trashCard(card29);
    java.util.List<Player> list_player31 = gameBoard28.getPlayers();
    int i32 = gameBoard28.play();
    Card card33 = Card.salvager;
    int i34 = gameBoard28.numCardsAvailable(card33);
    int i35 = gameBoard17.numCardsAvailable(card33);
    java.util.List<Card> list_card36 = gameBoard17.getAllKingdomCards();
    Player player37 = new Player("hi!", 3, gameBoard17);
    int i38 = gameBoard17.play();
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.ambassador + "'", card7.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.cutpurse + "'", card9.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.adventurer + "'", card14.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.ambassador + "'", card18.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.estate + "'", card21.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.adventurer + "'", card29.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.salvager + "'", card33.equals(Card.salvager));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test263"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = gameBoard4.getTrash();
    java.util.List<Card> list_card13 = gameBoard4.kingdomCards((-2));
    GameBoard gameBoard16 = new GameBoard(0, "hi!");
    Card card17 = Card.ambassador;
    gameBoard16.returnCard(card17);
    boolean b19 = gameBoard16.gameDone();
    java.util.List<Card> list_card20 = gameBoard16.getActiveSupplyPiles();
    GameBoard gameBoard23 = new GameBoard(0, "hi!");
    Card card24 = Card.ambassador;
    gameBoard23.returnCard(card24);
    int i26 = gameBoard16.numCardsAvailable(card24);
    Card card28 = Card.council_room;
    gameBoard16.opponentGainCard((int)(byte)1, card28);
    card28.setVictory(3);
    gameBoard4.returnCard(card28);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.ambassador + "'", card17.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.ambassador + "'", card24.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.council_room + "'", card28.equals(Card.council_room));

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test264"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card3 = gameBoard2.getActiveSupplyPiles();
    java.util.List<Card> list_card6 = gameBoard2.getPurchaseableCards((-1), "hi!");
    java.util.List<Card> list_card8 = gameBoard2.kingdomCards((int)' ');
    java.util.List<Card> list_card9 = gameBoard2.getAllKingdomCards();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test265"); }

    Card card0 = Card.cutpurse;
    java.util.List<java.lang.String> list_str1 = card0.getTypes();
    org.junit.Assert.assertTrue("'" + card0 + "' != '" + Card.cutpurse + "'", card0.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str1);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test266"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    int i12 = player10.getNum();
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    java.util.List<Card> list_card18 = gameBoard15.getActiveSupplyPiles();
    java.util.List<Card> list_card21 = gameBoard15.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card23 = gameBoard15.kingdomCards((int)(short)100);
    Card card24 = Card.cutpurse;
    int i25 = card24.getCost();
    int i26 = gameBoard15.numEmbargoTokens(card24);
    GameBoard gameBoard29 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card30 = gameBoard29.getActiveSupplyPiles();
    player10.gainCard(card24, gameBoard29);
    player10.addActions(10);
    int i34 = player10.getNumActions();
    int i35 = player10.getBuys();
    java.util.List<Card> list_card36 = player10.getDiscard();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 97);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.cutpurse + "'", card24.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test267"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    boolean b5 = gameBoard2.gameDone();
    Card card6 = Card.estate;
    gameBoard2.returnCard(card6);
    gameBoard2.opponentDraw((int)'4');
    java.util.List<Card> list_card11 = gameBoard2.getPurchaseableCards((-1));
    gameBoard2.opponentDiscardCopper(0);
    GameBoard gameBoard16 = new GameBoard(0, "hi!");
    Card card17 = Card.ambassador;
    gameBoard16.returnCard(card17);
    java.util.List<Card> list_card19 = gameBoard16.getActiveSupplyPiles();
    java.util.List<Card> list_card22 = gameBoard16.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card24 = gameBoard16.kingdomCards((int)(short)100);
    Card card25 = Card.cutpurse;
    int i26 = card25.getCost();
    int i27 = gameBoard16.numEmbargoTokens(card25);
    int i28 = card25.getCost();
    boolean b29 = gameBoard2.placeEmbargo(card25);
    GameBoard gameBoard34 = new GameBoard(0, "hi!");
    Card card35 = Card.ambassador;
    gameBoard34.returnCard(card35);
    Card card37 = Card.cutpurse;
    int i38 = card37.getCost();
    boolean b39 = gameBoard34.hasCardsAvailable(card37);
    Player player40 = new Player("hi!", (int)'a', gameBoard34);
    Card card41 = player40.drawCard();
    player40.addActions((int)(short)1);
    boolean b44 = player40.hasActions();
    GameBoard gameBoard47 = new GameBoard(0, "hi!");
    Card card48 = Card.ambassador;
    gameBoard47.returnCard(card48);
    java.util.List<Card> list_card50 = gameBoard47.getActiveSupplyPiles();
    java.util.List<Card> list_card51 = gameBoard47.getTrash();
    java.util.List<Card> list_card53 = gameBoard47.kingdomCards(100);
    Card card54 = player40.getRandomBuyCard(gameBoard47);
    GameBoard gameBoard57 = new GameBoard(0, "hi!");
    Card card58 = Card.ambassador;
    gameBoard57.returnCard(card58);
    java.util.List<Card> list_card60 = gameBoard57.getActiveSupplyPiles();
    java.util.List<Card> list_card63 = gameBoard57.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card65 = gameBoard57.kingdomCards((int)(short)100);
    Card card66 = player40.getRandomBuyCard(gameBoard57);
    int i67 = card66.getCost();
    int i68 = gameBoard2.numEmbargoTokens(card66);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.estate + "'", card6.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.ambassador + "'", card17.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.cutpurse + "'", card25.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.ambassador + "'", card35.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.cutpurse + "'", card37.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.copper + "'", card41.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    org.junit.Assert.assertTrue("'" + card48 + "' != '" + Card.ambassador + "'", card48.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    org.junit.Assert.assertTrue("'" + card54 + "' != '" + Card.copper + "'", card54.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card58 + "' != '" + Card.ambassador + "'", card58.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card65);
    org.junit.Assert.assertTrue("'" + card66 + "' != '" + Card.copper + "'", card66.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test268"); }

    GameBoard gameBoard2 = new GameBoard((int)(byte)1, "hi!");

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test269"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.adventurer;
    gameBoard2.trashCard(card3);
    java.util.List<Card> list_card7 = gameBoard2.getPurchaseableCards(10, "");
    Card card8 = Card.duchy;
    int i9 = gameBoard2.numEmbargoTokens(card8);
    gameBoard2.opponentDraw(97);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.adventurer + "'", card3.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    org.junit.Assert.assertTrue("'" + card8 + "' != '" + Card.duchy + "'", card8.equals(Card.duchy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test270"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.lang.String str14 = player10.getName();
    player10.discardHandAndInPlay();
    int i16 = player10.getTotalVictoryPoints();
    int i17 = player10.getCoins();
    int i18 = player10.getNum();
    int i19 = player10.getCoins();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-3));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test271"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    Card card12 = Card.adventurer;
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    gameBoard15.opponentDraw((int)'4');
    player10.buyCard(card12, gameBoard15);
    java.util.List<Card> list_card24 = player10.getPlayedCards();
    int i25 = player10.getBuys();
    java.util.List<Card> list_card26 = player10.getDiscard();
    int i27 = player10.getTotalVictoryPoints();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == (-3));

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test272"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    boolean b5 = gameBoard2.gameDone();
    java.util.List<Card> list_card6 = gameBoard2.getTrash();
    Card card7 = Card.ambassador;
    int i8 = card7.getCost();
    gameBoard2.returnCard(card7);
    int i10 = card7.getVictory();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.ambassador + "'", card7.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test273"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    boolean b7 = gameBoard4.gameDone();
    java.util.List<Card> list_card8 = gameBoard4.getTrash();
    Card card9 = Card.ambassador;
    int i10 = card9.getCost();
    gameBoard4.returnCard(card9);
    Player player12 = new Player("hi!", (-1), gameBoard4);
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    GameBoard gameBoard25 = new GameBoard(0, "hi!");
    Card card26 = Card.ambassador;
    gameBoard25.returnCard(card26);
    Card card28 = Card.cutpurse;
    int i29 = card28.getCost();
    boolean b30 = gameBoard25.hasCardsAvailable(card28);
    Player player31 = new Player("hi!", (int)'a', gameBoard25);
    Card card32 = Card.feast;
    int i33 = card32.getCost();
    GameBoard gameBoard36 = new GameBoard(3, "hi!");
    player31.buyCard(card32, gameBoard36);
    player12.gainCard(card19, gameBoard36);
    java.util.LinkedList<Card> linkedlist_card39 = player12.getDeck();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.ambassador + "'", card9.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.ambassador + "'", card26.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.cutpurse + "'", card28.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.feast + "'", card32.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card39);

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test274"); }

    Card card0 = Card.province;
    int i1 = card0.getVictory();
    int i2 = card0.getTreasure();
    org.junit.Assert.assertTrue("'" + card0 + "' != '" + Card.province + "'", card0.equals(Card.province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test275"); }

    GameBoard gameBoard2 = new GameBoard((int)(byte)100, (-1));
    int i3 = gameBoard2.getTotalEmbargoTokens();
    int i4 = gameBoard2.play();
    GameBoard gameBoard8 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card9 = gameBoard8.getActiveSupplyPiles();
    java.util.List<Card> list_card12 = gameBoard8.getPurchaseableCards((-1), "hi!");
    java.util.List<Card> list_card14 = gameBoard8.kingdomCards((int)' ');
    GameBoard gameBoard19 = new GameBoard(0, "hi!");
    Card card20 = Card.ambassador;
    gameBoard19.returnCard(card20);
    Card card22 = Card.cutpurse;
    int i23 = card22.getCost();
    boolean b24 = gameBoard19.hasCardsAvailable(card22);
    Player player25 = new Player("hi!", (int)'a', gameBoard19);
    java.util.List<Card> list_card26 = player25.getPlayedCards();
    GameBoard gameBoard29 = new GameBoard((int)(byte)100, (-1));
    Card card30 = Card.gardens;
    int i31 = gameBoard29.numEmbargoTokens(card30);
    java.util.List<Card> list_card32 = gameBoard29.getTrash();
    GameBoard gameBoard35 = new GameBoard(0, "hi!");
    Card card36 = Card.ambassador;
    gameBoard35.returnCard(card36);
    boolean b38 = gameBoard35.gameDone();
    java.util.List<Card> list_card39 = gameBoard35.getActiveSupplyPiles();
    GameBoard gameBoard42 = new GameBoard(0, "hi!");
    Card card43 = Card.ambassador;
    gameBoard42.returnCard(card43);
    boolean b45 = gameBoard35.hasCardsAvailable(card43);
    gameBoard29.trashCard(card43);
    Card card47 = player25.getRandomBuyCard(gameBoard29);
    int i48 = player25.getBuys();
    boolean b49 = player25.hasBuys();
    int i50 = player25.getNum();
    Card card51 = player25.drawCard();
    boolean b52 = gameBoard8.hasCardsAvailable(card51);
    gameBoard2.opponentGainCard((int)(byte)1, card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.ambassador + "'", card20.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.cutpurse + "'", card22.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.gardens + "'", card30.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.ambassador + "'", card36.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    org.junit.Assert.assertTrue("'" + card43 + "' != '" + Card.ambassador + "'", card43.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 97);
    org.junit.Assert.assertTrue("'" + card51 + "' != '" + Card.copper + "'", card51.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test276"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    Card card12 = Card.adventurer;
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    gameBoard15.opponentDraw((int)'4');
    player10.buyCard(card12, gameBoard15);
    GameBoard gameBoard26 = new GameBoard(0, "hi!");
    Card card27 = Card.ambassador;
    gameBoard26.returnCard(card27);
    boolean b29 = gameBoard26.gameDone();
    int i30 = gameBoard26.play();
    Card card31 = player10.getRandomBuyCard(gameBoard26);
    java.lang.String str32 = player10.getName();
    int i33 = player10.getNumActions();
    GameBoard gameBoard38 = new GameBoard(0, "hi!");
    Card card39 = Card.ambassador;
    gameBoard38.returnCard(card39);
    Card card41 = Card.cutpurse;
    int i42 = card41.getCost();
    boolean b43 = gameBoard38.hasCardsAvailable(card41);
    Player player44 = new Player("hi!", (int)'a', gameBoard38);
    Card card45 = player44.drawCard();
    int i46 = player44.getNum();
    Card card47 = Card.ambassador;
    int i48 = card47.getCost();
    GameBoard gameBoard51 = new GameBoard(0, "hi!");
    Card card52 = Card.ambassador;
    gameBoard51.returnCard(card52);
    boolean b54 = gameBoard51.gameDone();
    Card card55 = Card.estate;
    gameBoard51.returnCard(card55);
    gameBoard51.opponentDraw((int)'4');
    int i59 = gameBoard51.play();
    Card card60 = null;
    gameBoard51.takeCard(card60);
    player44.buyCard(card47, gameBoard51);
    GameBoard gameBoard65 = new GameBoard((-3), (int)(byte)10);
    boolean b66 = gameBoard65.gameDone();
    player10.buyCard(card47, gameBoard65);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.ambassador + "'", card27.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.copper + "'", card31.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "hi!"+ "'", str32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.ambassador + "'", card39.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.cutpurse + "'", card41.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.copper + "'", card45.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 97);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.ambassador + "'", card47.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 3);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.ambassador + "'", card52.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + card55 + "' != '" + Card.estate + "'", card55.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test277"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    boolean b14 = player10.hasActions();
    GameBoard gameBoard17 = new GameBoard(0, "hi!");
    Card card18 = Card.ambassador;
    gameBoard17.returnCard(card18);
    java.util.List<Card> list_card20 = gameBoard17.getActiveSupplyPiles();
    java.util.List<Card> list_card21 = gameBoard17.getTrash();
    java.util.List<Card> list_card23 = gameBoard17.kingdomCards(100);
    Card card24 = player10.getRandomBuyCard(gameBoard17);
    int i25 = card24.getCost();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.ambassador + "'", card18.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.copper + "'", card24.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test278"); }

    GameBoard gameBoard2 = new GameBoard((int)(byte)100, (-1));
    java.util.List<Card> list_card5 = gameBoard2.getPurchaseableCards((-1), "hi!");
    GameBoard gameBoard10 = new GameBoard(0, "hi!");
    Card card11 = Card.ambassador;
    gameBoard10.returnCard(card11);
    Card card13 = Card.cutpurse;
    int i14 = card13.getCost();
    boolean b15 = gameBoard10.hasCardsAvailable(card13);
    Player player16 = new Player("hi!", (int)'a', gameBoard10);
    Card card17 = player16.drawCard();
    player16.addActions((int)(short)1);
    boolean b20 = player16.hasActions();
    GameBoard gameBoard23 = new GameBoard(0, "hi!");
    Card card24 = Card.ambassador;
    gameBoard23.returnCard(card24);
    java.util.List<Card> list_card26 = gameBoard23.getActiveSupplyPiles();
    java.util.List<Card> list_card27 = gameBoard23.getTrash();
    java.util.List<Card> list_card29 = gameBoard23.kingdomCards(100);
    Card card30 = player16.getRandomBuyCard(gameBoard23);
    GameBoard gameBoard33 = new GameBoard(0, "hi!");
    Card card34 = Card.ambassador;
    gameBoard33.returnCard(card34);
    java.util.List<Card> list_card36 = gameBoard33.getActiveSupplyPiles();
    java.util.List<Card> list_card39 = gameBoard33.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card41 = gameBoard33.kingdomCards((int)(short)100);
    Card card42 = player16.getRandomBuyCard(gameBoard33);
    gameBoard2.trashCard(card42);
    Card card45 = Card.cutpurse;
    int i46 = card45.getCost();
    gameBoard2.opponentGainCard((int)(byte)-1, card45);
    boolean b48 = gameBoard2.gameDone();
    java.util.List<Card> list_card49 = gameBoard2.getAllKingdomCards();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.ambassador + "'", card11.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.cutpurse + "'", card13.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.copper + "'", card17.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.ambassador + "'", card24.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.copper + "'", card30.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.ambassador + "'", card34.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.copper + "'", card42.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.cutpurse + "'", card45.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test279"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    int i5 = gameBoard2.play();
    gameBoard2.opponentDiscardCopper((-2));
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test280"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card3 = gameBoard2.getActiveSupplyPiles();
    boolean b4 = gameBoard2.gameDone();
    java.util.List<Card> list_card5 = gameBoard2.getTrash();
    java.util.List<Card> list_card7 = gameBoard2.getPurchaseableCards((-3));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test281"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.lang.String str14 = player10.getName();
    java.util.List<Card> list_card15 = player10.getPlayedCards();
    GameBoard gameBoard18 = new GameBoard(0, "hi!");
    Card card19 = Card.ambassador;
    gameBoard18.returnCard(card19);
    boolean b21 = gameBoard18.gameDone();
    Card card22 = Card.cutpurse;
    int i23 = gameBoard18.numCardsAvailable(card22);
    GameBoard gameBoard26 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card27 = gameBoard26.getActiveSupplyPiles();
    int i28 = gameBoard26.getTotalEmbargoTokens();
    Card card29 = Card.council_room;
    int i30 = card29.getVictory();
    int i31 = gameBoard26.numCardsAvailable(card29);
    Card card32 = null;
    Card card33 = Card.embargo;
    card33.setVictory(0);
    Card card36 = Card.gold;
    GameBoard gameBoard39 = new GameBoard((int)(byte)100, (-1));
    Card card40 = Card.gardens;
    int i41 = gameBoard39.numEmbargoTokens(card40);
    GameBoard gameBoard44 = new GameBoard(0, "hi!");
    Card card45 = Card.ambassador;
    gameBoard44.returnCard(card45);
    java.util.List<Card> list_card47 = gameBoard44.getActiveSupplyPiles();
    java.util.List<Card> list_card50 = gameBoard44.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card52 = gameBoard44.kingdomCards((int)(short)100);
    Card card53 = Card.cutpurse;
    int i54 = card53.getCost();
    int i55 = gameBoard44.numEmbargoTokens(card53);
    Card card56 = Card.estate;
    Card card57 = Card.estate;
    card57.setVictory((int)(short)-1);
    GameBoard gameBoard62 = new GameBoard(0, "hi!");
    Card card63 = Card.ambassador;
    gameBoard62.returnCard(card63);
    boolean b65 = gameBoard62.gameDone();
    java.util.List<Card> list_card66 = gameBoard62.getActiveSupplyPiles();
    GameBoard gameBoard69 = new GameBoard(0, "hi!");
    Card card70 = Card.ambassador;
    gameBoard69.returnCard(card70);
    int i72 = gameBoard62.numCardsAvailable(card70);
    GameBoard gameBoard75 = new GameBoard(0, "hi!");
    Card card76 = Card.ambassador;
    gameBoard75.returnCard(card76);
    java.util.List<Card> list_card78 = gameBoard18.kingdomCards(card29, card32, card33, card36, card40, card53, card56, card57, card70, card76);
    player10.Discard(card40);
    player10.countTreasure();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.ambassador + "'", card19.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.cutpurse + "'", card22.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.council_room + "'", card29.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 10);
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.embargo + "'", card33.equals(Card.embargo));
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.gold + "'", card36.equals(Card.gold));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.gardens + "'", card40.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.ambassador + "'", card45.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    org.junit.Assert.assertTrue("'" + card53 + "' != '" + Card.cutpurse + "'", card53.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    org.junit.Assert.assertTrue("'" + card56 + "' != '" + Card.estate + "'", card56.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card57 + "' != '" + Card.estate + "'", card57.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card63 + "' != '" + Card.ambassador + "'", card63.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card66);
    org.junit.Assert.assertTrue("'" + card70 + "' != '" + Card.ambassador + "'", card70.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    org.junit.Assert.assertTrue("'" + card76 + "' != '" + Card.ambassador + "'", card76.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card78);

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test282"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.lang.String str14 = player10.getName();
    player10.discardHandAndInPlay();
    player10.initPlayerTurn();
    Card card17 = Card.duchy;
    GameBoard gameBoard20 = new GameBoard(0, "hi!");
    Card card21 = Card.adventurer;
    gameBoard20.trashCard(card21);
    player10.gainCardToHand(card17, gameBoard20);
    boolean b24 = player10.hasActionCard();
    GameBoard gameBoard27 = new GameBoard((int)(byte)100, (-1));
    java.util.List<Card> list_card30 = gameBoard27.getPurchaseableCards((-1), "hi!");
    Card card31 = player10.getRandomBuyCard(gameBoard27);
    java.util.List<Card> list_card32 = gameBoard27.getActiveSupplyPiles();
    int i33 = gameBoard27.play();
    gameBoard27.opponentDiscardCopper(100);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.duchy + "'", card17.equals(Card.duchy));
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.adventurer + "'", card21.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test283"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    int i11 = player10.getCoins();
    java.util.List<java.lang.Integer> list_i12 = player10.getActionCardIndices();
    player10.initPlayerTurn();
    java.util.List<Card> list_card14 = player10.getHand();
    int i15 = player10.getCoins();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test284"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    boolean b5 = gameBoard2.gameDone();
    java.util.List<Card> list_card6 = gameBoard2.getActiveSupplyPiles();
    GameBoard gameBoard9 = new GameBoard(0, "hi!");
    Card card10 = Card.ambassador;
    gameBoard9.returnCard(card10);
    int i12 = gameBoard2.numCardsAvailable(card10);
    GameBoard gameBoard17 = new GameBoard(0, "hi!");
    Card card18 = Card.ambassador;
    gameBoard17.returnCard(card18);
    Card card20 = Card.cutpurse;
    int i21 = card20.getCost();
    boolean b22 = gameBoard17.hasCardsAvailable(card20);
    Player player23 = new Player("hi!", (int)'a', gameBoard17);
    java.util.List<Card> list_card24 = player23.getPlayedCards();
    Card card25 = Card.adventurer;
    GameBoard gameBoard28 = new GameBoard(0, "hi!");
    Card card29 = Card.ambassador;
    gameBoard28.returnCard(card29);
    boolean b31 = gameBoard28.gameDone();
    Card card32 = Card.estate;
    gameBoard28.returnCard(card32);
    gameBoard28.opponentDraw((int)'4');
    player23.buyCard(card25, gameBoard28);
    GameBoard gameBoard39 = new GameBoard(0, "hi!");
    Card card40 = Card.ambassador;
    gameBoard39.returnCard(card40);
    boolean b42 = gameBoard39.gameDone();
    int i43 = gameBoard39.play();
    Card card44 = player23.getRandomBuyCard(gameBoard39);
    Card card45 = player23.drawCard();
    boolean b46 = gameBoard2.placeEmbargo(card45);
    java.util.List<Card> list_card47 = gameBoard2.getActiveSupplyPiles();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.ambassador + "'", card10.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.ambassador + "'", card18.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.cutpurse + "'", card20.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.adventurer + "'", card25.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.ambassador + "'", card29.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.estate + "'", card32.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.ambassador + "'", card40.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.copper + "'", card44.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.copper + "'", card45.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test285"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    GameBoard gameBoard14 = new GameBoard((int)(byte)100, (-1));
    Card card15 = Card.gardens;
    int i16 = gameBoard14.numEmbargoTokens(card15);
    java.util.List<Card> list_card17 = gameBoard14.getTrash();
    GameBoard gameBoard20 = new GameBoard(0, "hi!");
    Card card21 = Card.ambassador;
    gameBoard20.returnCard(card21);
    boolean b23 = gameBoard20.gameDone();
    java.util.List<Card> list_card24 = gameBoard20.getActiveSupplyPiles();
    GameBoard gameBoard27 = new GameBoard(0, "hi!");
    Card card28 = Card.ambassador;
    gameBoard27.returnCard(card28);
    boolean b30 = gameBoard20.hasCardsAvailable(card28);
    gameBoard14.trashCard(card28);
    Card card32 = player10.getRandomBuyCard(gameBoard14);
    GameBoard gameBoard35 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card36 = gameBoard35.getActiveSupplyPiles();
    java.util.List<Card> list_card39 = gameBoard35.getPurchaseableCards((-1), "hi!");
    java.util.List<Card> list_card41 = gameBoard35.kingdomCards((int)' ');
    GameBoard gameBoard46 = new GameBoard(0, "hi!");
    Card card47 = Card.ambassador;
    gameBoard46.returnCard(card47);
    Card card49 = Card.cutpurse;
    int i50 = card49.getCost();
    boolean b51 = gameBoard46.hasCardsAvailable(card49);
    Player player52 = new Player("hi!", (int)'a', gameBoard46);
    java.util.List<Card> list_card53 = player52.getPlayedCards();
    GameBoard gameBoard56 = new GameBoard((int)(byte)100, (-1));
    Card card57 = Card.gardens;
    int i58 = gameBoard56.numEmbargoTokens(card57);
    java.util.List<Card> list_card59 = gameBoard56.getTrash();
    GameBoard gameBoard62 = new GameBoard(0, "hi!");
    Card card63 = Card.ambassador;
    gameBoard62.returnCard(card63);
    boolean b65 = gameBoard62.gameDone();
    java.util.List<Card> list_card66 = gameBoard62.getActiveSupplyPiles();
    GameBoard gameBoard69 = new GameBoard(0, "hi!");
    Card card70 = Card.ambassador;
    gameBoard69.returnCard(card70);
    boolean b72 = gameBoard62.hasCardsAvailable(card70);
    gameBoard56.trashCard(card70);
    Card card74 = player52.getRandomBuyCard(gameBoard56);
    int i75 = player52.getBuys();
    boolean b76 = player52.hasBuys();
    int i77 = player52.getNum();
    Card card78 = player52.drawCard();
    boolean b79 = gameBoard35.hasCardsAvailable(card78);
    gameBoard14.takeCard(card78);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.gardens + "'", card15.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.ambassador + "'", card21.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.ambassador + "'", card28.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.ambassador + "'", card47.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card49 + "' != '" + Card.cutpurse + "'", card49.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    org.junit.Assert.assertTrue("'" + card57 + "' != '" + Card.gardens + "'", card57.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    org.junit.Assert.assertTrue("'" + card63 + "' != '" + Card.ambassador + "'", card63.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card66);
    org.junit.Assert.assertTrue("'" + card70 + "' != '" + Card.ambassador + "'", card70.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 97);
    org.junit.Assert.assertTrue("'" + card78 + "' != '" + Card.copper + "'", card78.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test286"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    boolean b5 = gameBoard2.gameDone();
    int i6 = gameBoard2.play();
    Card card7 = Card.feast;
    boolean b8 = gameBoard2.hasCardsAvailable(card7);
    GameBoard gameBoard12 = new GameBoard(6, (int)(byte)10);
    GameBoard gameBoard15 = new GameBoard(6, (int)(byte)10);
    Card card16 = Card.curse;
    gameBoard15.returnCard(card16);
    gameBoard12.trashCard(card16);
    gameBoard2.opponentGainCard(0, card16);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.feast + "'", card7.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.curse + "'", card16.equals(Card.curse));

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test287"); }

    GameBoard gameBoard4 = new GameBoard((int)(byte)100, (-1));
    java.util.List<Card> list_card7 = gameBoard4.getPurchaseableCards((-1), "hi!");
    GameBoard gameBoard12 = new GameBoard(0, "hi!");
    Card card13 = Card.ambassador;
    gameBoard12.returnCard(card13);
    Card card15 = Card.cutpurse;
    int i16 = card15.getCost();
    boolean b17 = gameBoard12.hasCardsAvailable(card15);
    Player player18 = new Player("hi!", (int)'a', gameBoard12);
    Card card19 = player18.drawCard();
    player18.addActions((int)(short)1);
    boolean b22 = player18.hasActions();
    GameBoard gameBoard25 = new GameBoard(0, "hi!");
    Card card26 = Card.ambassador;
    gameBoard25.returnCard(card26);
    java.util.List<Card> list_card28 = gameBoard25.getActiveSupplyPiles();
    java.util.List<Card> list_card29 = gameBoard25.getTrash();
    java.util.List<Card> list_card31 = gameBoard25.kingdomCards(100);
    Card card32 = player18.getRandomBuyCard(gameBoard25);
    GameBoard gameBoard35 = new GameBoard(0, "hi!");
    Card card36 = Card.ambassador;
    gameBoard35.returnCard(card36);
    java.util.List<Card> list_card38 = gameBoard35.getActiveSupplyPiles();
    java.util.List<Card> list_card41 = gameBoard35.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card43 = gameBoard35.kingdomCards((int)(short)100);
    Card card44 = player18.getRandomBuyCard(gameBoard35);
    gameBoard4.trashCard(card44);
    Card card47 = Card.cutpurse;
    int i48 = card47.getCost();
    gameBoard4.opponentGainCard((int)(byte)-1, card47);
    Player player50 = new Player("hi!", (int)(byte)1, gameBoard4);
    boolean b51 = player50.hasBuys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.ambassador + "'", card13.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.cutpurse + "'", card15.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.copper + "'", card19.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.ambassador + "'", card26.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.copper + "'", card32.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.ambassador + "'", card36.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.copper + "'", card44.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.cutpurse + "'", card47.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test288"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    boolean b7 = gameBoard4.gameDone();
    java.util.List<Card> list_card8 = gameBoard4.getTrash();
    Card card9 = Card.ambassador;
    int i10 = card9.getCost();
    gameBoard4.returnCard(card9);
    Player player12 = new Player("hi!", (-1), gameBoard4);
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    GameBoard gameBoard25 = new GameBoard(0, "hi!");
    Card card26 = Card.ambassador;
    gameBoard25.returnCard(card26);
    Card card28 = Card.cutpurse;
    int i29 = card28.getCost();
    boolean b30 = gameBoard25.hasCardsAvailable(card28);
    Player player31 = new Player("hi!", (int)'a', gameBoard25);
    Card card32 = Card.feast;
    int i33 = card32.getCost();
    GameBoard gameBoard36 = new GameBoard(3, "hi!");
    player31.buyCard(card32, gameBoard36);
    player12.gainCard(card19, gameBoard36);
    int i39 = player12.getNum();
    boolean b40 = player12.hasBuys();
    GameBoard gameBoard44 = new GameBoard(0, "hi!");
    Card card45 = Card.ambassador;
    gameBoard44.returnCard(card45);
    boolean b47 = gameBoard44.gameDone();
    java.util.List<Card> list_card48 = gameBoard44.getActiveSupplyPiles();
    GameBoard gameBoard51 = new GameBoard(0, "hi!");
    Card card52 = Card.ambassador;
    gameBoard51.returnCard(card52);
    int i54 = gameBoard44.numCardsAvailable(card52);
    Card card56 = Card.council_room;
    gameBoard44.opponentGainCard((int)(byte)1, card56);
    GameBoard gameBoard62 = new GameBoard(0, "hi!");
    Card card63 = Card.ambassador;
    gameBoard62.returnCard(card63);
    Card card65 = Card.cutpurse;
    int i66 = card65.getCost();
    boolean b67 = gameBoard62.hasCardsAvailable(card65);
    Player player68 = new Player("hi!", (int)'a', gameBoard62);
    Card card69 = player68.drawCard();
    player68.addActions((int)(short)1);
    boolean b72 = player68.hasActions();
    GameBoard gameBoard75 = new GameBoard(0, "hi!");
    Card card76 = Card.ambassador;
    gameBoard75.returnCard(card76);
    java.util.List<Card> list_card78 = gameBoard75.getActiveSupplyPiles();
    java.util.List<Card> list_card79 = gameBoard75.getTrash();
    java.util.List<Card> list_card81 = gameBoard75.kingdomCards(100);
    Card card82 = player68.getRandomBuyCard(gameBoard75);
    int i83 = gameBoard44.numEmbargoTokens(card82);
    // The following exception was thrown during execution in test generation
    try {
    player12.playCard((int)(short)-1, gameBoard44);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.ambassador + "'", card9.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.ambassador + "'", card26.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.cutpurse + "'", card28.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.feast + "'", card32.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    org.junit.Assert.assertTrue("'" + card45 + "' != '" + Card.ambassador + "'", card45.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.ambassador + "'", card52.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    org.junit.Assert.assertTrue("'" + card56 + "' != '" + Card.council_room + "'", card56.equals(Card.council_room));
    org.junit.Assert.assertTrue("'" + card63 + "' != '" + Card.ambassador + "'", card63.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card65 + "' != '" + Card.cutpurse + "'", card65.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    org.junit.Assert.assertTrue("'" + card69 + "' != '" + Card.copper + "'", card69.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    org.junit.Assert.assertTrue("'" + card76 + "' != '" + Card.ambassador + "'", card76.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card81);
    org.junit.Assert.assertTrue("'" + card82 + "' != '" + Card.copper + "'", card82.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test289"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    int i12 = player10.getBuys();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test290"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card3 = gameBoard2.getActiveSupplyPiles();
    int i4 = gameBoard2.getTotalEmbargoTokens();
    Card card5 = Card.council_room;
    int i6 = card5.getVictory();
    int i7 = gameBoard2.numCardsAvailable(card5);
    java.util.List<Card> list_card10 = gameBoard2.getPurchaseableCards((int)'a', "");
    gameBoard2.opponentDiscardCopper((int)(byte)0);
    Card card13 = Card.smithy;
    card13.setVictory((int)(byte)-1);
    int i16 = card13.getTreasure();
    gameBoard2.takeCard(card13);
    Card card18 = Card.smithy;
    card18.setVictory((int)(byte)-1);
    int i21 = card18.getTreasure();
    int i22 = card18.getCost();
    boolean b23 = gameBoard2.hasCardsAvailable(card18);
    int i24 = gameBoard2.getTotalEmbargoTokens();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.council_room + "'", card5.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.smithy + "'", card13.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.smithy + "'", card18.equals(Card.smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test291"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    java.util.List<Card> list_card5 = gameBoard2.getActiveSupplyPiles();
    java.util.List<Card> list_card8 = gameBoard2.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card10 = gameBoard2.kingdomCards((int)(short)100);
    Card card11 = Card.ambassador;
    int i12 = card11.getCost();
    int i13 = gameBoard2.numEmbargoTokens(card11);
    int i14 = gameBoard2.play();
    boolean b15 = gameBoard2.gameDone();
    gameBoard2.opponentDiscardCopper((int)(short)100);
    GameBoard gameBoard20 = new GameBoard((int)(byte)100, (-1));
    java.util.List<Card> list_card23 = gameBoard20.getPurchaseableCards((-1), "hi!");
    GameBoard gameBoard28 = new GameBoard(0, "hi!");
    Card card29 = Card.ambassador;
    gameBoard28.returnCard(card29);
    Card card31 = Card.cutpurse;
    int i32 = card31.getCost();
    boolean b33 = gameBoard28.hasCardsAvailable(card31);
    Player player34 = new Player("hi!", (int)'a', gameBoard28);
    Card card35 = player34.drawCard();
    player34.addActions((int)(short)1);
    boolean b38 = player34.hasActions();
    GameBoard gameBoard41 = new GameBoard(0, "hi!");
    Card card42 = Card.ambassador;
    gameBoard41.returnCard(card42);
    java.util.List<Card> list_card44 = gameBoard41.getActiveSupplyPiles();
    java.util.List<Card> list_card45 = gameBoard41.getTrash();
    java.util.List<Card> list_card47 = gameBoard41.kingdomCards(100);
    Card card48 = player34.getRandomBuyCard(gameBoard41);
    GameBoard gameBoard51 = new GameBoard(0, "hi!");
    Card card52 = Card.ambassador;
    gameBoard51.returnCard(card52);
    java.util.List<Card> list_card54 = gameBoard51.getActiveSupplyPiles();
    java.util.List<Card> list_card57 = gameBoard51.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card59 = gameBoard51.kingdomCards((int)(short)100);
    Card card60 = player34.getRandomBuyCard(gameBoard51);
    gameBoard20.trashCard(card60);
    boolean b62 = gameBoard2.placeEmbargo(card60);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.ambassador + "'", card11.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.ambassador + "'", card29.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.cutpurse + "'", card31.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.copper + "'", card35.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.ambassador + "'", card42.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    org.junit.Assert.assertTrue("'" + card48 + "' != '" + Card.copper + "'", card48.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.ambassador + "'", card52.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    org.junit.Assert.assertTrue("'" + card60 + "' != '" + Card.copper + "'", card60.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test292"); }

    GameBoard gameBoard2 = new GameBoard((int)'a', (int)'#');
    GameBoard gameBoard5 = new GameBoard(0, "hi!");
    Card card6 = Card.adventurer;
    gameBoard5.trashCard(card6);
    GameBoard gameBoard10 = new GameBoard(0, "hi!");
    Card card11 = Card.adventurer;
    gameBoard10.trashCard(card11);
    gameBoard5.takeCard(card11);
    gameBoard2.takeCard(card11);
    int i15 = card11.getTreasure();
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.adventurer + "'", card6.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.adventurer + "'", card11.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test293"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    boolean b12 = player10.hasActionCard();
    player10.countTreasure();
    GameBoard gameBoard16 = new GameBoard(0, "hi!");
    Card card17 = Card.ambassador;
    gameBoard16.returnCard(card17);
    boolean b19 = gameBoard16.gameDone();
    java.util.List<Card> list_card20 = gameBoard16.getActiveSupplyPiles();
    GameBoard gameBoard23 = new GameBoard(0, "hi!");
    Card card24 = Card.ambassador;
    gameBoard23.returnCard(card24);
    int i26 = gameBoard16.numCardsAvailable(card24);
    Card card28 = Card.council_room;
    gameBoard16.opponentGainCard((int)(byte)1, card28);
    GameBoard gameBoard32 = new GameBoard(0, "hi!");
    Card card33 = Card.ambassador;
    gameBoard32.returnCard(card33);
    java.util.List<Card> list_card35 = gameBoard32.getActiveSupplyPiles();
    java.util.List<Card> list_card36 = gameBoard32.getTrash();
    java.util.List<Player> list_player37 = gameBoard32.getPlayers();
    player10.buyCard(card28, gameBoard32);
    boolean b39 = player10.hasActionCard();
    java.util.List<java.lang.Integer> list_i40 = player10.getActionCardIndices();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.ambassador + "'", card17.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.ambassador + "'", card24.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.council_room + "'", card28.equals(Card.council_room));
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.ambassador + "'", card33.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i40);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test294"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.lang.String str14 = player10.getName();
    player10.discardHandAndInPlay();
    int i16 = player10.getTotalVictoryPoints();
    int i17 = player10.getTotalVictoryPoints();
    java.lang.String str18 = player10.getName();
    GameBoard gameBoard22 = new GameBoard(0, "hi!");
    Card card23 = Card.adventurer;
    gameBoard22.trashCard(card23);
    // The following exception was thrown during execution in test generation
    try {
    player10.playCard((int)'4', gameBoard22);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-3));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-3));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "hi!"+ "'", str18.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.adventurer + "'", card23.equals(Card.adventurer));

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test295"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card3 = gameBoard2.getActiveSupplyPiles();
    int i4 = gameBoard2.getTotalEmbargoTokens();
    java.util.List<Card> list_card6 = gameBoard2.kingdomCards(0);
    gameBoard2.opponentDraw(46);
    gameBoard2.opponentDraw(30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test296"); }

    GameBoard gameBoard2 = new GameBoard(1, "hi!");
    java.util.List<Card> list_card4 = gameBoard2.kingdomCards((-3));
    gameBoard2.opponentDiscardCopper((int)(short)10);
    java.util.List<Card> list_card8 = gameBoard2.kingdomCards((-1));
    java.util.List<Player> list_player9 = gameBoard2.getPlayers();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test297"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    boolean b7 = gameBoard4.gameDone();
    java.util.List<Card> list_card8 = gameBoard4.getTrash();
    Card card9 = Card.ambassador;
    int i10 = card9.getCost();
    gameBoard4.returnCard(card9);
    Player player12 = new Player("hi!", (-1), gameBoard4);
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    GameBoard gameBoard25 = new GameBoard(0, "hi!");
    Card card26 = Card.ambassador;
    gameBoard25.returnCard(card26);
    Card card28 = Card.cutpurse;
    int i29 = card28.getCost();
    boolean b30 = gameBoard25.hasCardsAvailable(card28);
    Player player31 = new Player("hi!", (int)'a', gameBoard25);
    Card card32 = Card.feast;
    int i33 = card32.getCost();
    GameBoard gameBoard36 = new GameBoard(3, "hi!");
    player31.buyCard(card32, gameBoard36);
    player12.gainCard(card19, gameBoard36);
    boolean b39 = player12.hasBuys();
    Card card40 = player12.drawCard();
    java.util.List<Card> list_card41 = player12.getPlayedCards();
    Card card42 = Card.estate;
    card42.setVictory((int)' ');
    boolean b45 = player12.hasCard(card42);
    player12.addActions(0);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.ambassador + "'", card9.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.ambassador + "'", card26.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.cutpurse + "'", card28.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.feast + "'", card32.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.copper + "'", card40.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.estate + "'", card42.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test298"); }

    GameBoard gameBoard2 = new GameBoard((int)(byte)100, (int)(short)0);

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test299"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    Card card12 = Card.adventurer;
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    gameBoard15.opponentDraw((int)'4');
    player10.buyCard(card12, gameBoard15);
    GameBoard gameBoard26 = new GameBoard(0, "hi!");
    Card card27 = Card.ambassador;
    gameBoard26.returnCard(card27);
    boolean b29 = gameBoard26.gameDone();
    int i30 = gameBoard26.play();
    Card card31 = player10.getRandomBuyCard(gameBoard26);
    java.lang.String str32 = player10.getName();
    java.util.LinkedList<Card> linkedlist_card33 = player10.getDeck();
    player10.addActions((-1));
    java.util.List<java.lang.Integer> list_i36 = player10.getActionCardIndices();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.ambassador + "'", card27.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.copper + "'", card31.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "hi!"+ "'", str32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i36);

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test300"); }

    GameBoard gameBoard2 = new GameBoard((-3), (int)(byte)10);
    boolean b3 = gameBoard2.gameDone();
    java.util.List<Card> list_card4 = gameBoard2.getTrash();
    GameBoard gameBoard7 = new GameBoard(0, "hi!");
    Card card8 = Card.ambassador;
    gameBoard7.returnCard(card8);
    java.util.List<Card> list_card10 = gameBoard7.getActiveSupplyPiles();
    java.util.List<Card> list_card13 = gameBoard7.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card15 = gameBoard7.kingdomCards((int)(short)100);
    Card card16 = Card.ambassador;
    int i17 = card16.getCost();
    int i18 = gameBoard7.numEmbargoTokens(card16);
    int i19 = gameBoard7.play();
    java.util.List<Card> list_card21 = gameBoard7.getPurchaseableCards(0);
    GameBoard gameBoard27 = new GameBoard(0, "hi!");
    Card card28 = Card.ambassador;
    gameBoard27.returnCard(card28);
    Card card30 = Card.cutpurse;
    int i31 = card30.getCost();
    boolean b32 = gameBoard27.hasCardsAvailable(card30);
    Player player33 = new Player("hi!", (int)'a', gameBoard27);
    Card card34 = player33.drawCard();
    player33.addActions((int)(short)1);
    java.lang.String str37 = player33.getName();
    player33.discardHandAndInPlay();
    player33.initPlayerTurn();
    Card card40 = player33.drawCard();
    gameBoard7.opponentGainCard((int)(short)-1, card40);
    gameBoard2.takeCard(card40);
    int i43 = gameBoard2.getTotalEmbargoTokens();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card4);
    org.junit.Assert.assertTrue("'" + card8 + "' != '" + Card.ambassador + "'", card8.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.ambassador + "'", card28.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.cutpurse + "'", card30.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.copper + "'", card34.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "hi!"+ "'", str37.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.copper + "'", card40.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test301"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card5 = gameBoard4.getActiveSupplyPiles();
    GameBoard gameBoard8 = new GameBoard(0, "hi!");
    Card card9 = Card.adventurer;
    gameBoard8.trashCard(card9);
    gameBoard4.trashCard(card9);
    Player player12 = new Player("hi!", 97, gameBoard4);
    Card card13 = player12.drawCard();
    GameBoard gameBoard16 = new GameBoard(0, "hi!");
    Card card17 = Card.adventurer;
    gameBoard16.trashCard(card17);
    GameBoard gameBoard23 = new GameBoard(0, "hi!");
    Card card24 = Card.ambassador;
    gameBoard23.returnCard(card24);
    Card card26 = Card.cutpurse;
    int i27 = card26.getCost();
    boolean b28 = gameBoard23.hasCardsAvailable(card26);
    Player player29 = new Player("hi!", (int)'a', gameBoard23);
    java.util.List<Card> list_card30 = player29.getHand();
    GameBoard gameBoard33 = new GameBoard((int)(short)0, (int)(byte)1);
    GameBoard gameBoard36 = new GameBoard(1, "hi!");
    java.util.List<Card> list_card38 = gameBoard36.kingdomCards((-3));
    GameBoard gameBoard43 = new GameBoard(0, "hi!");
    Card card44 = Card.ambassador;
    gameBoard43.returnCard(card44);
    Card card46 = Card.cutpurse;
    int i47 = card46.getCost();
    boolean b48 = gameBoard43.hasCardsAvailable(card46);
    Player player49 = new Player("hi!", (int)'a', gameBoard43);
    Card card50 = Card.feast;
    int i51 = card50.getCost();
    GameBoard gameBoard54 = new GameBoard(3, "hi!");
    player49.buyCard(card50, gameBoard54);
    boolean b56 = gameBoard36.placeEmbargo(card50);
    gameBoard33.trashCard(card50);
    GameBoard gameBoard60 = new GameBoard((int)(byte)100, (-1));
    Card card61 = Card.gardens;
    int i62 = gameBoard60.numEmbargoTokens(card61);
    java.util.List<Card> list_card63 = gameBoard60.getTrash();
    gameBoard60.opponentDraw(8);
    player29.gainCard(card50, gameBoard60);
    player12.gainCardToHand(card17, gameBoard60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.adventurer + "'", card9.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.copper + "'", card13.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.adventurer + "'", card17.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.ambassador + "'", card24.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.cutpurse + "'", card26.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.ambassador + "'", card44.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.cutpurse + "'", card46.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    org.junit.Assert.assertTrue("'" + card50 + "' != '" + Card.feast + "'", card50.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    org.junit.Assert.assertTrue("'" + card61 + "' != '" + Card.gardens + "'", card61.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test302"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    Card card12 = Card.adventurer;
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    gameBoard15.opponentDraw((int)'4');
    player10.buyCard(card12, gameBoard15);
    java.util.List<Card> list_card24 = player10.getPlayedCards();
    int i25 = player10.getBuys();
    GameBoard gameBoard28 = new GameBoard(0, "hi!");
    Card card29 = Card.ambassador;
    gameBoard28.returnCard(card29);
    boolean b31 = gameBoard28.gameDone();
    java.util.List<Card> list_card32 = gameBoard28.getActiveSupplyPiles();
    GameBoard gameBoard35 = new GameBoard(0, "hi!");
    Card card36 = Card.ambassador;
    gameBoard35.returnCard(card36);
    boolean b38 = gameBoard28.hasCardsAvailable(card36);
    player10.Discard(card36);
    player10.discardHandAndInPlay();
    boolean b41 = player10.hasActions();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.ambassador + "'", card29.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.ambassador + "'", card36.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test303"); }

    GameBoard gameBoard2 = new GameBoard((int)(byte)10, (int)(byte)-1);
    java.util.List<Card> list_card5 = gameBoard2.getPurchaseableCards((int)(byte)1, "hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test304"); }

    GameBoard gameBoard4 = new GameBoard((int)(byte)100, (-1));
    java.util.List<Card> list_card7 = gameBoard4.getPurchaseableCards((-1), "hi!");
    GameBoard gameBoard12 = new GameBoard(0, "hi!");
    Card card13 = Card.ambassador;
    gameBoard12.returnCard(card13);
    Card card15 = Card.cutpurse;
    int i16 = card15.getCost();
    boolean b17 = gameBoard12.hasCardsAvailable(card15);
    Player player18 = new Player("hi!", (int)'a', gameBoard12);
    Card card19 = player18.drawCard();
    player18.addActions((int)(short)1);
    boolean b22 = player18.hasActions();
    GameBoard gameBoard25 = new GameBoard(0, "hi!");
    Card card26 = Card.ambassador;
    gameBoard25.returnCard(card26);
    java.util.List<Card> list_card28 = gameBoard25.getActiveSupplyPiles();
    java.util.List<Card> list_card29 = gameBoard25.getTrash();
    java.util.List<Card> list_card31 = gameBoard25.kingdomCards(100);
    Card card32 = player18.getRandomBuyCard(gameBoard25);
    GameBoard gameBoard35 = new GameBoard(0, "hi!");
    Card card36 = Card.ambassador;
    gameBoard35.returnCard(card36);
    java.util.List<Card> list_card38 = gameBoard35.getActiveSupplyPiles();
    java.util.List<Card> list_card41 = gameBoard35.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card43 = gameBoard35.kingdomCards((int)(short)100);
    Card card44 = player18.getRandomBuyCard(gameBoard35);
    gameBoard4.trashCard(card44);
    Card card47 = Card.cutpurse;
    int i48 = card47.getCost();
    gameBoard4.opponentGainCard((int)(byte)-1, card47);
    Player player50 = new Player("hi!", (int)(byte)1, gameBoard4);
    player50.countTreasure();
    Card card52 = Card.remodel;
    GameBoard gameBoard55 = new GameBoard(0, "hi!");
    Card card56 = Card.ambassador;
    gameBoard55.returnCard(card56);
    boolean b58 = gameBoard55.gameDone();
    int i59 = gameBoard55.play();
    Card card60 = Card.feast;
    boolean b61 = gameBoard55.hasCardsAvailable(card60);
    player50.gainCardToHand(card52, gameBoard55);
    java.util.List<Card> list_card63 = player50.getDiscard();
    Card card64 = player50.drawCard();
    player50.initPlayerTurn();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.ambassador + "'", card13.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.cutpurse + "'", card15.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.copper + "'", card19.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.ambassador + "'", card26.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.copper + "'", card32.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.ambassador + "'", card36.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.copper + "'", card44.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.cutpurse + "'", card47.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 4);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.remodel + "'", card52.equals(Card.remodel));
    org.junit.Assert.assertTrue("'" + card56 + "' != '" + Card.ambassador + "'", card56.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 1);
    org.junit.Assert.assertTrue("'" + card60 + "' != '" + Card.feast + "'", card60.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    org.junit.Assert.assertTrue("'" + card64 + "' != '" + Card.copper + "'", card64.equals(Card.copper));

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test305"); }

    GameBoard gameBoard4 = new GameBoard((int)(byte)100, (-1));
    java.util.List<Card> list_card7 = gameBoard4.getPurchaseableCards((-1), "hi!");
    GameBoard gameBoard12 = new GameBoard(0, "hi!");
    Card card13 = Card.ambassador;
    gameBoard12.returnCard(card13);
    Card card15 = Card.cutpurse;
    int i16 = card15.getCost();
    boolean b17 = gameBoard12.hasCardsAvailable(card15);
    Player player18 = new Player("hi!", (int)'a', gameBoard12);
    Card card19 = player18.drawCard();
    player18.addActions((int)(short)1);
    boolean b22 = player18.hasActions();
    GameBoard gameBoard25 = new GameBoard(0, "hi!");
    Card card26 = Card.ambassador;
    gameBoard25.returnCard(card26);
    java.util.List<Card> list_card28 = gameBoard25.getActiveSupplyPiles();
    java.util.List<Card> list_card29 = gameBoard25.getTrash();
    java.util.List<Card> list_card31 = gameBoard25.kingdomCards(100);
    Card card32 = player18.getRandomBuyCard(gameBoard25);
    GameBoard gameBoard35 = new GameBoard(0, "hi!");
    Card card36 = Card.ambassador;
    gameBoard35.returnCard(card36);
    java.util.List<Card> list_card38 = gameBoard35.getActiveSupplyPiles();
    java.util.List<Card> list_card41 = gameBoard35.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card43 = gameBoard35.kingdomCards((int)(short)100);
    Card card44 = player18.getRandomBuyCard(gameBoard35);
    gameBoard4.trashCard(card44);
    Card card47 = Card.cutpurse;
    int i48 = card47.getCost();
    gameBoard4.opponentGainCard((int)(byte)-1, card47);
    Player player50 = new Player("hi!", (int)(byte)1, gameBoard4);
    player50.countTreasure();
    int i52 = player50.getCoins();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    org.junit.Assert.assertTrue("'" + card13 + "' != '" + Card.ambassador + "'", card13.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.cutpurse + "'", card15.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.copper + "'", card19.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.ambassador + "'", card26.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.copper + "'", card32.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.ambassador + "'", card36.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.copper + "'", card44.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card47 + "' != '" + Card.cutpurse + "'", card47.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 5);

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test306"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    Card card5 = Card.cutpurse;
    int i6 = card5.getCost();
    boolean b7 = gameBoard2.hasCardsAvailable(card5);
    gameBoard2.opponentDiscardCopper((int)(byte)-1);
    Card card10 = Card.cutpurse;
    gameBoard2.trashCard(card10);
    boolean b12 = gameBoard2.gameDone();
    gameBoard2.opponentDraw(0);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.cutpurse + "'", card5.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.cutpurse + "'", card10.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test307"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.lang.String str14 = player10.getName();
    java.util.List<Card> list_card15 = player10.getPlayedCards();
    int i16 = player10.getNumActions();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 2);

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test308"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.lang.String str14 = player10.getName();
    player10.discardHandAndInPlay();
    GameBoard gameBoard20 = new GameBoard(0, "hi!");
    Card card21 = Card.ambassador;
    gameBoard20.returnCard(card21);
    Card card23 = Card.cutpurse;
    int i24 = card23.getCost();
    boolean b25 = gameBoard20.hasCardsAvailable(card23);
    Player player26 = new Player("hi!", (int)'a', gameBoard20);
    java.util.List<Card> list_card27 = player26.getPlayedCards();
    GameBoard gameBoard30 = new GameBoard((int)(byte)100, (-1));
    Card card31 = Card.gardens;
    int i32 = gameBoard30.numEmbargoTokens(card31);
    java.util.List<Card> list_card33 = gameBoard30.getTrash();
    GameBoard gameBoard36 = new GameBoard(0, "hi!");
    Card card37 = Card.ambassador;
    gameBoard36.returnCard(card37);
    boolean b39 = gameBoard36.gameDone();
    java.util.List<Card> list_card40 = gameBoard36.getActiveSupplyPiles();
    GameBoard gameBoard43 = new GameBoard(0, "hi!");
    Card card44 = Card.ambassador;
    gameBoard43.returnCard(card44);
    boolean b46 = gameBoard36.hasCardsAvailable(card44);
    gameBoard30.trashCard(card44);
    Card card48 = player26.getRandomBuyCard(gameBoard30);
    int i49 = player26.getBuys();
    player26.discardHandAndInPlay();
    GameBoard gameBoard53 = new GameBoard(3, "hi!");
    Card card54 = Card.adventurer;
    int i55 = gameBoard53.numEmbargoTokens(card54);
    Card card56 = player26.getRandomBuyCard(gameBoard53);
    player10.Discard(card56);
    java.lang.String str58 = player10.getName();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.ambassador + "'", card21.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card23 + "' != '" + Card.cutpurse + "'", card23.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.gardens + "'", card31.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    org.junit.Assert.assertTrue("'" + card37 + "' != '" + Card.ambassador + "'", card37.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.ambassador + "'", card44.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 1);
    org.junit.Assert.assertTrue("'" + card54 + "' != '" + Card.adventurer + "'", card54.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    org.junit.Assert.assertTrue("'" + card56 + "' != '" + Card.copper + "'", card56.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "hi!"+ "'", str58.equals("hi!"));

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test309"); }

    GameBoard gameBoard2 = new GameBoard(10, "");

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test310"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.adventurer;
    gameBoard4.trashCard(card5);
    java.util.List<Player> list_player7 = gameBoard4.getPlayers();
    int i8 = gameBoard4.play();
    Card card9 = Card.salvager;
    int i10 = gameBoard4.numCardsAvailable(card9);
    java.util.List<Card> list_card12 = gameBoard4.kingdomCards((-3));
    Player player13 = new Player("hi!", (int)(byte)100, gameBoard4);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.adventurer + "'", card5.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.salvager + "'", card9.equals(Card.salvager));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test311"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    Card card5 = Card.cutpurse;
    int i6 = card5.getCost();
    boolean b7 = gameBoard2.hasCardsAvailable(card5);
    gameBoard2.opponentDiscardCopper((int)(byte)-1);
    java.util.List<Player> list_player10 = gameBoard2.getPlayers();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.cutpurse + "'", card5.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player10);

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test312"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    int i12 = player10.getNum();
    boolean b13 = player10.hasActions();
    GameBoard gameBoard18 = new GameBoard(0, "hi!");
    Card card19 = Card.ambassador;
    gameBoard18.returnCard(card19);
    Card card21 = Card.cutpurse;
    int i22 = card21.getCost();
    boolean b23 = gameBoard18.hasCardsAvailable(card21);
    Player player24 = new Player("hi!", (int)'a', gameBoard18);
    java.util.List<Card> list_card25 = player24.getPlayedCards();
    GameBoard gameBoard28 = new GameBoard((int)(byte)100, (-1));
    Card card29 = Card.gardens;
    int i30 = gameBoard28.numEmbargoTokens(card29);
    java.util.List<Card> list_card31 = gameBoard28.getTrash();
    GameBoard gameBoard34 = new GameBoard(0, "hi!");
    Card card35 = Card.ambassador;
    gameBoard34.returnCard(card35);
    boolean b37 = gameBoard34.gameDone();
    java.util.List<Card> list_card38 = gameBoard34.getActiveSupplyPiles();
    GameBoard gameBoard41 = new GameBoard(0, "hi!");
    Card card42 = Card.ambassador;
    gameBoard41.returnCard(card42);
    boolean b44 = gameBoard34.hasCardsAvailable(card42);
    gameBoard28.trashCard(card42);
    Card card46 = player24.getRandomBuyCard(gameBoard28);
    int i47 = player24.getBuys();
    boolean b48 = player24.hasBuys();
    int i49 = player24.getNum();
    Card card50 = player24.drawCard();
    player10.Discard(card50);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.ambassador + "'", card19.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card21 + "' != '" + Card.cutpurse + "'", card21.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + card29 + "' != '" + Card.gardens + "'", card29.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    org.junit.Assert.assertTrue("'" + card35 + "' != '" + Card.ambassador + "'", card35.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.ambassador + "'", card42.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 97);
    org.junit.Assert.assertTrue("'" + card50 + "' != '" + Card.copper + "'", card50.equals(Card.copper));

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test313"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    boolean b5 = gameBoard2.gameDone();
    java.util.List<Card> list_card6 = gameBoard2.getTrash();
    Card card7 = Card.ambassador;
    int i8 = card7.getCost();
    gameBoard2.returnCard(card7);
    GameBoard gameBoard14 = new GameBoard(0, "hi!");
    Card card15 = Card.ambassador;
    gameBoard14.returnCard(card15);
    Card card17 = Card.cutpurse;
    int i18 = card17.getCost();
    boolean b19 = gameBoard14.hasCardsAvailable(card17);
    Player player20 = new Player("hi!", (int)'a', gameBoard14);
    int i21 = player20.getCoins();
    java.util.List<java.lang.Integer> list_i22 = player20.getActionCardIndices();
    player20.initPlayerTurn();
    java.util.List<Card> list_card24 = player20.getHand();
    GameBoard gameBoard29 = new GameBoard(0, "hi!");
    Card card30 = Card.ambassador;
    gameBoard29.returnCard(card30);
    Card card32 = Card.cutpurse;
    int i33 = card32.getCost();
    boolean b34 = gameBoard29.hasCardsAvailable(card32);
    Player player35 = new Player("hi!", (int)'a', gameBoard29);
    Card card36 = player35.drawCard();
    player35.addActions((int)(short)1);
    boolean b39 = player35.hasActions();
    GameBoard gameBoard42 = new GameBoard(0, "hi!");
    Card card43 = Card.ambassador;
    gameBoard42.returnCard(card43);
    java.util.List<Card> list_card45 = gameBoard42.getActiveSupplyPiles();
    java.util.List<Card> list_card46 = gameBoard42.getTrash();
    java.util.List<Card> list_card48 = gameBoard42.kingdomCards(100);
    Card card49 = player35.getRandomBuyCard(gameBoard42);
    java.util.List<Card> list_card50 = player35.getHand();
    Card card51 = player35.drawCard();
    GameBoard gameBoard54 = new GameBoard(1, "");
    player20.gainCard(card51, gameBoard54);
    Card card56 = Card.embargo;
    gameBoard54.trashCard(card56);
    boolean b58 = gameBoard2.placeEmbargo(card56);
    int i59 = card56.getTreasure();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.ambassador + "'", card7.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.ambassador + "'", card15.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card17 + "' != '" + Card.cutpurse + "'", card17.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.ambassador + "'", card30.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.cutpurse + "'", card32.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    org.junit.Assert.assertTrue("'" + card36 + "' != '" + Card.copper + "'", card36.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    org.junit.Assert.assertTrue("'" + card43 + "' != '" + Card.ambassador + "'", card43.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    org.junit.Assert.assertTrue("'" + card49 + "' != '" + Card.copper + "'", card49.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    org.junit.Assert.assertTrue("'" + card51 + "' != '" + Card.copper + "'", card51.equals(Card.copper));
    org.junit.Assert.assertTrue("'" + card56 + "' != '" + Card.embargo + "'", card56.equals(Card.embargo));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test314"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    boolean b5 = gameBoard2.gameDone();
    java.util.List<Card> list_card6 = gameBoard2.getTrash();
    java.util.List<Card> list_card7 = gameBoard2.getAllKingdomCards();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test315"); }

    GameBoard gameBoard2 = new GameBoard(1, "hi!");
    java.util.List<Card> list_card4 = gameBoard2.kingdomCards((-3));
    gameBoard2.opponentDiscardCopper((int)(short)10);
    GameBoard gameBoard11 = new GameBoard(0, "hi!");
    Card card12 = Card.ambassador;
    gameBoard11.returnCard(card12);
    Card card14 = Card.cutpurse;
    int i15 = card14.getCost();
    boolean b16 = gameBoard11.hasCardsAvailable(card14);
    Player player17 = new Player("hi!", (int)'a', gameBoard11);
    Card card18 = player17.drawCard();
    player17.addActions((int)(short)1);
    java.lang.String str21 = player17.getName();
    player17.discardHandAndInPlay();
    player17.initPlayerTurn();
    Card card24 = player17.drawCard();
    boolean b25 = gameBoard2.hasCardsAvailable(card24);
    java.util.List<Card> list_card27 = gameBoard2.getPurchaseableCards(3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card4);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.ambassador + "'", card12.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.cutpurse + "'", card14.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.copper + "'", card18.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "hi!"+ "'", str21.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.copper + "'", card24.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test316"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getHand();
    java.util.List<Card> list_card12 = player10.getHand();
    int i13 = player10.getNumActions();
    java.lang.String str14 = player10.getName();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test317"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.countTreasure();
    java.util.LinkedList<Card> linkedlist_card13 = player10.getDeck();
    java.util.List<Card> list_card14 = player10.getDiscard();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(linkedlist_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test318"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    boolean b7 = gameBoard4.gameDone();
    java.util.List<Card> list_card8 = gameBoard4.getTrash();
    Card card9 = Card.ambassador;
    int i10 = card9.getCost();
    gameBoard4.returnCard(card9);
    Player player12 = new Player("hi!", (-1), gameBoard4);
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    GameBoard gameBoard25 = new GameBoard(0, "hi!");
    Card card26 = Card.ambassador;
    gameBoard25.returnCard(card26);
    Card card28 = Card.cutpurse;
    int i29 = card28.getCost();
    boolean b30 = gameBoard25.hasCardsAvailable(card28);
    Player player31 = new Player("hi!", (int)'a', gameBoard25);
    Card card32 = Card.feast;
    int i33 = card32.getCost();
    GameBoard gameBoard36 = new GameBoard(3, "hi!");
    player31.buyCard(card32, gameBoard36);
    player12.gainCard(card19, gameBoard36);
    int i39 = player12.getNum();
    boolean b40 = player12.hasBuys();
    java.util.List<Card> list_card41 = player12.getDiscard();
    java.lang.String str42 = player12.getName();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.ambassador + "'", card9.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.ambassador + "'", card26.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.cutpurse + "'", card28.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.feast + "'", card32.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "hi!"+ "'", str42.equals("hi!"));

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test319"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    boolean b5 = gameBoard2.gameDone();
    java.util.List<Card> list_card6 = gameBoard2.getActiveSupplyPiles();
    GameBoard gameBoard9 = new GameBoard(0, "hi!");
    Card card10 = Card.ambassador;
    gameBoard9.returnCard(card10);
    int i12 = gameBoard2.numCardsAvailable(card10);
    Card card14 = Card.council_room;
    gameBoard2.opponentGainCard((int)(byte)1, card14);
    int i16 = gameBoard2.play();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + card10 + "' != '" + Card.ambassador + "'", card10.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.council_room + "'", card14.equals(Card.council_room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test320"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    Card card12 = Card.adventurer;
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    gameBoard15.opponentDraw((int)'4');
    player10.buyCard(card12, gameBoard15);
    GameBoard gameBoard26 = new GameBoard(0, "hi!");
    Card card27 = Card.ambassador;
    gameBoard26.returnCard(card27);
    boolean b29 = gameBoard26.gameDone();
    int i30 = gameBoard26.play();
    Card card31 = player10.getRandomBuyCard(gameBoard26);
    java.lang.String str32 = player10.getName();
    int i33 = player10.getNumActions();
    int i34 = player10.getCoins();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.ambassador + "'", card27.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.copper + "'", card31.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "hi!"+ "'", str32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test321"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    int i5 = gameBoard2.play();
    int i6 = gameBoard2.getTotalEmbargoTokens();
    GameBoard gameBoard13 = new GameBoard(0, "hi!");
    Card card14 = Card.ambassador;
    gameBoard13.returnCard(card14);
    Card card16 = Card.cutpurse;
    int i17 = card16.getCost();
    boolean b18 = gameBoard13.hasCardsAvailable(card16);
    Player player19 = new Player("hi!", (int)'a', gameBoard13);
    Card card20 = player19.drawCard();
    player19.addActions((int)(short)1);
    java.lang.String str23 = player19.getName();
    player19.discardHandAndInPlay();
    player19.initPlayerTurn();
    Card card26 = Card.duchy;
    GameBoard gameBoard29 = new GameBoard(0, "hi!");
    Card card30 = Card.adventurer;
    gameBoard29.trashCard(card30);
    player19.gainCardToHand(card26, gameBoard29);
    Player player33 = new Player("", (int)(short)10, gameBoard29);
    java.lang.String str34 = player33.getName();
    java.util.List<Card> list_card35 = player33.getHand();
    GameBoard gameBoard40 = new GameBoard(0, "hi!");
    Card card41 = Card.ambassador;
    gameBoard40.returnCard(card41);
    Card card43 = Card.cutpurse;
    int i44 = card43.getCost();
    boolean b45 = gameBoard40.hasCardsAvailable(card43);
    Player player46 = new Player("hi!", (int)'a', gameBoard40);
    java.util.List<Card> list_card47 = player46.getPlayedCards();
    int i48 = player46.getNum();
    GameBoard gameBoard51 = new GameBoard(0, "hi!");
    Card card52 = Card.ambassador;
    gameBoard51.returnCard(card52);
    java.util.List<Card> list_card54 = gameBoard51.getActiveSupplyPiles();
    java.util.List<Card> list_card57 = gameBoard51.getPurchaseableCards((int)(byte)10, "hi!");
    java.util.List<Card> list_card59 = gameBoard51.kingdomCards((int)(short)100);
    Card card60 = Card.cutpurse;
    int i61 = card60.getCost();
    int i62 = gameBoard51.numEmbargoTokens(card60);
    GameBoard gameBoard65 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card66 = gameBoard65.getActiveSupplyPiles();
    player46.gainCard(card60, gameBoard65);
    GameBoard gameBoard70 = new GameBoard(0, "hi!");
    java.util.List<Card> list_card71 = gameBoard70.getActiveSupplyPiles();
    java.util.List<Card> list_card73 = gameBoard70.kingdomCards((int)(byte)100);
    player33.buyCard(card60, gameBoard70);
    gameBoard2.takeCard(card60);
    java.util.List<Card> list_card76 = gameBoard2.getAllKingdomCards();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 8);
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.ambassador + "'", card14.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.cutpurse + "'", card16.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.copper + "'", card20.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "hi!"+ "'", str23.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.duchy + "'", card26.equals(Card.duchy));
    org.junit.Assert.assertTrue("'" + card30 + "' != '" + Card.adventurer + "'", card30.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.ambassador + "'", card41.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card43 + "' != '" + Card.cutpurse + "'", card43.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 97);
    org.junit.Assert.assertTrue("'" + card52 + "' != '" + Card.ambassador + "'", card52.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    org.junit.Assert.assertTrue("'" + card60 + "' != '" + Card.cutpurse + "'", card60.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card76);

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test322"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    boolean b5 = gameBoard2.gameDone();
    Card card6 = Card.estate;
    gameBoard2.returnCard(card6);
    gameBoard2.opponentDraw((int)'4');
    java.util.List<Card> list_card11 = gameBoard2.getPurchaseableCards((-1));
    GameBoard gameBoard14 = new GameBoard(0, "hi!");
    Card card15 = Card.ambassador;
    gameBoard14.returnCard(card15);
    boolean b17 = gameBoard14.gameDone();
    Card card18 = Card.cutpurse;
    int i19 = gameBoard14.numCardsAvailable(card18);
    GameBoard gameBoard24 = new GameBoard(0, "hi!");
    Card card25 = Card.ambassador;
    gameBoard24.returnCard(card25);
    Card card27 = Card.cutpurse;
    int i28 = card27.getCost();
    boolean b29 = gameBoard24.hasCardsAvailable(card27);
    Player player30 = new Player("hi!", (int)'a', gameBoard24);
    Card card31 = player30.drawCard();
    int i32 = player30.getNum();
    Card card33 = Card.ambassador;
    int i34 = card33.getCost();
    GameBoard gameBoard37 = new GameBoard(0, "hi!");
    Card card38 = Card.ambassador;
    gameBoard37.returnCard(card38);
    boolean b40 = gameBoard37.gameDone();
    Card card41 = Card.estate;
    gameBoard37.returnCard(card41);
    gameBoard37.opponentDraw((int)'4');
    int i45 = gameBoard37.play();
    Card card46 = null;
    gameBoard37.takeCard(card46);
    player30.buyCard(card33, gameBoard37);
    int i49 = gameBoard14.numEmbargoTokens(card33);
    boolean b50 = gameBoard2.hasCardsAvailable(card33);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    org.junit.Assert.assertTrue("'" + card6 + "' != '" + Card.estate + "'", card6.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card15 + "' != '" + Card.ambassador + "'", card15.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.cutpurse + "'", card18.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 10);
    org.junit.Assert.assertTrue("'" + card25 + "' != '" + Card.ambassador + "'", card25.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.cutpurse + "'", card27.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.copper + "'", card31.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 97);
    org.junit.Assert.assertTrue("'" + card33 + "' != '" + Card.ambassador + "'", card33.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 3);
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.ambassador + "'", card38.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.estate + "'", card41.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test323"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    Card card12 = Card.adventurer;
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    gameBoard15.opponentDraw((int)'4');
    player10.buyCard(card12, gameBoard15);
    GameBoard gameBoard26 = new GameBoard(0, "hi!");
    Card card27 = Card.ambassador;
    gameBoard26.returnCard(card27);
    boolean b29 = gameBoard26.gameDone();
    int i30 = gameBoard26.play();
    Card card31 = player10.getRandomBuyCard(gameBoard26);
    java.lang.String str32 = player10.getName();
    int i33 = player10.getCoins();
    boolean b34 = player10.hasActions();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.ambassador + "'", card27.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.copper + "'", card31.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "hi!"+ "'", str32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test324"); }

    GameBoard gameBoard2 = new GameBoard((-3), (int)(byte)10);
    boolean b3 = gameBoard2.gameDone();
    java.util.List<Card> list_card4 = gameBoard2.getTrash();
    java.util.List<Card> list_card6 = gameBoard2.getPurchaseableCards(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test325"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.lang.String str14 = player10.getName();
    GameBoard gameBoard19 = new GameBoard(0, "hi!");
    Card card20 = Card.ambassador;
    gameBoard19.returnCard(card20);
    Card card22 = Card.cutpurse;
    int i23 = card22.getCost();
    boolean b24 = gameBoard19.hasCardsAvailable(card22);
    Player player25 = new Player("hi!", (int)'a', gameBoard19);
    java.util.List<Card> list_card26 = player25.getPlayedCards();
    Card card27 = Card.adventurer;
    GameBoard gameBoard30 = new GameBoard(0, "hi!");
    Card card31 = Card.ambassador;
    gameBoard30.returnCard(card31);
    boolean b33 = gameBoard30.gameDone();
    Card card34 = Card.estate;
    gameBoard30.returnCard(card34);
    gameBoard30.opponentDraw((int)'4');
    player25.buyCard(card27, gameBoard30);
    GameBoard gameBoard41 = new GameBoard(0, "hi!");
    Card card42 = Card.adventurer;
    gameBoard41.trashCard(card42);
    java.util.List<Player> list_player44 = gameBoard41.getPlayers();
    int i45 = gameBoard41.play();
    Card card46 = Card.salvager;
    int i47 = gameBoard41.numCardsAvailable(card46);
    int i48 = gameBoard30.numCardsAvailable(card46);
    GameBoard gameBoard51 = new GameBoard(3, "hi!");
    player10.buyCard(card46, gameBoard51);
    int i53 = gameBoard51.play();
    Card card54 = Card.province;
    gameBoard51.returnCard(card54);
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.ambassador + "'", card20.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card22 + "' != '" + Card.cutpurse + "'", card22.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.adventurer + "'", card27.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.ambassador + "'", card31.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.estate + "'", card34.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.adventurer + "'", card42.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 1);
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.salvager + "'", card46.equals(Card.salvager));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    org.junit.Assert.assertTrue("'" + card54 + "' != '" + Card.province + "'", card54.equals(Card.province));

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test326"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    java.util.List<Card> list_card12 = player10.getHand();
    player10.countTreasure();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test327"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    boolean b7 = gameBoard4.gameDone();
    java.util.List<Card> list_card8 = gameBoard4.getTrash();
    Card card9 = Card.ambassador;
    int i10 = card9.getCost();
    gameBoard4.returnCard(card9);
    Player player12 = new Player("hi!", (-1), gameBoard4);
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    GameBoard gameBoard25 = new GameBoard(0, "hi!");
    Card card26 = Card.ambassador;
    gameBoard25.returnCard(card26);
    Card card28 = Card.cutpurse;
    int i29 = card28.getCost();
    boolean b30 = gameBoard25.hasCardsAvailable(card28);
    Player player31 = new Player("hi!", (int)'a', gameBoard25);
    Card card32 = Card.feast;
    int i33 = card32.getCost();
    GameBoard gameBoard36 = new GameBoard(3, "hi!");
    player31.buyCard(card32, gameBoard36);
    player12.gainCard(card19, gameBoard36);
    boolean b39 = player12.hasBuys();
    Card card40 = player12.drawCard();
    java.util.List<Card> list_card41 = player12.getPlayedCards();
    Card card42 = Card.estate;
    card42.setVictory((int)' ');
    boolean b45 = player12.hasCard(card42);
    player12.addActions((int)'a');
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.ambassador + "'", card9.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.ambassador + "'", card26.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.cutpurse + "'", card28.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.feast + "'", card32.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.copper + "'", card40.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    org.junit.Assert.assertTrue("'" + card42 + "' != '" + Card.estate + "'", card42.equals(Card.estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test328"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.lang.String str14 = player10.getName();
    java.util.List<Card> list_card15 = player10.getPlayedCards();
    int i16 = player10.getCoins();
    java.lang.String str17 = player10.getName();
    player10.initPlayerTurn();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "hi!"+ "'", str17.equals("hi!"));

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test329"); }

    GameBoard gameBoard2 = new GameBoard((int)(byte)100, (-1));
    Card card3 = Card.gardens;
    int i4 = gameBoard2.numEmbargoTokens(card3);
    java.util.List<Card> list_card5 = gameBoard2.getTrash();
    GameBoard gameBoard8 = new GameBoard(0, "hi!");
    Card card9 = Card.ambassador;
    gameBoard8.returnCard(card9);
    boolean b11 = gameBoard8.gameDone();
    Card card12 = Card.cutpurse;
    int i13 = gameBoard8.numCardsAvailable(card12);
    gameBoard2.returnCard(card12);
    int i15 = card12.getTreasure();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.gardens + "'", card3.equals(Card.gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.ambassador + "'", card9.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.cutpurse + "'", card12.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test330"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    boolean b7 = gameBoard4.gameDone();
    java.util.List<Card> list_card8 = gameBoard4.getTrash();
    Card card9 = Card.ambassador;
    int i10 = card9.getCost();
    gameBoard4.returnCard(card9);
    Player player12 = new Player("hi!", (-1), gameBoard4);
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    GameBoard gameBoard25 = new GameBoard(0, "hi!");
    Card card26 = Card.ambassador;
    gameBoard25.returnCard(card26);
    Card card28 = Card.cutpurse;
    int i29 = card28.getCost();
    boolean b30 = gameBoard25.hasCardsAvailable(card28);
    Player player31 = new Player("hi!", (int)'a', gameBoard25);
    Card card32 = Card.feast;
    int i33 = card32.getCost();
    GameBoard gameBoard36 = new GameBoard(3, "hi!");
    player31.buyCard(card32, gameBoard36);
    player12.gainCard(card19, gameBoard36);
    boolean b39 = player12.hasBuys();
    Card card40 = player12.drawCard();
    java.util.List<Card> list_card41 = player12.getDiscard();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.ambassador + "'", card9.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.ambassador + "'", card26.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.cutpurse + "'", card28.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.feast + "'", card32.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.copper + "'", card40.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test331"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    int i12 = player10.getNum();
    int i13 = player10.getCoins();
    int i14 = player10.getBuys();
    player10.discardHandAndInPlay();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test332"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    boolean b7 = gameBoard4.gameDone();
    java.util.List<Card> list_card8 = gameBoard4.getTrash();
    Card card9 = Card.ambassador;
    int i10 = card9.getCost();
    gameBoard4.returnCard(card9);
    Player player12 = new Player("hi!", (-1), gameBoard4);
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    GameBoard gameBoard25 = new GameBoard(0, "hi!");
    Card card26 = Card.ambassador;
    gameBoard25.returnCard(card26);
    Card card28 = Card.cutpurse;
    int i29 = card28.getCost();
    boolean b30 = gameBoard25.hasCardsAvailable(card28);
    Player player31 = new Player("hi!", (int)'a', gameBoard25);
    Card card32 = Card.feast;
    int i33 = card32.getCost();
    GameBoard gameBoard36 = new GameBoard(3, "hi!");
    player31.buyCard(card32, gameBoard36);
    player12.gainCard(card19, gameBoard36);
    boolean b39 = player12.hasBuys();
    Card card40 = player12.drawCard();
    java.util.List<java.lang.Integer> list_i41 = player12.getActionCardIndices();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + card9 + "' != '" + Card.ambassador + "'", card9.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card26 + "' != '" + Card.ambassador + "'", card26.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.cutpurse + "'", card28.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.feast + "'", card32.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    org.junit.Assert.assertTrue("'" + card40 + "' != '" + Card.copper + "'", card40.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i41);

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test333"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    gameBoard2.opponentDiscardCopper((int)(byte)10);
    gameBoard2.opponentDiscardCopper(10);
    GameBoard gameBoard11 = new GameBoard(0, "hi!");
    Card card12 = Card.ambassador;
    gameBoard11.returnCard(card12);
    Card card14 = Card.cutpurse;
    int i15 = card14.getCost();
    boolean b16 = gameBoard11.hasCardsAvailable(card14);
    Player player17 = new Player("hi!", (int)'a', gameBoard11);
    Card card18 = player17.drawCard();
    player17.addActions((int)(short)1);
    java.lang.String str21 = player17.getName();
    player17.discardHandAndInPlay();
    player17.initPlayerTurn();
    Card card24 = Card.duchy;
    GameBoard gameBoard27 = new GameBoard(0, "hi!");
    Card card28 = Card.adventurer;
    gameBoard27.trashCard(card28);
    player17.gainCardToHand(card24, gameBoard27);
    int i31 = player17.getBuys();
    GameBoard gameBoard38 = new GameBoard(0, "hi!");
    Card card39 = Card.ambassador;
    gameBoard38.returnCard(card39);
    Card card41 = Card.cutpurse;
    int i42 = card41.getCost();
    boolean b43 = gameBoard38.hasCardsAvailable(card41);
    Player player44 = new Player("hi!", (int)'a', gameBoard38);
    java.util.List<Card> list_card45 = player44.getPlayedCards();
    Card card46 = Card.adventurer;
    GameBoard gameBoard49 = new GameBoard(0, "hi!");
    Card card50 = Card.ambassador;
    gameBoard49.returnCard(card50);
    boolean b52 = gameBoard49.gameDone();
    Card card53 = Card.estate;
    gameBoard49.returnCard(card53);
    gameBoard49.opponentDraw((int)'4');
    player44.buyCard(card46, gameBoard49);
    GameBoard gameBoard60 = new GameBoard(0, "hi!");
    Card card61 = Card.adventurer;
    gameBoard60.trashCard(card61);
    java.util.List<Player> list_player63 = gameBoard60.getPlayers();
    int i64 = gameBoard60.play();
    Card card65 = Card.salvager;
    int i66 = gameBoard60.numCardsAvailable(card65);
    int i67 = gameBoard49.numCardsAvailable(card65);
    Player player68 = new Player("", 97, gameBoard49);
    boolean b69 = player68.hasActionCard();
    Card card70 = Card.baron;
    int i71 = card70.getCost();
    player68.Discard(card70);
    GameBoard gameBoard75 = new GameBoard((int)(byte)0, (-3));
    player17.buyCard(card70, gameBoard75);
    boolean b77 = gameBoard2.placeEmbargo(card70);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.ambassador + "'", card12.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.cutpurse + "'", card14.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    org.junit.Assert.assertTrue("'" + card18 + "' != '" + Card.copper + "'", card18.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "hi!"+ "'", str21.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card24 + "' != '" + Card.duchy + "'", card24.equals(Card.duchy));
    org.junit.Assert.assertTrue("'" + card28 + "' != '" + Card.adventurer + "'", card28.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    org.junit.Assert.assertTrue("'" + card39 + "' != '" + Card.ambassador + "'", card39.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card41 + "' != '" + Card.cutpurse + "'", card41.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    org.junit.Assert.assertTrue("'" + card46 + "' != '" + Card.adventurer + "'", card46.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card50 + "' != '" + Card.ambassador + "'", card50.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    org.junit.Assert.assertTrue("'" + card53 + "' != '" + Card.estate + "'", card53.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card61 + "' != '" + Card.adventurer + "'", card61.equals(Card.adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    org.junit.Assert.assertTrue("'" + card65 + "' != '" + Card.salvager + "'", card65.equals(Card.salvager));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    org.junit.Assert.assertTrue("'" + card70 + "' != '" + Card.baron + "'", card70.equals(Card.baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test334"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    Card card11 = player10.drawCard();
    player10.addActions((int)(short)1);
    java.lang.String str14 = player10.getName();
    player10.discardHandAndInPlay();
    int i16 = player10.getTotalVictoryPoints();
    player10.discardHandAndInPlay();
    int i18 = player10.getTotalVictoryPoints();
    java.util.List<java.lang.Integer> list_i19 = player10.getActionCardIndices();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    org.junit.Assert.assertTrue("'" + card11 + "' != '" + Card.copper + "'", card11.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_i19);

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test335"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    boolean b5 = gameBoard2.gameDone();
    int i6 = gameBoard2.play();
    Card card7 = Card.feast;
    boolean b8 = gameBoard2.hasCardsAvailable(card7);
    GameBoard gameBoard13 = new GameBoard(0, "hi!");
    Card card14 = Card.ambassador;
    gameBoard13.returnCard(card14);
    Card card16 = Card.cutpurse;
    int i17 = card16.getCost();
    boolean b18 = gameBoard13.hasCardsAvailable(card16);
    Player player19 = new Player("hi!", (int)'a', gameBoard13);
    Card card20 = Card.feast;
    int i21 = card20.getCost();
    GameBoard gameBoard24 = new GameBoard(3, "hi!");
    player19.buyCard(card20, gameBoard24);
    java.lang.String str26 = player19.getName();
    GameBoard gameBoard31 = new GameBoard(0, "hi!");
    Card card32 = Card.ambassador;
    gameBoard31.returnCard(card32);
    Card card34 = Card.cutpurse;
    int i35 = card34.getCost();
    boolean b36 = gameBoard31.hasCardsAvailable(card34);
    Player player37 = new Player("hi!", (int)'a', gameBoard31);
    Card card38 = player37.drawCard();
    player37.addActions((int)(short)1);
    java.lang.String str41 = player37.getName();
    player37.discardHandAndInPlay();
    player37.initPlayerTurn();
    Card card44 = Card.gardens;
    player37.Discard(card44);
    GameBoard gameBoard48 = new GameBoard(1, "hi!");
    player19.gainCardToHand(card44, gameBoard48);
    Card card50 = player19.drawCard();
    gameBoard2.returnCard(card50);
    card50.setVictory((int)(byte)-1);
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.feast + "'", card7.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    org.junit.Assert.assertTrue("'" + card14 + "' != '" + Card.ambassador + "'", card14.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.cutpurse + "'", card16.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    org.junit.Assert.assertTrue("'" + card20 + "' != '" + Card.feast + "'", card20.equals(Card.feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "hi!"+ "'", str26.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card32 + "' != '" + Card.ambassador + "'", card32.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card34 + "' != '" + Card.cutpurse + "'", card34.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    org.junit.Assert.assertTrue("'" + card38 + "' != '" + Card.copper + "'", card38.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "hi!"+ "'", str41.equals("hi!"));
    org.junit.Assert.assertTrue("'" + card44 + "' != '" + Card.gardens + "'", card44.equals(Card.gardens));
    org.junit.Assert.assertTrue("'" + card50 + "' != '" + Card.copper + "'", card50.equals(Card.copper));

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test336"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    Card card5 = Card.cutpurse;
    int i6 = card5.getCost();
    boolean b7 = gameBoard2.hasCardsAvailable(card5);
    java.util.List<java.lang.String> list_str8 = card5.getTypes();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.cutpurse + "'", card5.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str8);

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test337"); }

    GameBoard gameBoard2 = new GameBoard(0, "hi!");
    Card card3 = Card.ambassador;
    gameBoard2.returnCard(card3);
    java.util.List<Card> list_card5 = gameBoard2.getActiveSupplyPiles();
    java.util.List<Card> list_card6 = gameBoard2.getTrash();
    int i7 = gameBoard2.getTotalEmbargoTokens();
    java.util.List<Card> list_card9 = gameBoard2.kingdomCards((int)(short)1);
    boolean b10 = gameBoard2.gameDone();
    org.junit.Assert.assertTrue("'" + card3 + "' != '" + Card.ambassador + "'", card3.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test338"); }

    GameBoard gameBoard4 = new GameBoard(0, "hi!");
    Card card5 = Card.ambassador;
    gameBoard4.returnCard(card5);
    Card card7 = Card.cutpurse;
    int i8 = card7.getCost();
    boolean b9 = gameBoard4.hasCardsAvailable(card7);
    Player player10 = new Player("hi!", (int)'a', gameBoard4);
    java.util.List<Card> list_card11 = player10.getPlayedCards();
    Card card12 = Card.adventurer;
    GameBoard gameBoard15 = new GameBoard(0, "hi!");
    Card card16 = Card.ambassador;
    gameBoard15.returnCard(card16);
    boolean b18 = gameBoard15.gameDone();
    Card card19 = Card.estate;
    gameBoard15.returnCard(card19);
    gameBoard15.opponentDraw((int)'4');
    player10.buyCard(card12, gameBoard15);
    GameBoard gameBoard26 = new GameBoard(0, "hi!");
    Card card27 = Card.ambassador;
    gameBoard26.returnCard(card27);
    boolean b29 = gameBoard26.gameDone();
    int i30 = gameBoard26.play();
    Card card31 = player10.getRandomBuyCard(gameBoard26);
    java.lang.String str32 = player10.getName();
    boolean b33 = player10.hasActionCard();
    int i34 = player10.getCoins();
    java.util.List<Card> list_card35 = player10.getDiscard();
    org.junit.Assert.assertTrue("'" + card5 + "' != '" + Card.ambassador + "'", card5.equals(Card.ambassador));
    org.junit.Assert.assertTrue("'" + card7 + "' != '" + Card.cutpurse + "'", card7.equals(Card.cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + card12 + "' != '" + Card.adventurer + "'", card12.equals(Card.adventurer));
    org.junit.Assert.assertTrue("'" + card16 + "' != '" + Card.ambassador + "'", card16.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + card19 + "' != '" + Card.estate + "'", card19.equals(Card.estate));
    org.junit.Assert.assertTrue("'" + card27 + "' != '" + Card.ambassador + "'", card27.equals(Card.ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    org.junit.Assert.assertTrue("'" + card31 + "' != '" + Card.copper + "'", card31.equals(Card.copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "hi!"+ "'", str32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);

  }

}
