
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test001"); }

    dominion.Card.CardName cardName0 = dominion.Card.CardName.Gold;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + dominion.Card.CardName.Gold + "'", cardName0.equals(dominion.Card.CardName.Gold));

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test002"); }

    dominion.Card.CardName cardName0 = dominion.Card.CardName.Duchy;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + dominion.Card.CardName.Duchy + "'", cardName0.equals(dominion.Card.CardName.Duchy));

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test003"); }

    dominion.Randomness.totalCallsToRandom = 'a';

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test004"); }

    java.lang.Iterable<dominion.Card> iterable_card0 = null;
    dominion.Card.Type type1 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<dominion.Card> list_card2 = dominion.Card.filter(iterable_card0, type1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test005"); }

    long long0 = dominion.Randomness.SEED;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long0 == 1488145338834L);

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test006"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card3 = dominion.Randomness.randomMember((java.util.List<dominion.Card>)arraylist_card1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test007"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card5 = dominion.Randomness.randomMember((java.util.List<dominion.Card>)arraylist_card1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test008"); }

    dominion.Randomness.totalCallsToRandom = 0;

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test009"); }

    dominion.Card.CardName cardName0 = dominion.Card.CardName.Ambassador;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + dominion.Card.CardName.Ambassador + "'", cardName0.equals(dominion.Card.CardName.Ambassador));

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test010"); }

    dominion.Randomness.reset((long)10);

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test011"); }

    // The following exception was thrown during execution in test generation
    try {
    int i1 = dominion.Randomness.nextRandomInt(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test012"); }

    dominion.Card.CardName cardName0 = dominion.Card.CardName.Feast;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + dominion.Card.CardName.Feast + "'", cardName0.equals(dominion.Card.CardName.Feast));

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test013"); }

    java.util.List<dominion.Card> list_card0 = null;
    dominion.Card[] card_array1 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card2 = new java.util.ArrayList<dominion.Card>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card2, card_array1);
    dominion.Card.CardName cardName4 = dominion.Card.CardName.Province;
    dominion.Card card5 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card2, cardName4);
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card6 = dominion.Card.getCard(list_card0, cardName4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + cardName4 + "' != '" + dominion.Card.CardName.Province + "'", cardName4.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card5);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test014"); }

    dominion.Randomness.reset(0L);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test015"); }

    dominion.Card.CardName cardName0 = dominion.Card.CardName.Curse;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + dominion.Card.CardName.Curse + "'", cardName0.equals(dominion.Card.CardName.Curse));

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test016"); }

    dominion.Randomness.reset((long)(byte)1);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test017"); }

    dominion.Card.CardName cardName0 = dominion.Card.CardName.Embargo;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + dominion.Card.CardName.Embargo + "'", cardName0.equals(dominion.Card.CardName.Embargo));

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test018"); }

    // The following exception was thrown during execution in test generation
    try {
    int i1 = dominion.Randomness.nextRandomInt((int)(byte)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test019"); }

    dominion.Randomness.totalCallsToRandom = (byte)100;

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test020"); }

    dominion.Card.CardName cardName0 = dominion.Card.CardName.Steward;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + dominion.Card.CardName.Steward + "'", cardName0.equals(dominion.Card.CardName.Steward));

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test021"); }

    dominion.Randomness.reset((long)(short)10);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test022"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Council_Room;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    dominion.Card.Type type15 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card16 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card11, type15);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card11);
    dominion.Player player19 = new dominion.Player(gameState17, "hi!");
    player19.playKingdomCard();
    dominion.Card card21 = null;
    // The following exception was thrown during execution in test generation
    try {
    gameState7.pollPile(player19, card21);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName13.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + dominion.Card.Type.TREASURE + "'", type15.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test023"); }

    int i0 = dominion.Randomness.totalCallsToRandom;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i0 == 100);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test024"); }

    int i1 = dominion.Randomness.nextRandomInt(100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 13);

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test025"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trash(card3);
    // The following exception was thrown during execution in test generation
    try {
    player2.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test026"); }

    int i1 = dominion.Randomness.nextRandomInt((int)(short)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test027"); }

    int i1 = dominion.Randomness.nextRandomInt((int)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 23);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test028"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test029"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trash(card3);
    dominion.Card card5 = null;
    player2.discard(card5);
    // The following exception was thrown during execution in test generation
    try {
    player2.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test030"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Player player10 = dominion.Randomness.randomMember(list_player9);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test031"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i17 = gameState16.embargoTokens;
    gameState7.embargoTokens = hashmap_card_i17;
    boolean b19 = gameState7.isGameOver();
    boolean b20 = gameState7.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test032"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    boolean b6 = gameState5.isGameOver();
    dominion.GameState gameState7 = null;
    dominion.Player player9 = new dominion.Player(gameState7, "");
    player9.playTreasureCard();
    gameState5.addPlayer(player9);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState5.getWinners();
    dominion.Card[] card_array13 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card14 = new java.util.ArrayList<dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card14, card_array13);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Council_Room;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card14, cardName16);
    dominion.Card.Type type18 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card19 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card14, type18);
    dominion.GameState gameState20 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card14);
    gameState20.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i22 = gameState20.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i23 = gameState20.gameBoard;
    gameState5.embargoTokens = hashmap_card_i23;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName16.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    org.junit.Assert.assertTrue("'" + type18 + "' != '" + dominion.Card.Type.TREASURE + "'", type18.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i23);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test033"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    boolean b9 = gameState7.isGameOver();
    boolean b10 = gameState7.isGameOver();
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    gameState7.cards = arraylist_card12;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card15 = dominion.Randomness.randomMember((java.util.List<dominion.Card>)arraylist_card12);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test034"); }

    dominion.Randomness.reset(10L);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test035"); }

    dominion.Randomness.reset((long)' ');

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test036"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i17 = gameState16.embargoTokens;
    gameState7.embargoTokens = hashmap_card_i17;
    boolean b19 = gameState7.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState7.play();
    java.util.List<dominion.Player> list_player21 = null;
    gameState7.players = list_player21;
    // The following exception was thrown during execution in test generation
    try {
    dominion.GameState gameState23 = gameState7.clone();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test037"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.lang.String str6 = gameState5.toString();
    gameState5.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState5.gameBoard;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState5.play();
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Province;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card11);
    boolean b16 = gameState15.isGameOver();
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "");
    player19.playTreasureCard();
    gameState15.addPlayer(player19);
    java.lang.String str22 = player19.toString();
    dominion.Card card23 = null;
    // The following exception was thrown during execution in test generation
    try {
    gameState5.pollPile(player19, card23);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str6.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Province + "'", cardName13.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str22.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test038"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    dominion.Card[] card_array7 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card8 = new java.util.ArrayList<dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card8, card_array7);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Council_Room;
    dominion.Card card11 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName10);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Mine;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName12);
    gameState5.cards = arraylist_card8;
    dominion.Player player16 = new dominion.Player(gameState5, "The board game is empty you need to intialize the game!!!!");
    dominion.Card[] card_array17 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card18 = new java.util.ArrayList<dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card18, card_array17);
    dominion.Card.CardName cardName20 = dominion.Card.CardName.Council_Room;
    dominion.Card card21 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card18, cardName20);
    dominion.Card.Type type22 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card23 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card18, type22);
    dominion.GameState gameState24 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card18);
    gameState24.initializeGame();
    dominion.Player player27 = new dominion.Player(gameState24, "");
    dominion.Card card28 = null;
    // The following exception was thrown during execution in test generation
    try {
    gameState5.pollPile(player27, card28);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName10.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Mine + "'", cardName12.equals(dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName20.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + dominion.Card.Type.TREASURE + "'", type22.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test039"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    dominion.Card[] card_array7 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card8 = new java.util.ArrayList<dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card8, card_array7);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Council_Room;
    dominion.Card card11 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName10);
    dominion.Card.Type type12 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card13 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card8, type12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card8);
    dominion.Player player16 = new dominion.Player(gameState14, "hi!");
    dominion.Card card17 = null;
    // The following exception was thrown during execution in test generation
    try {
    gameState5.pollPile(player16, card17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName10.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + dominion.Card.Type.TREASURE + "'", type12.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test040"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    java.util.List<dominion.Card> list_card12 = gameState7.pileRetrieve();
    java.lang.String str13 = gameState7.toString();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i14 = gameState7.play();
    dominion.Card[] card_array15 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card16 = new java.util.ArrayList<dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card16, card_array15);
    dominion.Card.CardName cardName18 = dominion.Card.CardName.Province;
    dominion.Card card19 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card16, cardName18);
    dominion.GameState gameState20 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card16);
    boolean b21 = gameState20.isGameOver();
    dominion.GameState gameState22 = null;
    dominion.Player player24 = new dominion.Player(gameState22, "");
    player24.playTreasureCard();
    gameState20.addPlayer(player24);
    dominion.Card card27 = null;
    // The following exception was thrown during execution in test generation
    try {
    gameState7.pollPile(player24, card27);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str13.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + dominion.Card.CardName.Province + "'", cardName18.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test041"); }

    java.lang.Iterable<dominion.Card> iterable_card0 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<dominion.Card> list_card2 = dominion.Card.priceCheck(iterable_card0, (java.lang.Integer)0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test042"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    java.lang.String str12 = gameState7.toString();
    java.lang.String str13 = gameState7.toString();
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Council_Room;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.Card.Type type19 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card20 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card15, type19);
    dominion.GameState gameState21 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i22 = gameState21.embargoTokens;
    gameState7.embargoTokens = hashmap_card_i22;
    dominion.Card[] card_array24 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card25 = new java.util.ArrayList<dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card25, card_array24);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Council_Room;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName27);
    dominion.Card.Type type29 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card30 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card25, type29);
    dominion.GameState gameState31 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card25);
    gameState31.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i33 = gameState31.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = gameState31.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i35 = gameState31.gameBoard;
    dominion.Player player37 = new dominion.Player(gameState31, "");
    dominion.Card card38 = null;
    // The following exception was thrown during execution in test generation
    try {
    gameState7.pollPile(player37, card38);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str12.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str13.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName17.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + type19 + "' != '" + dominion.Card.Type.TREASURE + "'", type19.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName27.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + type29 + "' != '" + dominion.Card.Type.TREASURE + "'", type29.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i35);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test043"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player18 = new dominion.Player(gameState16, "hi!");
    dominion.Card card19 = null;
    player18.trash(card19);
    player18.printStateGame();
    dominion.Card card22 = null;
    // The following exception was thrown during execution in test generation
    try {
    gameState7.pollPile(player18, card22);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test044"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trash(card3);
    dominion.Card card5 = null;
    player2.discard(card5);
    dominion.Card card7 = null;
    player2.trash(card7);
    dominion.Card card9 = null;
    player2.trash(card9);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test045"); }

    dominion.Randomness.reset((long)(-1));

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test046"); }

    dominion.Randomness.reset((long)(short)1);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test047"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    boolean b11 = gameState7.isGameOver();
    gameState7.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test048"); }

    dominion.Randomness.totalCallsToRandom = 23;

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test049"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    player2.playTreasureCard();
    java.lang.String str4 = player2.toString();
    player2.playTreasureCard();
    player2.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str4.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test050"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    gameState5.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState5.play();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Province;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    java.lang.String str15 = gameState14.toString();
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Council_Room;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    gameState14.cards = arraylist_card17;
    dominion.Card[] card_array22 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card23 = new java.util.ArrayList<dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card23, card_array22);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Council_Room;
    dominion.Card card26 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card23, cardName25);
    dominion.Card.Type type27 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card28 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card23, type27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card23);
    gameState29.initializeGame();
    java.util.List<dominion.Player> list_player31 = gameState29.players;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i32 = gameState29.getWinners();
    java.util.List<dominion.Player> list_player33 = gameState29.players;
    gameState14.players = list_player33;
    gameState5.players = list_player33;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Player player36 = dominion.Randomness.randomMember(list_player33);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Province + "'", cardName12.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str15.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName19.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName25.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + type27 + "' != '" + dominion.Card.Type.TREASURE + "'", type27.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player33);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test051"); }

    int i1 = dominion.Randomness.nextRandomInt((int)'4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 17);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test052"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    dominion.Player player13 = new dominion.Player(gameState7, "");
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Council_Room;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.Card.Type type19 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card20 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card15, type19);
    dominion.GameState gameState21 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    dominion.Player player23 = new dominion.Player(gameState21, "hi!");
    player23.playKingdomCard();
    dominion.Card card25 = null;
    // The following exception was thrown during execution in test generation
    try {
    gameState7.pollPile(player23, card25);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName17.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + type19 + "' != '" + dominion.Card.Type.TREASURE + "'", type19.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test053"); }

    dominion.Randomness.totalCallsToRandom = (byte)0;

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test054"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.List<dominion.Player> list_player11 = null;
    gameState7.players = list_player11;
    java.util.List<dominion.Player> list_player13 = gameState7.players;
    java.lang.String str14 = gameState7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str14.equals("The board game is empty you need to intialize the game!!!!"));

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test055"); }

    dominion.Randomness.totalCallsToRandom = 13;

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test056"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    boolean b9 = gameState7.isGameOver();
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Province;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card11);
    java.util.List<dominion.Card> list_card16 = gameState15.cards;
    dominion.Card.Type type17 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card18 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card16, type17);
    dominion.Card[] card_array19 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card20 = new java.util.ArrayList<dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card20, card_array19);
    dominion.Card.CardName cardName22 = dominion.Card.CardName.Province;
    dominion.Card card23 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card20, cardName22);
    dominion.GameState gameState24 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card20);
    java.util.List<dominion.Card> list_card25 = gameState24.cards;
    dominion.Card.Type type26 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card27 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card25, type26);
    java.util.List<dominion.Card> list_card28 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card16, type26);
    gameState7.cards = list_card16;
    java.util.List<dominion.Card> list_card30 = gameState7.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Province + "'", cardName13.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + dominion.Card.Type.VICTORY + "'", type17.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + dominion.Card.CardName.Province + "'", cardName22.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + dominion.Card.Type.VICTORY + "'", type26.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test057"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trash(card3);
    player2.buyCard();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test058"); }

    int i1 = dominion.Randomness.nextRandomInt(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 8);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test059"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    gameState5.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState5.play();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    gameState16.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i18 = gameState16.getWinners();
    java.util.List<dominion.Card> list_card19 = gameState16.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState16.gameBoard;
    dominion.GameState gameState21 = null;
    dominion.Player player23 = new dominion.Player(gameState21, "");
    dominion.Card card24 = null;
    player23.trash(card24);
    dominion.Card card26 = null;
    player23.discard(card26);
    gameState16.addPlayer(player23);
    dominion.Card card29 = null;
    // The following exception was thrown during execution in test generation
    try {
    gameState5.pollPile(player23, card29);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test060"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Council_Room;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.Card.Type type16 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card17 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card12, type16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    gameState18.initializeGame();
    java.util.List<dominion.Player> list_player20 = gameState18.players;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState18.getWinners();
    java.util.List<dominion.Player> list_player22 = gameState18.players;
    gameState7.players = list_player22;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Player player24 = dominion.Randomness.randomMember(list_player22);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName14.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + type16 + "' != '" + dominion.Card.Type.TREASURE + "'", type16.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player22);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test061"); }

    dominion.Randomness.reset((long)(short)-1);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test062"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.List<dominion.Card> list_card11 = gameState7.cards;
    java.util.List<dominion.Card> list_card13 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card11, (java.lang.Integer)13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test063"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    boolean b9 = gameState7.isGameOver();
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Province;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card11);
    java.util.List<dominion.Card> list_card16 = gameState15.cards;
    dominion.Card.Type type17 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card18 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card16, type17);
    dominion.Card[] card_array19 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card20 = new java.util.ArrayList<dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card20, card_array19);
    dominion.Card.CardName cardName22 = dominion.Card.CardName.Province;
    dominion.Card card23 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card20, cardName22);
    dominion.GameState gameState24 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card20);
    java.util.List<dominion.Card> list_card25 = gameState24.cards;
    dominion.Card.Type type26 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card27 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card25, type26);
    java.util.List<dominion.Card> list_card28 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card16, type26);
    gameState7.cards = list_card16;
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Council_Room;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    dominion.Card.Type type35 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card36 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card31, type35);
    dominion.GameState gameState37 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card31);
    dominion.Player player39 = new dominion.Player(gameState37, "hi!");
    player39.playKingdomCard();
    dominion.Card card41 = null;
    // The following exception was thrown during execution in test generation
    try {
    gameState7.pollPile(player39, card41);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Province + "'", cardName13.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + dominion.Card.Type.VICTORY + "'", type17.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + dominion.Card.CardName.Province + "'", cardName22.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + dominion.Card.Type.VICTORY + "'", type26.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName33.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    org.junit.Assert.assertTrue("'" + type35 + "' != '" + dominion.Card.Type.TREASURE + "'", type35.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test064"); }

    dominion.Randomness.totalCallsToRandom = (short)0;

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test065"); }

    dominion.Randomness.totalCallsToRandom = (byte)1;

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test066"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    boolean b6 = gameState5.isGameOver();
    dominion.GameState gameState7 = null;
    dominion.Player player9 = new dominion.Player(gameState7, "");
    player9.playTreasureCard();
    gameState5.addPlayer(player9);
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Council_Room;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.Card.Type type17 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card18 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card13, type17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    dominion.Player player21 = new dominion.Player(gameState19, "hi!");
    dominion.Card card22 = null;
    player21.trash(card22);
    dominion.Card card24 = null;
    player21.discard(card24);
    gameState5.addPlayer(player21);
    player21.playTreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName15.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + dominion.Card.Type.TREASURE + "'", type17.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test067"); }

    // The following exception was thrown during execution in test generation
    try {
    int i1 = dominion.Randomness.nextRandomInt((int)(short)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test068"); }

    dominion.Randomness.totalCallsToRandom = 100;

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test069"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.lang.String str6 = gameState5.toString();
    dominion.Card[] card_array7 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card8 = new java.util.ArrayList<dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card8, card_array7);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Province;
    dominion.Card card11 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName10);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Cutpurse;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName12);
    java.util.List<dominion.Card> list_card15 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card8, (java.lang.Integer)23);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Province;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    dominion.GameState gameState21 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card17);
    dominion.Card.Type type22 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card23 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type22);
    java.util.List<dominion.Card> list_card24 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card8, type22);
    gameState5.cards = list_card24;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i26 = gameState5.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str6.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Province + "'", cardName10.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName12.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Province + "'", cardName19.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + dominion.Card.Type.TREASURE + "'", type22.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i26);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test070"); }

    dominion.Randomness.totalCallsToRandom = 10;

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test071"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    boolean b10 = gameState7.isGameOver();
    dominion.Player player12 = new dominion.Player(gameState7, "");
    boolean b13 = gameState7.isGameOver();
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Province;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    java.util.List<dominion.Card> list_card20 = gameState19.cards;
    gameState19.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i22 = gameState19.play();
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Province;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.GameState gameState28 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card24);
    java.lang.String str29 = gameState28.toString();
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Council_Room;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    gameState28.cards = arraylist_card31;
    dominion.Card[] card_array36 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card37 = new java.util.ArrayList<dominion.Card>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card37, card_array36);
    dominion.Card.CardName cardName39 = dominion.Card.CardName.Council_Room;
    dominion.Card card40 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card37, cardName39);
    dominion.Card.Type type41 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card42 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card37, type41);
    dominion.GameState gameState43 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card37);
    gameState43.initializeGame();
    java.util.List<dominion.Player> list_player45 = gameState43.players;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i46 = gameState43.getWinners();
    java.util.List<dominion.Player> list_player47 = gameState43.players;
    gameState28.players = list_player47;
    gameState19.players = list_player47;
    gameState7.players = list_player47;
    java.util.List<dominion.Card> list_card51 = gameState7.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Province + "'", cardName17.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Province + "'", cardName26.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str29.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName33.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName39.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);
    org.junit.Assert.assertTrue("'" + type41 + "' != '" + dominion.Card.Type.TREASURE + "'", type41.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test072"); }

    int i1 = dominion.Randomness.nextRandomInt(1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test073"); }

    dominion.Randomness.totalCallsToRandom = 17;

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test074"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.lang.String str6 = gameState5.toString();
    dominion.Card[] card_array7 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card8 = new java.util.ArrayList<dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card8, card_array7);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Council_Room;
    dominion.Card card11 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName10);
    gameState5.cards = arraylist_card8;
    dominion.Card[] card_array13 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card14 = new java.util.ArrayList<dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card14, card_array13);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Province;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card14, cardName16);
    dominion.Card.CardName cardName18 = dominion.Card.CardName.Cutpurse;
    dominion.Card card19 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card14, cardName18);
    java.util.List<dominion.Card> list_card21 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card14, (java.lang.Integer)23);
    dominion.Card[] card_array22 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card23 = new java.util.ArrayList<dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card23, card_array22);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Council_Room;
    dominion.Card card26 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card23, cardName25);
    dominion.Card.Type type27 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card28 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card23, type27);
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card21, type27);
    java.util.List<dominion.Card> list_card30 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card8, type27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str6.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName10.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Province + "'", cardName16.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName18.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName25.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + type27 + "' != '" + dominion.Card.Type.TREASURE + "'", type27.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test075"); }

    dominion.Randomness.reset((long)(byte)100);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test076"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    boolean b9 = gameState7.isGameOver();
    boolean b10 = gameState7.isGameOver();
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Council_Room;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.Card.Type type16 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card17 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card12, type16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState18.embargoTokens;
    boolean b20 = gameState18.isGameOver();
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Province;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    java.util.List<dominion.Card> list_card27 = gameState26.cards;
    dominion.Card.Type type28 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card27, type28);
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Province;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card31);
    java.util.List<dominion.Card> list_card36 = gameState35.cards;
    dominion.Card.Type type37 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card38 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card36, type37);
    java.util.List<dominion.Card> list_card39 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card27, type37);
    gameState18.cards = list_card27;
    java.util.List<dominion.Card> list_card42 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card27, (java.lang.Integer)(-1));
    gameState7.cards = list_card27;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName14.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + type16 + "' != '" + dominion.Card.Type.TREASURE + "'", type16.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Province + "'", cardName24.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + dominion.Card.Type.VICTORY + "'", type28.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Province + "'", cardName33.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    org.junit.Assert.assertTrue("'" + type37 + "' != '" + dominion.Card.Type.VICTORY + "'", type37.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test077"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.List<dominion.Player> list_player11 = gameState7.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test078"); }

    int i1 = dominion.Randomness.nextRandomInt((int)' ');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 23);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test079"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    dominion.Card card10 = null;
    player9.trash(card10);
    player9.printStateGame();
    player9.playTreasureCard();
    player9.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test080"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i17 = gameState16.embargoTokens;
    gameState7.embargoTokens = hashmap_card_i17;
    boolean b19 = gameState7.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState7.play();
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Council_Room;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.Card.Type type26 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card27 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card22, type26);
    dominion.GameState gameState28 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    gameState28.initializeGame();
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Council_Room;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    dominion.Card.Type type35 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card36 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card31, type35);
    dominion.GameState gameState37 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card31);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i38 = gameState37.embargoTokens;
    gameState28.embargoTokens = hashmap_card_i38;
    gameState7.gameBoard = hashmap_card_i38;
    dominion.Card[] card_array41 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card42 = new java.util.ArrayList<dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card42, card_array41);
    dominion.Card.CardName cardName44 = dominion.Card.CardName.Council_Room;
    dominion.Card card45 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card42, cardName44);
    dominion.Card.Type type46 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card47 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card42, type46);
    dominion.GameState gameState48 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card42);
    gameState48.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i50 = gameState48.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i51 = gameState48.getWinners();
    dominion.GameState gameState52 = gameState48.clone();
    dominion.Card[] card_array53 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card54 = new java.util.ArrayList<dominion.Card>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card54, card_array53);
    dominion.Card.CardName cardName56 = dominion.Card.CardName.Council_Room;
    dominion.Card card57 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card54, cardName56);
    dominion.Card.Type type58 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card59 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card54, type58);
    dominion.GameState gameState60 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card54);
    gameState60.initializeGame();
    java.util.List<dominion.Player> list_player62 = gameState60.players;
    java.util.List<dominion.Card> list_card63 = gameState60.cards;
    boolean b64 = gameState60.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i65 = gameState60.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i66 = gameState60.gameBoard;
    gameState52.embargoTokens = hashmap_card_i66;
    gameState7.embargoTokens = hashmap_card_i66;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName24.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + dominion.Card.Type.TREASURE + "'", type26.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName33.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    org.junit.Assert.assertTrue("'" + type35 + "' != '" + dominion.Card.Type.TREASURE + "'", type35.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName44.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card45);
    org.junit.Assert.assertTrue("'" + type46 + "' != '" + dominion.Card.Type.TREASURE + "'", type46.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName56.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card57);
    org.junit.Assert.assertTrue("'" + type58 + "' != '" + dominion.Card.Type.TREASURE + "'", type58.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i66);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test081"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    java.util.List<dominion.Card> list_card12 = gameState7.pileRetrieve();
    java.lang.String str13 = gameState7.toString();
    dominion.GameState gameState14 = null;
    dominion.Player player16 = new dominion.Player(gameState14, "");
    dominion.Card card17 = null;
    player16.trash(card17);
    dominion.Card card19 = null;
    player16.discard(card19);
    gameState7.addPlayer(player16);
    player16.playKingdomCard();
    player16.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player16.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str13.equals("The board game is empty you need to intialize the game!!!!"));

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test082"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    gameState5.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState5.play();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Province;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    java.lang.String str15 = gameState14.toString();
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Council_Room;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    gameState14.cards = arraylist_card17;
    dominion.Card[] card_array22 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card23 = new java.util.ArrayList<dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card23, card_array22);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Council_Room;
    dominion.Card card26 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card23, cardName25);
    dominion.Card.Type type27 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card28 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card23, type27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card23);
    gameState29.initializeGame();
    java.util.List<dominion.Player> list_player31 = gameState29.players;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i32 = gameState29.getWinners();
    java.util.List<dominion.Player> list_player33 = gameState29.players;
    gameState14.players = list_player33;
    gameState5.players = list_player33;
    dominion.Card[] card_array36 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card37 = new java.util.ArrayList<dominion.Card>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card37, card_array36);
    dominion.Card.CardName cardName39 = dominion.Card.CardName.Council_Room;
    dominion.Card card40 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card37, cardName39);
    dominion.Card.Type type41 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card42 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card37, type41);
    dominion.GameState gameState43 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card37);
    gameState43.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i45 = gameState43.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i46 = gameState43.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i47 = gameState43.gameBoard;
    java.lang.String str48 = gameState43.toString();
    boolean b49 = gameState43.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i50 = gameState43.play();
    java.util.List<dominion.Player> list_player51 = gameState43.players;
    gameState5.players = list_player51;
    java.lang.String str53 = gameState5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Province + "'", cardName12.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str15.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName19.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName25.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + type27 + "' != '" + dominion.Card.Type.TREASURE + "'", type27.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName39.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);
    org.junit.Assert.assertTrue("'" + type41 + "' != '" + dominion.Card.Type.TREASURE + "'", type41.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str48.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str53.equals("The board game is empty you need to intialize the game!!!!"));

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test083"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    dominion.Player player13 = new dominion.Player(gameState7, "");
    dominion.GameState gameState14 = null;
    dominion.Player player16 = new dominion.Player(gameState14, "");
    dominion.Card card17 = null;
    player16.trash(card17);
    dominion.Card card19 = null;
    // The following exception was thrown during execution in test generation
    try {
    gameState7.pollPile(player16, card19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test084"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    java.util.List<dominion.Card> list_card8 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card1, (java.lang.Integer)23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test085"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Council_Room;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    dominion.Card.Type type15 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card16 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card11, type15);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card11);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i18 = gameState17.embargoTokens;
    java.util.List<dominion.Player> list_player19 = gameState17.players;
    gameState7.players = list_player19;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Player player21 = dominion.Randomness.randomMember(list_player19);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName13.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + dominion.Card.Type.TREASURE + "'", type15.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test086"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    boolean b6 = gameState5.isGameOver();
    dominion.GameState gameState7 = null;
    dominion.Player player9 = new dominion.Player(gameState7, "");
    player9.playTreasureCard();
    gameState5.addPlayer(player9);
    java.lang.String str12 = player9.toString();
    player9.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str12.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test087"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Council_Room;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    dominion.Card.Type type15 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card16 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card11, type15);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card11);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i18 = gameState17.embargoTokens;
    java.util.List<dominion.Player> list_player19 = gameState17.players;
    gameState7.players = list_player19;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i21 = gameState7.embargoTokens;
    gameState7.initializeGame();
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Council_Room;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.Card.Type type28 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card24, type28);
    dominion.GameState gameState30 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card24);
    gameState30.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i32 = gameState30.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i33 = gameState30.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = gameState30.gameBoard;
    gameState7.gameBoard = hashmap_card_i34;
    gameState7.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName13.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + dominion.Card.Type.TREASURE + "'", type15.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName26.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + dominion.Card.Type.TREASURE + "'", type28.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i34);

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test088"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState5.getWinners();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState5.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test089"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    gameState5.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState5.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState5.getWinners();
    boolean b10 = gameState5.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test090"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.CardName cardName5 = dominion.Card.CardName.Cutpurse;
    dominion.Card card6 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName5);
    java.util.List<dominion.Card> list_card8 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card1, (java.lang.Integer)23);
    java.util.List<dominion.Card> list_card10 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card1, (java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName5.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test091"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    java.util.List<dominion.Card> list_card7 = gameState5.cards;
    dominion.Card.CardName cardName8 = dominion.Card.CardName.Estate;
    dominion.Card card9 = dominion.Card.getCard(list_card7, cardName8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + dominion.Card.CardName.Estate + "'", cardName8.equals(dominion.Card.CardName.Estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test092"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    player2.playTreasureCard();
    dominion.Card card4 = null;
    player2.trash(card4);
    dominion.Card card6 = null;
    player2.discard(card6);
    dominion.Card card8 = null;
    player2.trash(card8);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test093"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    dominion.Card.CardName cardName7 = dominion.Card.CardName.Cutpurse;
    dominion.Card card8 = dominion.Card.getCard(list_card6, cardName7);
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Council_Room;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName16);
    dominion.Card card18 = dominion.Card.getCard(list_card6, cardName16);
    dominion.GameState gameState19 = new dominion.GameState(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName7.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName16.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test094"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    dominion.Card card10 = null;
    player9.trash(card10);
    player9.playTreasureCard();
    player9.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test095"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i17 = gameState16.embargoTokens;
    java.util.List<dominion.Player> list_player18 = gameState16.players;
    dominion.GameState gameState19 = null;
    dominion.Player player21 = new dominion.Player(gameState19, "");
    dominion.Card card22 = null;
    player21.trash(card22);
    java.lang.String str24 = player21.toString();
    gameState16.addPlayer(player21);
    player21.playKingdomCard();
    dominion.Card card27 = null;
    // The following exception was thrown during execution in test generation
    try {
    gameState7.pollPile(player21, card27);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str24.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test096"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.discard(card3);
    player2.playTreasureCard();

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test097"); }

    int i1 = dominion.Randomness.nextRandomInt((int)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 50);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test098"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    boolean b9 = gameState7.isGameOver();
    dominion.GameState gameState10 = null;
    dominion.Player player12 = new dominion.Player(gameState10, "");
    player12.playTreasureCard();
    dominion.Card card14 = null;
    player12.trash(card14);
    player12.playTreasureCard();
    dominion.Card card17 = null;
    // The following exception was thrown during execution in test generation
    try {
    gameState7.pollPile(player12, card17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test099"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Card.Type type6 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card7 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type6);
    dominion.Card.CardName cardName8 = dominion.Card.CardName.Adventurer;
    dominion.Card card9 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + dominion.Card.Type.TREASURE + "'", type6.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + dominion.Card.CardName.Adventurer + "'", cardName8.equals(dominion.Card.CardName.Adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test100"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = null;
    dominion.Player player8 = new dominion.Player(gameState6, "");
    dominion.Card card9 = null;
    player8.trash(card9);
    dominion.Card card11 = null;
    player8.discard(card11);
    gameState5.addPlayer(player8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test101"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    dominion.Card[] card_array7 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card8 = new java.util.ArrayList<dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card8, card_array7);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Council_Room;
    dominion.Card card11 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName10);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Mine;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName12);
    gameState5.cards = arraylist_card8;
    dominion.Card[] card_array15 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card16 = new java.util.ArrayList<dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card16, card_array15);
    dominion.Card.CardName cardName18 = dominion.Card.CardName.Province;
    dominion.Card card19 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card16, cardName18);
    dominion.GameState gameState20 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card16);
    java.lang.String str21 = gameState20.toString();
    dominion.Card[] card_array22 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card23 = new java.util.ArrayList<dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card23, card_array22);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Council_Room;
    dominion.Card card26 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card23, cardName25);
    gameState20.cards = arraylist_card23;
    dominion.Card[] card_array28 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card29 = new java.util.ArrayList<dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card29, card_array28);
    dominion.Card.CardName cardName31 = dominion.Card.CardName.Council_Room;
    dominion.Card card32 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card29, cardName31);
    dominion.Card.Type type33 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card34 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card29, type33);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card29);
    gameState35.initializeGame();
    java.util.List<dominion.Player> list_player37 = gameState35.players;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i38 = gameState35.getWinners();
    java.util.List<dominion.Player> list_player39 = gameState35.players;
    gameState20.players = list_player39;
    gameState5.players = list_player39;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName10.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Mine + "'", cardName12.equals(dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + dominion.Card.CardName.Province + "'", cardName18.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str21.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName25.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName31.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    org.junit.Assert.assertTrue("'" + type33 + "' != '" + dominion.Card.Type.TREASURE + "'", type33.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player39);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test102"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.Card.CardName cardName7 = dominion.Card.CardName.Council_Room;
    dominion.Card card8 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName7);
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card9 = dominion.Randomness.randomMember((java.util.List<dominion.Card>)arraylist_card1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName7.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test103"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    boolean b9 = gameState7.isGameOver();
    java.util.List<dominion.Player> list_player10 = gameState7.players;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Player player11 = dominion.Randomness.randomMember(list_player10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player10);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test104"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    java.util.List<dominion.Card> list_card12 = gameState7.pileRetrieve();
    java.util.List<dominion.Card> list_card14 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card12, (java.lang.Integer)100);
    dominion.Card[] card_array15 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card16 = new java.util.ArrayList<dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card16, card_array15);
    dominion.Card.CardName cardName18 = dominion.Card.CardName.Province;
    dominion.Card card19 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card16, cardName18);
    dominion.GameState gameState20 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card16);
    java.util.List<dominion.Card> list_card21 = gameState20.cards;
    dominion.Card.Type type22 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card23 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card21, type22);
    dominion.Card[] card_array24 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card25 = new java.util.ArrayList<dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card25, card_array24);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Province;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card25);
    java.util.List<dominion.Card> list_card30 = gameState29.cards;
    dominion.Card.Type type31 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card32 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card30, type31);
    java.util.List<dominion.Card> list_card33 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card23, type31);
    java.util.List<dominion.Card> list_card34 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card12, type31);
    dominion.Card[] card_array35 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card36 = new java.util.ArrayList<dominion.Card>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card36, card_array35);
    dominion.Card.CardName cardName38 = dominion.Card.CardName.Province;
    dominion.Card card39 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card36, cardName38);
    dominion.Card.CardName cardName40 = dominion.Card.CardName.Cutpurse;
    dominion.Card card41 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card36, cardName40);
    java.util.List<dominion.Card> list_card43 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card36, (java.lang.Integer)23);
    dominion.Card[] card_array44 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card45 = new java.util.ArrayList<dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card45, card_array44);
    dominion.Card.CardName cardName47 = dominion.Card.CardName.Province;
    dominion.Card card48 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card45, cardName47);
    dominion.GameState gameState49 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card45);
    dominion.Card.Type type50 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card51 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card45, type50);
    java.util.List<dominion.Card> list_card52 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card36, type50);
    dominion.Card[] card_array53 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card54 = new java.util.ArrayList<dominion.Card>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card54, card_array53);
    dominion.Card.CardName cardName56 = dominion.Card.CardName.Council_Room;
    dominion.Card card57 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card54, cardName56);
    dominion.Card.Type type58 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card59 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card54, type58);
    dominion.GameState gameState60 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card54);
    gameState60.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i62 = gameState60.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i63 = gameState60.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i64 = gameState60.gameBoard;
    java.util.List<dominion.Card> list_card65 = gameState60.pileRetrieve();
    java.util.List<dominion.Card> list_card67 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card65, (java.lang.Integer)100);
    dominion.Card[] card_array68 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card69 = new java.util.ArrayList<dominion.Card>();
    boolean b70 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card69, card_array68);
    dominion.Card.CardName cardName71 = dominion.Card.CardName.Province;
    dominion.Card card72 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card69, cardName71);
    dominion.GameState gameState73 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card69);
    java.util.List<dominion.Card> list_card74 = gameState73.cards;
    dominion.Card.Type type75 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card76 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card74, type75);
    dominion.Card[] card_array77 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card78 = new java.util.ArrayList<dominion.Card>();
    boolean b79 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card78, card_array77);
    dominion.Card.CardName cardName80 = dominion.Card.CardName.Province;
    dominion.Card card81 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card78, cardName80);
    dominion.GameState gameState82 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card78);
    java.util.List<dominion.Card> list_card83 = gameState82.cards;
    dominion.Card.Type type84 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card85 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card83, type84);
    java.util.List<dominion.Card> list_card86 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card76, type84);
    java.util.List<dominion.Card> list_card87 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card65, type84);
    java.util.List<dominion.Card> list_card88 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card52, type84);
    java.util.List<dominion.Card> list_card89 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card12, type84);
    dominion.Card.CardName cardName90 = dominion.Card.CardName.Gardens;
    dominion.Card card91 = dominion.Card.getCard(list_card12, cardName90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + dominion.Card.CardName.Province + "'", cardName18.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + dominion.Card.Type.VICTORY + "'", type22.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Province + "'", cardName27.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    org.junit.Assert.assertTrue("'" + type31 + "' != '" + dominion.Card.Type.VICTORY + "'", type31.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + dominion.Card.CardName.Province + "'", cardName38.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card39);
    org.junit.Assert.assertTrue("'" + cardName40 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName40.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + dominion.Card.CardName.Province + "'", cardName47.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card48);
    org.junit.Assert.assertTrue("'" + type50 + "' != '" + dominion.Card.Type.TREASURE + "'", type50.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName56.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card57);
    org.junit.Assert.assertTrue("'" + type58 + "' != '" + dominion.Card.Type.TREASURE + "'", type58.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    org.junit.Assert.assertTrue("'" + cardName71 + "' != '" + dominion.Card.CardName.Province + "'", cardName71.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card74);
    org.junit.Assert.assertTrue("'" + type75 + "' != '" + dominion.Card.Type.VICTORY + "'", type75.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    org.junit.Assert.assertTrue("'" + cardName80 + "' != '" + dominion.Card.CardName.Province + "'", cardName80.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card83);
    org.junit.Assert.assertTrue("'" + type84 + "' != '" + dominion.Card.Type.VICTORY + "'", type84.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card89);
    org.junit.Assert.assertTrue("'" + cardName90 + "' != '" + dominion.Card.CardName.Gardens + "'", cardName90.equals(dominion.Card.CardName.Gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card91);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test105"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    boolean b6 = gameState5.isGameOver();
    dominion.GameState gameState7 = null;
    dominion.Player player9 = new dominion.Player(gameState7, "");
    player9.playTreasureCard();
    gameState5.addPlayer(player9);
    dominion.Player player13 = new dominion.Player(gameState5, " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n");
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i14 = gameState5.embargoTokens;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i14);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test106"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Council_Room;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.Card.Type type16 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card17 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card12, type16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    dominion.Player player20 = new dominion.Player(gameState18, "hi!");
    dominion.Card card21 = null;
    player20.trash(card21);
    player20.printStateGame();
    player20.buyCard();
    player20.printStateGame();
    gameState7.addPlayer(player20);
    dominion.Card[] card_array27 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card28 = new java.util.ArrayList<dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card28, card_array27);
    dominion.Card.CardName cardName30 = dominion.Card.CardName.Council_Room;
    dominion.Card card31 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card28, cardName30);
    dominion.Card.Type type32 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card33 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card28, type32);
    dominion.GameState gameState34 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card28);
    gameState34.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i36 = gameState34.getWinners();
    java.util.List<dominion.Card> list_card37 = gameState34.cards;
    dominion.Card[] card_array38 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card39 = new java.util.ArrayList<dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card39, card_array38);
    dominion.Card.CardName cardName41 = dominion.Card.CardName.Council_Room;
    dominion.Card card42 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card39, cardName41);
    dominion.Card.Type type43 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card44 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card39, type43);
    dominion.GameState gameState45 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card39);
    gameState45.initializeGame();
    java.util.List<dominion.Player> list_player47 = gameState45.players;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i48 = gameState45.gameBoard;
    dominion.Card[] card_array49 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card50 = new java.util.ArrayList<dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card50, card_array49);
    dominion.Card.CardName cardName52 = dominion.Card.CardName.Council_Room;
    dominion.Card card53 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card50, cardName52);
    dominion.Card.Type type54 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card55 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card50, type54);
    dominion.GameState gameState56 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card50);
    dominion.Player player58 = new dominion.Player(gameState56, "hi!");
    dominion.Card card59 = null;
    player58.trash(card59);
    player58.printStateGame();
    player58.buyCard();
    player58.printStateGame();
    gameState45.addPlayer(player58);
    gameState34.addPlayer(player58);
    dominion.Card card66 = null;
    // The following exception was thrown during execution in test generation
    try {
    gameState7.pollPile(player58, card66);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName14.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + type16 + "' != '" + dominion.Card.Type.TREASURE + "'", type16.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName30.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    org.junit.Assert.assertTrue("'" + type32 + "' != '" + dominion.Card.Type.TREASURE + "'", type32.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    org.junit.Assert.assertTrue("'" + cardName41 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName41.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card42);
    org.junit.Assert.assertTrue("'" + type43 + "' != '" + dominion.Card.Type.TREASURE + "'", type43.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName52.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card53);
    org.junit.Assert.assertTrue("'" + type54 + "' != '" + dominion.Card.Type.TREASURE + "'", type54.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card55);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test107"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card9 = gameState7.cards;
    java.util.List<dominion.Card> list_card11 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card9, (java.lang.Integer)1);
    java.util.List<dominion.Card> list_card13 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card11, (java.lang.Integer)1);
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card14 = dominion.Randomness.randomMember(list_card13);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test108"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    boolean b6 = gameState5.isGameOver();
    dominion.GameState gameState7 = null;
    dominion.Player player9 = new dominion.Player(gameState7, "");
    player9.playTreasureCard();
    gameState5.addPlayer(player9);
    dominion.Player player13 = new dominion.Player(gameState5, " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n");
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i14 = gameState5.gameBoard;
    dominion.GameState gameState15 = null;
    dominion.Player player17 = new dominion.Player(gameState15, "");
    dominion.Card card18 = null;
    player17.discard(card18);
    dominion.Card card20 = null;
    // The following exception was thrown during execution in test generation
    try {
    gameState5.pollPile(player17, card20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i14);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test109"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    dominion.GameState gameState11 = new dominion.GameState(list_card10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i12 = gameState11.gameBoard;
    dominion.GameState gameState13 = null;
    dominion.Player player15 = new dominion.Player(gameState13, "");
    player15.playTreasureCard();
    dominion.Card card17 = null;
    player15.trash(card17);
    gameState11.addPlayer(player15);
    dominion.Card[] card_array20 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card21 = new java.util.ArrayList<dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card21, card_array20);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Council_Room;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName23);
    dominion.Card.Type type25 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card26 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card21, type25);
    dominion.GameState gameState27 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    gameState27.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i29 = gameState27.getWinners();
    java.util.List<dominion.Card> list_card30 = gameState27.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i31 = gameState27.gameBoard;
    gameState11.embargoTokens = hashmap_card_i31;
    java.util.List<dominion.Card> list_card33 = gameState11.pileRetrieve();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i34 = gameState11.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName23.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    org.junit.Assert.assertTrue("'" + type25 + "' != '" + dominion.Card.Type.TREASURE + "'", type25.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i34);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test110"); }

    dominion.Randomness.reset((-1L));

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test111"); }

    dominion.Randomness.totalCallsToRandom = '4';

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test112"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i17 = gameState16.embargoTokens;
    gameState7.embargoTokens = hashmap_card_i17;
    boolean b19 = gameState7.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState7.play();
    java.util.List<dominion.Player> list_player21 = null;
    gameState7.players = list_player21;
    // The following exception was thrown during execution in test generation
    try {
    gameState7.initializeGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test113"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    dominion.GameState gameState11 = new dominion.GameState(list_card10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i12 = gameState11.gameBoard;
    dominion.GameState gameState13 = null;
    dominion.Player player15 = new dominion.Player(gameState13, "");
    player15.playTreasureCard();
    dominion.Card card17 = null;
    player15.trash(card17);
    gameState11.addPlayer(player15);
    dominion.Card[] card_array20 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card21 = new java.util.ArrayList<dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card21, card_array20);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Council_Room;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName23);
    dominion.Card.Type type25 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card26 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card21, type25);
    dominion.GameState gameState27 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i28 = gameState27.getWinners();
    java.util.List<dominion.Card> list_card29 = gameState27.cards;
    gameState11.cards = list_card29;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName23.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    org.junit.Assert.assertTrue("'" + type25 + "' != '" + dominion.Card.Type.TREASURE + "'", type25.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test114"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    player2.playTreasureCard();
    dominion.Card card4 = null;
    player2.trash(card4);
    player2.playTreasureCard();
    java.lang.String str7 = player2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str7.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test115"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Council_Room;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    dominion.Card.Type type15 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card16 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card11, type15);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card11);
    gameState17.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i19 = gameState17.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState17.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i21 = gameState17.gameBoard;
    java.util.List<dominion.Card> list_card22 = gameState17.pileRetrieve();
    java.lang.String str23 = gameState17.toString();
    dominion.Card[] card_array24 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card25 = new java.util.ArrayList<dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card25, card_array24);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Council_Room;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName27);
    dominion.Card.Type type29 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card30 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card25, type29);
    dominion.GameState gameState31 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card25);
    gameState31.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i33 = gameState31.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = gameState31.gameBoard;
    gameState17.embargoTokens = hashmap_card_i34;
    gameState7.gameBoard = hashmap_card_i34;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName13.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + dominion.Card.Type.TREASURE + "'", type15.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str23.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName27.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + type29 + "' != '" + dominion.Card.Type.TREASURE + "'", type29.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i34);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test116"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    dominion.Player player13 = new dominion.Player(gameState7, "");
    player13.playTreasureCard();
    player13.playKingdomCard();
    player13.playTreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test117"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i17 = gameState16.embargoTokens;
    gameState7.embargoTokens = hashmap_card_i17;
    boolean b19 = gameState7.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState7.play();
    java.util.List<dominion.Player> list_player21 = null;
    gameState7.players = list_player21;
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Council_Room;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.Card.Type type28 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card24, type28);
    dominion.GameState gameState30 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card24);
    gameState30.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i32 = gameState30.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i33 = gameState30.gameBoard;
    gameState7.embargoTokens = hashmap_card_i33;
    dominion.GameState gameState35 = null;
    dominion.Player player37 = new dominion.Player(gameState35, "");
    player37.playTreasureCard();
    dominion.Card card39 = null;
    player37.trash(card39);
    player37.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    gameState7.addPlayer(player37);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName26.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + dominion.Card.Type.TREASURE + "'", type28.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i33);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test118"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.lang.String str6 = gameState5.toString();
    gameState5.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState5.gameBoard;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState5.play();
    dominion.GameState gameState10 = gameState5.clone();
    dominion.GameState gameState11 = gameState5.clone();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i12 = gameState11.embargoTokens;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i13 = gameState11.gameBoard;
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Council_Room;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.Card.Type type19 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card20 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card15, type19);
    dominion.GameState gameState21 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    dominion.Player player23 = new dominion.Player(gameState21, "hi!");
    boolean b24 = gameState21.isGameOver();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i25 = gameState21.gameBoard;
    dominion.Card[] card_array26 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card27 = new java.util.ArrayList<dominion.Card>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card27, card_array26);
    dominion.Card.CardName cardName29 = dominion.Card.CardName.Province;
    dominion.Card card30 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card27, cardName29);
    dominion.GameState gameState31 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card27);
    java.lang.String str32 = gameState31.toString();
    gameState31.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = gameState31.gameBoard;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i35 = gameState31.play();
    java.util.List<dominion.Player> list_player36 = gameState31.players;
    gameState21.players = list_player36;
    gameState11.players = list_player36;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str6.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName17.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + type19 + "' != '" + dominion.Card.Type.TREASURE + "'", type19.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + dominion.Card.CardName.Province + "'", cardName29.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str32.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test119"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState5.getWinners();
    dominion.GameState gameState8 = gameState5.clone();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState5.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test120"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    boolean b10 = gameState7.isGameOver();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Province;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    java.lang.String str18 = gameState17.toString();
    gameState17.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState17.gameBoard;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState17.play();
    java.util.List<dominion.Player> list_player22 = gameState17.players;
    gameState7.players = list_player22;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Player player24 = dominion.Randomness.randomMember(list_player22);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Province + "'", cardName15.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str18.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player22);

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test121"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.lang.String str6 = gameState5.toString();
    dominion.Card[] card_array7 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card8 = new java.util.ArrayList<dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card8, card_array7);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Province;
    dominion.Card card11 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName10);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Cutpurse;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName12);
    java.util.List<dominion.Card> list_card15 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card8, (java.lang.Integer)23);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Province;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    dominion.GameState gameState21 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card17);
    dominion.Card.Type type22 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card23 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type22);
    java.util.List<dominion.Card> list_card24 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card8, type22);
    gameState5.cards = list_card24;
    dominion.Player player27 = new dominion.Player(gameState5, "The board game is empty you need to intialize the game!!!!");
    player27.printStateGame();
    dominion.Card card29 = null;
    player27.trash(card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str6.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Province + "'", cardName10.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName12.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Province + "'", cardName19.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + dominion.Card.Type.TREASURE + "'", type22.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test122"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i10 = gameState7.getWinners();
    dominion.GameState gameState11 = gameState7.clone();
    dominion.Player player12 = null;
    dominion.Card card13 = null;
    // The following exception was thrown during execution in test generation
    try {
    gameState7.pollPile(player12, card13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test123"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState5.getWinners();
    dominion.GameState gameState8 = gameState5.clone();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    gameState16.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i18 = gameState16.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState16.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState16.gameBoard;
    java.lang.String str21 = gameState16.toString();
    java.lang.String str22 = gameState16.toString();
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Council_Room;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.Card.Type type28 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card24, type28);
    dominion.GameState gameState30 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card24);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i31 = gameState30.embargoTokens;
    gameState16.embargoTokens = hashmap_card_i31;
    gameState5.embargoTokens = hashmap_card_i31;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str21.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str22.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName26.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + dominion.Card.Type.TREASURE + "'", type28.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i31);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test124"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    dominion.GameState gameState11 = new dominion.GameState(list_card10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i12 = gameState11.gameBoard;
    dominion.GameState gameState13 = null;
    dominion.Player player15 = new dominion.Player(gameState13, "");
    player15.playTreasureCard();
    dominion.Card card17 = null;
    player15.trash(card17);
    gameState11.addPlayer(player15);
    dominion.Card[] card_array20 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card21 = new java.util.ArrayList<dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card21, card_array20);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Council_Room;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName23);
    dominion.Card.Type type25 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card26 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card21, type25);
    dominion.GameState gameState27 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    gameState27.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i29 = gameState27.getWinners();
    java.util.List<dominion.Card> list_card30 = gameState27.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i31 = gameState27.gameBoard;
    gameState11.embargoTokens = hashmap_card_i31;
    java.util.List<dominion.Card> list_card33 = gameState11.pileRetrieve();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = gameState11.embargoTokens;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName23.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    org.junit.Assert.assertTrue("'" + type25 + "' != '" + dominion.Card.Type.TREASURE + "'", type25.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i34);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test125"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    player2.playTreasureCard();
    java.lang.String str4 = player2.toString();
    player2.playTreasureCard();
    player2.playTreasureCard();
    player2.playTreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str4.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test126"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.lang.String str6 = gameState5.toString();
    java.util.List<dominion.Card> list_card7 = gameState5.cards;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState5.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str6.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test127"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    dominion.Card.CardName cardName7 = dominion.Card.CardName.Cutpurse;
    dominion.Card card8 = dominion.Card.getCard(list_card6, cardName7);
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Council_Room;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName16);
    dominion.Card card18 = dominion.Card.getCard(list_card6, cardName16);
    java.util.List<dominion.Card> list_card20 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card6, (java.lang.Integer)17);
    java.util.List<dominion.Card> list_card22 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card6, (java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName7.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName16.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test128"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.lang.String str6 = gameState5.toString();
    gameState5.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState5.gameBoard;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState5.play();
    dominion.GameState gameState10 = gameState5.clone();
    dominion.GameState gameState11 = gameState5.clone();
    dominion.GameState gameState12 = gameState11.clone();
    dominion.GameState gameState13 = null;
    dominion.Player player15 = new dominion.Player(gameState13, "");
    player15.playTreasureCard();
    dominion.Card card17 = null;
    player15.trash(card17);
    player15.playKingdomCard();
    dominion.Card card20 = null;
    player15.discard(card20);
    gameState11.addPlayer(player15);
    // The following exception was thrown during execution in test generation
    try {
    player15.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str6.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState12);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test129"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.List<dominion.Player> list_player11 = null;
    gameState7.players = list_player11;
    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i13 = gameState7.play();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test130"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    boolean b10 = gameState7.isGameOver();
    dominion.Player player12 = new dominion.Player(gameState7, "");
    boolean b13 = gameState7.isGameOver();
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Province;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    java.util.List<dominion.Card> list_card20 = gameState19.cards;
    gameState19.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i22 = gameState19.play();
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Province;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.GameState gameState28 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card24);
    java.lang.String str29 = gameState28.toString();
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Council_Room;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    gameState28.cards = arraylist_card31;
    dominion.Card[] card_array36 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card37 = new java.util.ArrayList<dominion.Card>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card37, card_array36);
    dominion.Card.CardName cardName39 = dominion.Card.CardName.Council_Room;
    dominion.Card card40 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card37, cardName39);
    dominion.Card.Type type41 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card42 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card37, type41);
    dominion.GameState gameState43 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card37);
    gameState43.initializeGame();
    java.util.List<dominion.Player> list_player45 = gameState43.players;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i46 = gameState43.getWinners();
    java.util.List<dominion.Player> list_player47 = gameState43.players;
    gameState28.players = list_player47;
    gameState19.players = list_player47;
    gameState7.players = list_player47;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Player player51 = dominion.Randomness.randomMember(list_player47);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Province + "'", cardName17.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Province + "'", cardName26.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str29.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName33.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName39.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);
    org.junit.Assert.assertTrue("'" + type41 + "' != '" + dominion.Card.Type.TREASURE + "'", type41.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player47);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test131"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    gameState5.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState5.play();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Province;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    java.lang.String str15 = gameState14.toString();
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Council_Room;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    gameState14.cards = arraylist_card17;
    dominion.Card[] card_array22 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card23 = new java.util.ArrayList<dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card23, card_array22);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Council_Room;
    dominion.Card card26 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card23, cardName25);
    dominion.Card.Type type27 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card28 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card23, type27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card23);
    gameState29.initializeGame();
    java.util.List<dominion.Player> list_player31 = gameState29.players;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i32 = gameState29.getWinners();
    java.util.List<dominion.Player> list_player33 = gameState29.players;
    gameState14.players = list_player33;
    gameState5.players = list_player33;
    java.util.List<dominion.Player> list_player36 = gameState5.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Province + "'", cardName12.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str15.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName19.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName25.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + type27 + "' != '" + dominion.Card.Type.TREASURE + "'", type27.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test132"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    dominion.GameState gameState11 = new dominion.GameState(list_card10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i12 = gameState11.gameBoard;
    dominion.GameState gameState13 = null;
    dominion.Player player15 = new dominion.Player(gameState13, "");
    player15.playTreasureCard();
    dominion.Card card17 = null;
    player15.trash(card17);
    gameState11.addPlayer(player15);
    java.util.List<dominion.Card> list_card20 = gameState11.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test133"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    dominion.Card card10 = null;
    player9.trash(card10);
    player9.playKingdomCard();
    player9.playTreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test134"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    boolean b10 = gameState7.isGameOver();
    dominion.Player player12 = new dominion.Player(gameState7, "");
    boolean b13 = gameState7.isGameOver();
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Province;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    java.util.List<dominion.Card> list_card20 = gameState19.cards;
    gameState19.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i22 = gameState19.play();
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Province;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.GameState gameState28 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card24);
    java.lang.String str29 = gameState28.toString();
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Council_Room;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    gameState28.cards = arraylist_card31;
    dominion.Card[] card_array36 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card37 = new java.util.ArrayList<dominion.Card>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card37, card_array36);
    dominion.Card.CardName cardName39 = dominion.Card.CardName.Council_Room;
    dominion.Card card40 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card37, cardName39);
    dominion.Card.Type type41 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card42 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card37, type41);
    dominion.GameState gameState43 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card37);
    gameState43.initializeGame();
    java.util.List<dominion.Player> list_player45 = gameState43.players;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i46 = gameState43.getWinners();
    java.util.List<dominion.Player> list_player47 = gameState43.players;
    gameState28.players = list_player47;
    gameState19.players = list_player47;
    gameState7.players = list_player47;
    dominion.GameState gameState51 = gameState7.clone();
    dominion.GameState gameState52 = gameState51.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Province + "'", cardName17.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Province + "'", cardName26.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str29.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName33.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName39.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);
    org.junit.Assert.assertTrue("'" + type41 + "' != '" + dominion.Card.Type.TREASURE + "'", type41.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState52);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test135"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.lang.String str6 = gameState5.toString();
    gameState5.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState5.gameBoard;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState5.play();
    dominion.GameState gameState10 = gameState5.clone();
    dominion.GameState gameState11 = gameState5.clone();
    dominion.GameState gameState12 = gameState11.clone();
    dominion.Card[] card_array13 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card14 = new java.util.ArrayList<dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card14, card_array13);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Province;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card14, cardName16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card14);
    java.util.List<dominion.Card> list_card19 = gameState18.cards;
    gameState18.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState18.play();
    dominion.Card[] card_array22 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card23 = new java.util.ArrayList<dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card23, card_array22);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Province;
    dominion.Card card26 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card23, cardName25);
    dominion.GameState gameState27 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card23);
    java.lang.String str28 = gameState27.toString();
    dominion.Card[] card_array29 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card30 = new java.util.ArrayList<dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card30, card_array29);
    dominion.Card.CardName cardName32 = dominion.Card.CardName.Council_Room;
    dominion.Card card33 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card30, cardName32);
    gameState27.cards = arraylist_card30;
    dominion.Card[] card_array35 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card36 = new java.util.ArrayList<dominion.Card>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card36, card_array35);
    dominion.Card.CardName cardName38 = dominion.Card.CardName.Council_Room;
    dominion.Card card39 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card36, cardName38);
    dominion.Card.Type type40 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card41 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card36, type40);
    dominion.GameState gameState42 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card36);
    gameState42.initializeGame();
    java.util.List<dominion.Player> list_player44 = gameState42.players;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i45 = gameState42.getWinners();
    java.util.List<dominion.Player> list_player46 = gameState42.players;
    gameState27.players = list_player46;
    gameState18.players = list_player46;
    gameState12.players = list_player46;
    java.util.List<dominion.Card> list_card50 = gameState12.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str6.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Province + "'", cardName16.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Province + "'", cardName25.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str28.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName32.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName38.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card39);
    org.junit.Assert.assertTrue("'" + type40 + "' != '" + dominion.Card.Type.TREASURE + "'", type40.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test136"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    boolean b9 = gameState7.isGameOver();
    boolean b10 = gameState7.isGameOver();
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    gameState7.cards = arraylist_card12;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i15 = gameState7.embargoTokens;
    dominion.Player player17 = new dominion.Player(gameState7, "hi!");
    dominion.Card[] card_array18 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card19 = new java.util.ArrayList<dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card19, card_array18);
    dominion.Card.CardName cardName21 = dominion.Card.CardName.Council_Room;
    dominion.Card card22 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card19, cardName21);
    dominion.Card.Type type23 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card24 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card19, type23);
    dominion.GameState gameState25 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card19);
    dominion.Player player27 = new dominion.Player(gameState25, "hi!");
    boolean b28 = gameState25.isGameOver();
    dominion.Player player30 = new dominion.Player(gameState25, "");
    player30.playTreasureCard();
    dominion.Card card32 = null;
    // The following exception was thrown during execution in test generation
    try {
    gameState7.pollPile(player30, card32);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName21.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    org.junit.Assert.assertTrue("'" + type23 + "' != '" + dominion.Card.Type.TREASURE + "'", type23.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test137"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    boolean b9 = gameState7.isGameOver();
    boolean b10 = gameState7.isGameOver();
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    gameState7.cards = arraylist_card12;
    dominion.Card[] card_array15 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card16 = new java.util.ArrayList<dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card16, card_array15);
    dominion.Card.CardName cardName18 = dominion.Card.CardName.Council_Room;
    dominion.Card card19 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card16, cardName18);
    dominion.Card.Type type20 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card21 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card16, type20);
    dominion.GameState gameState22 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card16);
    gameState22.initializeGame();
    dominion.Card[] card_array24 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card25 = new java.util.ArrayList<dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card25, card_array24);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Council_Room;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName27);
    dominion.Card.Type type29 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card30 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card25, type29);
    dominion.GameState gameState31 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card25);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i32 = gameState31.embargoTokens;
    gameState22.embargoTokens = hashmap_card_i32;
    dominion.GameState gameState34 = gameState22.clone();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i35 = gameState22.embargoTokens;
    gameState7.gameBoard = hashmap_card_i35;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName18.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    org.junit.Assert.assertTrue("'" + type20 + "' != '" + dominion.Card.Type.TREASURE + "'", type20.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName27.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + type29 + "' != '" + dominion.Card.Type.TREASURE + "'", type29.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i35);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test138"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.CardName cardName5 = dominion.Card.CardName.Salvager;
    dominion.Card card6 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + dominion.Card.CardName.Salvager + "'", cardName5.equals(dominion.Card.CardName.Salvager));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test139"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    boolean b11 = gameState7.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState7.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i13 = gameState7.play();
    dominion.GameState gameState14 = gameState7.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState14);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test140"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card9 = gameState7.cards;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i10 = gameState7.getWinners();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i11 = gameState7.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i11);

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test141"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    dominion.GameState gameState11 = gameState7.clone();
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Council_Room;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.Card.Type type17 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card18 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card13, type17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    gameState19.initializeGame();
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Council_Room;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.Card.Type type26 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card27 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card22, type26);
    dominion.GameState gameState28 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    gameState28.initializeGame();
    java.util.List<dominion.Player> list_player30 = gameState28.players;
    gameState19.players = list_player30;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i32 = gameState19.embargoTokens;
    gameState7.embargoTokens = hashmap_card_i32;
    dominion.Card[] card_array34 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card35 = new java.util.ArrayList<dominion.Card>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card35, card_array34);
    dominion.Card.CardName cardName37 = dominion.Card.CardName.Council_Room;
    dominion.Card card38 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card35, cardName37);
    java.util.List<dominion.Card> list_card40 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card35, (java.lang.Integer)1);
    gameState7.cards = list_card40;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName15.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + dominion.Card.Type.TREASURE + "'", type17.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName24.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + dominion.Card.Type.TREASURE + "'", type26.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName37.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test142"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.lang.String str6 = gameState5.toString();
    dominion.Card[] card_array7 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card8 = new java.util.ArrayList<dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card8, card_array7);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Province;
    dominion.Card card11 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName10);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Cutpurse;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName12);
    java.util.List<dominion.Card> list_card15 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card8, (java.lang.Integer)23);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Province;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    dominion.GameState gameState21 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card17);
    dominion.Card.Type type22 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card23 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type22);
    java.util.List<dominion.Card> list_card24 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card8, type22);
    gameState5.cards = list_card24;
    dominion.Player player27 = new dominion.Player(gameState5, "The board game is empty you need to intialize the game!!!!");
    dominion.Card[] card_array28 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card29 = new java.util.ArrayList<dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card29, card_array28);
    dominion.Card.CardName cardName31 = dominion.Card.CardName.Province;
    dominion.Card card32 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card29, cardName31);
    dominion.GameState gameState33 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card29);
    boolean b34 = gameState33.isGameOver();
    dominion.GameState gameState35 = null;
    dominion.Player player37 = new dominion.Player(gameState35, "");
    player37.playTreasureCard();
    gameState33.addPlayer(player37);
    dominion.Player player41 = new dominion.Player(gameState33, " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n");
    player41.printStateGame();
    dominion.Card card43 = null;
    // The following exception was thrown during execution in test generation
    try {
    gameState5.pollPile(player41, card43);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str6.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Province + "'", cardName10.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName12.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Province + "'", cardName19.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + dominion.Card.Type.TREASURE + "'", type22.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + dominion.Card.CardName.Province + "'", cardName31.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test143"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card9 = gameState7.cards;
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Council_Room;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    dominion.Card.Type type15 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card16 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card11, type15);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card11);
    gameState17.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i19 = gameState17.getWinners();
    java.util.List<dominion.Card> list_card20 = gameState17.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i21 = gameState17.gameBoard;
    dominion.GameState gameState22 = null;
    dominion.Player player24 = new dominion.Player(gameState22, "");
    dominion.Card card25 = null;
    player24.trash(card25);
    dominion.Card card27 = null;
    player24.discard(card27);
    gameState17.addPlayer(player24);
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Council_Room;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    dominion.Card.Type type35 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card36 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card31, type35);
    dominion.GameState gameState37 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card31);
    gameState37.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i39 = gameState37.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i40 = gameState37.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i41 = gameState37.gameBoard;
    java.util.List<dominion.Card> list_card42 = gameState37.pileRetrieve();
    java.lang.String str43 = gameState37.toString();
    dominion.GameState gameState44 = null;
    dominion.Player player46 = new dominion.Player(gameState44, "");
    dominion.Card card47 = null;
    player46.trash(card47);
    dominion.Card card49 = null;
    player46.discard(card49);
    gameState37.addPlayer(player46);
    player46.playKingdomCard();
    gameState17.addPlayer(player46);
    dominion.Card card54 = null;
    // The following exception was thrown during execution in test generation
    try {
    gameState7.pollPile(player46, card54);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName13.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + dominion.Card.Type.TREASURE + "'", type15.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName33.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    org.junit.Assert.assertTrue("'" + type35 + "' != '" + dominion.Card.Type.TREASURE + "'", type35.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str43.equals("The board game is empty you need to intialize the game!!!!"));

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test144"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i17 = gameState16.embargoTokens;
    gameState7.embargoTokens = hashmap_card_i17;
    dominion.GameState gameState19 = gameState7.clone();
    java.lang.String str20 = gameState19.toString();
    java.util.List<dominion.Card> list_card21 = gameState19.pileRetrieve();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str20.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test145"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    dominion.Card.Type type7 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card8 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card6, type7);
    java.util.List<dominion.Card> list_card10 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card8, (java.lang.Integer)10);
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card11 = dominion.Randomness.randomMember(list_card10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + dominion.Card.Type.VICTORY + "'", type7.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test146"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i10 = gameState7.getWinners();
    dominion.GameState gameState11 = gameState7.clone();
    boolean b12 = gameState7.isGameOver();
    dominion.Card[] card_array13 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card14 = new java.util.ArrayList<dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card14, card_array13);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Province;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card14, cardName16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card14);
    java.util.List<dominion.Card> list_card19 = gameState18.cards;
    dominion.Card.CardName cardName20 = dominion.Card.CardName.Cutpurse;
    dominion.Card card21 = dominion.Card.getCard(list_card19, cardName20);
    gameState7.cards = list_card19;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Province + "'", cardName16.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName20.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test147"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.lang.String str6 = gameState5.toString();
    dominion.Card[] card_array7 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card8 = new java.util.ArrayList<dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card8, card_array7);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Province;
    dominion.Card card11 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName10);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Cutpurse;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName12);
    java.util.List<dominion.Card> list_card15 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card8, (java.lang.Integer)23);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Province;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    dominion.GameState gameState21 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card17);
    dominion.Card.Type type22 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card23 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type22);
    java.util.List<dominion.Card> list_card24 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card8, type22);
    gameState5.cards = list_card24;
    dominion.Player player27 = new dominion.Player(gameState5, "The board game is empty you need to intialize the game!!!!");
    player27.printStateGame();
    java.lang.String str29 = player27.toString();
    player27.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str6.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Province + "'", cardName10.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName12.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Province + "'", cardName19.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + dominion.Card.Type.TREASURE + "'", type22.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + " --- The board game is empty you need to intialize the game!!!! --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str29.equals(" --- The board game is empty you need to intialize the game!!!! --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test148"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card9 = gameState7.cards;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i10 = gameState7.getWinners();
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Council_Room;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.Card.Type type16 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card17 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card12, type16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    dominion.Player player20 = new dominion.Player(gameState18, "hi!");
    dominion.Card card21 = null;
    player20.trash(card21);
    player20.printStateGame();
    player20.buyCard();
    player20.printStateGame();
    player20.printStateGame();
    gameState7.addPlayer(player20);
    dominion.Card[] card_array28 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card29 = new java.util.ArrayList<dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card29, card_array28);
    dominion.Card.CardName cardName31 = dominion.Card.CardName.Council_Room;
    dominion.Card card32 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card29, cardName31);
    dominion.Card.Type type33 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card34 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card29, type33);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card29);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i36 = gameState35.embargoTokens;
    java.util.List<dominion.Player> list_player37 = gameState35.players;
    dominion.GameState gameState38 = null;
    dominion.Player player40 = new dominion.Player(gameState38, "");
    dominion.Card card41 = null;
    player40.trash(card41);
    java.lang.String str43 = player40.toString();
    gameState35.addPlayer(player40);
    player40.playKingdomCard();
    java.lang.String str46 = player40.toString();
    dominion.Card card47 = null;
    // The following exception was thrown during execution in test generation
    try {
    gameState7.pollPile(player40, card47);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName14.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + type16 + "' != '" + dominion.Card.Type.TREASURE + "'", type16.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName31.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    org.junit.Assert.assertTrue("'" + type33 + "' != '" + dominion.Card.Type.TREASURE + "'", type33.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str43.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str46.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test149"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    dominion.Card card10 = null;
    player9.trash(card10);
    player9.playKingdomCard();
    player9.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test150"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    player2.playTreasureCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    java.lang.String str6 = player2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str4.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str6.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test151"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.lang.String str6 = gameState5.toString();
    gameState5.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState5.gameBoard;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState5.play();
    dominion.GameState gameState10 = gameState5.clone();
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Province;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    java.lang.String str17 = gameState16.toString();
    dominion.Card[] card_array18 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card19 = new java.util.ArrayList<dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card19, card_array18);
    dominion.Card.CardName cardName21 = dominion.Card.CardName.Province;
    dominion.Card card22 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card19, cardName21);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Cutpurse;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card19, cardName23);
    java.util.List<dominion.Card> list_card26 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card19, (java.lang.Integer)23);
    dominion.Card[] card_array27 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card28 = new java.util.ArrayList<dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card28, card_array27);
    dominion.Card.CardName cardName30 = dominion.Card.CardName.Province;
    dominion.Card card31 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card28, cardName30);
    dominion.GameState gameState32 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card28);
    dominion.Card.Type type33 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card34 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card28, type33);
    java.util.List<dominion.Card> list_card35 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card19, type33);
    gameState16.cards = list_card35;
    dominion.Player player38 = new dominion.Player(gameState16, "The board game is empty you need to intialize the game!!!!");
    dominion.Card card39 = null;
    player38.trash(card39);
    player38.buyCard();
    player38.buyCard();
    gameState10.addPlayer(player38);
    dominion.GameState gameState44 = null;
    dominion.Player player46 = new dominion.Player(gameState44, "");
    player46.playTreasureCard();
    dominion.Card card48 = null;
    player46.trash(card48);
    player46.playKingdomCard();
    gameState10.addPlayer(player46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str6.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Province + "'", cardName14.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str17.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + dominion.Card.CardName.Province + "'", cardName21.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName23.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + dominion.Card.CardName.Province + "'", cardName30.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    org.junit.Assert.assertTrue("'" + type33 + "' != '" + dominion.Card.Type.TREASURE + "'", type33.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test152"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.lang.String str6 = gameState5.toString();
    dominion.Card[] card_array7 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card8 = new java.util.ArrayList<dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card8, card_array7);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Province;
    dominion.Card card11 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName10);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Cutpurse;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName12);
    java.util.List<dominion.Card> list_card15 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card8, (java.lang.Integer)23);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Province;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    dominion.GameState gameState21 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card17);
    dominion.Card.Type type22 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card23 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type22);
    java.util.List<dominion.Card> list_card24 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card8, type22);
    gameState5.cards = list_card24;
    java.util.List<dominion.Card> list_card27 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card24, (java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str6.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Province + "'", cardName10.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName12.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Province + "'", cardName19.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + dominion.Card.Type.TREASURE + "'", type22.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test153"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    dominion.GameState gameState7 = null;
    dominion.Player player9 = new dominion.Player(gameState7, "");
    dominion.Card card10 = null;
    player9.trash(card10);
    player9.buyCard();
    dominion.Card[] card_array13 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card14 = new java.util.ArrayList<dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card14, card_array13);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Province;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card14, cardName16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card14);
    boolean b19 = gameState18.isGameOver();
    dominion.GameState gameState20 = null;
    dominion.Player player22 = new dominion.Player(gameState20, "");
    player22.playTreasureCard();
    gameState18.addPlayer(player22);
    dominion.GameState gameState25 = null;
    dominion.Player player27 = new dominion.Player(gameState25, "");
    dominion.Card[] card_array28 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card29 = new java.util.ArrayList<dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card29, card_array28);
    dominion.Card.CardName cardName31 = dominion.Card.CardName.Council_Room;
    dominion.Card card32 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card29, cardName31);
    dominion.Card.Type type33 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card34 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card29, type33);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card29);
    dominion.Player player37 = new dominion.Player(gameState35, "hi!");
    player37.playKingdomCard();
    dominion.GameState gameState39 = null;
    dominion.Player player41 = new dominion.Player(gameState39, "");
    dominion.Card card42 = null;
    player41.trash(card42);
    player41.buyCard();
    dominion.Card[] card_array45 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card46 = new java.util.ArrayList<dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card46, card_array45);
    dominion.Card.CardName cardName48 = dominion.Card.CardName.Council_Room;
    dominion.Card card49 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card46, cardName48);
    dominion.Card.Type type50 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card51 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card46, type50);
    dominion.GameState gameState52 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card46);
    dominion.Player player54 = new dominion.Player(gameState52, "hi!");
    dominion.Card card55 = null;
    player54.trash(card55);
    player54.printStateGame();
    dominion.GameState gameState58 = null;
    dominion.Player player60 = new dominion.Player(gameState58, "");
    dominion.Card card61 = null;
    player60.trash(card61);
    dominion.Card[] card_array63 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card64 = new java.util.ArrayList<dominion.Card>();
    boolean b65 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card64, card_array63);
    dominion.Card.CardName cardName66 = dominion.Card.CardName.Province;
    dominion.Card card67 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card64, cardName66);
    dominion.GameState gameState68 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card64);
    boolean b69 = gameState68.isGameOver();
    dominion.GameState gameState70 = null;
    dominion.Player player72 = new dominion.Player(gameState70, "");
    player72.playTreasureCard();
    gameState68.addPlayer(player72);
    dominion.Card[] card_array75 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card76 = new java.util.ArrayList<dominion.Card>();
    boolean b77 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card76, card_array75);
    dominion.Card.CardName cardName78 = dominion.Card.CardName.Council_Room;
    dominion.Card card79 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card76, cardName78);
    dominion.Card.Type type80 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card81 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card76, type80);
    dominion.GameState gameState82 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card76);
    dominion.Player player84 = new dominion.Player(gameState82, "hi!");
    dominion.Card card85 = null;
    player84.trash(card85);
    player84.printStateGame();
    dominion.GameState gameState88 = null;
    dominion.Player player90 = new dominion.Player(gameState88, "");
    player90.playTreasureCard();
    dominion.Player[] player_array92 = new dominion.Player[] { player9, player22, player27, player37, player41, player54, player60, player72, player84, player90 };
    java.util.ArrayList<dominion.Player> arraylist_player93 = new java.util.ArrayList<dominion.Player>();
    boolean b94 = java.util.Collections.addAll((java.util.Collection<dominion.Player>)arraylist_player93, player_array92);
    gameState5.players = arraylist_player93;
    dominion.Player player96 = dominion.Randomness.randomMember((java.util.List<dominion.Player>)arraylist_player93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Province + "'", cardName16.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName31.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    org.junit.Assert.assertTrue("'" + type33 + "' != '" + dominion.Card.Type.TREASURE + "'", type33.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName48.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card49);
    org.junit.Assert.assertTrue("'" + type50 + "' != '" + dominion.Card.Type.TREASURE + "'", type50.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    org.junit.Assert.assertTrue("'" + cardName66 + "' != '" + dominion.Card.CardName.Province + "'", cardName66.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    org.junit.Assert.assertTrue("'" + cardName78 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName78.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card79);
    org.junit.Assert.assertTrue("'" + type80 + "' != '" + dominion.Card.Type.TREASURE + "'", type80.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player96);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test154"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState7.getWinners();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i9 = gameState7.gameBoard;
    dominion.GameState gameState10 = gameState7.clone();
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Council_Room;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.Card.Type type16 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card17 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card12, type16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    gameState18.initializeGame();
    java.util.List<dominion.Player> list_player20 = gameState18.players;
    dominion.GameState gameState21 = gameState18.clone();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i22 = gameState18.embargoTokens;
    gameState10.embargoTokens = hashmap_card_i22;
    dominion.Card[] card_array24 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card25 = new java.util.ArrayList<dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card25, card_array24);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Province;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card25);
    java.util.List<dominion.Card> list_card30 = gameState29.cards;
    dominion.Card.Type type31 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card32 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card30, type31);
    gameState10.cards = list_card32;
    dominion.Card.CardName cardName34 = dominion.Card.CardName.Baron;
    dominion.Card card35 = dominion.Card.getCard(list_card32, cardName34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName14.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + type16 + "' != '" + dominion.Card.Type.TREASURE + "'", type16.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Province + "'", cardName27.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    org.junit.Assert.assertTrue("'" + type31 + "' != '" + dominion.Card.Type.VICTORY + "'", type31.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + dominion.Card.CardName.Baron + "'", cardName34.equals(dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card35);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test155"); }

    java.util.Random random0 = dominion.Randomness.random;
    dominion.Randomness.random = random0;
    dominion.Randomness.random = random0;
    dominion.Randomness.random = random0;
    dominion.Randomness.random = random0;
    dominion.Randomness.random = random0;
    dominion.Randomness.random = random0;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(random0);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test156"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    dominion.Player player13 = new dominion.Player(gameState7, "");
    player13.playTreasureCard();
    player13.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test157"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    gameState5.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState5.play();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Province;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    java.lang.String str15 = gameState14.toString();
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Council_Room;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    gameState14.cards = arraylist_card17;
    dominion.Card[] card_array22 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card23 = new java.util.ArrayList<dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card23, card_array22);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Council_Room;
    dominion.Card card26 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card23, cardName25);
    dominion.Card.Type type27 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card28 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card23, type27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card23);
    gameState29.initializeGame();
    java.util.List<dominion.Player> list_player31 = gameState29.players;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i32 = gameState29.getWinners();
    java.util.List<dominion.Player> list_player33 = gameState29.players;
    gameState14.players = list_player33;
    gameState5.players = list_player33;
    dominion.Card[] card_array36 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card37 = new java.util.ArrayList<dominion.Card>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card37, card_array36);
    dominion.Card.CardName cardName39 = dominion.Card.CardName.Council_Room;
    dominion.Card card40 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card37, cardName39);
    dominion.Card.Type type41 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card42 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card37, type41);
    dominion.GameState gameState43 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card37);
    gameState43.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i45 = gameState43.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i46 = gameState43.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i47 = gameState43.gameBoard;
    java.lang.String str48 = gameState43.toString();
    boolean b49 = gameState43.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i50 = gameState43.play();
    java.util.List<dominion.Player> list_player51 = gameState43.players;
    gameState5.players = list_player51;
    dominion.Card[] card_array53 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card54 = new java.util.ArrayList<dominion.Card>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card54, card_array53);
    dominion.Card.CardName cardName56 = dominion.Card.CardName.Council_Room;
    dominion.Card card57 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card54, cardName56);
    dominion.Card.Type type58 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card59 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card54, type58);
    dominion.GameState gameState60 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card54);
    gameState60.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i62 = gameState60.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i63 = gameState60.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i64 = gameState60.gameBoard;
    dominion.Card[] card_array65 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card66 = new java.util.ArrayList<dominion.Card>();
    boolean b67 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card66, card_array65);
    dominion.Card.CardName cardName68 = dominion.Card.CardName.Council_Room;
    dominion.Card card69 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card66, cardName68);
    dominion.Card.Type type70 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card71 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card66, type70);
    dominion.GameState gameState72 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card66);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i73 = gameState72.embargoTokens;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i74 = gameState72.embargoTokens;
    gameState60.gameBoard = hashmap_card_i74;
    gameState5.embargoTokens = hashmap_card_i74;
    java.util.List<dominion.Player> list_player77 = gameState5.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Province + "'", cardName12.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str15.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName19.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName25.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + type27 + "' != '" + dominion.Card.Type.TREASURE + "'", type27.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName39.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);
    org.junit.Assert.assertTrue("'" + type41 + "' != '" + dominion.Card.Type.TREASURE + "'", type41.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str48.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName56.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card57);
    org.junit.Assert.assertTrue("'" + type58 + "' != '" + dominion.Card.Type.TREASURE + "'", type58.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    org.junit.Assert.assertTrue("'" + cardName68 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName68.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card69);
    org.junit.Assert.assertTrue("'" + type70 + "' != '" + dominion.Card.Type.TREASURE + "'", type70.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player77);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test158"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    java.util.List<dominion.Card> list_card12 = gameState7.pileRetrieve();
    java.util.List<dominion.Card> list_card14 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card12, (java.lang.Integer)100);
    dominion.Card[] card_array15 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card16 = new java.util.ArrayList<dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card16, card_array15);
    dominion.Card.CardName cardName18 = dominion.Card.CardName.Province;
    dominion.Card card19 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card16, cardName18);
    dominion.GameState gameState20 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card16);
    java.util.List<dominion.Card> list_card21 = gameState20.cards;
    dominion.Card.Type type22 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card23 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card21, type22);
    dominion.Card[] card_array24 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card25 = new java.util.ArrayList<dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card25, card_array24);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Province;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card25);
    java.util.List<dominion.Card> list_card30 = gameState29.cards;
    dominion.Card.Type type31 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card32 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card30, type31);
    java.util.List<dominion.Card> list_card33 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card23, type31);
    java.util.List<dominion.Card> list_card34 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card12, type31);
    java.util.List<dominion.Card> list_card36 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card34, (java.lang.Integer)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + dominion.Card.CardName.Province + "'", cardName18.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + dominion.Card.Type.VICTORY + "'", type22.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Province + "'", cardName27.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    org.junit.Assert.assertTrue("'" + type31 + "' != '" + dominion.Card.Type.VICTORY + "'", type31.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test159"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    gameState16.initializeGame();
    java.util.List<dominion.Player> list_player18 = gameState16.players;
    gameState7.players = list_player18;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState7.embargoTokens;
    java.util.List<dominion.Card> list_card21 = gameState7.cards;
    dominion.GameState gameState22 = gameState7.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState22);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test160"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    java.util.List<dominion.Card> list_card12 = gameState7.pileRetrieve();
    java.util.List<dominion.Card> list_card14 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card12, (java.lang.Integer)100);
    java.util.List<dominion.Card> list_card16 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card14, (java.lang.Integer)1);
    dominion.GameState gameState17 = new dominion.GameState(list_card14);
    dominion.Card[] card_array18 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card19 = new java.util.ArrayList<dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card19, card_array18);
    dominion.Card.CardName cardName21 = dominion.Card.CardName.Council_Room;
    dominion.Card card22 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card19, cardName21);
    dominion.Card.Type type23 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card24 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card19, type23);
    dominion.GameState gameState25 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card19);
    gameState25.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i27 = gameState25.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i28 = gameState25.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i29 = gameState25.gameBoard;
    java.util.List<dominion.Card> list_card30 = gameState25.pileRetrieve();
    java.util.List<dominion.Card> list_card32 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card30, (java.lang.Integer)100);
    java.util.List<dominion.Card> list_card34 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card32, (java.lang.Integer)1);
    dominion.Card[] card_array35 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card36 = new java.util.ArrayList<dominion.Card>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card36, card_array35);
    dominion.Card.CardName cardName38 = dominion.Card.CardName.Province;
    dominion.Card card39 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card36, cardName38);
    dominion.GameState gameState40 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card36);
    java.util.List<dominion.Card> list_card41 = gameState40.cards;
    dominion.Card.Type type42 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card43 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card41, type42);
    dominion.Card[] card_array44 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card45 = new java.util.ArrayList<dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card45, card_array44);
    dominion.Card.CardName cardName47 = dominion.Card.CardName.Province;
    dominion.Card card48 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card45, cardName47);
    dominion.GameState gameState49 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card45);
    java.util.List<dominion.Card> list_card50 = gameState49.cards;
    dominion.Card.Type type51 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card52 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card50, type51);
    java.util.List<dominion.Card> list_card53 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card43, type51);
    java.util.List<dominion.Card> list_card54 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card32, type51);
    gameState17.cards = list_card32;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName21.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    org.junit.Assert.assertTrue("'" + type23 + "' != '" + dominion.Card.Type.TREASURE + "'", type23.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + dominion.Card.CardName.Province + "'", cardName38.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    org.junit.Assert.assertTrue("'" + type42 + "' != '" + dominion.Card.Type.VICTORY + "'", type42.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + dominion.Card.CardName.Province + "'", cardName47.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    org.junit.Assert.assertTrue("'" + type51 + "' != '" + dominion.Card.Type.VICTORY + "'", type51.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card54);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test161"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState7.getWinners();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i9 = gameState7.gameBoard;
    dominion.GameState gameState10 = gameState7.clone();
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Council_Room;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.Card.Type type16 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card17 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card12, type16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    gameState18.initializeGame();
    java.util.List<dominion.Player> list_player20 = gameState18.players;
    dominion.GameState gameState21 = gameState18.clone();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i22 = gameState18.embargoTokens;
    gameState10.embargoTokens = hashmap_card_i22;
    dominion.Card[] card_array24 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card25 = new java.util.ArrayList<dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card25, card_array24);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Council_Room;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName27);
    dominion.Card.Type type29 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card30 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card25, type29);
    dominion.GameState gameState31 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card25);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i32 = gameState31.embargoTokens;
    java.util.List<dominion.Player> list_player33 = gameState31.players;
    dominion.Card[] card_array34 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card35 = new java.util.ArrayList<dominion.Card>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card35, card_array34);
    dominion.Card.CardName cardName37 = dominion.Card.CardName.Council_Room;
    dominion.Card card38 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card35, cardName37);
    dominion.Card.Type type39 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card40 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card35, type39);
    dominion.GameState gameState41 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card35);
    gameState41.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i43 = gameState41.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i44 = gameState41.gameBoard;
    java.util.List<dominion.Player> list_player45 = null;
    gameState41.players = list_player45;
    dominion.Card[] card_array47 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card48 = new java.util.ArrayList<dominion.Card>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card48, card_array47);
    dominion.Card.CardName cardName50 = dominion.Card.CardName.Council_Room;
    dominion.Card card51 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card48, cardName50);
    dominion.Card.Type type52 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card53 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card48, type52);
    dominion.GameState gameState54 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card48);
    gameState54.initializeGame();
    dominion.Card[] card_array56 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card57 = new java.util.ArrayList<dominion.Card>();
    boolean b58 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card57, card_array56);
    dominion.Card.CardName cardName59 = dominion.Card.CardName.Council_Room;
    dominion.Card card60 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card57, cardName59);
    dominion.Card.Type type61 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card62 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card57, type61);
    dominion.GameState gameState63 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card57);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i64 = gameState63.embargoTokens;
    gameState54.embargoTokens = hashmap_card_i64;
    gameState41.gameBoard = hashmap_card_i64;
    gameState31.embargoTokens = hashmap_card_i64;
    gameState10.gameBoard = hashmap_card_i64;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName14.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + type16 + "' != '" + dominion.Card.Type.TREASURE + "'", type16.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName27.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + type29 + "' != '" + dominion.Card.Type.TREASURE + "'", type29.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName37.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    org.junit.Assert.assertTrue("'" + type39 + "' != '" + dominion.Card.Type.TREASURE + "'", type39.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    org.junit.Assert.assertTrue("'" + cardName50 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName50.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card51);
    org.junit.Assert.assertTrue("'" + type52 + "' != '" + dominion.Card.Type.TREASURE + "'", type52.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName59.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card60);
    org.junit.Assert.assertTrue("'" + type61 + "' != '" + dominion.Card.Type.TREASURE + "'", type61.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i64);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test162"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    java.util.List<dominion.Card> list_card12 = gameState7.pileRetrieve();
    java.util.List<dominion.Card> list_card14 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card12, (java.lang.Integer)100);
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card15 = dominion.Randomness.randomMember(list_card12);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test163"); }

    // The following exception was thrown during execution in test generation
    try {
    int i1 = dominion.Randomness.nextRandomInt((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test164"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    dominion.GameState gameState10 = null;
    dominion.Player player12 = new dominion.Player(gameState10, "");
    dominion.Card card13 = null;
    player12.trash(card13);
    java.lang.String str15 = player12.toString();
    gameState7.addPlayer(player12);
    player12.playKingdomCard();
    player12.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player12.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str15.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test165"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    gameState5.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState5.play();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Province;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    java.lang.String str15 = gameState14.toString();
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Council_Room;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    gameState14.cards = arraylist_card17;
    dominion.Card[] card_array22 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card23 = new java.util.ArrayList<dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card23, card_array22);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Council_Room;
    dominion.Card card26 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card23, cardName25);
    dominion.Card.Type type27 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card28 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card23, type27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card23);
    gameState29.initializeGame();
    java.util.List<dominion.Player> list_player31 = gameState29.players;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i32 = gameState29.getWinners();
    java.util.List<dominion.Player> list_player33 = gameState29.players;
    gameState14.players = list_player33;
    gameState5.players = list_player33;
    dominion.Card[] card_array36 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card37 = new java.util.ArrayList<dominion.Card>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card37, card_array36);
    dominion.Card.CardName cardName39 = dominion.Card.CardName.Council_Room;
    dominion.Card card40 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card37, cardName39);
    dominion.Card.Type type41 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card42 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card37, type41);
    dominion.GameState gameState43 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card37);
    gameState43.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i45 = gameState43.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i46 = gameState43.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i47 = gameState43.gameBoard;
    java.lang.String str48 = gameState43.toString();
    boolean b49 = gameState43.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i50 = gameState43.play();
    java.util.List<dominion.Player> list_player51 = gameState43.players;
    gameState5.players = list_player51;
    dominion.Card[] card_array53 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card54 = new java.util.ArrayList<dominion.Card>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card54, card_array53);
    dominion.Card.CardName cardName56 = dominion.Card.CardName.Council_Room;
    dominion.Card card57 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card54, cardName56);
    dominion.Card.Type type58 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card59 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card54, type58);
    dominion.GameState gameState60 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card54);
    gameState60.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i62 = gameState60.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i63 = gameState60.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i64 = gameState60.gameBoard;
    dominion.Card[] card_array65 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card66 = new java.util.ArrayList<dominion.Card>();
    boolean b67 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card66, card_array65);
    dominion.Card.CardName cardName68 = dominion.Card.CardName.Council_Room;
    dominion.Card card69 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card66, cardName68);
    dominion.Card.Type type70 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card71 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card66, type70);
    dominion.GameState gameState72 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card66);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i73 = gameState72.embargoTokens;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i74 = gameState72.embargoTokens;
    gameState60.gameBoard = hashmap_card_i74;
    gameState5.embargoTokens = hashmap_card_i74;
    dominion.GameState gameState77 = gameState5.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Province + "'", cardName12.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str15.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName19.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName25.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + type27 + "' != '" + dominion.Card.Type.TREASURE + "'", type27.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName39.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);
    org.junit.Assert.assertTrue("'" + type41 + "' != '" + dominion.Card.Type.TREASURE + "'", type41.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str48.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName56.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card57);
    org.junit.Assert.assertTrue("'" + type58 + "' != '" + dominion.Card.Type.TREASURE + "'", type58.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    org.junit.Assert.assertTrue("'" + cardName68 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName68.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card69);
    org.junit.Assert.assertTrue("'" + type70 + "' != '" + dominion.Card.Type.TREASURE + "'", type70.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState77);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test166"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    gameState7.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    gameState7.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test167"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    java.util.List<dominion.Card> list_card12 = gameState7.pileRetrieve();
    java.util.List<dominion.Card> list_card14 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card12, (java.lang.Integer)17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test168"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i17 = gameState16.embargoTokens;
    gameState7.embargoTokens = hashmap_card_i17;
    boolean b19 = gameState7.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState7.play();
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Council_Room;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.Card.Type type26 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card27 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card22, type26);
    dominion.GameState gameState28 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    gameState28.initializeGame();
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Council_Room;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    dominion.Card.Type type35 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card36 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card31, type35);
    dominion.GameState gameState37 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card31);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i38 = gameState37.embargoTokens;
    gameState28.embargoTokens = hashmap_card_i38;
    gameState7.gameBoard = hashmap_card_i38;
    java.util.List<dominion.Card> list_card41 = gameState7.cards;
    dominion.GameState gameState42 = new dominion.GameState(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName24.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + dominion.Card.Type.TREASURE + "'", type26.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName33.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    org.junit.Assert.assertTrue("'" + type35 + "' != '" + dominion.Card.Type.TREASURE + "'", type35.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test169"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, " ---  --- \nHand: []\nDiscard: [null]\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test170"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i17 = gameState16.embargoTokens;
    gameState7.embargoTokens = hashmap_card_i17;
    boolean b19 = gameState7.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState7.play();
    java.util.List<dominion.Player> list_player21 = null;
    gameState7.players = list_player21;
    boolean b23 = gameState7.isGameOver();
    // The following exception was thrown during execution in test generation
    try {
    gameState7.initializeGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test171"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player18 = new dominion.Player(gameState16, "hi!");
    boolean b19 = gameState16.isGameOver();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState16.gameBoard;
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Province;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    java.lang.String str27 = gameState26.toString();
    gameState26.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i29 = gameState26.gameBoard;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i30 = gameState26.play();
    java.util.List<dominion.Player> list_player31 = gameState26.players;
    gameState16.players = list_player31;
    gameState7.players = list_player31;
    dominion.Card[] card_array34 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card35 = new java.util.ArrayList<dominion.Card>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card35, card_array34);
    dominion.Card.CardName cardName37 = dominion.Card.CardName.Council_Room;
    dominion.Card card38 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card35, cardName37);
    dominion.Card.Type type39 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card40 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card35, type39);
    dominion.GameState gameState41 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card35);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i42 = gameState41.embargoTokens;
    java.util.List<dominion.Player> list_player43 = gameState41.players;
    dominion.GameState gameState44 = null;
    dominion.Player player46 = new dominion.Player(gameState44, "");
    dominion.Card card47 = null;
    player46.trash(card47);
    java.lang.String str49 = player46.toString();
    gameState41.addPlayer(player46);
    player46.playKingdomCard();
    player46.buyCard();
    gameState7.addPlayer(player46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Province + "'", cardName24.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str27.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName37.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    org.junit.Assert.assertTrue("'" + type39 + "' != '" + dominion.Card.Type.TREASURE + "'", type39.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str49.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test172"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Card[] card_array6 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card7 = new java.util.ArrayList<dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card7, card_array6);
    dominion.Card.CardName cardName9 = dominion.Card.CardName.Province;
    dominion.Card card10 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card7, cardName9);
    dominion.Card.CardName cardName11 = dominion.Card.CardName.Cutpurse;
    dominion.Card card12 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card7, cardName11);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Silver;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card7, cardName13);
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + dominion.Card.CardName.Province + "'", cardName9.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName11.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Silver + "'", cardName13.equals(dominion.Card.CardName.Silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test173"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    boolean b6 = gameState5.isGameOver();
    dominion.GameState gameState7 = null;
    dominion.Player player9 = new dominion.Player(gameState7, "");
    player9.playTreasureCard();
    gameState5.addPlayer(player9);
    player9.playTreasureCard();
    player9.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test174"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    player2.playTreasureCard();
    java.lang.String str4 = player2.toString();
    player2.playTreasureCard();
    player2.playTreasureCard();
    dominion.Card card7 = null;
    player2.discard(card7);
    player2.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str4.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test175"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    boolean b9 = gameState7.isGameOver();
    boolean b10 = gameState7.isGameOver();
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Council_Room;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.Card.Type type16 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card17 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card12, type16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState18.embargoTokens;
    boolean b20 = gameState18.isGameOver();
    boolean b21 = gameState18.isGameOver();
    gameState18.initializeGame();
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Council_Room;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.Card.Type type28 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card24, type28);
    dominion.GameState gameState30 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card24);
    gameState30.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i32 = gameState30.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i33 = gameState30.gameBoard;
    java.util.List<dominion.Player> list_player34 = null;
    gameState30.players = list_player34;
    dominion.Card[] card_array36 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card37 = new java.util.ArrayList<dominion.Card>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card37, card_array36);
    dominion.Card.CardName cardName39 = dominion.Card.CardName.Council_Room;
    dominion.Card card40 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card37, cardName39);
    dominion.Card.Type type41 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card42 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card37, type41);
    dominion.GameState gameState43 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card37);
    gameState43.initializeGame();
    dominion.Card[] card_array45 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card46 = new java.util.ArrayList<dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card46, card_array45);
    dominion.Card.CardName cardName48 = dominion.Card.CardName.Council_Room;
    dominion.Card card49 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card46, cardName48);
    dominion.Card.Type type50 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card51 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card46, type50);
    dominion.GameState gameState52 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card46);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i53 = gameState52.embargoTokens;
    gameState43.embargoTokens = hashmap_card_i53;
    gameState30.gameBoard = hashmap_card_i53;
    gameState18.gameBoard = hashmap_card_i53;
    gameState7.gameBoard = hashmap_card_i53;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName14.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + type16 + "' != '" + dominion.Card.Type.TREASURE + "'", type16.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName26.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + dominion.Card.Type.TREASURE + "'", type28.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName39.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);
    org.junit.Assert.assertTrue("'" + type41 + "' != '" + dominion.Card.Type.TREASURE + "'", type41.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName48.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card49);
    org.junit.Assert.assertTrue("'" + type50 + "' != '" + dominion.Card.Type.TREASURE + "'", type50.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i53);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test176"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    boolean b10 = gameState7.isGameOver();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    dominion.Player player13 = new dominion.Player(gameState7, " --- hi! --- \nHand: []\nDiscard: [null]\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n");
    java.lang.String str14 = gameState7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str14.equals("The board game is empty you need to intialize the game!!!!"));

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test177"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    dominion.GameState gameState12 = null;
    dominion.Player player14 = new dominion.Player(gameState12, "");
    dominion.Card card15 = null;
    player14.trash(card15);
    dominion.Card card17 = null;
    player14.discard(card17);
    gameState7.addPlayer(player14);
    dominion.Card[] card_array20 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card21 = new java.util.ArrayList<dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card21, card_array20);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Council_Room;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName23);
    dominion.Card.Type type25 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card26 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card21, type25);
    dominion.GameState gameState27 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    gameState27.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i29 = gameState27.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i30 = gameState27.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i31 = gameState27.gameBoard;
    java.util.List<dominion.Card> list_card32 = gameState27.pileRetrieve();
    java.lang.String str33 = gameState27.toString();
    dominion.GameState gameState34 = null;
    dominion.Player player36 = new dominion.Player(gameState34, "");
    dominion.Card card37 = null;
    player36.trash(card37);
    dominion.Card card39 = null;
    player36.discard(card39);
    gameState27.addPlayer(player36);
    player36.playKingdomCard();
    gameState7.addPlayer(player36);
    // The following exception was thrown during execution in test generation
    try {
    gameState7.initializeGame();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName23.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    org.junit.Assert.assertTrue("'" + type25 + "' != '" + dominion.Card.Type.TREASURE + "'", type25.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str33.equals("The board game is empty you need to intialize the game!!!!"));

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test178"); }

    int i1 = dominion.Randomness.nextRandomInt((int)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 23);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test179"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    boolean b10 = gameState7.isGameOver();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    dominion.Player player13 = new dominion.Player(gameState7, " --- hi! --- \nHand: []\nDiscard: [null]\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n");
    player13.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test180"); }

    dominion.Randomness.reset((long)23);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test181"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState5.getWinners();
    dominion.GameState gameState8 = gameState5.clone();
    java.util.List<dominion.Card> list_card9 = gameState8.cards;
    dominion.GameState gameState10 = new dominion.GameState(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test182"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Council_Room;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.Card.Type type17 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card18 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card13, type17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    gameState19.initializeGame();
    java.util.List<dominion.Player> list_player21 = gameState19.players;
    gameState7.players = list_player21;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Player player23 = dominion.Randomness.randomMember(list_player21);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName15.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + dominion.Card.Type.TREASURE + "'", type17.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test183"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.lang.String str6 = gameState5.toString();
    gameState5.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState5.gameBoard;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState5.play();
    dominion.GameState gameState10 = gameState5.clone();
    dominion.GameState gameState11 = gameState5.clone();
    dominion.GameState gameState12 = gameState11.clone();
    dominion.Card[] card_array13 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card14 = new java.util.ArrayList<dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card14, card_array13);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Province;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card14, cardName16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card14);
    java.util.List<dominion.Card> list_card19 = gameState18.cards;
    gameState18.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState18.play();
    dominion.Card[] card_array22 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card23 = new java.util.ArrayList<dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card23, card_array22);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Province;
    dominion.Card card26 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card23, cardName25);
    dominion.GameState gameState27 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card23);
    java.lang.String str28 = gameState27.toString();
    dominion.Card[] card_array29 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card30 = new java.util.ArrayList<dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card30, card_array29);
    dominion.Card.CardName cardName32 = dominion.Card.CardName.Council_Room;
    dominion.Card card33 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card30, cardName32);
    gameState27.cards = arraylist_card30;
    dominion.Card[] card_array35 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card36 = new java.util.ArrayList<dominion.Card>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card36, card_array35);
    dominion.Card.CardName cardName38 = dominion.Card.CardName.Council_Room;
    dominion.Card card39 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card36, cardName38);
    dominion.Card.Type type40 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card41 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card36, type40);
    dominion.GameState gameState42 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card36);
    gameState42.initializeGame();
    java.util.List<dominion.Player> list_player44 = gameState42.players;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i45 = gameState42.getWinners();
    java.util.List<dominion.Player> list_player46 = gameState42.players;
    gameState27.players = list_player46;
    gameState18.players = list_player46;
    gameState12.players = list_player46;
    java.lang.String str50 = gameState12.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str6.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Province + "'", cardName16.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Province + "'", cardName25.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str28.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName32.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName38.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card39);
    org.junit.Assert.assertTrue("'" + type40 + "' != '" + dominion.Card.Type.TREASURE + "'", type40.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str50.equals("The board game is empty you need to intialize the game!!!!"));

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test184"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i17 = gameState16.embargoTokens;
    gameState7.embargoTokens = hashmap_card_i17;
    boolean b19 = gameState7.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState7.play();
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Council_Room;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.Card.Type type26 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card27 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card22, type26);
    dominion.GameState gameState28 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    gameState28.initializeGame();
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Council_Room;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    dominion.Card.Type type35 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card36 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card31, type35);
    dominion.GameState gameState37 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card31);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i38 = gameState37.embargoTokens;
    gameState28.embargoTokens = hashmap_card_i38;
    gameState7.gameBoard = hashmap_card_i38;
    java.util.List<dominion.Card> list_card41 = gameState7.cards;
    java.lang.String str42 = gameState7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName24.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + dominion.Card.Type.TREASURE + "'", type26.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName33.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    org.junit.Assert.assertTrue("'" + type35 + "' != '" + dominion.Card.Type.TREASURE + "'", type35.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str42.equals("The board game is empty you need to intialize the game!!!!"));

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test185"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    dominion.GameState gameState11 = gameState7.clone();
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Province;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    java.util.List<dominion.Card> list_card18 = gameState17.cards;
    dominion.Card.Type type19 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card20 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card18, type19);
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Province;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    java.util.List<dominion.Card> list_card27 = gameState26.cards;
    dominion.Card.Type type28 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card27, type28);
    java.util.List<dominion.Card> list_card30 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card18, type28);
    gameState11.cards = list_card30;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Province + "'", cardName15.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    org.junit.Assert.assertTrue("'" + type19 + "' != '" + dominion.Card.Type.VICTORY + "'", type19.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Province + "'", cardName24.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + dominion.Card.Type.VICTORY + "'", type28.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test186"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.lang.String str6 = gameState5.toString();
    gameState5.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState5.gameBoard;
    java.util.List<dominion.Card> list_card9 = gameState5.cards;
    java.lang.String str10 = gameState5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str6.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str10.equals("The board game is empty you need to intialize the game!!!!"));

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test187"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i17 = gameState16.embargoTokens;
    gameState7.embargoTokens = hashmap_card_i17;
    boolean b19 = gameState7.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState7.play();
    java.util.List<dominion.Player> list_player21 = null;
    gameState7.players = list_player21;
    java.lang.String str23 = gameState7.toString();
    boolean b24 = gameState7.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str23.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test188"); }

    dominion.Randomness.reset((long)8);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test189"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    gameState16.initializeGame();
    java.util.List<dominion.Player> list_player18 = gameState16.players;
    gameState7.players = list_player18;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState7.embargoTokens;
    java.util.List<dominion.Card> list_card21 = gameState7.cards;
    java.util.List<dominion.Card> list_card23 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card21, (java.lang.Integer)8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test190"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card9 = gameState7.cards;
    java.util.List<dominion.Card> list_card11 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card9, (java.lang.Integer)1);
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Province;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    dominion.Card.Type type18 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card19 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card13, type18);
    java.util.List<dominion.Card> list_card20 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card9, type18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Province + "'", cardName15.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    org.junit.Assert.assertTrue("'" + type18 + "' != '" + dominion.Card.Type.TREASURE + "'", type18.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test191"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.CardName cardName5 = dominion.Card.CardName.Cutpurse;
    dominion.Card card6 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName5);
    java.util.List<dominion.Card> list_card8 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card1, (java.lang.Integer)17);
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Province;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Cutpurse;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName14);
    java.util.List<dominion.Card> list_card17 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card10, (java.lang.Integer)23);
    dominion.Card[] card_array18 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card19 = new java.util.ArrayList<dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card19, card_array18);
    dominion.Card.CardName cardName21 = dominion.Card.CardName.Province;
    dominion.Card card22 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card19, cardName21);
    dominion.GameState gameState23 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card19);
    dominion.Card.Type type24 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card25 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card19, type24);
    java.util.List<dominion.Card> list_card26 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type24);
    dominion.Card[] card_array27 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card28 = new java.util.ArrayList<dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card28, card_array27);
    dominion.Card.CardName cardName30 = dominion.Card.CardName.Province;
    dominion.Card card31 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card28, cardName30);
    dominion.Card.CardName cardName32 = dominion.Card.CardName.Cutpurse;
    dominion.Card card33 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card28, cardName32);
    dominion.Card.CardName cardName34 = dominion.Card.CardName.Silver;
    dominion.Card card35 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card28, cardName34);
    dominion.Card card36 = dominion.Card.getCard(list_card26, cardName34);
    dominion.Card.CardName cardName37 = dominion.Card.CardName.Mine;
    dominion.Card card38 = dominion.Card.getCard(list_card26, cardName37);
    dominion.Card card39 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName5.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Province + "'", cardName12.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName14.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + dominion.Card.CardName.Province + "'", cardName21.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + dominion.Card.Type.TREASURE + "'", type24.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + dominion.Card.CardName.Province + "'", cardName30.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName32.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + dominion.Card.CardName.Silver + "'", cardName34.equals(dominion.Card.CardName.Silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + dominion.Card.CardName.Mine + "'", cardName37.equals(dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card39);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test192"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    java.util.List<dominion.Card> list_card12 = gameState7.pileRetrieve();
    java.lang.String str13 = gameState7.toString();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i14 = gameState7.play();
    dominion.Card[] card_array15 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card16 = new java.util.ArrayList<dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card16, card_array15);
    dominion.Card.CardName cardName18 = dominion.Card.CardName.Province;
    dominion.Card card19 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card16, cardName18);
    dominion.GameState gameState20 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card16);
    java.util.List<dominion.Card> list_card21 = gameState20.cards;
    dominion.Card[] card_array22 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card23 = new java.util.ArrayList<dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card23, card_array22);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Council_Room;
    dominion.Card card26 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card23, cardName25);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Mine;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card23, cardName27);
    gameState20.cards = arraylist_card23;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i30 = gameState20.gameBoard;
    gameState7.embargoTokens = hashmap_card_i30;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str13.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + dominion.Card.CardName.Province + "'", cardName18.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName25.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Mine + "'", cardName27.equals(dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i30);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test193"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    player2.playTreasureCard();
    java.lang.String str4 = player2.toString();
    player2.playTreasureCard();
    player2.playTreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str4.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test194"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    dominion.GameState gameState11 = new dominion.GameState(list_card10);
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card12 = dominion.Randomness.randomMember(list_card10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test195"); }

    dominion.Randomness.totalCallsToRandom = 8;

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test196"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    gameState5.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState5.play();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Province;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    java.lang.String str15 = gameState14.toString();
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Council_Room;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    gameState14.cards = arraylist_card17;
    dominion.Card[] card_array22 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card23 = new java.util.ArrayList<dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card23, card_array22);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Council_Room;
    dominion.Card card26 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card23, cardName25);
    dominion.Card.Type type27 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card28 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card23, type27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card23);
    gameState29.initializeGame();
    java.util.List<dominion.Player> list_player31 = gameState29.players;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i32 = gameState29.getWinners();
    java.util.List<dominion.Player> list_player33 = gameState29.players;
    gameState14.players = list_player33;
    gameState5.players = list_player33;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i36 = gameState5.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Province + "'", cardName12.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str15.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName19.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName25.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + type27 + "' != '" + dominion.Card.Type.TREASURE + "'", type27.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i36);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test197"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    dominion.Card card10 = null;
    player9.trash(card10);
    dominion.Card card12 = null;
    player9.discard(card12);
    java.lang.String str14 = player9.toString();
    dominion.Card card15 = null;
    player9.trash(card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " --- hi! --- \nHand: []\nDiscard: [null]\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str14.equals(" --- hi! --- \nHand: []\nDiscard: [null]\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test198"); }

    dominion.Randomness.reset((long)13);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test199"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    dominion.GameState gameState12 = null;
    dominion.Player player14 = new dominion.Player(gameState12, "");
    dominion.Card card15 = null;
    player14.trash(card15);
    dominion.Card card17 = null;
    player14.discard(card17);
    gameState7.addPlayer(player14);
    dominion.Card[] card_array20 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card21 = new java.util.ArrayList<dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card21, card_array20);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Council_Room;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName23);
    dominion.Card.Type type25 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card26 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card21, type25);
    dominion.GameState gameState27 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    gameState27.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i29 = gameState27.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i30 = gameState27.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i31 = gameState27.gameBoard;
    java.util.List<dominion.Card> list_card32 = gameState27.pileRetrieve();
    java.lang.String str33 = gameState27.toString();
    dominion.GameState gameState34 = null;
    dominion.Player player36 = new dominion.Player(gameState34, "");
    dominion.Card card37 = null;
    player36.trash(card37);
    dominion.Card card39 = null;
    player36.discard(card39);
    gameState27.addPlayer(player36);
    player36.playKingdomCard();
    gameState7.addPlayer(player36);
    // The following exception was thrown during execution in test generation
    try {
    player36.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName23.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    org.junit.Assert.assertTrue("'" + type25 + "' != '" + dominion.Card.Type.TREASURE + "'", type25.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str33.equals("The board game is empty you need to intialize the game!!!!"));

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test200"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    dominion.Card card10 = null;
    player9.trash(card10);
    dominion.Card card12 = null;
    player9.discard(card12);
    player9.playTreasureCard();
    player9.playTreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test201"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    gameState5.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState5.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState5.getWinners();
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Council_Room;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    dominion.Card.Type type15 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card16 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card11, type15);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card11);
    dominion.Player player19 = new dominion.Player(gameState17, "hi!");
    dominion.Card card20 = null;
    player19.trash(card20);
    player19.printStateGame();
    player19.playTreasureCard();
    player19.buyCard();
    java.lang.String str25 = player19.toString();
    gameState5.addPlayer(player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName13.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + dominion.Card.Type.TREASURE + "'", type15.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + " --- hi! --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str25.equals(" --- hi! --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test202"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    java.util.List<dominion.Card> list_card12 = gameState7.pileRetrieve();
    java.util.List<dominion.Card> list_card14 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card12, (java.lang.Integer)0);
    dominion.GameState gameState15 = new dominion.GameState(list_card12);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Province;
    dominion.Card card17 = dominion.Card.getCard(list_card12, cardName16);
    dominion.Card[] card_array18 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card19 = new java.util.ArrayList<dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card19, card_array18);
    dominion.Card.CardName cardName21 = dominion.Card.CardName.Province;
    dominion.Card card22 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card19, cardName21);
    dominion.GameState gameState23 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card19);
    java.util.List<dominion.Card> list_card24 = gameState23.cards;
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Cutpurse;
    dominion.Card card26 = dominion.Card.getCard(list_card24, cardName25);
    dominion.Card[] card_array27 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card28 = new java.util.ArrayList<dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card28, card_array27);
    dominion.Card.CardName cardName30 = dominion.Card.CardName.Council_Room;
    dominion.Card card31 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card28, cardName30);
    dominion.Card.Type type32 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card33 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card28, type32);
    dominion.Card.CardName cardName34 = dominion.Card.CardName.Council_Room;
    dominion.Card card35 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card28, cardName34);
    dominion.Card card36 = dominion.Card.getCard(list_card24, cardName34);
    dominion.Card card37 = dominion.Card.getCard(list_card12, cardName34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Province + "'", cardName16.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + dominion.Card.CardName.Province + "'", cardName21.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName25.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName30.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    org.junit.Assert.assertTrue("'" + type32 + "' != '" + dominion.Card.Type.TREASURE + "'", type32.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName34.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test203"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i11 = gameState7.getWinners();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i12 = gameState7.embargoTokens;
    dominion.Card[] card_array13 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card14 = new java.util.ArrayList<dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card14, card_array13);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Province;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card14, cardName16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card14);
    java.lang.String str19 = gameState18.toString();
    gameState18.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i21 = gameState18.gameBoard;
    java.util.List<dominion.Player> list_player22 = gameState18.players;
    gameState7.players = list_player22;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Province + "'", cardName16.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str19.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player22);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test204"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    boolean b10 = gameState7.isGameOver();
    dominion.Player player12 = new dominion.Player(gameState7, "");
    boolean b13 = gameState7.isGameOver();
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Province;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    java.util.List<dominion.Card> list_card20 = gameState19.cards;
    gameState19.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i22 = gameState19.play();
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Province;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.GameState gameState28 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card24);
    java.lang.String str29 = gameState28.toString();
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Council_Room;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    gameState28.cards = arraylist_card31;
    dominion.Card[] card_array36 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card37 = new java.util.ArrayList<dominion.Card>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card37, card_array36);
    dominion.Card.CardName cardName39 = dominion.Card.CardName.Council_Room;
    dominion.Card card40 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card37, cardName39);
    dominion.Card.Type type41 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card42 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card37, type41);
    dominion.GameState gameState43 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card37);
    gameState43.initializeGame();
    java.util.List<dominion.Player> list_player45 = gameState43.players;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i46 = gameState43.getWinners();
    java.util.List<dominion.Player> list_player47 = gameState43.players;
    gameState28.players = list_player47;
    gameState19.players = list_player47;
    gameState7.players = list_player47;
    dominion.Card[] card_array51 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card52 = new java.util.ArrayList<dominion.Card>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card52, card_array51);
    dominion.Card.CardName cardName54 = dominion.Card.CardName.Province;
    dominion.Card card55 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card52, cardName54);
    dominion.GameState gameState56 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card52);
    boolean b57 = gameState56.isGameOver();
    dominion.GameState gameState58 = null;
    dominion.Player player60 = new dominion.Player(gameState58, "");
    player60.playTreasureCard();
    gameState56.addPlayer(player60);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i63 = gameState56.getWinners();
    dominion.Card[] card_array64 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card65 = new java.util.ArrayList<dominion.Card>();
    boolean b66 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card65, card_array64);
    dominion.Card.CardName cardName67 = dominion.Card.CardName.Council_Room;
    dominion.Card card68 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card65, cardName67);
    dominion.Card.Type type69 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card70 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card65, type69);
    dominion.GameState gameState71 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card65);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i72 = gameState71.embargoTokens;
    java.util.List<dominion.Player> list_player73 = gameState71.players;
    dominion.Card[] card_array74 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card75 = new java.util.ArrayList<dominion.Card>();
    boolean b76 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card75, card_array74);
    dominion.Card.CardName cardName77 = dominion.Card.CardName.Council_Room;
    dominion.Card card78 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card75, cardName77);
    dominion.Card.Type type79 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card80 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card75, type79);
    dominion.GameState gameState81 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card75);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i82 = gameState81.embargoTokens;
    java.util.List<dominion.Player> list_player83 = gameState81.players;
    gameState71.players = list_player83;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i85 = gameState71.embargoTokens;
    gameState56.embargoTokens = hashmap_card_i85;
    gameState7.gameBoard = hashmap_card_i85;
    gameState7.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Province + "'", cardName17.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Province + "'", cardName26.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str29.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName33.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName39.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);
    org.junit.Assert.assertTrue("'" + type41 + "' != '" + dominion.Card.Type.TREASURE + "'", type41.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + dominion.Card.CardName.Province + "'", cardName54.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    org.junit.Assert.assertTrue("'" + cardName67 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName67.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card68);
    org.junit.Assert.assertTrue("'" + type69 + "' != '" + dominion.Card.Type.TREASURE + "'", type69.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    org.junit.Assert.assertTrue("'" + cardName77 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName77.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card78);
    org.junit.Assert.assertTrue("'" + type79 + "' != '" + dominion.Card.Type.TREASURE + "'", type79.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i85);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test205"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    player2.playTreasureCard();
    java.lang.String str4 = player2.toString();
    player2.playTreasureCard();
    java.lang.String str6 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str4.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str6.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test206"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    java.lang.String str12 = gameState7.toString();
    boolean b13 = gameState7.isGameOver();
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Council_Room;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.Card.Type type19 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card20 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card15, type19);
    dominion.GameState gameState21 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    gameState21.initializeGame();
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Council_Room;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.Card.Type type28 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card24, type28);
    dominion.GameState gameState30 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card24);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i31 = gameState30.embargoTokens;
    gameState21.embargoTokens = hashmap_card_i31;
    gameState7.gameBoard = hashmap_card_i31;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str12.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName17.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + type19 + "' != '" + dominion.Card.Type.TREASURE + "'", type19.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName26.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + dominion.Card.Type.TREASURE + "'", type28.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i31);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test207"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    dominion.GameState gameState12 = null;
    dominion.Player player14 = new dominion.Player(gameState12, "");
    dominion.Card card15 = null;
    player14.trash(card15);
    dominion.Card card17 = null;
    player14.discard(card17);
    gameState7.addPlayer(player14);
    dominion.Card[] card_array20 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card21 = new java.util.ArrayList<dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card21, card_array20);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Council_Room;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName23);
    dominion.Card.Type type25 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card26 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card21, type25);
    dominion.GameState gameState27 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    gameState27.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i29 = gameState27.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i30 = gameState27.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i31 = gameState27.gameBoard;
    java.util.List<dominion.Card> list_card32 = gameState27.pileRetrieve();
    java.lang.String str33 = gameState27.toString();
    dominion.GameState gameState34 = null;
    dominion.Player player36 = new dominion.Player(gameState34, "");
    dominion.Card card37 = null;
    player36.trash(card37);
    dominion.Card card39 = null;
    player36.discard(card39);
    gameState27.addPlayer(player36);
    player36.playKingdomCard();
    gameState7.addPlayer(player36);
    player36.buyCard();
    player36.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName23.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    org.junit.Assert.assertTrue("'" + type25 + "' != '" + dominion.Card.Type.TREASURE + "'", type25.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str33.equals("The board game is empty you need to intialize the game!!!!"));

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test208"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    java.util.List<dominion.Card> list_card12 = gameState7.pileRetrieve();
    java.lang.String str13 = gameState7.toString();
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Council_Room;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.Card.Type type19 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card20 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card15, type19);
    dominion.GameState gameState21 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    gameState21.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i23 = gameState21.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i24 = gameState21.gameBoard;
    gameState7.embargoTokens = hashmap_card_i24;
    dominion.Player player26 = null;
    gameState7.addPlayer(player26);
    gameState7.initializeGame();
    java.util.List<dominion.Card> list_card29 = gameState7.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str13.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName17.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + type19 + "' != '" + dominion.Card.Type.TREASURE + "'", type19.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test209"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    player9.playKingdomCard();
    dominion.Card card11 = null;
    player9.trash(card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test210"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.lang.String str6 = gameState5.toString();
    dominion.Card[] card_array7 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card8 = new java.util.ArrayList<dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card8, card_array7);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Council_Room;
    dominion.Card card11 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName10);
    gameState5.cards = arraylist_card8;
    dominion.GameState gameState13 = gameState5.clone();
    dominion.Player player15 = new dominion.Player(gameState13, " --- The board game is empty you need to intialize the game!!!! --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str6.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName10.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState13);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test211"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState7.getWinners();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i9 = gameState7.gameBoard;
    dominion.GameState gameState10 = gameState7.clone();
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Council_Room;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.Card.Type type16 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card17 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card12, type16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    gameState18.initializeGame();
    java.util.List<dominion.Player> list_player20 = gameState18.players;
    dominion.GameState gameState21 = gameState18.clone();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i22 = gameState18.embargoTokens;
    gameState10.embargoTokens = hashmap_card_i22;
    dominion.Player player25 = new dominion.Player(gameState10, " --- hi! --- \nHand: []\nDiscard: [null]\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n");
    java.lang.String str26 = player25.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName14.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + type16 + "' != '" + dominion.Card.Type.TREASURE + "'", type16.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + " ---  --- hi! --- \nHand: []\nDiscard: [null]\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str26.equals(" ---  --- hi! --- \nHand: []\nDiscard: [null]\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test212"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i10 = gameState7.getWinners();
    dominion.GameState gameState11 = gameState7.clone();
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Province;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    java.lang.String str18 = gameState17.toString();
    dominion.Card[] card_array19 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card20 = new java.util.ArrayList<dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card20, card_array19);
    dominion.Card.CardName cardName22 = dominion.Card.CardName.Council_Room;
    dominion.Card card23 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card20, cardName22);
    gameState17.cards = arraylist_card20;
    dominion.Card[] card_array25 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card26 = new java.util.ArrayList<dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card26, card_array25);
    dominion.Card.CardName cardName28 = dominion.Card.CardName.Council_Room;
    dominion.Card card29 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card26, cardName28);
    dominion.Card.Type type30 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card31 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card26, type30);
    dominion.GameState gameState32 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card26);
    gameState32.initializeGame();
    java.util.List<dominion.Player> list_player34 = gameState32.players;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i35 = gameState32.getWinners();
    java.util.List<dominion.Player> list_player36 = gameState32.players;
    gameState17.players = list_player36;
    gameState7.players = list_player36;
    dominion.Card[] card_array39 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card40 = new java.util.ArrayList<dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card40, card_array39);
    dominion.Card.CardName cardName42 = dominion.Card.CardName.Council_Room;
    dominion.Card card43 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card40, cardName42);
    dominion.Card.Type type44 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card45 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card40, type44);
    dominion.GameState gameState46 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card40);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i47 = gameState46.embargoTokens;
    java.util.List<dominion.Player> list_player48 = gameState46.players;
    dominion.GameState gameState49 = null;
    dominion.Player player51 = new dominion.Player(gameState49, "");
    dominion.Card card52 = null;
    player51.trash(card52);
    java.lang.String str54 = player51.toString();
    gameState46.addPlayer(player51);
    player51.playKingdomCard();
    java.lang.String str57 = player51.toString();
    dominion.Card card58 = null;
    player51.trash(card58);
    gameState7.addPlayer(player51);
    player51.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Province + "'", cardName15.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str18.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName22.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName28.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + dominion.Card.Type.TREASURE + "'", type30.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName42.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card43);
    org.junit.Assert.assertTrue("'" + type44 + "' != '" + dominion.Card.Type.TREASURE + "'", type44.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str54.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str57.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test213"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card[] card_array5 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card6 = new java.util.ArrayList<dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card6, card_array5);
    dominion.Card.CardName cardName8 = dominion.Card.CardName.Province;
    dominion.Card card9 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card6, cardName8);
    dominion.GameState gameState10 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card6);
    dominion.Card.Type type11 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card12 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card6, type11);
    java.util.List<dominion.Card> list_card13 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Great_Hall;
    dominion.Card card15 = dominion.Card.getCard(list_card13, cardName14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + dominion.Card.CardName.Province + "'", cardName8.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + type11 + "' != '" + dominion.Card.Type.TREASURE + "'", type11.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Great_Hall + "'", cardName14.equals(dominion.Card.CardName.Great_Hall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test214"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    dominion.GameState gameState12 = null;
    dominion.Player player14 = new dominion.Player(gameState12, "");
    dominion.Card card15 = null;
    player14.trash(card15);
    dominion.Card card17 = null;
    player14.discard(card17);
    gameState7.addPlayer(player14);
    player14.playTreasureCard();
    player14.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test215"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    boolean b9 = gameState7.isGameOver();
    dominion.GameState gameState10 = gameState7.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test216"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    player9.playKingdomCard();
    player9.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test217"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trash(card3);
    player2.buyCard();
    java.lang.String str6 = player2.toString();
    java.lang.String str7 = player2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str6.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str7.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test218"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    dominion.GameState gameState10 = null;
    dominion.Player player12 = new dominion.Player(gameState10, "");
    dominion.Card card13 = null;
    player12.trash(card13);
    java.lang.String str15 = player12.toString();
    gameState7.addPlayer(player12);
    player12.playKingdomCard();
    player12.buyCard();
    player12.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str15.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test219"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    java.util.List<dominion.Card> list_card12 = gameState7.pileRetrieve();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i13 = gameState7.play();
    java.util.List<dominion.Card> list_card14 = gameState7.cards;
    java.util.List<dominion.Player> list_player15 = gameState7.players;
    java.util.List<dominion.Player> list_player16 = gameState7.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player16);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test220"); }

    java.util.List<dominion.Card> list_card0 = null;
    dominion.Card.CardName cardName1 = dominion.Card.CardName.Village;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card2 = dominion.Card.getCard(list_card0, cardName1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + cardName1 + "' != '" + dominion.Card.CardName.Village + "'", cardName1.equals(dominion.Card.CardName.Village));

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test221"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.List<dominion.Card> list_card11 = gameState7.cards;
    java.util.List<dominion.Card> list_card12 = gameState7.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i13 = gameState7.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i13);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test222"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    dominion.GameState gameState10 = null;
    dominion.Player player12 = new dominion.Player(gameState10, "");
    dominion.Card card13 = null;
    player12.trash(card13);
    java.lang.String str15 = player12.toString();
    gameState7.addPlayer(player12);
    java.lang.String str17 = player12.toString();
    // The following exception was thrown during execution in test generation
    try {
    player12.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str15.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str17.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test223"); }

    dominion.Randomness.reset((long)50);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test224"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    java.lang.String str12 = gameState7.toString();
    dominion.Card[] card_array13 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card14 = new java.util.ArrayList<dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card14, card_array13);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Council_Room;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card14, cardName16);
    dominion.Card.Type type18 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card19 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card14, type18);
    dominion.GameState gameState20 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card14);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i21 = gameState20.embargoTokens;
    boolean b22 = gameState20.isGameOver();
    boolean b23 = gameState20.isGameOver();
    dominion.Card[] card_array24 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card25 = new java.util.ArrayList<dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card25, card_array24);
    gameState20.cards = arraylist_card25;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i28 = gameState20.embargoTokens;
    gameState7.gameBoard = hashmap_card_i28;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i30 = gameState7.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str12.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName16.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    org.junit.Assert.assertTrue("'" + type18 + "' != '" + dominion.Card.Type.TREASURE + "'", type18.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i30);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test225"); }

    java.lang.Iterable<dominion.Card> iterable_card0 = null;
    dominion.Card[] card_array1 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card2 = new java.util.ArrayList<dominion.Card>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card2, card_array1);
    dominion.Card.CardName cardName4 = dominion.Card.CardName.Council_Room;
    dominion.Card card5 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card2, cardName4);
    dominion.Card.Type type6 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card7 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card2, type6);
    dominion.GameState gameState8 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card2);
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    gameState16.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i18 = gameState16.getWinners();
    java.util.List<dominion.Card> list_card19 = gameState16.cards;
    dominion.GameState gameState20 = new dominion.GameState(list_card19);
    gameState8.cards = list_card19;
    dominion.Card[] card_array22 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card23 = new java.util.ArrayList<dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card23, card_array22);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Province;
    dominion.Card card26 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card23, cardName25);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Cutpurse;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card23, cardName27);
    java.util.List<dominion.Card> list_card30 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card23, (java.lang.Integer)23);
    dominion.Card[] card_array31 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card32 = new java.util.ArrayList<dominion.Card>();
    boolean b33 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card32, card_array31);
    dominion.Card.CardName cardName34 = dominion.Card.CardName.Province;
    dominion.Card card35 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card32, cardName34);
    dominion.GameState gameState36 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card32);
    dominion.Card.Type type37 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card38 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card32, type37);
    java.util.List<dominion.Card> list_card39 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card23, type37);
    java.util.List<dominion.Card> list_card40 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card19, type37);
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<dominion.Card> list_card41 = dominion.Card.filter(iterable_card0, type37);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + cardName4 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName4.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card5);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + dominion.Card.Type.TREASURE + "'", type6.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Province + "'", cardName25.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName27.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + dominion.Card.CardName.Province + "'", cardName34.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card35);
    org.junit.Assert.assertTrue("'" + type37 + "' != '" + dominion.Card.Type.TREASURE + "'", type37.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test226"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState5.getWinners();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState5.embargoTokens;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState5.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test227"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    dominion.Card card10 = null;
    player9.trash(card10);
    player9.printStateGame();
    player9.playTreasureCard();
    player9.buyCard();
    java.lang.String str15 = player9.toString();
    java.lang.String str16 = player9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + " --- hi! --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str15.equals(" --- hi! --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + " --- hi! --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str16.equals(" --- hi! --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test228"); }

    int i1 = dominion.Randomness.nextRandomInt(13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 11);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test229"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i10 = gameState7.getWinners();
    dominion.GameState gameState11 = gameState7.clone();
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Council_Room;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.Card.Type type17 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card18 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card13, type17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    gameState19.initializeGame();
    java.util.List<dominion.Player> list_player21 = gameState19.players;
    java.util.List<dominion.Card> list_card22 = gameState19.cards;
    boolean b23 = gameState19.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i24 = gameState19.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i25 = gameState19.gameBoard;
    gameState11.embargoTokens = hashmap_card_i25;
    dominion.Card[] card_array27 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card28 = new java.util.ArrayList<dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card28, card_array27);
    dominion.Card.CardName cardName30 = dominion.Card.CardName.Council_Room;
    dominion.Card card31 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card28, cardName30);
    dominion.Card.Type type32 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card33 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card28, type32);
    dominion.GameState gameState34 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card28);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i35 = gameState34.getWinners();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i36 = gameState34.gameBoard;
    dominion.GameState gameState37 = gameState34.clone();
    java.util.List<dominion.Card> list_card38 = gameState34.pileRetrieve();
    dominion.Card[] card_array39 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card40 = new java.util.ArrayList<dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card40, card_array39);
    dominion.Card.CardName cardName42 = dominion.Card.CardName.Council_Room;
    dominion.Card card43 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card40, cardName42);
    dominion.Card.Type type44 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card45 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card40, type44);
    dominion.GameState gameState46 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card40);
    dominion.Player player48 = new dominion.Player(gameState46, "hi!");
    gameState34.addPlayer(player48);
    dominion.Player player51 = new dominion.Player(gameState34, " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n");
    dominion.Card card52 = null;
    // The following exception was thrown during execution in test generation
    try {
    gameState11.pollPile(player51, card52);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName15.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + dominion.Card.Type.TREASURE + "'", type17.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName30.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    org.junit.Assert.assertTrue("'" + type32 + "' != '" + dominion.Card.Type.TREASURE + "'", type32.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName42.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card43);
    org.junit.Assert.assertTrue("'" + type44 + "' != '" + dominion.Card.Type.TREASURE + "'", type44.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test230"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    boolean b10 = gameState7.isGameOver();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    dominion.Player player13 = new dominion.Player(gameState7, " --- The board game is empty you need to intialize the game!!!! --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n");
    gameState7.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test231"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState7.getWinners();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i9 = gameState7.gameBoard;
    dominion.GameState gameState10 = gameState7.clone();
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Council_Room;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.Card.Type type16 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card17 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card12, type16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    gameState18.initializeGame();
    java.util.List<dominion.Player> list_player20 = gameState18.players;
    dominion.GameState gameState21 = gameState18.clone();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i22 = gameState18.embargoTokens;
    gameState10.embargoTokens = hashmap_card_i22;
    dominion.Card[] card_array24 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card25 = new java.util.ArrayList<dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card25, card_array24);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Province;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card25);
    java.util.List<dominion.Card> list_card30 = gameState29.cards;
    dominion.Card.Type type31 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card32 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card30, type31);
    gameState10.cards = list_card32;
    dominion.GameState gameState34 = null;
    dominion.Player player36 = new dominion.Player(gameState34, "");
    dominion.Card card37 = null;
    player36.discard(card37);
    gameState10.addPlayer(player36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName14.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + type16 + "' != '" + dominion.Card.Type.TREASURE + "'", type16.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Province + "'", cardName27.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    org.junit.Assert.assertTrue("'" + type31 + "' != '" + dominion.Card.Type.VICTORY + "'", type31.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test232"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    gameState16.initializeGame();
    java.util.List<dominion.Player> list_player18 = gameState16.players;
    gameState7.players = list_player18;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState7.embargoTokens;
    java.util.List<dominion.Card> list_card21 = gameState7.cards;
    java.util.List<dominion.Card> list_card22 = gameState7.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test233"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i10 = gameState7.getWinners();
    dominion.GameState gameState11 = gameState7.clone();
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Council_Room;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.Card.Type type17 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card18 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card13, type17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    gameState19.initializeGame();
    java.util.List<dominion.Player> list_player21 = gameState19.players;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i22 = gameState19.getWinners();
    java.util.List<dominion.Player> list_player23 = gameState19.players;
    gameState7.players = list_player23;
    dominion.Card[] card_array25 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card26 = new java.util.ArrayList<dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card26, card_array25);
    dominion.Card.CardName cardName28 = dominion.Card.CardName.Council_Room;
    dominion.Card card29 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card26, cardName28);
    dominion.Card.Type type30 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card31 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card26, type30);
    dominion.GameState gameState32 = new dominion.GameState(list_card31);
    dominion.Card.Type type33 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card34 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card31, type33);
    gameState7.cards = list_card34;
    dominion.GameState gameState36 = new dominion.GameState(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName15.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + dominion.Card.Type.TREASURE + "'", type17.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName28.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + dominion.Card.Type.TREASURE + "'", type30.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    org.junit.Assert.assertTrue("'" + type33 + "' != '" + dominion.Card.Type.TREASURE + "'", type33.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test234"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    dominion.GameState gameState12 = null;
    dominion.Player player14 = new dominion.Player(gameState12, "");
    dominion.Card card15 = null;
    player14.trash(card15);
    dominion.Card card17 = null;
    player14.discard(card17);
    gameState7.addPlayer(player14);
    dominion.Card[] card_array20 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card21 = new java.util.ArrayList<dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card21, card_array20);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Council_Room;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName23);
    dominion.Card.Type type25 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card26 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card21, type25);
    dominion.GameState gameState27 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    gameState27.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i29 = gameState27.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i30 = gameState27.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i31 = gameState27.gameBoard;
    java.lang.String str32 = gameState27.toString();
    java.lang.String str33 = gameState27.toString();
    dominion.Player player35 = new dominion.Player(gameState27, " --- hi! --- \nHand: []\nDiscard: [null]\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n");
    player35.playTreasureCard();
    gameState7.addPlayer(player35);
    player35.playTreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName23.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    org.junit.Assert.assertTrue("'" + type25 + "' != '" + dominion.Card.Type.TREASURE + "'", type25.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str32.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str33.equals("The board game is empty you need to intialize the game!!!!"));

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test235"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    boolean b9 = gameState7.isGameOver();
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Province;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card11);
    java.util.List<dominion.Card> list_card16 = gameState15.cards;
    dominion.Card.Type type17 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card18 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card16, type17);
    dominion.Card[] card_array19 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card20 = new java.util.ArrayList<dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card20, card_array19);
    dominion.Card.CardName cardName22 = dominion.Card.CardName.Province;
    dominion.Card card23 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card20, cardName22);
    dominion.GameState gameState24 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card20);
    java.util.List<dominion.Card> list_card25 = gameState24.cards;
    dominion.Card.Type type26 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card27 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card25, type26);
    java.util.List<dominion.Card> list_card28 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card16, type26);
    gameState7.cards = list_card16;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card30 = dominion.Randomness.randomMember(list_card16);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Province + "'", cardName13.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + dominion.Card.Type.VICTORY + "'", type17.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + dominion.Card.CardName.Province + "'", cardName22.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + dominion.Card.Type.VICTORY + "'", type26.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test236"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.lang.String str6 = gameState5.toString();
    gameState5.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState5.gameBoard;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState5.play();
    dominion.GameState gameState10 = gameState5.clone();
    dominion.GameState gameState11 = gameState5.clone();
    java.util.List<dominion.Player> list_player12 = gameState5.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str6.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test237"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.List<dominion.Card> list_card11 = gameState7.cards;
    java.util.List<dominion.Card> list_card12 = gameState7.cards;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i13 = gameState7.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i13);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test238"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    java.util.List<dominion.Card> list_card7 = gameState5.cards;
    gameState5.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test239"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.List<dominion.Player> list_player11 = null;
    gameState7.players = list_player11;
    dominion.Card[] card_array13 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card14 = new java.util.ArrayList<dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card14, card_array13);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Council_Room;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card14, cardName16);
    dominion.Card.Type type18 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card19 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card14, type18);
    dominion.GameState gameState20 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card14);
    gameState20.initializeGame();
    dominion.Card[] card_array22 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card23 = new java.util.ArrayList<dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card23, card_array22);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Council_Room;
    dominion.Card card26 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card23, cardName25);
    dominion.Card.Type type27 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card28 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card23, type27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card23);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i30 = gameState29.embargoTokens;
    gameState20.embargoTokens = hashmap_card_i30;
    gameState7.gameBoard = hashmap_card_i30;
    dominion.Card[] card_array33 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card34 = new java.util.ArrayList<dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card34, card_array33);
    dominion.Card.CardName cardName36 = dominion.Card.CardName.Province;
    dominion.Card card37 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card34, cardName36);
    dominion.Card.CardName cardName38 = dominion.Card.CardName.Cutpurse;
    dominion.Card card39 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card34, cardName38);
    java.util.List<dominion.Card> list_card41 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card34, (java.lang.Integer)23);
    dominion.Card[] card_array42 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card43 = new java.util.ArrayList<dominion.Card>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card43, card_array42);
    dominion.Card.CardName cardName45 = dominion.Card.CardName.Province;
    dominion.Card card46 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card43, cardName45);
    dominion.GameState gameState47 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card43);
    dominion.Card.Type type48 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card49 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card43, type48);
    java.util.List<dominion.Card> list_card50 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card34, type48);
    gameState7.cards = arraylist_card34;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName16.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    org.junit.Assert.assertTrue("'" + type18 + "' != '" + dominion.Card.Type.TREASURE + "'", type18.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName25.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + type27 + "' != '" + dominion.Card.Type.TREASURE + "'", type27.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + dominion.Card.CardName.Province + "'", cardName36.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName38.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    org.junit.Assert.assertTrue("'" + cardName45 + "' != '" + dominion.Card.CardName.Province + "'", cardName45.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card46);
    org.junit.Assert.assertTrue("'" + type48 + "' != '" + dominion.Card.Type.TREASURE + "'", type48.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test240"); }

    dominion.Randomness.reset((long)(short)100);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test241"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Council_Room;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.Card.Type type16 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card17 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card12, type16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    gameState18.initializeGame();
    java.util.List<dominion.Player> list_player20 = gameState18.players;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState18.getWinners();
    java.util.List<dominion.Player> list_player22 = gameState18.players;
    gameState7.players = list_player22;
    java.util.List<dominion.Card> list_card24 = gameState7.pileRetrieve();
    dominion.GameState gameState25 = new dominion.GameState(list_card24);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i26 = gameState25.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName14.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + type16 + "' != '" + dominion.Card.Type.TREASURE + "'", type16.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i26);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test242"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    boolean b11 = gameState7.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState7.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i13 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i14 = gameState7.embargoTokens;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i14);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test243"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    dominion.GameState gameState10 = gameState7.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test244"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Card[] card_array6 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card7 = new java.util.ArrayList<dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card7, card_array6);
    dominion.Card.CardName cardName9 = dominion.Card.CardName.Council_Room;
    dominion.Card card10 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card7, cardName9);
    dominion.Card.Type type11 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card12 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card7, type11);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Council_Room;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card7, cardName13);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Baron;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card7, cardName15);
    gameState5.cards = arraylist_card7;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName9.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    org.junit.Assert.assertTrue("'" + type11 + "' != '" + dominion.Card.Type.TREASURE + "'", type11.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName13.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Baron + "'", cardName15.equals(dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test245"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState7.getWinners();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i9 = gameState7.gameBoard;
    dominion.GameState gameState10 = gameState7.clone();
    java.util.List<dominion.Card> list_card11 = gameState7.pileRetrieve();
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Council_Room;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.Card.Type type17 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card18 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card13, type17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    dominion.Player player21 = new dominion.Player(gameState19, "hi!");
    gameState7.addPlayer(player21);
    java.util.List<dominion.Card> list_card23 = gameState7.cards;
    java.util.List<dominion.Player> list_player24 = gameState7.players;
    java.lang.String str25 = gameState7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName15.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + dominion.Card.Type.TREASURE + "'", type17.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str25.equals("The board game is empty you need to intialize the game!!!!"));

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test246"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    boolean b6 = gameState5.isGameOver();
    dominion.GameState gameState7 = null;
    dominion.Player player9 = new dominion.Player(gameState7, "");
    player9.playTreasureCard();
    gameState5.addPlayer(player9);
    java.lang.String str12 = gameState5.toString();
    dominion.Player player14 = new dominion.Player(gameState5, " --- hi! --- \nHand: []\nDiscard: [null]\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n");
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i15 = gameState5.getWinners();
    dominion.GameState gameState16 = null;
    dominion.Player player18 = new dominion.Player(gameState16, "");
    player18.playTreasureCard();
    java.lang.String str20 = player18.toString();
    player18.playTreasureCard();
    player18.playTreasureCard();
    dominion.Card card23 = null;
    player18.discard(card23);
    gameState5.addPlayer(player18);
    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i26 = gameState5.play();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str12.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str20.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test247"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.lang.String str6 = gameState5.toString();
    gameState5.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState5.gameBoard;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState5.play();
    dominion.GameState gameState10 = gameState5.clone();
    dominion.GameState gameState11 = gameState5.clone();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i12 = gameState11.embargoTokens;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i13 = gameState11.gameBoard;
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Council_Room;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.Card.Type type19 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card20 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card15, type19);
    dominion.GameState gameState21 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    gameState21.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i23 = gameState21.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i24 = gameState21.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i25 = gameState21.gameBoard;
    dominion.Card[] card_array26 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card27 = new java.util.ArrayList<dominion.Card>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card27, card_array26);
    dominion.Card.CardName cardName29 = dominion.Card.CardName.Council_Room;
    dominion.Card card30 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card27, cardName29);
    dominion.Card.Type type31 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card32 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card27, type31);
    dominion.GameState gameState33 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card27);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = gameState33.embargoTokens;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i35 = gameState33.embargoTokens;
    gameState21.gameBoard = hashmap_card_i35;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i37 = gameState21.play();
    dominion.GameState gameState38 = null;
    dominion.Player player40 = new dominion.Player(gameState38, "");
    player40.playTreasureCard();
    dominion.Card card42 = null;
    player40.trash(card42);
    gameState21.addPlayer(player40);
    player40.playTreasureCard();
    gameState11.addPlayer(player40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str6.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName17.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + type19 + "' != '" + dominion.Card.Type.TREASURE + "'", type19.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName29.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    org.junit.Assert.assertTrue("'" + type31 + "' != '" + dominion.Card.Type.TREASURE + "'", type31.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i37);

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test248"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.CardName cardName5 = dominion.Card.CardName.Cutpurse;
    dominion.Card card6 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName5);
    java.util.List<dominion.Card> list_card8 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card1, (java.lang.Integer)23);
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Province;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Card.Type type15 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card16 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type15);
    java.util.List<dominion.Card> list_card17 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type15);
    dominion.Card[] card_array18 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card19 = new java.util.ArrayList<dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card19, card_array18);
    dominion.Card.CardName cardName21 = dominion.Card.CardName.Province;
    dominion.Card card22 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card19, cardName21);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Cutpurse;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card19, cardName23);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Silver;
    dominion.Card card26 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card19, cardName25);
    dominion.Card card27 = dominion.Card.getCard(list_card17, cardName25);
    java.util.List<dominion.Card> list_card29 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card17, (java.lang.Integer)23);
    java.util.List<dominion.Card> list_card31 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card29, (java.lang.Integer)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName5.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Province + "'", cardName12.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + dominion.Card.Type.TREASURE + "'", type15.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + dominion.Card.CardName.Province + "'", cardName21.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName23.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Silver + "'", cardName25.equals(dominion.Card.CardName.Silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test249"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trash(card3);
    java.lang.String str5 = player2.toString();
    java.lang.String str6 = player2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str5.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str6.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test250"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Player player10 = dominion.Randomness.randomMember(list_player9);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test251"); }

    java.util.List<dominion.Card> list_card0 = null;
    dominion.Card[] card_array1 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card2 = new java.util.ArrayList<dominion.Card>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card2, card_array1);
    dominion.Card.CardName cardName4 = dominion.Card.CardName.Council_Room;
    dominion.Card card5 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card2, cardName4);
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card6 = dominion.Card.getCard(list_card0, cardName4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + cardName4 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName4.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card5);

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test252"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    boolean b6 = gameState5.isGameOver();
    dominion.GameState gameState7 = null;
    dominion.Player player9 = new dominion.Player(gameState7, "");
    player9.playTreasureCard();
    gameState5.addPlayer(player9);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState5.getWinners();
    dominion.Card[] card_array13 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card14 = new java.util.ArrayList<dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card14, card_array13);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Council_Room;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card14, cardName16);
    dominion.Card.Type type18 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card19 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card14, type18);
    dominion.GameState gameState20 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card14);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i21 = gameState20.embargoTokens;
    java.util.List<dominion.Player> list_player22 = gameState20.players;
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Council_Room;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.Card.Type type28 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card24, type28);
    dominion.GameState gameState30 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card24);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i31 = gameState30.embargoTokens;
    java.util.List<dominion.Player> list_player32 = gameState30.players;
    gameState20.players = list_player32;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = gameState20.embargoTokens;
    gameState5.embargoTokens = hashmap_card_i34;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i36 = gameState5.embargoTokens;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName16.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    org.junit.Assert.assertTrue("'" + type18 + "' != '" + dominion.Card.Type.TREASURE + "'", type18.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName26.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + dominion.Card.Type.TREASURE + "'", type28.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i36);

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test253"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState5.getWinners();
    dominion.GameState gameState8 = gameState5.clone();
    java.util.List<dominion.Player> list_player9 = gameState5.players;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Player player10 = dominion.Randomness.randomMember(list_player9);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test254"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    java.util.List<dominion.Card> list_card12 = gameState7.pileRetrieve();
    java.lang.String str13 = gameState7.toString();
    dominion.GameState gameState14 = null;
    dominion.Player player16 = new dominion.Player(gameState14, "");
    dominion.Card card17 = null;
    player16.trash(card17);
    dominion.Card card19 = null;
    player16.discard(card19);
    gameState7.addPlayer(player16);
    player16.playKingdomCard();
    java.lang.String str23 = player16.toString();
    // The following exception was thrown during execution in test generation
    try {
    player16.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str13.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + " ---  --- \nHand: []\nDiscard: [null]\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str23.equals(" ---  --- \nHand: []\nDiscard: [null]\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test255"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Council_Room;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.Card.Type type17 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card18 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card13, type17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState19.embargoTokens;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i21 = gameState19.embargoTokens;
    gameState7.gameBoard = hashmap_card_i21;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i23 = gameState7.play();
    dominion.GameState gameState24 = null;
    dominion.Player player26 = new dominion.Player(gameState24, "");
    player26.playTreasureCard();
    dominion.Card card28 = null;
    player26.trash(card28);
    gameState7.addPlayer(player26);
    player26.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName15.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + dominion.Card.Type.TREASURE + "'", type17.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i23);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test256"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    dominion.GameState gameState12 = null;
    dominion.Player player14 = new dominion.Player(gameState12, "");
    dominion.Card card15 = null;
    player14.trash(card15);
    dominion.Card card17 = null;
    player14.discard(card17);
    gameState7.addPlayer(player14);
    dominion.Card[] card_array20 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card21 = new java.util.ArrayList<dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card21, card_array20);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Council_Room;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName23);
    dominion.Card.Type type25 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card26 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card21, type25);
    dominion.GameState gameState27 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    gameState27.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i29 = gameState27.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i30 = gameState27.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i31 = gameState27.gameBoard;
    java.lang.String str32 = gameState27.toString();
    java.lang.String str33 = gameState27.toString();
    dominion.Player player35 = new dominion.Player(gameState27, " --- hi! --- \nHand: []\nDiscard: [null]\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n");
    player35.playTreasureCard();
    gameState7.addPlayer(player35);
    player35.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName23.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    org.junit.Assert.assertTrue("'" + type25 + "' != '" + dominion.Card.Type.TREASURE + "'", type25.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str32.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str33.equals("The board game is empty you need to intialize the game!!!!"));

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test257"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState(list_card6);
    dominion.Card.Type type8 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card9 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card6, type8);
    java.util.List<dominion.Card> list_card11 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card6, (java.lang.Integer)0);
    java.util.List<dominion.Card> list_card13 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card11, (java.lang.Integer)10);
    dominion.GameState gameState14 = new dominion.GameState(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + type8 + "' != '" + dominion.Card.Type.TREASURE + "'", type8.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test258"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Province;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    java.util.List<dominion.Card> list_card17 = gameState16.cards;
    dominion.Card.Type type18 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card19 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card17, type18);
    dominion.Card[] card_array20 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card21 = new java.util.ArrayList<dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card21, card_array20);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Province;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName23);
    dominion.GameState gameState25 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    java.util.List<dominion.Card> list_card26 = gameState25.cards;
    dominion.Card.Type type27 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card28 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card26, type27);
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card17, type27);
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Province;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    dominion.Card.CardName cardName35 = dominion.Card.CardName.Cutpurse;
    dominion.Card card36 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName35);
    java.util.List<dominion.Card> list_card38 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card31, (java.lang.Integer)23);
    dominion.Card[] card_array39 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card40 = new java.util.ArrayList<dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card40, card_array39);
    dominion.Card.CardName cardName42 = dominion.Card.CardName.Province;
    dominion.Card card43 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card40, cardName42);
    dominion.GameState gameState44 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card40);
    dominion.Card.Type type45 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card46 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card40, type45);
    java.util.List<dominion.Card> list_card47 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card31, type45);
    java.util.List<dominion.Card> list_card48 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card17, type45);
    java.util.List<dominion.Card> list_card49 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card10, type45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Province + "'", cardName14.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    org.junit.Assert.assertTrue("'" + type18 + "' != '" + dominion.Card.Type.VICTORY + "'", type18.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Province + "'", cardName23.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    org.junit.Assert.assertTrue("'" + type27 + "' != '" + dominion.Card.Type.VICTORY + "'", type27.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Province + "'", cardName33.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName35.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + dominion.Card.CardName.Province + "'", cardName42.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card43);
    org.junit.Assert.assertTrue("'" + type45 + "' != '" + dominion.Card.Type.TREASURE + "'", type45.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test259"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    boolean b9 = gameState7.isGameOver();
    boolean b10 = gameState7.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i11 = gameState7.getWinners();
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Council_Room;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.Card.Type type17 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card18 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card13, type17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    gameState7.cards = arraylist_card13;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName15.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + dominion.Card.Type.TREASURE + "'", type17.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test260"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, " ---  --- \nHand: []\nDiscard: [null]\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n");
    player2.buyCard();

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test261"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    boolean b10 = gameState7.isGameOver();
    dominion.Player player12 = new dominion.Player(gameState7, "");
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i13 = null;
    gameState7.embargoTokens = hashmap_card_i13;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i15 = gameState7.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i15);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test262"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState5.getWinners();
    dominion.GameState gameState8 = gameState5.clone();
    java.util.List<dominion.Player> list_player9 = gameState5.players;
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Council_Room;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    dominion.Card.Type type15 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card16 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card11, type15);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card11);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i18 = gameState17.embargoTokens;
    java.util.List<dominion.Player> list_player19 = gameState17.players;
    dominion.Card[] card_array20 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card21 = new java.util.ArrayList<dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card21, card_array20);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Council_Room;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName23);
    dominion.Card.Type type25 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card26 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card21, type25);
    dominion.GameState gameState27 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i28 = gameState27.embargoTokens;
    java.util.List<dominion.Player> list_player29 = gameState27.players;
    gameState17.players = list_player29;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i31 = gameState17.embargoTokens;
    gameState5.embargoTokens = hashmap_card_i31;
    dominion.Card[] card_array33 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card34 = new java.util.ArrayList<dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card34, card_array33);
    dominion.Card.CardName cardName36 = dominion.Card.CardName.Council_Room;
    dominion.Card card37 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card34, cardName36);
    dominion.Card.Type type38 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card39 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card34, type38);
    dominion.GameState gameState40 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card34);
    gameState40.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i42 = gameState40.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i43 = gameState40.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i44 = gameState40.gameBoard;
    java.util.List<dominion.Card> list_card45 = gameState40.pileRetrieve();
    java.util.List<dominion.Card> list_card47 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card45, (java.lang.Integer)100);
    dominion.Card[] card_array48 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card49 = new java.util.ArrayList<dominion.Card>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card49, card_array48);
    dominion.Card.CardName cardName51 = dominion.Card.CardName.Province;
    dominion.Card card52 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card49, cardName51);
    dominion.GameState gameState53 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card49);
    java.util.List<dominion.Card> list_card54 = gameState53.cards;
    dominion.Card.Type type55 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card56 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card54, type55);
    dominion.Card[] card_array57 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card58 = new java.util.ArrayList<dominion.Card>();
    boolean b59 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card58, card_array57);
    dominion.Card.CardName cardName60 = dominion.Card.CardName.Province;
    dominion.Card card61 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card58, cardName60);
    dominion.GameState gameState62 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card58);
    java.util.List<dominion.Card> list_card63 = gameState62.cards;
    dominion.Card.Type type64 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card65 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card63, type64);
    java.util.List<dominion.Card> list_card66 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card56, type64);
    java.util.List<dominion.Card> list_card67 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card45, type64);
    gameState5.cards = list_card67;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName13.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + dominion.Card.Type.TREASURE + "'", type15.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName23.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    org.junit.Assert.assertTrue("'" + type25 + "' != '" + dominion.Card.Type.TREASURE + "'", type25.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName36.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    org.junit.Assert.assertTrue("'" + type38 + "' != '" + dominion.Card.Type.TREASURE + "'", type38.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + dominion.Card.CardName.Province + "'", cardName51.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card54);
    org.junit.Assert.assertTrue("'" + type55 + "' != '" + dominion.Card.Type.VICTORY + "'", type55.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + dominion.Card.CardName.Province + "'", cardName60.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    org.junit.Assert.assertTrue("'" + type64 + "' != '" + dominion.Card.Type.VICTORY + "'", type64.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test263"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i17 = gameState16.embargoTokens;
    gameState7.embargoTokens = hashmap_card_i17;
    java.lang.String str19 = gameState7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str19.equals("The board game is empty you need to intialize the game!!!!"));

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test264"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i17 = gameState16.embargoTokens;
    gameState7.embargoTokens = hashmap_card_i17;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i19 = gameState7.getWinners();
    dominion.Card[] card_array20 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card21 = new java.util.ArrayList<dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card21, card_array20);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Council_Room;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName23);
    dominion.Card.Type type25 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card26 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card21, type25);
    dominion.GameState gameState27 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i28 = gameState27.embargoTokens;
    java.util.List<dominion.Player> list_player29 = gameState27.players;
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Council_Room;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    dominion.Card.Type type35 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card36 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card31, type35);
    dominion.GameState gameState37 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card31);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i38 = gameState37.embargoTokens;
    java.util.List<dominion.Player> list_player39 = gameState37.players;
    gameState27.players = list_player39;
    dominion.Card[] card_array41 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card42 = new java.util.ArrayList<dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card42, card_array41);
    dominion.Card.CardName cardName44 = dominion.Card.CardName.Council_Room;
    dominion.Card card45 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card42, cardName44);
    dominion.Card.Type type46 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card47 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card42, type46);
    dominion.GameState gameState48 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card42);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i49 = gameState48.embargoTokens;
    boolean b50 = gameState48.isGameOver();
    boolean b51 = gameState48.isGameOver();
    dominion.Card[] card_array52 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card53 = new java.util.ArrayList<dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card53, card_array52);
    dominion.Card.CardName cardName55 = dominion.Card.CardName.Council_Room;
    dominion.Card card56 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card53, cardName55);
    dominion.Card.Type type57 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card58 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card53, type57);
    dominion.GameState gameState59 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card53);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i60 = gameState59.embargoTokens;
    boolean b61 = gameState59.isGameOver();
    boolean b62 = gameState59.isGameOver();
    dominion.Card[] card_array63 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card64 = new java.util.ArrayList<dominion.Card>();
    boolean b65 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card64, card_array63);
    gameState59.cards = arraylist_card64;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i67 = gameState59.embargoTokens;
    gameState48.embargoTokens = hashmap_card_i67;
    gameState27.gameBoard = hashmap_card_i67;
    gameState7.embargoTokens = hashmap_card_i67;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i71 = gameState7.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName23.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    org.junit.Assert.assertTrue("'" + type25 + "' != '" + dominion.Card.Type.TREASURE + "'", type25.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName33.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    org.junit.Assert.assertTrue("'" + type35 + "' != '" + dominion.Card.Type.TREASURE + "'", type35.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName44.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card45);
    org.junit.Assert.assertTrue("'" + type46 + "' != '" + dominion.Card.Type.TREASURE + "'", type46.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName55.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    org.junit.Assert.assertTrue("'" + type57 + "' != '" + dominion.Card.Type.TREASURE + "'", type57.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i71);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test265"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Card[] card_array8 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card9 = new java.util.ArrayList<dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card9, card_array8);
    dominion.Card.CardName cardName11 = dominion.Card.CardName.Council_Room;
    dominion.Card card12 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card9, cardName11);
    dominion.Card.Type type13 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card14 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card9, type13);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card9);
    gameState15.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState15.getWinners();
    java.util.List<dominion.Card> list_card18 = gameState15.cards;
    dominion.GameState gameState19 = new dominion.GameState(list_card18);
    gameState7.cards = list_card18;
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Province;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Cutpurse;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName26);
    java.util.List<dominion.Card> list_card29 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card22, (java.lang.Integer)23);
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Province;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card31);
    dominion.Card.Type type36 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card37 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card31, type36);
    java.util.List<dominion.Card> list_card38 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card22, type36);
    java.util.List<dominion.Card> list_card39 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card18, type36);
    java.util.List<dominion.Card> list_card41 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card39, (java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName11.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    org.junit.Assert.assertTrue("'" + type13 + "' != '" + dominion.Card.Type.TREASURE + "'", type13.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Province + "'", cardName24.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName26.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Province + "'", cardName33.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    org.junit.Assert.assertTrue("'" + type36 + "' != '" + dominion.Card.Type.TREASURE + "'", type36.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test266"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState5.getWinners();
    dominion.GameState gameState8 = gameState5.clone();
    java.util.List<dominion.Card> list_card9 = gameState8.cards;
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Province;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Cutpurse;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName15);
    java.util.List<dominion.Card> list_card18 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card11, (java.lang.Integer)23);
    dominion.Card[] card_array19 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card20 = new java.util.ArrayList<dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card20, card_array19);
    dominion.Card.CardName cardName22 = dominion.Card.CardName.Province;
    dominion.Card card23 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card20, cardName22);
    dominion.GameState gameState24 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card20);
    dominion.Card.Type type25 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card26 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card20, type25);
    java.util.List<dominion.Card> list_card27 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card11, type25);
    dominion.Card[] card_array28 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card29 = new java.util.ArrayList<dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card29, card_array28);
    dominion.Card.CardName cardName31 = dominion.Card.CardName.Province;
    dominion.Card card32 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card29, cardName31);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Cutpurse;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card29, cardName33);
    dominion.Card.CardName cardName35 = dominion.Card.CardName.Silver;
    dominion.Card card36 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card29, cardName35);
    dominion.Card card37 = dominion.Card.getCard(list_card27, cardName35);
    java.util.List<dominion.Card> list_card39 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card27, (java.lang.Integer)23);
    gameState8.cards = list_card27;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i41 = gameState8.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Province + "'", cardName13.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName15.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + dominion.Card.CardName.Province + "'", cardName22.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + type25 + "' != '" + dominion.Card.Type.TREASURE + "'", type25.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + dominion.Card.CardName.Province + "'", cardName31.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName33.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + dominion.Card.CardName.Silver + "'", cardName35.equals(dominion.Card.CardName.Silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i41);

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test267"); }

    int i1 = dominion.Randomness.nextRandomInt((int)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test268"); }

    dominion.Randomness.reset((long)11);

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test269"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    dominion.Card.CardName cardName7 = dominion.Card.CardName.Cutpurse;
    dominion.Card card8 = dominion.Card.getCard(list_card6, cardName7);
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Council_Room;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName16);
    dominion.Card card18 = dominion.Card.getCard(list_card6, cardName16);
    java.util.List<dominion.Card> list_card20 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card6, (java.lang.Integer)17);
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Province;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Cutpurse;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName26);
    java.util.List<dominion.Card> list_card29 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card22, (java.lang.Integer)23);
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Province;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card31);
    dominion.Card.Type type36 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card37 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card31, type36);
    java.util.List<dominion.Card> list_card38 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card22, type36);
    dominion.Card[] card_array39 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card40 = new java.util.ArrayList<dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card40, card_array39);
    dominion.Card.CardName cardName42 = dominion.Card.CardName.Province;
    dominion.Card card43 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card40, cardName42);
    dominion.Card.CardName cardName44 = dominion.Card.CardName.Cutpurse;
    dominion.Card card45 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card40, cardName44);
    dominion.Card.CardName cardName46 = dominion.Card.CardName.Silver;
    dominion.Card card47 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card40, cardName46);
    dominion.Card card48 = dominion.Card.getCard(list_card38, cardName46);
    dominion.Card.CardName cardName49 = dominion.Card.CardName.Mine;
    dominion.Card card50 = dominion.Card.getCard(list_card38, cardName49);
    dominion.Card card51 = dominion.Card.getCard(list_card6, cardName49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName7.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName16.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Province + "'", cardName24.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName26.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Province + "'", cardName33.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    org.junit.Assert.assertTrue("'" + type36 + "' != '" + dominion.Card.Type.TREASURE + "'", type36.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + dominion.Card.CardName.Province + "'", cardName42.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card43);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName44.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card45);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + dominion.Card.CardName.Silver + "'", cardName46.equals(dominion.Card.CardName.Silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card48);
    org.junit.Assert.assertTrue("'" + cardName49 + "' != '" + dominion.Card.CardName.Mine + "'", cardName49.equals(dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card51);

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test270"); }

    dominion.Randomness.totalCallsToRandom = ' ';

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test271"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    boolean b6 = gameState5.isGameOver();
    dominion.GameState gameState7 = null;
    dominion.Player player9 = new dominion.Player(gameState7, "");
    player9.playTreasureCard();
    gameState5.addPlayer(player9);
    java.lang.String str12 = gameState5.toString();
    java.util.List<dominion.Card> list_card13 = gameState5.pileRetrieve();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str12.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test272"); }

    dominion.Randomness.totalCallsToRandom = '#';

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test273"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    java.util.List<dominion.Card> list_card12 = gameState7.pileRetrieve();
    java.util.List<dominion.Card> list_card14 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card12, (java.lang.Integer)100);
    dominion.Card[] card_array15 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card16 = new java.util.ArrayList<dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card16, card_array15);
    dominion.Card.CardName cardName18 = dominion.Card.CardName.Province;
    dominion.Card card19 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card16, cardName18);
    dominion.Card card20 = dominion.Card.getCard(list_card14, cardName18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + dominion.Card.CardName.Province + "'", cardName18.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test274"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i17 = gameState16.embargoTokens;
    gameState7.embargoTokens = hashmap_card_i17;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState7.embargoTokens;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test275"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Province;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    java.util.List<dominion.Card> list_card15 = gameState14.cards;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i16 = gameState14.getWinners();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i17 = gameState14.embargoTokens;
    gameState7.embargoTokens = hashmap_card_i17;
    dominion.Player player20 = new dominion.Player(gameState7, " ---  --- hi! --- \nHand: []\nDiscard: [null]\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n");
    player20.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Province + "'", cardName12.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i17);

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test276"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    dominion.Card card10 = null;
    player9.trash(card10);
    dominion.Card card12 = null;
    player9.discard(card12);
    player9.buyCard();
    player9.playKingdomCard();
    dominion.Card card16 = null;
    player9.trash(card16);
    player9.playTreasureCard();
    player9.playKingdomCard();
    player9.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test277"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    boolean b11 = gameState7.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i13 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i14 = gameState7.gameBoard;
    dominion.Player player15 = null;
    dominion.Card card16 = null;
    // The following exception was thrown during execution in test generation
    try {
    gameState7.pollPile(player15, card16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i14);

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test278"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.List<dominion.Card> list_card10 = gameState7.pileRetrieve();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test279"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Card.Type type6 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card7 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type6);
    dominion.Card.CardName cardName8 = dominion.Card.CardName.Baron;
    dominion.Card card9 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName8);
    dominion.GameState gameState10 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + dominion.Card.Type.TREASURE + "'", type6.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + dominion.Card.CardName.Baron + "'", cardName8.equals(dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test280"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.CardName cardName5 = dominion.Card.CardName.Cutpurse;
    dominion.Card card6 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName5);
    java.util.List<dominion.Card> list_card8 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card1, (java.lang.Integer)23);
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    java.util.List<dominion.Card> list_card16 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card8, type14);
    dominion.GameState gameState17 = new dominion.GameState(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName5.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test281"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i17 = gameState16.embargoTokens;
    gameState7.embargoTokens = hashmap_card_i17;
    boolean b19 = gameState7.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState7.play();
    java.util.List<dominion.Player> list_player21 = null;
    gameState7.players = list_player21;
    java.util.List<dominion.Card> list_card23 = gameState7.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i24 = gameState7.embargoTokens;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i24);

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test282"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i10 = gameState7.getWinners();
    dominion.GameState gameState11 = gameState7.clone();
    boolean b12 = gameState7.isGameOver();
    java.lang.String str13 = gameState7.toString();
    gameState7.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str13.equals("The board game is empty you need to intialize the game!!!!"));

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test283"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.List<dominion.Card> list_card11 = gameState7.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i12 = gameState7.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i12);

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test284"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i10 = gameState7.getWinners();
    java.util.List<dominion.Player> list_player11 = gameState7.players;
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Council_Room;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.Card.Type type17 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card18 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card13, type17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState19.embargoTokens;
    boolean b21 = gameState19.isGameOver();
    boolean b22 = gameState19.isGameOver();
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Council_Room;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.Card.Type type28 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card24, type28);
    dominion.GameState gameState30 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card24);
    dominion.Player player32 = new dominion.Player(gameState30, "hi!");
    dominion.Card card33 = null;
    player32.trash(card33);
    dominion.Card card35 = null;
    player32.discard(card35);
    player32.buyCard();
    gameState19.addPlayer(player32);
    gameState7.addPlayer(player32);
    dominion.Card card40 = null;
    player32.discard(card40);
    player32.playTreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName15.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + dominion.Card.Type.TREASURE + "'", type17.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName26.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + dominion.Card.Type.TREASURE + "'", type28.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test285"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState5.getWinners();
    dominion.GameState gameState8 = gameState5.clone();
    java.util.List<dominion.Player> list_player9 = gameState5.players;
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Council_Room;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    dominion.Card.Type type15 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card16 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card11, type15);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card11);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i18 = gameState17.embargoTokens;
    java.util.List<dominion.Player> list_player19 = gameState17.players;
    dominion.Card[] card_array20 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card21 = new java.util.ArrayList<dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card21, card_array20);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Council_Room;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName23);
    dominion.Card.Type type25 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card26 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card21, type25);
    dominion.GameState gameState27 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i28 = gameState27.embargoTokens;
    java.util.List<dominion.Player> list_player29 = gameState27.players;
    gameState17.players = list_player29;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i31 = gameState17.embargoTokens;
    gameState5.embargoTokens = hashmap_card_i31;
    dominion.Card[] card_array33 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card34 = new java.util.ArrayList<dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card34, card_array33);
    dominion.Card.CardName cardName36 = dominion.Card.CardName.Province;
    dominion.Card card37 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card34, cardName36);
    dominion.GameState gameState38 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card34);
    boolean b39 = gameState38.isGameOver();
    dominion.GameState gameState40 = null;
    dominion.Player player42 = new dominion.Player(gameState40, "");
    player42.playTreasureCard();
    gameState38.addPlayer(player42);
    java.lang.String str45 = gameState38.toString();
    dominion.Card[] card_array46 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card47 = new java.util.ArrayList<dominion.Card>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card47, card_array46);
    dominion.Card.CardName cardName49 = dominion.Card.CardName.Council_Room;
    dominion.Card card50 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card47, cardName49);
    dominion.Card.Type type51 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card52 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card47, type51);
    dominion.GameState gameState53 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card47);
    gameState53.initializeGame();
    dominion.Card[] card_array55 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card56 = new java.util.ArrayList<dominion.Card>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card56, card_array55);
    dominion.Card.CardName cardName58 = dominion.Card.CardName.Council_Room;
    dominion.Card card59 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card56, cardName58);
    dominion.Card.Type type60 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card61 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card56, type60);
    dominion.GameState gameState62 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card56);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i63 = gameState62.embargoTokens;
    gameState53.embargoTokens = hashmap_card_i63;
    boolean b65 = gameState53.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i66 = gameState53.play();
    dominion.Card[] card_array67 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card68 = new java.util.ArrayList<dominion.Card>();
    boolean b69 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card68, card_array67);
    dominion.Card.CardName cardName70 = dominion.Card.CardName.Council_Room;
    dominion.Card card71 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card68, cardName70);
    dominion.Card.Type type72 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card73 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card68, type72);
    dominion.GameState gameState74 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card68);
    gameState74.initializeGame();
    dominion.Card[] card_array76 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card77 = new java.util.ArrayList<dominion.Card>();
    boolean b78 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card77, card_array76);
    dominion.Card.CardName cardName79 = dominion.Card.CardName.Council_Room;
    dominion.Card card80 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card77, cardName79);
    dominion.Card.Type type81 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card82 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card77, type81);
    dominion.GameState gameState83 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card77);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i84 = gameState83.embargoTokens;
    gameState74.embargoTokens = hashmap_card_i84;
    gameState53.gameBoard = hashmap_card_i84;
    gameState38.embargoTokens = hashmap_card_i84;
    java.util.List<dominion.Card> list_card88 = gameState38.cards;
    gameState5.cards = list_card88;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName13.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + dominion.Card.Type.TREASURE + "'", type15.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName23.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    org.junit.Assert.assertTrue("'" + type25 + "' != '" + dominion.Card.Type.TREASURE + "'", type25.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + dominion.Card.CardName.Province + "'", cardName36.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str45.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    org.junit.Assert.assertTrue("'" + cardName49 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName49.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card50);
    org.junit.Assert.assertTrue("'" + type51 + "' != '" + dominion.Card.Type.TREASURE + "'", type51.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName58.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card59);
    org.junit.Assert.assertTrue("'" + type60 + "' != '" + dominion.Card.Type.TREASURE + "'", type60.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    org.junit.Assert.assertTrue("'" + cardName70 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName70.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card71);
    org.junit.Assert.assertTrue("'" + type72 + "' != '" + dominion.Card.Type.TREASURE + "'", type72.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    org.junit.Assert.assertTrue("'" + cardName79 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName79.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card80);
    org.junit.Assert.assertTrue("'" + type81 + "' != '" + dominion.Card.Type.TREASURE + "'", type81.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card88);

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test286"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    java.util.List<dominion.Card> list_card6 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card1, (java.lang.Integer)11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test287"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    boolean b6 = gameState5.isGameOver();
    dominion.GameState gameState7 = null;
    dominion.Player player9 = new dominion.Player(gameState7, "");
    player9.playTreasureCard();
    gameState5.addPlayer(player9);
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Council_Room;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.Card.Type type17 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card18 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card13, type17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    dominion.Player player21 = new dominion.Player(gameState19, "hi!");
    dominion.Card card22 = null;
    player21.trash(card22);
    dominion.Card card24 = null;
    player21.discard(card24);
    gameState5.addPlayer(player21);
    player21.printStateGame();
    player21.playTreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName15.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + dominion.Card.Type.TREASURE + "'", type17.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test288"); }

    dominion.Randomness.reset((long)'#');

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test289"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    dominion.GameState gameState10 = gameState7.clone();
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Council_Room;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.Card.Type type16 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card17 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card12, type16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState18.embargoTokens;
    boolean b20 = gameState18.isGameOver();
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Province;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    java.util.List<dominion.Card> list_card27 = gameState26.cards;
    dominion.Card.Type type28 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card27, type28);
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Province;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card31);
    java.util.List<dominion.Card> list_card36 = gameState35.cards;
    dominion.Card.Type type37 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card38 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card36, type37);
    java.util.List<dominion.Card> list_card39 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card27, type37);
    gameState18.cards = list_card27;
    java.util.List<dominion.Card> list_card42 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card27, (java.lang.Integer)(-1));
    dominion.Card[] card_array43 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card44 = new java.util.ArrayList<dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card44, card_array43);
    dominion.Card.CardName cardName46 = dominion.Card.CardName.Province;
    dominion.Card card47 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card44, cardName46);
    dominion.Card.CardName cardName48 = dominion.Card.CardName.Cutpurse;
    dominion.Card card49 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card44, cardName48);
    java.util.List<dominion.Card> list_card51 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card44, (java.lang.Integer)23);
    dominion.Card[] card_array52 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card53 = new java.util.ArrayList<dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card53, card_array52);
    dominion.Card.CardName cardName55 = dominion.Card.CardName.Council_Room;
    dominion.Card card56 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card53, cardName55);
    dominion.Card.Type type57 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card58 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card53, type57);
    java.util.List<dominion.Card> list_card59 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card51, type57);
    java.util.List<dominion.Card> list_card60 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card42, type57);
    gameState7.cards = list_card42;
    boolean b62 = gameState7.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName14.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + type16 + "' != '" + dominion.Card.Type.TREASURE + "'", type16.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Province + "'", cardName24.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + dominion.Card.Type.VICTORY + "'", type28.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Province + "'", cardName33.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    org.junit.Assert.assertTrue("'" + type37 + "' != '" + dominion.Card.Type.VICTORY + "'", type37.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + dominion.Card.CardName.Province + "'", cardName46.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card47);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName48.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName55.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    org.junit.Assert.assertTrue("'" + type57 + "' != '" + dominion.Card.Type.TREASURE + "'", type57.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test290"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    gameState16.initializeGame();
    java.util.List<dominion.Player> list_player18 = gameState16.players;
    gameState7.players = list_player18;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState7.embargoTokens;
    java.util.List<dominion.Card> list_card21 = gameState7.cards;
    dominion.Card[] card_array22 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card23 = new java.util.ArrayList<dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card23, card_array22);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Council_Room;
    dominion.Card card26 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card23, cardName25);
    dominion.Card.Type type27 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card28 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card23, type27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card23);
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Council_Room;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    dominion.Card.Type type35 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card36 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card31, type35);
    dominion.GameState gameState37 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card31);
    gameState37.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i39 = gameState37.getWinners();
    java.util.List<dominion.Card> list_card40 = gameState37.cards;
    dominion.GameState gameState41 = new dominion.GameState(list_card40);
    gameState29.cards = list_card40;
    dominion.Card[] card_array43 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card44 = new java.util.ArrayList<dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card44, card_array43);
    dominion.Card.CardName cardName46 = dominion.Card.CardName.Province;
    dominion.Card card47 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card44, cardName46);
    dominion.Card.CardName cardName48 = dominion.Card.CardName.Cutpurse;
    dominion.Card card49 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card44, cardName48);
    java.util.List<dominion.Card> list_card51 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card44, (java.lang.Integer)23);
    dominion.Card[] card_array52 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card53 = new java.util.ArrayList<dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card53, card_array52);
    dominion.Card.CardName cardName55 = dominion.Card.CardName.Province;
    dominion.Card card56 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card53, cardName55);
    dominion.GameState gameState57 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card53);
    dominion.Card.Type type58 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card59 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card53, type58);
    java.util.List<dominion.Card> list_card60 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card44, type58);
    java.util.List<dominion.Card> list_card61 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card40, type58);
    java.util.List<dominion.Card> list_card62 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card21, type58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName25.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + type27 + "' != '" + dominion.Card.Type.TREASURE + "'", type27.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName33.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    org.junit.Assert.assertTrue("'" + type35 + "' != '" + dominion.Card.Type.TREASURE + "'", type35.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + dominion.Card.CardName.Province + "'", cardName46.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card47);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName48.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + dominion.Card.CardName.Province + "'", cardName55.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    org.junit.Assert.assertTrue("'" + type58 + "' != '" + dominion.Card.Type.TREASURE + "'", type58.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test291"); }

    java.lang.Iterable<dominion.Card> iterable_card0 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<dominion.Card> list_card2 = dominion.Card.priceCheck(iterable_card0, (java.lang.Integer)(-1));
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test292"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState(list_card6);
    dominion.Card.Type type8 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card9 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card6, type8);
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card10 = dominion.Randomness.randomMember(list_card6);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + type8 + "' != '" + dominion.Card.Type.TREASURE + "'", type8.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test293"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    boolean b9 = gameState7.isGameOver();
    boolean b10 = gameState7.isGameOver();
    gameState7.initializeGame();
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Council_Room;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.Card.Type type17 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card18 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card13, type17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    gameState19.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState19.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i22 = gameState19.gameBoard;
    java.util.List<dominion.Player> list_player23 = null;
    gameState19.players = list_player23;
    dominion.Card[] card_array25 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card26 = new java.util.ArrayList<dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card26, card_array25);
    dominion.Card.CardName cardName28 = dominion.Card.CardName.Council_Room;
    dominion.Card card29 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card26, cardName28);
    dominion.Card.Type type30 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card31 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card26, type30);
    dominion.GameState gameState32 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card26);
    gameState32.initializeGame();
    dominion.Card[] card_array34 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card35 = new java.util.ArrayList<dominion.Card>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card35, card_array34);
    dominion.Card.CardName cardName37 = dominion.Card.CardName.Council_Room;
    dominion.Card card38 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card35, cardName37);
    dominion.Card.Type type39 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card40 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card35, type39);
    dominion.GameState gameState41 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card35);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i42 = gameState41.embargoTokens;
    gameState32.embargoTokens = hashmap_card_i42;
    gameState19.gameBoard = hashmap_card_i42;
    gameState7.gameBoard = hashmap_card_i42;
    boolean b46 = gameState7.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName15.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + dominion.Card.Type.TREASURE + "'", type17.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName28.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + dominion.Card.Type.TREASURE + "'", type30.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName37.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    org.junit.Assert.assertTrue("'" + type39 + "' != '" + dominion.Card.Type.TREASURE + "'", type39.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test294"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.lang.String str6 = gameState5.toString();
    dominion.Card[] card_array7 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card8 = new java.util.ArrayList<dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card8, card_array7);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Council_Room;
    dominion.Card card11 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName10);
    gameState5.cards = arraylist_card8;
    dominion.GameState gameState13 = gameState5.clone();
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Province;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    java.util.List<dominion.Card> list_card20 = gameState19.cards;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState19.getWinners();
    dominion.GameState gameState22 = gameState19.clone();
    java.util.List<dominion.Card> list_card23 = gameState22.cards;
    dominion.Card[] card_array24 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card25 = new java.util.ArrayList<dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card25, card_array24);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Council_Room;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName27);
    dominion.Card.Type type29 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card30 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card25, type29);
    dominion.GameState gameState31 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card25);
    gameState31.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i33 = gameState31.getWinners();
    java.util.List<dominion.Card> list_card34 = gameState31.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i35 = gameState31.gameBoard;
    dominion.GameState gameState36 = null;
    dominion.Player player38 = new dominion.Player(gameState36, "");
    dominion.Card card39 = null;
    player38.trash(card39);
    dominion.Card card41 = null;
    player38.discard(card41);
    gameState31.addPlayer(player38);
    player38.playTreasureCard();
    gameState22.addPlayer(player38);
    dominion.Card card46 = null;
    // The following exception was thrown during execution in test generation
    try {
    gameState5.pollPile(player38, card46);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str6.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName10.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Province + "'", cardName17.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName27.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + type29 + "' != '" + dominion.Card.Type.TREASURE + "'", type29.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i35);

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test295"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Council_Room;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.Card.Type type16 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card17 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card12, type16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    gameState18.initializeGame();
    java.util.List<dominion.Player> list_player20 = gameState18.players;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState18.getWinners();
    java.util.List<dominion.Player> list_player22 = gameState18.players;
    gameState7.players = list_player22;
    java.util.List<dominion.Card> list_card24 = gameState7.pileRetrieve();
    dominion.GameState gameState25 = new dominion.GameState(list_card24);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Smithy;
    dominion.Card card27 = dominion.Card.getCard(list_card24, cardName26);
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card28 = dominion.Randomness.randomMember(list_card24);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName14.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + type16 + "' != '" + dominion.Card.Type.TREASURE + "'", type16.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName26.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test296"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    dominion.Card card10 = null;
    player9.trash(card10);
    player9.playKingdomCard();
    java.lang.String str13 = player9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + " --- hi! --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str13.equals(" --- hi! --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test297"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i17 = gameState16.embargoTokens;
    gameState7.embargoTokens = hashmap_card_i17;
    dominion.GameState gameState19 = gameState7.clone();
    java.util.List<dominion.Card> list_card20 = gameState7.cards;
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Council_Room;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.Card.Type type26 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card27 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card22, type26);
    dominion.GameState gameState28 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i29 = gameState28.embargoTokens;
    java.util.List<dominion.Player> list_player30 = gameState28.players;
    dominion.GameState gameState31 = null;
    dominion.Player player33 = new dominion.Player(gameState31, "");
    dominion.Card card34 = null;
    player33.trash(card34);
    java.lang.String str36 = player33.toString();
    gameState28.addPlayer(player33);
    gameState7.addPlayer(player33);
    java.lang.String str39 = player33.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName24.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + dominion.Card.Type.TREASURE + "'", type26.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str36.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str39.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test298"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Council_Room;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    dominion.Card.Type type15 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card16 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card11, type15);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card11);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i18 = gameState17.embargoTokens;
    java.util.List<dominion.Player> list_player19 = gameState17.players;
    gameState7.players = list_player19;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i21 = gameState7.embargoTokens;
    gameState7.initializeGame();
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Province;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.GameState gameState28 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card24);
    java.util.List<dominion.Card> list_card29 = gameState28.cards;
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Council_Room;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    dominion.Card.CardName cardName35 = dominion.Card.CardName.Mine;
    dominion.Card card36 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName35);
    gameState28.cards = arraylist_card31;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i38 = gameState28.gameBoard;
    gameState7.gameBoard = hashmap_card_i38;
    dominion.GameState gameState40 = null;
    dominion.Player player42 = new dominion.Player(gameState40, "");
    player42.playTreasureCard();
    java.lang.String str44 = player42.toString();
    player42.playTreasureCard();
    player42.playTreasureCard();
    dominion.Card card47 = null;
    // The following exception was thrown during execution in test generation
    try {
    gameState7.pollPile(player42, card47);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName13.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + dominion.Card.Type.TREASURE + "'", type15.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Province + "'", cardName26.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName33.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + dominion.Card.CardName.Mine + "'", cardName35.equals(dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str44.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test299"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    dominion.GameState gameState10 = gameState7.clone();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test300"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    dominion.Card.Type type7 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card8 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card6, type7);
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Province;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    java.util.List<dominion.Card> list_card15 = gameState14.cards;
    dominion.Card.Type type16 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card17 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card15, type16);
    java.util.List<dominion.Card> list_card18 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card6, type16);
    dominion.GameState gameState19 = new dominion.GameState(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + dominion.Card.Type.VICTORY + "'", type7.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Province + "'", cardName12.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    org.junit.Assert.assertTrue("'" + type16 + "' != '" + dominion.Card.Type.VICTORY + "'", type16.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test301"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i12 = null;
    gameState7.gameBoard = hashmap_card_i12;
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Province;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    java.lang.String str20 = gameState19.toString();
    gameState19.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i22 = gameState19.gameBoard;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i23 = gameState19.play();
    dominion.GameState gameState24 = gameState19.clone();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i25 = gameState19.embargoTokens;
    gameState7.gameBoard = hashmap_card_i25;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Province + "'", cardName17.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str20.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i25);

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test302"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.lang.String str6 = gameState5.toString();
    dominion.Card[] card_array7 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card8 = new java.util.ArrayList<dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card8, card_array7);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Province;
    dominion.Card card11 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName10);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Cutpurse;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName12);
    java.util.List<dominion.Card> list_card15 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card8, (java.lang.Integer)23);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Province;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    dominion.GameState gameState21 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card17);
    dominion.Card.Type type22 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card23 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type22);
    java.util.List<dominion.Card> list_card24 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card8, type22);
    gameState5.cards = list_card24;
    dominion.Player player27 = new dominion.Player(gameState5, "The board game is empty you need to intialize the game!!!!");
    player27.printStateGame();
    player27.buyCard();
    dominion.Card card30 = null;
    player27.discard(card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str6.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Province + "'", cardName10.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName12.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Province + "'", cardName19.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + dominion.Card.Type.TREASURE + "'", type22.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test303"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.lang.String str6 = gameState5.toString();
    gameState5.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState5.gameBoard;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState5.play();
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Council_Room;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    dominion.Card.Type type15 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card16 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card11, type15);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card11);
    gameState17.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i19 = gameState17.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState17.getWinners();
    dominion.GameState gameState21 = gameState17.clone();
    dominion.Card[] card_array22 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card23 = new java.util.ArrayList<dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card23, card_array22);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Council_Room;
    dominion.Card card26 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card23, cardName25);
    dominion.Card.Type type27 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card28 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card23, type27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card23);
    gameState29.initializeGame();
    java.util.List<dominion.Player> list_player31 = gameState29.players;
    java.util.List<dominion.Card> list_card32 = gameState29.cards;
    boolean b33 = gameState29.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i34 = gameState29.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i35 = gameState29.gameBoard;
    gameState21.embargoTokens = hashmap_card_i35;
    gameState5.embargoTokens = hashmap_card_i35;
    java.util.List<dominion.Player> list_player38 = null;
    gameState5.players = list_player38;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str6.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName13.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + dominion.Card.Type.TREASURE + "'", type15.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName25.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + type27 + "' != '" + dominion.Card.Type.TREASURE + "'", type27.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i35);

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test304"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    boolean b6 = gameState5.isGameOver();
    dominion.GameState gameState7 = null;
    dominion.Player player9 = new dominion.Player(gameState7, "");
    player9.playTreasureCard();
    gameState5.addPlayer(player9);
    java.lang.String str12 = gameState5.toString();
    dominion.Player player14 = new dominion.Player(gameState5, " --- hi! --- \nHand: []\nDiscard: [null]\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n");
    dominion.GameState gameState15 = null;
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player17.playTreasureCard();
    dominion.Card card19 = null;
    player17.trash(card19);
    player17.playKingdomCard();
    gameState5.addPlayer(player17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str12.equals("The board game is empty you need to intialize the game!!!!"));

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test305"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    dominion.Card card10 = null;
    player9.trash(card10);
    player9.printStateGame();
    player9.buyCard();
    player9.printStateGame();
    player9.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test306"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i9 = gameState7.embargoTokens;
    boolean b10 = gameState7.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i11 = gameState7.play();
    dominion.GameState gameState12 = gameState7.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState12);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test307"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState(list_card6);
    dominion.Card.Type type8 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card9 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card6, type8);
    java.util.List<dominion.Card> list_card11 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card6, (java.lang.Integer)0);
    java.util.List<dominion.Card> list_card13 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card11, (java.lang.Integer)13);
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card14 = dominion.Randomness.randomMember(list_card11);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + type8 + "' != '" + dominion.Card.Type.TREASURE + "'", type8.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test308"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    boolean b9 = gameState7.isGameOver();
    boolean b10 = gameState7.isGameOver();
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    gameState7.cards = arraylist_card12;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i15 = gameState7.embargoTokens;
    dominion.Player player17 = new dominion.Player(gameState7, "hi!");
    dominion.Card[] card_array18 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card19 = new java.util.ArrayList<dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card19, card_array18);
    dominion.Card.CardName cardName21 = dominion.Card.CardName.Council_Room;
    dominion.Card card22 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card19, cardName21);
    dominion.Card.Type type23 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card24 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card19, type23);
    dominion.GameState gameState25 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card19);
    gameState25.initializeGame();
    dominion.Player player28 = new dominion.Player(gameState25, "");
    dominion.Card[] card_array29 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card30 = new java.util.ArrayList<dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card30, card_array29);
    dominion.Card.CardName cardName32 = dominion.Card.CardName.Council_Room;
    dominion.Card card33 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card30, cardName32);
    dominion.Card.Type type34 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card35 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card30, type34);
    dominion.GameState gameState36 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.Player player38 = new dominion.Player(gameState36, "hi!");
    dominion.Card card39 = null;
    player38.trash(card39);
    player38.printStateGame();
    player38.buyCard();
    player38.printStateGame();
    gameState25.addPlayer(player38);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i45 = gameState25.gameBoard;
    gameState7.embargoTokens = hashmap_card_i45;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName21.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    org.junit.Assert.assertTrue("'" + type23 + "' != '" + dominion.Card.Type.TREASURE + "'", type23.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName32.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    org.junit.Assert.assertTrue("'" + type34 + "' != '" + dominion.Card.Type.TREASURE + "'", type34.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i45);

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test309"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    dominion.GameState gameState11 = new dominion.GameState(list_card10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i12 = gameState11.gameBoard;
    dominion.GameState gameState13 = null;
    dominion.Player player15 = new dominion.Player(gameState13, "");
    player15.playTreasureCard();
    dominion.Card card17 = null;
    player15.trash(card17);
    gameState11.addPlayer(player15);
    dominion.GameState gameState20 = gameState11.clone();
    java.lang.String str21 = gameState11.toString();
    java.lang.String str22 = gameState11.toString();
    java.util.List<dominion.Player> list_player23 = gameState11.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str21.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str22.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player23);

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test310"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i10 = gameState7.play();
    java.util.List<dominion.Card> list_card11 = gameState7.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test311"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    dominion.GameState gameState7 = gameState5.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState7);

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test312"); }

    dominion.Randomness.totalCallsToRandom = (short)-1;

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test313"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Council_Room;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    dominion.Card.Type type15 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card16 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card11, type15);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card11);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i18 = gameState17.embargoTokens;
    java.util.List<dominion.Player> list_player19 = gameState17.players;
    gameState7.players = list_player19;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i21 = gameState7.embargoTokens;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i22 = gameState7.embargoTokens;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName13.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + dominion.Card.Type.TREASURE + "'", type15.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i22);

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test314"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    boolean b9 = gameState7.isGameOver();
    boolean b10 = gameState7.isGameOver();
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    gameState7.cards = arraylist_card12;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i15 = gameState7.embargoTokens;
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Council_Room;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    dominion.Card.Type type21 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card22 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type21);
    dominion.GameState gameState23 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card17);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i24 = gameState23.embargoTokens;
    boolean b25 = gameState23.isGameOver();
    java.util.List<dominion.Player> list_player26 = gameState23.players;
    gameState7.players = list_player26;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName19.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + type21 + "' != '" + dominion.Card.Type.TREASURE + "'", type21.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player26);

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test315"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trash(card3);
    player2.buyCard();
    java.lang.String str6 = player2.toString();
    dominion.Card card7 = null;
    player2.discard(card7);
    player2.playTreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str6.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test316"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    dominion.Card card10 = null;
    player9.trash(card10);
    dominion.Card card12 = null;
    player9.discard(card12);
    player9.playTreasureCard();
    java.lang.String str15 = player9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + " --- hi! --- \nHand: []\nDiscard: [null]\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str15.equals(" --- hi! --- \nHand: []\nDiscard: [null]\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test317"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Council_Room;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.Card.Type type17 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card18 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card13, type17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState19.embargoTokens;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i21 = gameState19.embargoTokens;
    gameState7.gameBoard = hashmap_card_i21;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i23 = gameState7.play();
    dominion.GameState gameState24 = null;
    dominion.Player player26 = new dominion.Player(gameState24, "");
    player26.playTreasureCard();
    dominion.Card card28 = null;
    player26.trash(card28);
    gameState7.addPlayer(player26);
    java.lang.String str31 = gameState7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName15.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + dominion.Card.Type.TREASURE + "'", type17.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str31.equals("The board game is empty you need to intialize the game!!!!"));

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test318"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    gameState5.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState5.play();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    gameState16.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i18 = gameState16.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState16.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState16.gameBoard;
    java.lang.String str21 = gameState16.toString();
    java.lang.String str22 = gameState16.toString();
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Council_Room;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.Card.Type type28 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card24, type28);
    dominion.GameState gameState30 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card24);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i31 = gameState30.embargoTokens;
    gameState16.embargoTokens = hashmap_card_i31;
    gameState5.gameBoard = hashmap_card_i31;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str21.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str22.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName26.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + dominion.Card.Type.TREASURE + "'", type28.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i31);

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test319"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    java.util.List<dominion.Card> list_card12 = gameState7.pileRetrieve();
    java.util.List<dominion.Card> list_card14 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card12, (java.lang.Integer)100);
    dominion.Card[] card_array15 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card16 = new java.util.ArrayList<dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card16, card_array15);
    dominion.Card.CardName cardName18 = dominion.Card.CardName.Province;
    dominion.Card card19 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card16, cardName18);
    dominion.GameState gameState20 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card16);
    java.util.List<dominion.Card> list_card21 = gameState20.cards;
    dominion.Card.Type type22 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card23 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card21, type22);
    dominion.Card[] card_array24 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card25 = new java.util.ArrayList<dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card25, card_array24);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Province;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card25);
    java.util.List<dominion.Card> list_card30 = gameState29.cards;
    dominion.Card.Type type31 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card32 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card30, type31);
    java.util.List<dominion.Card> list_card33 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card23, type31);
    java.util.List<dominion.Card> list_card34 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card12, type31);
    dominion.Card.CardName cardName35 = dominion.Card.CardName.Remodel;
    dominion.Card card36 = dominion.Card.getCard(list_card34, cardName35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + dominion.Card.CardName.Province + "'", cardName18.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + dominion.Card.Type.VICTORY + "'", type22.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Province + "'", cardName27.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    org.junit.Assert.assertTrue("'" + type31 + "' != '" + dominion.Card.Type.VICTORY + "'", type31.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + dominion.Card.CardName.Remodel + "'", cardName35.equals(dominion.Card.CardName.Remodel));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test320"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState5.getWinners();
    dominion.GameState gameState8 = gameState5.clone();
    java.util.List<dominion.Card> list_card9 = gameState8.cards;
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Council_Room;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    dominion.Card.Type type15 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card16 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card11, type15);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card11);
    gameState17.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i19 = gameState17.getWinners();
    java.util.List<dominion.Card> list_card20 = gameState17.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i21 = gameState17.gameBoard;
    dominion.GameState gameState22 = null;
    dominion.Player player24 = new dominion.Player(gameState22, "");
    dominion.Card card25 = null;
    player24.trash(card25);
    dominion.Card card27 = null;
    player24.discard(card27);
    gameState17.addPlayer(player24);
    player24.playTreasureCard();
    gameState8.addPlayer(player24);
    java.util.List<dominion.Player> list_player32 = gameState8.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName13.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + dominion.Card.Type.TREASURE + "'", type15.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player32);

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test321"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    boolean b10 = gameState7.isGameOver();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    dominion.GameState gameState12 = gameState7.clone();
    dominion.Card[] card_array13 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card14 = new java.util.ArrayList<dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card14, card_array13);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Council_Room;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card14, cardName16);
    dominion.Card.Type type18 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card19 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card14, type18);
    dominion.GameState gameState20 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card14);
    gameState20.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i22 = gameState20.getWinners();
    java.util.List<dominion.Card> list_card23 = gameState20.cards;
    dominion.GameState gameState24 = new dominion.GameState(list_card23);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i25 = gameState24.gameBoard;
    dominion.GameState gameState26 = null;
    dominion.Player player28 = new dominion.Player(gameState26, "");
    player28.playTreasureCard();
    dominion.Card card30 = null;
    player28.trash(card30);
    gameState24.addPlayer(player28);
    gameState7.addPlayer(player28);
    java.lang.String str34 = player28.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName16.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    org.junit.Assert.assertTrue("'" + type18 + "' != '" + dominion.Card.Type.TREASURE + "'", type18.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str34.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test322"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    dominion.Card.Type type7 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card8 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card6, type7);
    java.util.List<dominion.Card> list_card10 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card8, (java.lang.Integer)10);
    dominion.GameState gameState11 = new dominion.GameState(list_card10);
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card12 = dominion.Randomness.randomMember(list_card10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + dominion.Card.Type.VICTORY + "'", type7.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test323"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Council_Room;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    dominion.Card.Type type15 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card16 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card11, type15);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card11);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i18 = gameState17.embargoTokens;
    java.util.List<dominion.Player> list_player19 = gameState17.players;
    gameState7.players = list_player19;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i21 = gameState7.embargoTokens;
    gameState7.initializeGame();
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Council_Room;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.Card.Type type28 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card24, type28);
    dominion.GameState gameState30 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card24);
    gameState30.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i32 = gameState30.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i33 = gameState30.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = gameState30.gameBoard;
    gameState7.gameBoard = hashmap_card_i34;
    dominion.GameState gameState36 = gameState7.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName13.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + dominion.Card.Type.TREASURE + "'", type15.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName26.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + dominion.Card.Type.TREASURE + "'", type28.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState36);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test324"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.lang.String str6 = gameState5.toString();
    gameState5.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState5.gameBoard;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState5.play();
    dominion.GameState gameState10 = gameState5.clone();
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Province;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    java.lang.String str17 = gameState16.toString();
    dominion.Card[] card_array18 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card19 = new java.util.ArrayList<dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card19, card_array18);
    dominion.Card.CardName cardName21 = dominion.Card.CardName.Province;
    dominion.Card card22 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card19, cardName21);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Cutpurse;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card19, cardName23);
    java.util.List<dominion.Card> list_card26 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card19, (java.lang.Integer)23);
    dominion.Card[] card_array27 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card28 = new java.util.ArrayList<dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card28, card_array27);
    dominion.Card.CardName cardName30 = dominion.Card.CardName.Province;
    dominion.Card card31 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card28, cardName30);
    dominion.GameState gameState32 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card28);
    dominion.Card.Type type33 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card34 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card28, type33);
    java.util.List<dominion.Card> list_card35 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card19, type33);
    gameState16.cards = list_card35;
    dominion.Player player38 = new dominion.Player(gameState16, "The board game is empty you need to intialize the game!!!!");
    dominion.Card card39 = null;
    player38.trash(card39);
    player38.buyCard();
    player38.buyCard();
    gameState10.addPlayer(player38);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i44 = gameState10.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str6.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Province + "'", cardName14.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str17.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + dominion.Card.CardName.Province + "'", cardName21.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName23.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + dominion.Card.CardName.Province + "'", cardName30.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    org.junit.Assert.assertTrue("'" + type33 + "' != '" + dominion.Card.Type.TREASURE + "'", type33.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i44);

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test325"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Province;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Cutpurse;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName16);
    java.util.List<dominion.Card> list_card19 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card12, (java.lang.Integer)23);
    dominion.Card[] card_array20 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card21 = new java.util.ArrayList<dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card21, card_array20);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Council_Room;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName23);
    dominion.Card.Type type25 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card26 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card21, type25);
    java.util.List<dominion.Card> list_card27 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card19, type25);
    java.util.List<dominion.Card> list_card28 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card10, type25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Province + "'", cardName14.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName16.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName23.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    org.junit.Assert.assertTrue("'" + type25 + "' != '" + dominion.Card.Type.TREASURE + "'", type25.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test326"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState5.initializeGame();
    java.lang.String str7 = gameState5.toString();
    java.util.List<dominion.Player> list_player8 = gameState5.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str7.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player8);

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test327"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.List<dominion.Card> list_card11 = gameState7.cards;
    gameState7.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i13 = gameState7.gameBoard;
    dominion.GameState gameState14 = null;
    dominion.Player player16 = new dominion.Player(gameState14, "");
    player16.playTreasureCard();
    dominion.Card card18 = null;
    player16.trash(card18);
    gameState7.addPlayer(player16);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i21 = gameState7.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i21);

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test328"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    dominion.GameState gameState11 = new dominion.GameState(list_card10);
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Council_Room;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.Card.Type type17 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card18 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card13, type17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    gameState19.initializeGame();
    java.util.List<dominion.Player> list_player21 = gameState19.players;
    java.util.List<dominion.Card> list_card22 = gameState19.cards;
    boolean b23 = gameState19.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i24 = gameState19.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i25 = gameState19.gameBoard;
    gameState11.gameBoard = hashmap_card_i25;
    boolean b27 = gameState11.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName15.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + dominion.Card.Type.TREASURE + "'", type17.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test329"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    dominion.GameState gameState11 = new dominion.GameState(list_card10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i12 = gameState11.gameBoard;
    dominion.GameState gameState13 = null;
    dominion.Player player15 = new dominion.Player(gameState13, "");
    player15.playTreasureCard();
    dominion.Card card17 = null;
    player15.trash(card17);
    gameState11.addPlayer(player15);
    dominion.GameState gameState20 = gameState11.clone();
    java.lang.String str21 = gameState11.toString();
    dominion.Card[] card_array22 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card23 = new java.util.ArrayList<dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card23, card_array22);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Council_Room;
    dominion.Card card26 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card23, cardName25);
    dominion.Card.Type type27 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card28 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card23, type27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card23);
    gameState29.initializeGame();
    dominion.Card[] card_array31 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card32 = new java.util.ArrayList<dominion.Card>();
    boolean b33 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card32, card_array31);
    dominion.Card.CardName cardName34 = dominion.Card.CardName.Council_Room;
    dominion.Card card35 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card32, cardName34);
    dominion.Card.Type type36 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card37 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card32, type36);
    dominion.GameState gameState38 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card32);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i39 = gameState38.embargoTokens;
    gameState29.embargoTokens = hashmap_card_i39;
    boolean b41 = gameState29.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i42 = gameState29.play();
    dominion.Card[] card_array43 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card44 = new java.util.ArrayList<dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card44, card_array43);
    dominion.Card.CardName cardName46 = dominion.Card.CardName.Council_Room;
    dominion.Card card47 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card44, cardName46);
    dominion.Card.Type type48 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card49 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card44, type48);
    dominion.GameState gameState50 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card44);
    gameState50.initializeGame();
    dominion.Card[] card_array52 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card53 = new java.util.ArrayList<dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card53, card_array52);
    dominion.Card.CardName cardName55 = dominion.Card.CardName.Council_Room;
    dominion.Card card56 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card53, cardName55);
    dominion.Card.Type type57 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card58 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card53, type57);
    dominion.GameState gameState59 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card53);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i60 = gameState59.embargoTokens;
    gameState50.embargoTokens = hashmap_card_i60;
    gameState29.gameBoard = hashmap_card_i60;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i63 = gameState29.gameBoard;
    gameState11.embargoTokens = hashmap_card_i63;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str21.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName25.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + type27 + "' != '" + dominion.Card.Type.TREASURE + "'", type27.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName34.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card35);
    org.junit.Assert.assertTrue("'" + type36 + "' != '" + dominion.Card.Type.TREASURE + "'", type36.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName46.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card47);
    org.junit.Assert.assertTrue("'" + type48 + "' != '" + dominion.Card.Type.TREASURE + "'", type48.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName55.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    org.junit.Assert.assertTrue("'" + type57 + "' != '" + dominion.Card.Type.TREASURE + "'", type57.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i63);

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test330"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, " --- The board game is empty you need to intialize the game!!!! --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n");

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test331"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    boolean b10 = gameState7.isGameOver();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    dominion.GameState gameState12 = gameState7.clone();
    dominion.Card[] card_array13 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card14 = new java.util.ArrayList<dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card14, card_array13);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Council_Room;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card14, cardName16);
    dominion.Card.Type type18 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card19 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card14, type18);
    dominion.GameState gameState20 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card14);
    gameState20.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i22 = gameState20.getWinners();
    java.util.List<dominion.Card> list_card23 = gameState20.cards;
    dominion.GameState gameState24 = new dominion.GameState(list_card23);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i25 = gameState24.gameBoard;
    dominion.GameState gameState26 = null;
    dominion.Player player28 = new dominion.Player(gameState26, "");
    player28.playTreasureCard();
    dominion.Card card30 = null;
    player28.trash(card30);
    gameState24.addPlayer(player28);
    gameState7.addPlayer(player28);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = gameState7.embargoTokens;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName16.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    org.junit.Assert.assertTrue("'" + type18 + "' != '" + dominion.Card.Type.TREASURE + "'", type18.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i34);

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test332"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.CardName cardName5 = dominion.Card.CardName.Cutpurse;
    dominion.Card card6 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Card[] card_array8 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card9 = new java.util.ArrayList<dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card9, card_array8);
    dominion.Card.CardName cardName11 = dominion.Card.CardName.Province;
    dominion.Card card12 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card9, cardName11);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Cutpurse;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card9, cardName13);
    java.util.List<dominion.Card> list_card16 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card9, (java.lang.Integer)23);
    dominion.Card[] card_array17 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card18 = new java.util.ArrayList<dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card18, card_array17);
    dominion.Card.CardName cardName20 = dominion.Card.CardName.Province;
    dominion.Card card21 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card18, cardName20);
    dominion.GameState gameState22 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card18);
    dominion.Card.Type type23 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card24 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card18, type23);
    java.util.List<dominion.Card> list_card25 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card9, type23);
    java.util.List<dominion.Card> list_card26 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName5.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + dominion.Card.CardName.Province + "'", cardName11.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName13.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + dominion.Card.CardName.Province + "'", cardName20.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    org.junit.Assert.assertTrue("'" + type23 + "' != '" + dominion.Card.Type.TREASURE + "'", type23.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test333"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    dominion.Card[] card_array7 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card8 = new java.util.ArrayList<dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card8, card_array7);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Council_Room;
    dominion.Card card11 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName10);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Mine;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName12);
    gameState5.cards = arraylist_card8;
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card8);
    java.util.List<dominion.Card> list_card16 = gameState15.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName10.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Mine + "'", cardName12.equals(dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test334"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    player2.playTreasureCard();
    java.lang.String str4 = player2.toString();
    player2.buyCard();
    player2.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str4.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test335"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    dominion.GameState gameState11 = new dominion.GameState(list_card10);
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Council_Room;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.Card.Type type17 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card18 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card13, type17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    gameState19.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState19.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i22 = gameState19.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i23 = gameState19.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i24 = null;
    gameState19.gameBoard = hashmap_card_i24;
    dominion.Card[] card_array26 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card27 = new java.util.ArrayList<dominion.Card>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card27, card_array26);
    dominion.Card.CardName cardName29 = dominion.Card.CardName.Province;
    dominion.Card card30 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card27, cardName29);
    dominion.GameState gameState31 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card27);
    java.lang.String str32 = gameState31.toString();
    gameState31.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = gameState31.gameBoard;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i35 = gameState31.play();
    dominion.GameState gameState36 = gameState31.clone();
    dominion.GameState gameState37 = gameState31.clone();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i38 = gameState37.embargoTokens;
    gameState19.embargoTokens = hashmap_card_i38;
    gameState11.gameBoard = hashmap_card_i38;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName15.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + dominion.Card.Type.TREASURE + "'", type17.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + dominion.Card.CardName.Province + "'", cardName29.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str32.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i38);

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test336"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    boolean b9 = gameState7.isGameOver();
    boolean b10 = gameState7.isGameOver();
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Council_Room;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.Card.Type type16 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card17 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card12, type16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState18.embargoTokens;
    boolean b20 = gameState18.isGameOver();
    boolean b21 = gameState18.isGameOver();
    dominion.Card[] card_array22 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card23 = new java.util.ArrayList<dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card23, card_array22);
    gameState18.cards = arraylist_card23;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i26 = gameState18.embargoTokens;
    gameState7.embargoTokens = hashmap_card_i26;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i28 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i29 = gameState7.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName14.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + type16 + "' != '" + dominion.Card.Type.TREASURE + "'", type16.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i29);

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test337"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    boolean b6 = gameState5.isGameOver();
    dominion.GameState gameState7 = null;
    dominion.Player player9 = new dominion.Player(gameState7, "");
    player9.playTreasureCard();
    gameState5.addPlayer(player9);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState5.getWinners();
    dominion.Card[] card_array13 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card14 = new java.util.ArrayList<dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card14, card_array13);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Council_Room;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card14, cardName16);
    dominion.Card.Type type18 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card19 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card14, type18);
    dominion.GameState gameState20 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card14);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i21 = gameState20.embargoTokens;
    java.util.List<dominion.Player> list_player22 = gameState20.players;
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Council_Room;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.Card.Type type28 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card24, type28);
    dominion.GameState gameState30 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card24);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i31 = gameState30.embargoTokens;
    java.util.List<dominion.Player> list_player32 = gameState30.players;
    gameState20.players = list_player32;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = gameState20.embargoTokens;
    gameState5.embargoTokens = hashmap_card_i34;
    dominion.GameState gameState36 = null;
    dominion.Player player38 = new dominion.Player(gameState36, "");
    player38.playTreasureCard();
    java.lang.String str40 = player38.toString();
    player38.buyCard();
    gameState5.addPlayer(player38);
    dominion.Card[] card_array43 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card44 = new java.util.ArrayList<dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card44, card_array43);
    dominion.Card.CardName cardName46 = dominion.Card.CardName.Council_Room;
    dominion.Card card47 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card44, cardName46);
    dominion.Card.Type type48 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card49 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card44, type48);
    dominion.GameState gameState50 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card44);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i51 = gameState50.embargoTokens;
    java.util.List<dominion.Player> list_player52 = gameState50.players;
    dominion.GameState gameState53 = null;
    dominion.Player player55 = new dominion.Player(gameState53, "");
    dominion.Card card56 = null;
    player55.trash(card56);
    java.lang.String str58 = player55.toString();
    gameState50.addPlayer(player55);
    player55.playKingdomCard();
    gameState5.addPlayer(player55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName16.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    org.junit.Assert.assertTrue("'" + type18 + "' != '" + dominion.Card.Type.TREASURE + "'", type18.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName26.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + dominion.Card.Type.TREASURE + "'", type28.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str40.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName46.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card47);
    org.junit.Assert.assertTrue("'" + type48 + "' != '" + dominion.Card.Type.TREASURE + "'", type48.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str58.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test338"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Council_Room;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.Card.Type type16 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card17 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card12, type16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    gameState18.initializeGame();
    java.util.List<dominion.Player> list_player20 = gameState18.players;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState18.getWinners();
    java.util.List<dominion.Player> list_player22 = gameState18.players;
    gameState7.players = list_player22;
    java.util.List<dominion.Card> list_card24 = gameState7.pileRetrieve();
    dominion.GameState gameState25 = new dominion.GameState(list_card24);
    dominion.GameState gameState26 = new dominion.GameState(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName14.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + type16 + "' != '" + dominion.Card.Type.TREASURE + "'", type16.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test339"); }

    int i1 = dominion.Randomness.nextRandomInt((int)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test340"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Council_Room;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    dominion.Card.Type type15 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card16 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card11, type15);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card11);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i18 = gameState17.embargoTokens;
    java.util.List<dominion.Player> list_player19 = gameState17.players;
    gameState7.players = list_player19;
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Council_Room;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.Card.Type type26 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card27 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card22, type26);
    dominion.GameState gameState28 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    gameState28.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i30 = gameState28.getWinners();
    java.util.List<dominion.Card> list_card31 = gameState28.cards;
    dominion.GameState gameState32 = gameState28.clone();
    dominion.Card[] card_array33 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card34 = new java.util.ArrayList<dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card34, card_array33);
    dominion.Card.CardName cardName36 = dominion.Card.CardName.Council_Room;
    dominion.Card card37 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card34, cardName36);
    dominion.Card.Type type38 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card39 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card34, type38);
    dominion.GameState gameState40 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card34);
    gameState40.initializeGame();
    dominion.Card[] card_array42 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card43 = new java.util.ArrayList<dominion.Card>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card43, card_array42);
    dominion.Card.CardName cardName45 = dominion.Card.CardName.Council_Room;
    dominion.Card card46 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card43, cardName45);
    dominion.Card.Type type47 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card48 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card43, type47);
    dominion.GameState gameState49 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card43);
    gameState49.initializeGame();
    java.util.List<dominion.Player> list_player51 = gameState49.players;
    gameState40.players = list_player51;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i53 = gameState40.embargoTokens;
    gameState28.embargoTokens = hashmap_card_i53;
    gameState7.embargoTokens = hashmap_card_i53;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName13.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + dominion.Card.Type.TREASURE + "'", type15.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName24.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + dominion.Card.Type.TREASURE + "'", type26.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName36.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    org.junit.Assert.assertTrue("'" + type38 + "' != '" + dominion.Card.Type.TREASURE + "'", type38.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    org.junit.Assert.assertTrue("'" + cardName45 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName45.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card46);
    org.junit.Assert.assertTrue("'" + type47 + "' != '" + dominion.Card.Type.TREASURE + "'", type47.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i53);

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test341"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    gameState5.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState5.play();
    java.lang.String str9 = gameState5.toString();
    dominion.Player player11 = new dominion.Player(gameState5, "");
    dominion.Card card12 = null;
    player11.discard(card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str9.equals("The board game is empty you need to intialize the game!!!!"));

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test342"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    boolean b6 = gameState5.isGameOver();
    dominion.GameState gameState7 = null;
    dominion.Player player9 = new dominion.Player(gameState7, "");
    player9.playTreasureCard();
    gameState5.addPlayer(player9);
    java.lang.String str12 = gameState5.toString();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i13 = gameState5.play();
    boolean b14 = gameState5.isGameOver();
    boolean b15 = gameState5.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str12.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test343"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    dominion.GameState gameState11 = gameState7.clone();
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Province;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    java.lang.String str18 = gameState17.toString();
    gameState17.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState17.gameBoard;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState17.play();
    java.util.List<dominion.Player> list_player22 = gameState17.players;
    gameState11.players = list_player22;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Province + "'", cardName15.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str18.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player22);

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test344"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    boolean b6 = gameState5.isGameOver();
    dominion.GameState gameState7 = null;
    dominion.Player player9 = new dominion.Player(gameState7, "");
    player9.playTreasureCard();
    gameState5.addPlayer(player9);
    java.lang.String str12 = gameState5.toString();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i13 = gameState5.play();
    boolean b14 = gameState5.isGameOver();
    dominion.Card[] card_array15 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card16 = new java.util.ArrayList<dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card16, card_array15);
    dominion.Card.CardName cardName18 = dominion.Card.CardName.Council_Room;
    dominion.Card card19 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card16, cardName18);
    dominion.Card.Type type20 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card21 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card16, type20);
    dominion.GameState gameState22 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card16);
    gameState22.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i24 = gameState22.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i25 = gameState22.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i26 = gameState22.gameBoard;
    java.lang.String str27 = gameState22.toString();
    java.lang.String str28 = gameState22.toString();
    dominion.Player player30 = new dominion.Player(gameState22, " --- hi! --- \nHand: []\nDiscard: [null]\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n");
    gameState5.addPlayer(player30);
    dominion.Card card32 = null;
    player30.discard(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str12.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName18.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    org.junit.Assert.assertTrue("'" + type20 + "' != '" + dominion.Card.Type.TREASURE + "'", type20.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str27.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str28.equals("The board game is empty you need to intialize the game!!!!"));

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test345"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i10 = gameState7.getWinners();
    dominion.GameState gameState11 = gameState7.clone();
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Council_Room;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.Card.Type type17 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card18 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card13, type17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    gameState19.initializeGame();
    java.util.List<dominion.Player> list_player21 = gameState19.players;
    java.util.List<dominion.Card> list_card22 = gameState19.cards;
    boolean b23 = gameState19.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i24 = gameState19.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i25 = gameState19.gameBoard;
    gameState11.embargoTokens = hashmap_card_i25;
    dominion.Card[] card_array27 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card28 = new java.util.ArrayList<dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card28, card_array27);
    dominion.Card.CardName cardName30 = dominion.Card.CardName.Council_Room;
    dominion.Card card31 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card28, cardName30);
    dominion.Card.Type type32 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card33 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card28, type32);
    dominion.GameState gameState34 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card28);
    gameState34.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i36 = gameState34.getWinners();
    dominion.Card[] card_array37 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card38 = new java.util.ArrayList<dominion.Card>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card38, card_array37);
    dominion.Card.CardName cardName40 = dominion.Card.CardName.Council_Room;
    dominion.Card card41 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card38, cardName40);
    dominion.Card.Type type42 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card43 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card38, type42);
    dominion.GameState gameState44 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card38);
    gameState44.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i46 = gameState44.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i47 = gameState44.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i48 = gameState44.gameBoard;
    java.util.List<dominion.Card> list_card49 = gameState44.pileRetrieve();
    java.util.List<dominion.Card> list_card51 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card49, (java.lang.Integer)100);
    java.util.List<dominion.Card> list_card53 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card51, (java.lang.Integer)1);
    gameState34.cards = list_card51;
    gameState11.cards = list_card51;
    java.util.List<dominion.Player> list_player56 = gameState11.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName15.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + dominion.Card.Type.TREASURE + "'", type17.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName30.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    org.junit.Assert.assertTrue("'" + type32 + "' != '" + dominion.Card.Type.TREASURE + "'", type32.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    org.junit.Assert.assertTrue("'" + cardName40 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName40.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card41);
    org.junit.Assert.assertTrue("'" + type42 + "' != '" + dominion.Card.Type.TREASURE + "'", type42.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player56);

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test346"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    java.lang.String str10 = gameState7.toString();
    dominion.Player player12 = new dominion.Player(gameState7, "hi!");
    dominion.Card[] card_array13 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card14 = new java.util.ArrayList<dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card14, card_array13);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Council_Room;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card14, cardName16);
    dominion.Card.Type type18 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card19 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card14, type18);
    dominion.GameState gameState20 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card14);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState20.getWinners();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i22 = gameState20.gameBoard;
    dominion.GameState gameState23 = gameState20.clone();
    java.util.List<dominion.Card> list_card24 = gameState20.pileRetrieve();
    dominion.Card[] card_array25 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card26 = new java.util.ArrayList<dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card26, card_array25);
    dominion.Card.CardName cardName28 = dominion.Card.CardName.Council_Room;
    dominion.Card card29 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card26, cardName28);
    dominion.Card.Type type30 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card31 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card26, type30);
    dominion.GameState gameState32 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card26);
    dominion.Player player34 = new dominion.Player(gameState32, "hi!");
    gameState20.addPlayer(player34);
    dominion.Player player37 = new dominion.Player(gameState20, " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n");
    gameState7.addPlayer(player37);
    player37.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str10.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName16.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    org.junit.Assert.assertTrue("'" + type18 + "' != '" + dominion.Card.Type.TREASURE + "'", type18.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName28.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + dominion.Card.Type.TREASURE + "'", type30.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test347"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    java.lang.String str12 = gameState7.toString();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i13 = gameState7.getWinners();
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Council_Room;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.Card.Type type19 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card20 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card15, type19);
    dominion.GameState gameState21 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    gameState21.initializeGame();
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Council_Room;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.Card.Type type28 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card24, type28);
    dominion.GameState gameState30 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card24);
    gameState30.initializeGame();
    java.util.List<dominion.Player> list_player32 = gameState30.players;
    gameState21.players = list_player32;
    gameState7.players = list_player32;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i35 = gameState7.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str12.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName17.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + type19 + "' != '" + dominion.Card.Type.TREASURE + "'", type19.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName26.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + dominion.Card.Type.TREASURE + "'", type28.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i35);

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test348"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    java.lang.String str10 = gameState7.toString();
    dominion.Player player12 = new dominion.Player(gameState7, "hi!");
    dominion.Card[] card_array13 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card14 = new java.util.ArrayList<dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card14, card_array13);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Council_Room;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card14, cardName16);
    dominion.Card.Type type18 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card19 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card14, type18);
    dominion.GameState gameState20 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card14);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState20.getWinners();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i22 = gameState20.gameBoard;
    dominion.GameState gameState23 = gameState20.clone();
    java.util.List<dominion.Card> list_card24 = gameState20.pileRetrieve();
    dominion.Card[] card_array25 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card26 = new java.util.ArrayList<dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card26, card_array25);
    dominion.Card.CardName cardName28 = dominion.Card.CardName.Council_Room;
    dominion.Card card29 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card26, cardName28);
    dominion.Card.Type type30 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card31 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card26, type30);
    dominion.GameState gameState32 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card26);
    dominion.Player player34 = new dominion.Player(gameState32, "hi!");
    gameState20.addPlayer(player34);
    dominion.Player player37 = new dominion.Player(gameState20, " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n");
    gameState7.addPlayer(player37);
    dominion.Card card39 = null;
    player37.discard(card39);
    player37.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str10.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName16.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    org.junit.Assert.assertTrue("'" + type18 + "' != '" + dominion.Card.Type.TREASURE + "'", type18.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName28.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + dominion.Card.Type.TREASURE + "'", type30.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test349"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    java.util.List<dominion.Card> list_card12 = gameState7.pileRetrieve();
    java.lang.String str13 = gameState7.toString();
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Council_Room;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.Card.Type type19 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card20 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card15, type19);
    dominion.GameState gameState21 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    gameState21.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i23 = gameState21.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i24 = gameState21.gameBoard;
    gameState7.embargoTokens = hashmap_card_i24;
    dominion.GameState gameState26 = gameState7.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str13.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName17.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + type19 + "' != '" + dominion.Card.Type.TREASURE + "'", type19.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState26);

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test350"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Card[] card_array8 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card9 = new java.util.ArrayList<dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card9, card_array8);
    dominion.Card.CardName cardName11 = dominion.Card.CardName.Council_Room;
    dominion.Card card12 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card9, cardName11);
    dominion.Card.Type type13 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card14 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card9, type13);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card9);
    gameState15.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState15.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i18 = gameState15.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState15.gameBoard;
    dominion.Card[] card_array20 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card21 = new java.util.ArrayList<dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card21, card_array20);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Province;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName23);
    dominion.GameState gameState25 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    boolean b26 = gameState25.isGameOver();
    dominion.GameState gameState27 = null;
    dominion.Player player29 = new dominion.Player(gameState27, "");
    player29.playTreasureCard();
    gameState25.addPlayer(player29);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i32 = gameState25.getWinners();
    dominion.Card[] card_array33 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card34 = new java.util.ArrayList<dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card34, card_array33);
    dominion.Card.CardName cardName36 = dominion.Card.CardName.Council_Room;
    dominion.Card card37 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card34, cardName36);
    dominion.Card.Type type38 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card39 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card34, type38);
    dominion.GameState gameState40 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card34);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i41 = gameState40.embargoTokens;
    java.util.List<dominion.Player> list_player42 = gameState40.players;
    dominion.Card[] card_array43 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card44 = new java.util.ArrayList<dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card44, card_array43);
    dominion.Card.CardName cardName46 = dominion.Card.CardName.Council_Room;
    dominion.Card card47 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card44, cardName46);
    dominion.Card.Type type48 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card49 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card44, type48);
    dominion.GameState gameState50 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card44);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i51 = gameState50.embargoTokens;
    java.util.List<dominion.Player> list_player52 = gameState50.players;
    gameState40.players = list_player52;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i54 = gameState40.embargoTokens;
    gameState25.embargoTokens = hashmap_card_i54;
    gameState15.embargoTokens = hashmap_card_i54;
    gameState7.gameBoard = hashmap_card_i54;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i58 = gameState7.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName11.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    org.junit.Assert.assertTrue("'" + type13 + "' != '" + dominion.Card.Type.TREASURE + "'", type13.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Province + "'", cardName23.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName36.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    org.junit.Assert.assertTrue("'" + type38 + "' != '" + dominion.Card.Type.TREASURE + "'", type38.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName46.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card47);
    org.junit.Assert.assertTrue("'" + type48 + "' != '" + dominion.Card.Type.TREASURE + "'", type48.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i58);

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test351"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState(list_card6);
    dominion.Card.Type type8 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card9 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card6, type8);
    java.util.List<dominion.Card> list_card11 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card6, (java.lang.Integer)0);
    java.util.List<dominion.Card> list_card13 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card11, (java.lang.Integer)13);
    dominion.GameState gameState14 = new dominion.GameState(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + type8 + "' != '" + dominion.Card.Type.TREASURE + "'", type8.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test352"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    boolean b10 = gameState7.isGameOver();
    dominion.Player player12 = new dominion.Player(gameState7, "");
    player12.playTreasureCard();
    java.lang.String str14 = player12.toString();
    player12.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str14.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test353"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i12 = null;
    gameState7.gameBoard = hashmap_card_i12;
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Province;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    java.lang.String str20 = gameState19.toString();
    gameState19.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i22 = gameState19.gameBoard;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i23 = gameState19.play();
    dominion.GameState gameState24 = gameState19.clone();
    dominion.GameState gameState25 = gameState19.clone();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i26 = gameState25.embargoTokens;
    gameState7.embargoTokens = hashmap_card_i26;
    dominion.Card[] card_array28 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card29 = new java.util.ArrayList<dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card29, card_array28);
    dominion.Card.CardName cardName31 = dominion.Card.CardName.Council_Room;
    dominion.Card card32 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card29, cardName31);
    dominion.Card.Type type33 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card34 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card29, type33);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card29);
    dominion.Player player37 = new dominion.Player(gameState35, "hi!");
    dominion.Card card38 = null;
    player37.trash(card38);
    player37.printStateGame();
    dominion.Card card41 = null;
    // The following exception was thrown during execution in test generation
    try {
    gameState7.pollPile(player37, card41);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Province + "'", cardName17.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str20.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName31.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    org.junit.Assert.assertTrue("'" + type33 + "' != '" + dominion.Card.Type.TREASURE + "'", type33.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test354"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    dominion.GameState gameState10 = gameState7.clone();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i11 = gameState10.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i11);

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test355"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.lang.String str6 = gameState5.toString();
    dominion.Card[] card_array7 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card8 = new java.util.ArrayList<dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card8, card_array7);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Province;
    dominion.Card card11 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName10);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Cutpurse;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName12);
    java.util.List<dominion.Card> list_card15 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card8, (java.lang.Integer)23);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Province;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    dominion.GameState gameState21 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card17);
    dominion.Card.Type type22 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card23 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type22);
    java.util.List<dominion.Card> list_card24 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card8, type22);
    gameState5.cards = list_card24;
    dominion.Player player27 = new dominion.Player(gameState5, "The board game is empty you need to intialize the game!!!!");
    player27.playTreasureCard();
    player27.playTreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str6.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Province + "'", cardName10.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName12.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Province + "'", cardName19.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + dominion.Card.Type.TREASURE + "'", type22.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test356"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    dominion.Card card10 = null;
    player9.trash(card10);
    dominion.Card card12 = null;
    player9.discard(card12);
    player9.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test357"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.CardName cardName5 = dominion.Card.CardName.Cutpurse;
    dominion.Card card6 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName5);
    java.util.List<dominion.Card> list_card8 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card1, (java.lang.Integer)23);
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Province;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Card.Type type15 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card16 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type15);
    java.util.List<dominion.Card> list_card17 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type15);
    dominion.Card[] card_array18 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card19 = new java.util.ArrayList<dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card19, card_array18);
    dominion.Card.CardName cardName21 = dominion.Card.CardName.Province;
    dominion.Card card22 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card19, cardName21);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Cutpurse;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card19, cardName23);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Silver;
    dominion.Card card26 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card19, cardName25);
    dominion.Card card27 = dominion.Card.getCard(list_card17, cardName25);
    dominion.Card.CardName cardName28 = dominion.Card.CardName.Mine;
    dominion.Card card29 = dominion.Card.getCard(list_card17, cardName28);
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Province;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    dominion.Card.CardName cardName35 = dominion.Card.CardName.Cutpurse;
    dominion.Card card36 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName35);
    dominion.Card.CardName cardName37 = dominion.Card.CardName.Silver;
    dominion.Card card38 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName37);
    dominion.Card card39 = dominion.Card.getCard(list_card17, cardName37);
    dominion.Card[] card_array40 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card41 = new java.util.ArrayList<dominion.Card>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card41, card_array40);
    dominion.Card.CardName cardName43 = dominion.Card.CardName.Council_Room;
    dominion.Card card44 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card41, cardName43);
    dominion.Card.Type type45 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card46 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card41, type45);
    dominion.GameState gameState47 = new dominion.GameState(list_card46);
    dominion.Card.Type type48 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card49 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card46, type48);
    java.util.List<dominion.Card> list_card50 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card17, type48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName5.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Province + "'", cardName12.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + dominion.Card.Type.TREASURE + "'", type15.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + dominion.Card.CardName.Province + "'", cardName21.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName23.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Silver + "'", cardName25.equals(dominion.Card.CardName.Silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + dominion.Card.CardName.Mine + "'", cardName28.equals(dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Province + "'", cardName33.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName35.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + dominion.Card.CardName.Silver + "'", cardName37.equals(dominion.Card.CardName.Silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    org.junit.Assert.assertTrue("'" + cardName43 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName43.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card44);
    org.junit.Assert.assertTrue("'" + type45 + "' != '" + dominion.Card.Type.TREASURE + "'", type45.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    org.junit.Assert.assertTrue("'" + type48 + "' != '" + dominion.Card.Type.TREASURE + "'", type48.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test358"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.List<dominion.Card> list_card11 = gameState7.cards;
    java.util.List<dominion.Card> list_card12 = gameState7.pileRetrieve();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i13 = gameState7.gameBoard;
    gameState7.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i13);

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test359"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.CardName cardName5 = dominion.Card.CardName.Cutpurse;
    dominion.Card card6 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName5);
    java.util.List<dominion.Card> list_card8 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card1, (java.lang.Integer)23);
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Province;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Card.Type type15 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card16 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type15);
    java.util.List<dominion.Card> list_card17 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type15);
    dominion.Card.Type type18 = null;
    java.util.List<dominion.Card> list_card19 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card17, type18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName5.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Province + "'", cardName12.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + dominion.Card.Type.TREASURE + "'", type15.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test360"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    dominion.Card.Type type7 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card8 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card6, type7);
    dominion.Card.CardName cardName9 = dominion.Card.CardName.Village;
    dominion.Card card10 = dominion.Card.getCard(list_card8, cardName9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + dominion.Card.Type.VICTORY + "'", type7.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + dominion.Card.CardName.Village + "'", cardName9.equals(dominion.Card.CardName.Village));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test361"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    dominion.GameState gameState11 = new dominion.GameState(list_card10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i12 = gameState11.gameBoard;
    dominion.GameState gameState13 = null;
    dominion.Player player15 = new dominion.Player(gameState13, "");
    player15.playTreasureCard();
    dominion.Card card17 = null;
    player15.trash(card17);
    gameState11.addPlayer(player15);
    dominion.Card[] card_array20 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card21 = new java.util.ArrayList<dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card21, card_array20);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Council_Room;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName23);
    dominion.Card.Type type25 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card26 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card21, type25);
    dominion.GameState gameState27 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    gameState27.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i29 = gameState27.getWinners();
    java.util.List<dominion.Card> list_card30 = gameState27.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i31 = gameState27.gameBoard;
    gameState11.embargoTokens = hashmap_card_i31;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i33 = gameState11.embargoTokens;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName23.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    org.junit.Assert.assertTrue("'" + type25 + "' != '" + dominion.Card.Type.TREASURE + "'", type25.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i33);

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test362"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Card[] card_array8 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card9 = new java.util.ArrayList<dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card9, card_array8);
    dominion.Card.CardName cardName11 = dominion.Card.CardName.Council_Room;
    dominion.Card card12 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card9, cardName11);
    dominion.Card.Type type13 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card14 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card9, type13);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card9);
    gameState15.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState15.getWinners();
    java.util.List<dominion.Card> list_card18 = gameState15.cards;
    dominion.GameState gameState19 = new dominion.GameState(list_card18);
    gameState7.cards = list_card18;
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Province;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Cutpurse;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName26);
    java.util.List<dominion.Card> list_card29 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card22, (java.lang.Integer)23);
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Province;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card31);
    dominion.Card.Type type36 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card37 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card31, type36);
    java.util.List<dominion.Card> list_card38 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card22, type36);
    java.util.List<dominion.Card> list_card39 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card18, type36);
    dominion.Card.Type type40 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card41 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card39, type40);
    dominion.GameState gameState42 = new dominion.GameState(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName11.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    org.junit.Assert.assertTrue("'" + type13 + "' != '" + dominion.Card.Type.TREASURE + "'", type13.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Province + "'", cardName24.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName26.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Province + "'", cardName33.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    org.junit.Assert.assertTrue("'" + type36 + "' != '" + dominion.Card.Type.TREASURE + "'", type36.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    org.junit.Assert.assertTrue("'" + type40 + "' != '" + dominion.Card.Type.TREASURE + "'", type40.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test363"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    boolean b6 = gameState5.isGameOver();
    dominion.GameState gameState7 = null;
    dominion.Player player9 = new dominion.Player(gameState7, "");
    player9.playTreasureCard();
    gameState5.addPlayer(player9);
    dominion.Player player13 = new dominion.Player(gameState5, " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n");
    java.util.List<dominion.Card> list_card14 = gameState5.cards;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i15 = gameState5.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i15);

  }

  @Test
  public void test364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test364"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    player2.playTreasureCard();
    java.lang.String str4 = player2.toString();
    player2.playTreasureCard();
    player2.playTreasureCard();
    dominion.Card card7 = null;
    player2.discard(card7);
    // The following exception was thrown during execution in test generation
    try {
    player2.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str4.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test365"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState7.getWinners();
    dominion.GameState gameState9 = gameState7.clone();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i10 = gameState9.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState9.embargoTokens;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);

  }

  @Test
  public void test366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test366"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    dominion.GameState gameState12 = null;
    dominion.Player player14 = new dominion.Player(gameState12, "");
    dominion.Card card15 = null;
    player14.trash(card15);
    dominion.Card card17 = null;
    player14.discard(card17);
    gameState7.addPlayer(player14);
    java.util.List<dominion.Card> list_card20 = gameState7.pileRetrieve();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);

  }

  @Test
  public void test367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test367"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    boolean b6 = gameState5.isGameOver();
    dominion.Card[] card_array7 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card8 = new java.util.ArrayList<dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card8, card_array7);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Council_Room;
    dominion.Card card11 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName10);
    dominion.Card.Type type12 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card13 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card8, type12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card8);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i15 = gameState14.embargoTokens;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i16 = gameState14.embargoTokens;
    dominion.Card[] card_array17 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card18 = new java.util.ArrayList<dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card18, card_array17);
    dominion.Card.CardName cardName20 = dominion.Card.CardName.Council_Room;
    dominion.Card card21 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card18, cardName20);
    dominion.Card.Type type22 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card23 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card18, type22);
    dominion.GameState gameState24 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card18);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i25 = gameState24.embargoTokens;
    java.util.List<dominion.Player> list_player26 = gameState24.players;
    dominion.Card[] card_array27 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card28 = new java.util.ArrayList<dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card28, card_array27);
    dominion.Card.CardName cardName30 = dominion.Card.CardName.Council_Room;
    dominion.Card card31 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card28, cardName30);
    dominion.Card.Type type32 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card33 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card28, type32);
    dominion.GameState gameState34 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card28);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i35 = gameState34.embargoTokens;
    java.util.List<dominion.Player> list_player36 = gameState34.players;
    gameState24.players = list_player36;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i38 = gameState24.embargoTokens;
    gameState14.embargoTokens = hashmap_card_i38;
    gameState5.embargoTokens = hashmap_card_i38;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName10.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + dominion.Card.Type.TREASURE + "'", type12.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName20.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + dominion.Card.Type.TREASURE + "'", type22.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName30.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    org.junit.Assert.assertTrue("'" + type32 + "' != '" + dominion.Card.Type.TREASURE + "'", type32.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i38);

  }

  @Test
  public void test368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test368"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    player2.playTreasureCard();
    dominion.Card card4 = null;
    player2.trash(card4);
    player2.playKingdomCard();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test369"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    boolean b6 = gameState5.isGameOver();
    dominion.GameState gameState7 = null;
    dominion.Player player9 = new dominion.Player(gameState7, "");
    player9.playTreasureCard();
    gameState5.addPlayer(player9);
    java.lang.String str12 = gameState5.toString();
    dominion.Card[] card_array13 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card14 = new java.util.ArrayList<dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card14, card_array13);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Council_Room;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card14, cardName16);
    dominion.Card.Type type18 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card19 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card14, type18);
    dominion.GameState gameState20 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card14);
    gameState20.initializeGame();
    dominion.Card[] card_array22 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card23 = new java.util.ArrayList<dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card23, card_array22);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Council_Room;
    dominion.Card card26 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card23, cardName25);
    dominion.Card.Type type27 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card28 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card23, type27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card23);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i30 = gameState29.embargoTokens;
    gameState20.embargoTokens = hashmap_card_i30;
    boolean b32 = gameState20.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i33 = gameState20.play();
    dominion.Card[] card_array34 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card35 = new java.util.ArrayList<dominion.Card>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card35, card_array34);
    dominion.Card.CardName cardName37 = dominion.Card.CardName.Council_Room;
    dominion.Card card38 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card35, cardName37);
    dominion.Card.Type type39 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card40 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card35, type39);
    dominion.GameState gameState41 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card35);
    gameState41.initializeGame();
    dominion.Card[] card_array43 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card44 = new java.util.ArrayList<dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card44, card_array43);
    dominion.Card.CardName cardName46 = dominion.Card.CardName.Council_Room;
    dominion.Card card47 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card44, cardName46);
    dominion.Card.Type type48 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card49 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card44, type48);
    dominion.GameState gameState50 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card44);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i51 = gameState50.embargoTokens;
    gameState41.embargoTokens = hashmap_card_i51;
    gameState20.gameBoard = hashmap_card_i51;
    gameState5.embargoTokens = hashmap_card_i51;
    dominion.Card[] card_array55 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card56 = new java.util.ArrayList<dominion.Card>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card56, card_array55);
    dominion.Card.CardName cardName58 = dominion.Card.CardName.Council_Room;
    dominion.Card card59 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card56, cardName58);
    dominion.Card.Type type60 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card61 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card56, type60);
    dominion.GameState gameState62 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card56);
    gameState5.cards = arraylist_card56;
    gameState5.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str12.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName16.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    org.junit.Assert.assertTrue("'" + type18 + "' != '" + dominion.Card.Type.TREASURE + "'", type18.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName25.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + type27 + "' != '" + dominion.Card.Type.TREASURE + "'", type27.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName37.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    org.junit.Assert.assertTrue("'" + type39 + "' != '" + dominion.Card.Type.TREASURE + "'", type39.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName46.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card47);
    org.junit.Assert.assertTrue("'" + type48 + "' != '" + dominion.Card.Type.TREASURE + "'", type48.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName58.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card59);
    org.junit.Assert.assertTrue("'" + type60 + "' != '" + dominion.Card.Type.TREASURE + "'", type60.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);

  }

  @Test
  public void test370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test370"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.CardName cardName5 = dominion.Card.CardName.Cutpurse;
    dominion.Card card6 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState8 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState9 = gameState8.clone();
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Council_Room;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    java.util.List<dominion.Card> list_card16 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card11, (java.lang.Integer)1);
    gameState8.cards = list_card16;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName5.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName13.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);

  }

  @Test
  public void test371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test371"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    boolean b9 = gameState7.isGameOver();
    dominion.Player player11 = new dominion.Player(gameState7, "");
    player11.printStateGame();
    player11.playTreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test372"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    java.util.List<dominion.Card> list_card12 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card10, (java.lang.Integer)10);
    dominion.GameState gameState13 = new dominion.GameState(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);

  }

  @Test
  public void test373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test373"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Council_Room;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.Card.Type type16 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card17 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card12, type16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    gameState18.initializeGame();
    java.util.List<dominion.Player> list_player20 = gameState18.players;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState18.getWinners();
    java.util.List<dominion.Player> list_player22 = gameState18.players;
    gameState7.players = list_player22;
    dominion.Card[] card_array24 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card25 = new java.util.ArrayList<dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card25, card_array24);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Council_Room;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName27);
    dominion.Card.Type type29 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card30 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card25, type29);
    dominion.GameState gameState31 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card25);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i32 = gameState31.embargoTokens;
    java.util.List<dominion.Player> list_player33 = gameState31.players;
    dominion.GameState gameState34 = null;
    dominion.Player player36 = new dominion.Player(gameState34, "");
    dominion.Card card37 = null;
    player36.trash(card37);
    java.lang.String str39 = player36.toString();
    gameState31.addPlayer(player36);
    java.lang.String str41 = player36.toString();
    gameState7.addPlayer(player36);
    java.util.List<dominion.Card> list_card43 = gameState7.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName14.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + type16 + "' != '" + dominion.Card.Type.TREASURE + "'", type16.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName27.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + type29 + "' != '" + dominion.Card.Type.TREASURE + "'", type29.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str39.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str41.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);

  }

  @Test
  public void test374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test374"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    boolean b10 = gameState7.isGameOver();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    dominion.GameState gameState12 = gameState7.clone();
    java.util.List<dominion.Card> list_card13 = gameState12.pileRetrieve();
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Province;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    java.util.List<dominion.Card> list_card20 = gameState19.cards;
    gameState19.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i22 = gameState19.play();
    java.lang.String str23 = gameState19.toString();
    dominion.Player player25 = new dominion.Player(gameState19, "");
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i26 = gameState19.embargoTokens;
    gameState12.gameBoard = hashmap_card_i26;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Province + "'", cardName17.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str23.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i26);

  }

  @Test
  public void test375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test375"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Council_Room;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    dominion.Card.Type type15 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card16 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card11, type15);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card11);
    gameState17.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i19 = gameState17.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState17.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i21 = gameState17.gameBoard;
    java.util.List<dominion.Card> list_card22 = gameState17.pileRetrieve();
    java.util.List<dominion.Card> list_card24 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card22, (java.lang.Integer)100);
    java.util.List<dominion.Card> list_card26 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card24, (java.lang.Integer)1);
    gameState7.cards = list_card24;
    boolean b28 = gameState7.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName13.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + dominion.Card.Type.TREASURE + "'", type15.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);

  }

  @Test
  public void test376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test376"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i10 = gameState7.getWinners();
    dominion.GameState gameState11 = gameState7.clone();
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Council_Room;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.Card.Type type17 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card18 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card13, type17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    gameState19.initializeGame();
    java.util.List<dominion.Player> list_player21 = gameState19.players;
    java.util.List<dominion.Card> list_card22 = gameState19.cards;
    boolean b23 = gameState19.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i24 = gameState19.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i25 = gameState19.gameBoard;
    gameState11.embargoTokens = hashmap_card_i25;
    dominion.Card[] card_array27 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card28 = new java.util.ArrayList<dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card28, card_array27);
    dominion.Card.CardName cardName30 = dominion.Card.CardName.Council_Room;
    dominion.Card card31 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card28, cardName30);
    dominion.Card.Type type32 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card33 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card28, type32);
    dominion.GameState gameState34 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card28);
    gameState34.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i36 = gameState34.getWinners();
    dominion.Card[] card_array37 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card38 = new java.util.ArrayList<dominion.Card>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card38, card_array37);
    dominion.Card.CardName cardName40 = dominion.Card.CardName.Council_Room;
    dominion.Card card41 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card38, cardName40);
    dominion.Card.Type type42 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card43 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card38, type42);
    dominion.GameState gameState44 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card38);
    gameState44.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i46 = gameState44.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i47 = gameState44.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i48 = gameState44.gameBoard;
    java.util.List<dominion.Card> list_card49 = gameState44.pileRetrieve();
    java.util.List<dominion.Card> list_card51 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card49, (java.lang.Integer)100);
    java.util.List<dominion.Card> list_card53 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card51, (java.lang.Integer)1);
    gameState34.cards = list_card51;
    gameState11.cards = list_card51;
    dominion.Card[] card_array56 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card57 = new java.util.ArrayList<dominion.Card>();
    boolean b58 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card57, card_array56);
    dominion.Card.CardName cardName59 = dominion.Card.CardName.Council_Room;
    dominion.Card card60 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card57, cardName59);
    dominion.Card.Type type61 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card62 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card57, type61);
    dominion.GameState gameState63 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card57);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i64 = gameState63.embargoTokens;
    boolean b65 = gameState63.isGameOver();
    dominion.Card[] card_array66 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card67 = new java.util.ArrayList<dominion.Card>();
    boolean b68 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card67, card_array66);
    dominion.Card.CardName cardName69 = dominion.Card.CardName.Province;
    dominion.Card card70 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card67, cardName69);
    dominion.GameState gameState71 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card67);
    java.util.List<dominion.Card> list_card72 = gameState71.cards;
    dominion.Card.Type type73 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card74 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card72, type73);
    dominion.Card[] card_array75 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card76 = new java.util.ArrayList<dominion.Card>();
    boolean b77 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card76, card_array75);
    dominion.Card.CardName cardName78 = dominion.Card.CardName.Province;
    dominion.Card card79 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card76, cardName78);
    dominion.GameState gameState80 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card76);
    java.util.List<dominion.Card> list_card81 = gameState80.cards;
    dominion.Card.Type type82 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card83 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card81, type82);
    java.util.List<dominion.Card> list_card84 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card72, type82);
    gameState63.cards = list_card72;
    java.util.List<dominion.Card> list_card87 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card72, (java.lang.Integer)(-1));
    gameState11.cards = list_card87;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName15.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + dominion.Card.Type.TREASURE + "'", type17.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName30.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    org.junit.Assert.assertTrue("'" + type32 + "' != '" + dominion.Card.Type.TREASURE + "'", type32.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    org.junit.Assert.assertTrue("'" + cardName40 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName40.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card41);
    org.junit.Assert.assertTrue("'" + type42 + "' != '" + dominion.Card.Type.TREASURE + "'", type42.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName59.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card60);
    org.junit.Assert.assertTrue("'" + type61 + "' != '" + dominion.Card.Type.TREASURE + "'", type61.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    org.junit.Assert.assertTrue("'" + cardName69 + "' != '" + dominion.Card.CardName.Province + "'", cardName69.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card72);
    org.junit.Assert.assertTrue("'" + type73 + "' != '" + dominion.Card.Type.VICTORY + "'", type73.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    org.junit.Assert.assertTrue("'" + cardName78 + "' != '" + dominion.Card.CardName.Province + "'", cardName78.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card81);
    org.junit.Assert.assertTrue("'" + type82 + "' != '" + dominion.Card.Type.VICTORY + "'", type82.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card87);

  }

  @Test
  public void test377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test377"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.lang.String str6 = gameState5.toString();
    gameState5.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState5.gameBoard;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState5.play();
    dominion.GameState gameState10 = gameState5.clone();
    dominion.GameState gameState11 = gameState5.clone();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i12 = gameState11.embargoTokens;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i13 = gameState11.gameBoard;
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Council_Room;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.Card.Type type19 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card20 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card15, type19);
    dominion.GameState gameState21 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    dominion.Player player23 = new dominion.Player(gameState21, "hi!");
    dominion.Card card24 = null;
    player23.trash(card24);
    player23.printStateGame();
    player23.playTreasureCard();
    player23.buyCard();
    java.lang.String str29 = player23.toString();
    player23.printStateGame();
    dominion.Card card31 = null;
    // The following exception was thrown during execution in test generation
    try {
    gameState11.pollPile(player23, card31);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str6.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName17.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + type19 + "' != '" + dominion.Card.Type.TREASURE + "'", type19.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + " --- hi! --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str29.equals(" --- hi! --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test378"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.lang.String str6 = gameState5.toString();
    gameState5.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState5.gameBoard;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState5.play();
    dominion.GameState gameState10 = gameState5.clone();
    dominion.GameState gameState11 = gameState5.clone();
    dominion.GameState gameState12 = gameState11.clone();
    dominion.Card[] card_array13 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card14 = new java.util.ArrayList<dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card14, card_array13);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Province;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card14, cardName16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card14);
    java.util.List<dominion.Card> list_card19 = gameState18.cards;
    gameState18.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState18.play();
    dominion.Card[] card_array22 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card23 = new java.util.ArrayList<dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card23, card_array22);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Province;
    dominion.Card card26 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card23, cardName25);
    dominion.GameState gameState27 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card23);
    java.lang.String str28 = gameState27.toString();
    dominion.Card[] card_array29 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card30 = new java.util.ArrayList<dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card30, card_array29);
    dominion.Card.CardName cardName32 = dominion.Card.CardName.Council_Room;
    dominion.Card card33 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card30, cardName32);
    gameState27.cards = arraylist_card30;
    dominion.Card[] card_array35 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card36 = new java.util.ArrayList<dominion.Card>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card36, card_array35);
    dominion.Card.CardName cardName38 = dominion.Card.CardName.Council_Room;
    dominion.Card card39 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card36, cardName38);
    dominion.Card.Type type40 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card41 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card36, type40);
    dominion.GameState gameState42 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card36);
    gameState42.initializeGame();
    java.util.List<dominion.Player> list_player44 = gameState42.players;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i45 = gameState42.getWinners();
    java.util.List<dominion.Player> list_player46 = gameState42.players;
    gameState27.players = list_player46;
    gameState18.players = list_player46;
    gameState12.players = list_player46;
    dominion.Card[] card_array50 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card51 = new java.util.ArrayList<dominion.Card>();
    boolean b52 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card51, card_array50);
    dominion.Card.CardName cardName53 = dominion.Card.CardName.Council_Room;
    dominion.Card card54 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card51, cardName53);
    dominion.Card.Type type55 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card56 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card51, type55);
    dominion.GameState gameState57 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card51);
    gameState57.initializeGame();
    java.util.List<dominion.Player> list_player59 = gameState57.players;
    java.util.List<dominion.Card> list_card60 = gameState57.cards;
    dominion.Card[] card_array61 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card62 = new java.util.ArrayList<dominion.Card>();
    boolean b63 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card62, card_array61);
    dominion.Card.CardName cardName64 = dominion.Card.CardName.Council_Room;
    dominion.Card card65 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card62, cardName64);
    dominion.Card.Type type66 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card67 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card62, type66);
    dominion.GameState gameState68 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card62);
    gameState68.initializeGame();
    java.util.List<dominion.Player> list_player70 = gameState68.players;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i71 = gameState68.getWinners();
    java.util.List<dominion.Player> list_player72 = gameState68.players;
    gameState57.players = list_player72;
    java.util.List<dominion.Card> list_card74 = gameState57.pileRetrieve();
    gameState12.cards = list_card74;
    java.util.List<dominion.Card> list_card77 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card74, (java.lang.Integer)23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str6.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Province + "'", cardName16.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Province + "'", cardName25.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str28.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName32.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName38.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card39);
    org.junit.Assert.assertTrue("'" + type40 + "' != '" + dominion.Card.Type.TREASURE + "'", type40.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    org.junit.Assert.assertTrue("'" + cardName53 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName53.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card54);
    org.junit.Assert.assertTrue("'" + type55 + "' != '" + dominion.Card.Type.TREASURE + "'", type55.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    org.junit.Assert.assertTrue("'" + cardName64 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName64.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card65);
    org.junit.Assert.assertTrue("'" + type66 + "' != '" + dominion.Card.Type.TREASURE + "'", type66.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card77);

  }

  @Test
  public void test379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test379"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    boolean b6 = gameState5.isGameOver();
    dominion.GameState gameState7 = null;
    dominion.Player player9 = new dominion.Player(gameState7, "");
    player9.playTreasureCard();
    gameState5.addPlayer(player9);
    dominion.Player player13 = new dominion.Player(gameState5, " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n");
    java.util.List<dominion.Card> list_card14 = gameState5.cards;
    dominion.Card[] card_array15 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card16 = new java.util.ArrayList<dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card16, card_array15);
    dominion.Card.CardName cardName18 = dominion.Card.CardName.Council_Room;
    dominion.Card card19 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card16, cardName18);
    dominion.Card.Type type20 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card21 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card16, type20);
    dominion.GameState gameState22 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card16);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i23 = gameState22.getWinners();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i24 = gameState22.gameBoard;
    dominion.GameState gameState25 = gameState22.clone();
    dominion.Card[] card_array26 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card27 = new java.util.ArrayList<dominion.Card>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card27, card_array26);
    dominion.Card.CardName cardName29 = dominion.Card.CardName.Council_Room;
    dominion.Card card30 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card27, cardName29);
    dominion.Card.Type type31 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card32 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card27, type31);
    dominion.GameState gameState33 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card27);
    gameState33.initializeGame();
    java.util.List<dominion.Player> list_player35 = gameState33.players;
    dominion.GameState gameState36 = gameState33.clone();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i37 = gameState33.embargoTokens;
    gameState25.embargoTokens = hashmap_card_i37;
    gameState5.gameBoard = hashmap_card_i37;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName18.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    org.junit.Assert.assertTrue("'" + type20 + "' != '" + dominion.Card.Type.TREASURE + "'", type20.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName29.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    org.junit.Assert.assertTrue("'" + type31 + "' != '" + dominion.Card.Type.TREASURE + "'", type31.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i37);

  }

  @Test
  public void test380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test380"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState7.getWinners();
    gameState7.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);

  }

  @Test
  public void test381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test381"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i17 = gameState16.embargoTokens;
    gameState7.embargoTokens = hashmap_card_i17;
    java.util.List<dominion.Player> list_player19 = gameState7.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);

  }

  @Test
  public void test382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test382"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i9 = gameState7.embargoTokens;
    dominion.GameState gameState10 = null;
    dominion.Player player12 = new dominion.Player(gameState10, "");
    dominion.Card card13 = null;
    player12.trash(card13);
    java.lang.String str15 = player12.toString();
    dominion.Card card16 = null;
    // The following exception was thrown during execution in test generation
    try {
    gameState7.pollPile(player12, card16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str15.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test383"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i10 = gameState7.getWinners();
    dominion.GameState gameState11 = gameState7.clone();
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Council_Room;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.Card.Type type17 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card18 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card13, type17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    gameState19.initializeGame();
    java.util.List<dominion.Player> list_player21 = gameState19.players;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i22 = gameState19.getWinners();
    java.util.List<dominion.Player> list_player23 = gameState19.players;
    gameState7.players = list_player23;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Player player25 = dominion.Randomness.randomMember(list_player23);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName15.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + dominion.Card.Type.TREASURE + "'", type17.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player23);

  }

  @Test
  public void test384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test384"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    boolean b9 = gameState7.isGameOver();
    boolean b10 = gameState7.isGameOver();
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    gameState7.cards = arraylist_card12;
    dominion.Card[] card_array15 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card16 = new java.util.ArrayList<dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card16, card_array15);
    dominion.Card.CardName cardName18 = dominion.Card.CardName.Council_Room;
    dominion.Card card19 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card16, cardName18);
    dominion.Card.Type type20 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card21 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card16, type20);
    dominion.GameState gameState22 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card16);
    gameState22.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i24 = gameState22.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i25 = gameState22.gameBoard;
    java.util.List<dominion.Player> list_player26 = null;
    gameState22.players = list_player26;
    dominion.Card[] card_array28 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card29 = new java.util.ArrayList<dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card29, card_array28);
    dominion.Card.CardName cardName31 = dominion.Card.CardName.Council_Room;
    dominion.Card card32 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card29, cardName31);
    dominion.Card.Type type33 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card34 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card29, type33);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card29);
    gameState35.initializeGame();
    dominion.Card[] card_array37 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card38 = new java.util.ArrayList<dominion.Card>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card38, card_array37);
    dominion.Card.CardName cardName40 = dominion.Card.CardName.Council_Room;
    dominion.Card card41 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card38, cardName40);
    dominion.Card.Type type42 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card43 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card38, type42);
    dominion.GameState gameState44 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card38);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i45 = gameState44.embargoTokens;
    gameState35.embargoTokens = hashmap_card_i45;
    gameState22.gameBoard = hashmap_card_i45;
    gameState7.embargoTokens = hashmap_card_i45;
    boolean b49 = gameState7.isGameOver();
    boolean b50 = gameState7.isGameOver();
    boolean b51 = gameState7.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName18.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    org.junit.Assert.assertTrue("'" + type20 + "' != '" + dominion.Card.Type.TREASURE + "'", type20.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName31.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    org.junit.Assert.assertTrue("'" + type33 + "' != '" + dominion.Card.Type.TREASURE + "'", type33.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    org.junit.Assert.assertTrue("'" + cardName40 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName40.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card41);
    org.junit.Assert.assertTrue("'" + type42 + "' != '" + dominion.Card.Type.TREASURE + "'", type42.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);

  }

  @Test
  public void test385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test385"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    boolean b6 = gameState5.isGameOver();
    dominion.GameState gameState7 = null;
    dominion.Player player9 = new dominion.Player(gameState7, "");
    player9.playTreasureCard();
    gameState5.addPlayer(player9);
    dominion.GameState gameState12 = gameState5.clone();
    dominion.Player player14 = new dominion.Player(gameState12, " --- hi! --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n");
    dominion.Card[] card_array15 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card16 = new java.util.ArrayList<dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card16, card_array15);
    dominion.Card.CardName cardName18 = dominion.Card.CardName.Council_Room;
    dominion.Card card19 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card16, cardName18);
    dominion.Card.Type type20 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card21 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card16, type20);
    dominion.GameState gameState22 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card16);
    dominion.Player player24 = new dominion.Player(gameState22, "hi!");
    boolean b25 = gameState22.isGameOver();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i26 = gameState22.gameBoard;
    dominion.GameState gameState27 = gameState22.clone();
    dominion.Player player29 = new dominion.Player(gameState27, "");
    gameState12.addPlayer(player29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName18.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    org.junit.Assert.assertTrue("'" + type20 + "' != '" + dominion.Card.Type.TREASURE + "'", type20.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState27);

  }

  @Test
  public void test386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test386"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    boolean b6 = gameState5.isGameOver();
    dominion.GameState gameState7 = null;
    dominion.Player player9 = new dominion.Player(gameState7, "");
    player9.playTreasureCard();
    gameState5.addPlayer(player9);
    dominion.GameState gameState12 = gameState5.clone();
    boolean b13 = gameState12.isGameOver();
    dominion.Player player15 = new dominion.Player(gameState12, " --- The board game is empty you need to intialize the game!!!! --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n");
    gameState12.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test387"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    player2.playTreasureCard();
    dominion.Card card4 = null;
    player2.trash(card4);
    player2.playKingdomCard();
    player2.playKingdomCard();
    java.lang.String str8 = player2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str8.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test388"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.lang.String str6 = gameState5.toString();
    gameState5.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState5.gameBoard;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState5.play();
    dominion.GameState gameState10 = gameState5.clone();
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Province;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    java.lang.String str17 = gameState16.toString();
    dominion.Card[] card_array18 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card19 = new java.util.ArrayList<dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card19, card_array18);
    dominion.Card.CardName cardName21 = dominion.Card.CardName.Province;
    dominion.Card card22 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card19, cardName21);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Cutpurse;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card19, cardName23);
    java.util.List<dominion.Card> list_card26 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card19, (java.lang.Integer)23);
    dominion.Card[] card_array27 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card28 = new java.util.ArrayList<dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card28, card_array27);
    dominion.Card.CardName cardName30 = dominion.Card.CardName.Province;
    dominion.Card card31 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card28, cardName30);
    dominion.GameState gameState32 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card28);
    dominion.Card.Type type33 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card34 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card28, type33);
    java.util.List<dominion.Card> list_card35 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card19, type33);
    gameState16.cards = list_card35;
    dominion.Player player38 = new dominion.Player(gameState16, "The board game is empty you need to intialize the game!!!!");
    dominion.Card card39 = null;
    player38.trash(card39);
    player38.buyCard();
    player38.buyCard();
    gameState10.addPlayer(player38);
    dominion.Card[] card_array44 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card45 = new java.util.ArrayList<dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card45, card_array44);
    dominion.Card.CardName cardName47 = dominion.Card.CardName.Council_Room;
    dominion.Card card48 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card45, cardName47);
    dominion.Card.Type type49 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card50 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card45, type49);
    dominion.GameState gameState51 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card45);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i52 = gameState51.getWinners();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i53 = gameState51.gameBoard;
    dominion.GameState gameState54 = gameState51.clone();
    java.util.List<dominion.Card> list_card55 = gameState51.pileRetrieve();
    dominion.Card[] card_array56 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card57 = new java.util.ArrayList<dominion.Card>();
    boolean b58 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card57, card_array56);
    dominion.Card.CardName cardName59 = dominion.Card.CardName.Council_Room;
    dominion.Card card60 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card57, cardName59);
    dominion.Card.Type type61 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card62 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card57, type61);
    dominion.GameState gameState63 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card57);
    dominion.Player player65 = new dominion.Player(gameState63, "hi!");
    gameState51.addPlayer(player65);
    java.util.List<dominion.Card> list_card67 = gameState51.cards;
    java.util.List<dominion.Player> list_player68 = gameState51.players;
    gameState10.players = list_player68;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str6.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Province + "'", cardName14.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str17.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + dominion.Card.CardName.Province + "'", cardName21.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName23.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + dominion.Card.CardName.Province + "'", cardName30.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    org.junit.Assert.assertTrue("'" + type33 + "' != '" + dominion.Card.Type.TREASURE + "'", type33.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName47.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card48);
    org.junit.Assert.assertTrue("'" + type49 + "' != '" + dominion.Card.Type.TREASURE + "'", type49.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName59.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card60);
    org.junit.Assert.assertTrue("'" + type61 + "' != '" + dominion.Card.Type.TREASURE + "'", type61.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player68);

  }

  @Test
  public void test389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test389"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i10 = gameState7.getWinners();
    dominion.GameState gameState11 = gameState7.clone();
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Council_Room;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.Card.Type type17 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card18 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card13, type17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    gameState19.initializeGame();
    java.util.List<dominion.Player> list_player21 = gameState19.players;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i22 = gameState19.getWinners();
    java.util.List<dominion.Player> list_player23 = gameState19.players;
    gameState7.players = list_player23;
    dominion.Card[] card_array25 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card26 = new java.util.ArrayList<dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card26, card_array25);
    dominion.Card.CardName cardName28 = dominion.Card.CardName.Council_Room;
    dominion.Card card29 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card26, cardName28);
    dominion.Card.Type type30 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card31 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card26, type30);
    dominion.GameState gameState32 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card26);
    dominion.Player player34 = new dominion.Player(gameState32, "hi!");
    dominion.Card card35 = null;
    player34.trash(card35);
    dominion.Card card37 = null;
    player34.discard(card37);
    player34.buyCard();
    player34.playKingdomCard();
    dominion.Card card41 = null;
    player34.trash(card41);
    gameState7.addPlayer(player34);
    dominion.Player player45 = new dominion.Player(gameState7, "hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName15.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + dominion.Card.Type.TREASURE + "'", type17.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName28.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + dominion.Card.Type.TREASURE + "'", type30.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);

  }

  @Test
  public void test390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test390"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    java.lang.String str12 = gameState7.toString();
    java.lang.String str13 = gameState7.toString();
    dominion.Player player15 = new dominion.Player(gameState7, " --- hi! --- \nHand: []\nDiscard: [null]\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n");
    player15.playTreasureCard();
    player15.printStateGame();
    java.lang.String str18 = player15.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str12.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str13.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + " ---  --- hi! --- \nHand: []\nDiscard: [null]\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str18.equals(" ---  --- hi! --- \nHand: []\nDiscard: [null]\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test391"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    boolean b6 = gameState5.isGameOver();
    dominion.GameState gameState7 = null;
    dominion.Player player9 = new dominion.Player(gameState7, "");
    player9.playTreasureCard();
    gameState5.addPlayer(player9);
    java.lang.String str12 = gameState5.toString();
    boolean b13 = gameState5.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str12.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test392"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.lang.String str6 = gameState5.toString();
    gameState5.initializeGame();
    dominion.Player player9 = new dominion.Player(gameState5, "hi!");
    boolean b10 = gameState5.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str6.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test393"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    dominion.GameState gameState11 = new dominion.GameState(list_card10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i12 = gameState11.gameBoard;
    dominion.GameState gameState13 = null;
    dominion.Player player15 = new dominion.Player(gameState13, "");
    player15.playTreasureCard();
    dominion.Card card17 = null;
    player15.trash(card17);
    gameState11.addPlayer(player15);
    dominion.GameState gameState20 = gameState11.clone();
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Council_Room;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.Card.Type type26 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card27 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card22, type26);
    dominion.GameState gameState28 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i29 = gameState28.getWinners();
    java.util.List<dominion.Card> list_card30 = gameState28.cards;
    dominion.Card[] card_array31 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card32 = new java.util.ArrayList<dominion.Card>();
    boolean b33 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card32, card_array31);
    dominion.Card.CardName cardName34 = dominion.Card.CardName.Council_Room;
    dominion.Card card35 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card32, cardName34);
    dominion.Card.Type type36 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card37 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card32, type36);
    dominion.GameState gameState38 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card32);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i39 = gameState38.embargoTokens;
    boolean b40 = gameState38.isGameOver();
    boolean b41 = gameState38.isGameOver();
    dominion.Card[] card_array42 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card43 = new java.util.ArrayList<dominion.Card>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card43, card_array42);
    gameState38.cards = arraylist_card43;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i46 = gameState38.embargoTokens;
    gameState28.gameBoard = hashmap_card_i46;
    gameState20.embargoTokens = hashmap_card_i46;
    java.util.List<dominion.Player> list_player49 = gameState20.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName24.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + dominion.Card.Type.TREASURE + "'", type26.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName34.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card35);
    org.junit.Assert.assertTrue("'" + type36 + "' != '" + dominion.Card.Type.TREASURE + "'", type36.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player49);

  }

  @Test
  public void test394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test394"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.lang.String str6 = gameState5.toString();
    gameState5.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState5.gameBoard;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState5.play();
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Council_Room;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    dominion.Card.Type type15 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card16 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card11, type15);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card11);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i18 = gameState17.embargoTokens;
    boolean b19 = gameState17.isGameOver();
    dominion.Player player21 = new dominion.Player(gameState17, "");
    dominion.Card card22 = null;
    // The following exception was thrown during execution in test generation
    try {
    gameState5.pollPile(player21, card22);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str6.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName13.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + dominion.Card.Type.TREASURE + "'", type15.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);

  }

  @Test
  public void test395() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test395"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    dominion.Player player13 = new dominion.Player(gameState7, "");
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i14 = gameState7.getWinners();
    dominion.Card[] card_array15 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card16 = new java.util.ArrayList<dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card16, card_array15);
    dominion.Card.CardName cardName18 = dominion.Card.CardName.Province;
    dominion.Card card19 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card16, cardName18);
    dominion.Card.CardName cardName20 = dominion.Card.CardName.Cutpurse;
    dominion.Card card21 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card16, cardName20);
    java.util.List<dominion.Card> list_card23 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card16, (java.lang.Integer)23);
    dominion.Card[] card_array24 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card25 = new java.util.ArrayList<dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card25, card_array24);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Province;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card25);
    dominion.Card.Type type30 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card31 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card25, type30);
    java.util.List<dominion.Card> list_card32 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card16, type30);
    dominion.Card[] card_array33 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card34 = new java.util.ArrayList<dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card34, card_array33);
    dominion.Card.CardName cardName36 = dominion.Card.CardName.Province;
    dominion.Card card37 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card34, cardName36);
    dominion.Card.CardName cardName38 = dominion.Card.CardName.Cutpurse;
    dominion.Card card39 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card34, cardName38);
    dominion.Card.CardName cardName40 = dominion.Card.CardName.Silver;
    dominion.Card card41 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card34, cardName40);
    dominion.Card card42 = dominion.Card.getCard(list_card32, cardName40);
    java.util.List<dominion.Card> list_card44 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card32, (java.lang.Integer)23);
    gameState7.cards = list_card32;
    java.util.List<dominion.Card> list_card46 = gameState7.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + dominion.Card.CardName.Province + "'", cardName18.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName20.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Province + "'", cardName27.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + dominion.Card.Type.TREASURE + "'", type30.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + dominion.Card.CardName.Province + "'", cardName36.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName38.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card39);
    org.junit.Assert.assertTrue("'" + cardName40 + "' != '" + dominion.Card.CardName.Silver + "'", cardName40.equals(dominion.Card.CardName.Silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);

  }

  @Test
  public void test396() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test396"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Council_Room;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.Card.Type type16 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card17 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card12, type16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState18.embargoTokens;
    boolean b20 = gameState18.isGameOver();
    boolean b21 = gameState18.isGameOver();
    dominion.Card[] card_array22 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card23 = new java.util.ArrayList<dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card23, card_array22);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Council_Room;
    dominion.Card card26 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card23, cardName25);
    dominion.Card.Type type27 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card28 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card23, type27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card23);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i30 = gameState29.embargoTokens;
    boolean b31 = gameState29.isGameOver();
    boolean b32 = gameState29.isGameOver();
    dominion.Card[] card_array33 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card34 = new java.util.ArrayList<dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card34, card_array33);
    gameState29.cards = arraylist_card34;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i37 = gameState29.embargoTokens;
    gameState18.embargoTokens = hashmap_card_i37;
    java.util.List<dominion.Card> list_card39 = gameState18.cards;
    dominion.Card.Type type40 = dominion.Card.Type.ACTION;
    java.util.List<dominion.Card> list_card41 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card39, type40);
    java.util.List<dominion.Card> list_card42 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card10, type40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName14.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + type16 + "' != '" + dominion.Card.Type.TREASURE + "'", type16.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName25.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + type27 + "' != '" + dominion.Card.Type.TREASURE + "'", type27.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    org.junit.Assert.assertTrue("'" + type40 + "' != '" + dominion.Card.Type.ACTION + "'", type40.equals(dominion.Card.Type.ACTION));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);

  }

  @Test
  public void test397() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test397"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    boolean b9 = gameState7.isGameOver();
    java.util.List<dominion.Player> list_player10 = gameState7.players;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i11 = gameState7.getWinners();
    gameState7.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i11);

  }

  @Test
  public void test398() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test398"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i10 = gameState7.getWinners();
    dominion.GameState gameState11 = gameState7.clone();
    boolean b12 = gameState7.isGameOver();
    java.lang.String str13 = gameState7.toString();
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Council_Room;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.Card.Type type19 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card20 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card15, type19);
    dominion.GameState gameState21 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    gameState21.initializeGame();
    java.util.List<dominion.Player> list_player23 = gameState21.players;
    java.util.List<dominion.Card> list_card24 = gameState21.cards;
    boolean b25 = gameState21.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i26 = gameState21.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i27 = gameState21.gameBoard;
    gameState7.embargoTokens = hashmap_card_i27;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str13.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName17.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + type19 + "' != '" + dominion.Card.Type.TREASURE + "'", type19.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i27);

  }

  @Test
  public void test399() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test399"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    player2.playTreasureCard();
    dominion.Card card4 = null;
    player2.trash(card4);
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.buyCard();

  }

  @Test
  public void test400() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test400"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    dominion.Card card10 = null;
    player9.trash(card10);
    dominion.Card card12 = null;
    player9.discard(card12);
    java.lang.String str14 = player9.toString();
    dominion.Card card15 = null;
    player9.discard(card15);
    dominion.Card card17 = null;
    player9.discard(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " --- hi! --- \nHand: []\nDiscard: [null]\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str14.equals(" --- hi! --- \nHand: []\nDiscard: [null]\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test401() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test401"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    dominion.GameState gameState10 = gameState7.clone();
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Province;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    java.util.List<dominion.Card> list_card17 = gameState16.cards;
    dominion.Card.CardName cardName18 = dominion.Card.CardName.Cutpurse;
    dominion.Card card19 = dominion.Card.getCard(list_card17, cardName18);
    dominion.Card[] card_array20 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card21 = new java.util.ArrayList<dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card21, card_array20);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Council_Room;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName23);
    dominion.Card.Type type25 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card26 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card21, type25);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Council_Room;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName27);
    dominion.Card card29 = dominion.Card.getCard(list_card17, cardName27);
    java.util.List<dominion.Card> list_card31 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card17, (java.lang.Integer)17);
    gameState10.cards = list_card31;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i33 = gameState10.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Province + "'", cardName14.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName18.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName23.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    org.junit.Assert.assertTrue("'" + type25 + "' != '" + dominion.Card.Type.TREASURE + "'", type25.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName27.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i33);

  }

  @Test
  public void test402() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test402"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    dominion.GameState gameState10 = null;
    dominion.Player player12 = new dominion.Player(gameState10, "");
    dominion.Card card13 = null;
    player12.trash(card13);
    java.lang.String str15 = player12.toString();
    gameState7.addPlayer(player12);
    player12.playKingdomCard();
    java.lang.String str18 = player12.toString();
    player12.playTreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str15.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str18.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test403() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test403"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    boolean b9 = gameState7.isGameOver();
    boolean b10 = gameState7.isGameOver();
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    gameState7.cards = arraylist_card12;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i15 = gameState7.embargoTokens;
    gameState7.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i15);

  }

  @Test
  public void test404() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test404"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Council_Room;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.Card.Type type16 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card17 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card12, type16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    gameState18.initializeGame();
    dominion.Card[] card_array20 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card21 = new java.util.ArrayList<dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card21, card_array20);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Council_Room;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName23);
    dominion.Card.Type type25 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card26 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card21, type25);
    dominion.GameState gameState27 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i28 = gameState27.embargoTokens;
    gameState18.embargoTokens = hashmap_card_i28;
    boolean b30 = gameState18.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i31 = gameState18.play();
    dominion.Card[] card_array32 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card33 = new java.util.ArrayList<dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card33, card_array32);
    dominion.Card.CardName cardName35 = dominion.Card.CardName.Council_Room;
    dominion.Card card36 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card33, cardName35);
    dominion.Card.Type type37 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card38 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card33, type37);
    dominion.GameState gameState39 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card33);
    gameState39.initializeGame();
    dominion.Card[] card_array41 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card42 = new java.util.ArrayList<dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card42, card_array41);
    dominion.Card.CardName cardName44 = dominion.Card.CardName.Council_Room;
    dominion.Card card45 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card42, cardName44);
    dominion.Card.Type type46 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card47 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card42, type46);
    dominion.GameState gameState48 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card42);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i49 = gameState48.embargoTokens;
    gameState39.embargoTokens = hashmap_card_i49;
    gameState18.gameBoard = hashmap_card_i49;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i52 = gameState18.gameBoard;
    dominion.GameState gameState53 = gameState18.clone();
    dominion.Card[] card_array54 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card55 = new java.util.ArrayList<dominion.Card>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card55, card_array54);
    dominion.Card.CardName cardName57 = dominion.Card.CardName.Council_Room;
    dominion.Card card58 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card55, cardName57);
    dominion.Card.Type type59 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card60 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card55, type59);
    dominion.GameState gameState61 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card55);
    gameState61.initializeGame();
    dominion.Card[] card_array63 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card64 = new java.util.ArrayList<dominion.Card>();
    boolean b65 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card64, card_array63);
    dominion.Card.CardName cardName66 = dominion.Card.CardName.Council_Room;
    dominion.Card card67 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card64, cardName66);
    dominion.Card.Type type68 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card69 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card64, type68);
    dominion.GameState gameState70 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card64);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i71 = gameState70.embargoTokens;
    gameState61.embargoTokens = hashmap_card_i71;
    boolean b73 = gameState61.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i74 = gameState61.play();
    java.util.List<dominion.Player> list_player75 = null;
    gameState61.players = list_player75;
    dominion.Card[] card_array77 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card78 = new java.util.ArrayList<dominion.Card>();
    boolean b79 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card78, card_array77);
    dominion.Card.CardName cardName80 = dominion.Card.CardName.Council_Room;
    dominion.Card card81 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card78, cardName80);
    dominion.Card.Type type82 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card83 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card78, type82);
    dominion.GameState gameState84 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card78);
    gameState84.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i86 = gameState84.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i87 = gameState84.gameBoard;
    gameState61.embargoTokens = hashmap_card_i87;
    gameState53.embargoTokens = hashmap_card_i87;
    gameState7.embargoTokens = hashmap_card_i87;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName14.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + type16 + "' != '" + dominion.Card.Type.TREASURE + "'", type16.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName23.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    org.junit.Assert.assertTrue("'" + type25 + "' != '" + dominion.Card.Type.TREASURE + "'", type25.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName35.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    org.junit.Assert.assertTrue("'" + type37 + "' != '" + dominion.Card.Type.TREASURE + "'", type37.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName44.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card45);
    org.junit.Assert.assertTrue("'" + type46 + "' != '" + dominion.Card.Type.TREASURE + "'", type46.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    org.junit.Assert.assertTrue("'" + cardName57 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName57.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card58);
    org.junit.Assert.assertTrue("'" + type59 + "' != '" + dominion.Card.Type.TREASURE + "'", type59.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    org.junit.Assert.assertTrue("'" + cardName66 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName66.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card67);
    org.junit.Assert.assertTrue("'" + type68 + "' != '" + dominion.Card.Type.TREASURE + "'", type68.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    org.junit.Assert.assertTrue("'" + cardName80 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName80.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card81);
    org.junit.Assert.assertTrue("'" + type82 + "' != '" + dominion.Card.Type.TREASURE + "'", type82.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i87);

  }

  @Test
  public void test405() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test405"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    dominion.Player player13 = new dominion.Player(gameState7, "");
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i14 = gameState7.getWinners();
    java.lang.String str15 = gameState7.toString();
    java.util.List<dominion.Card> list_card16 = gameState7.pileRetrieve();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str15.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);

  }

  @Test
  public void test406() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test406"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    gameState16.initializeGame();
    java.util.List<dominion.Player> list_player18 = gameState16.players;
    gameState7.players = list_player18;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState7.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);

  }

  @Test
  public void test407() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test407"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    dominion.Player player13 = new dominion.Player(gameState7, "");
    player13.printStateGame();
    java.lang.String str15 = player13.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str15.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test408() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test408"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.lang.String str6 = gameState5.toString();
    gameState5.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState5.gameBoard;
    java.util.List<dominion.Player> list_player9 = gameState5.players;
    boolean b10 = gameState5.isGameOver();
    java.util.List<dominion.Card> list_card11 = gameState5.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str6.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);

  }

  @Test
  public void test409() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test409"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.lang.String str6 = gameState5.toString();
    gameState5.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState5.gameBoard;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState5.play();
    dominion.GameState gameState10 = gameState5.clone();
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Province;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    java.lang.String str17 = gameState16.toString();
    dominion.Card[] card_array18 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card19 = new java.util.ArrayList<dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card19, card_array18);
    dominion.Card.CardName cardName21 = dominion.Card.CardName.Province;
    dominion.Card card22 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card19, cardName21);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Cutpurse;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card19, cardName23);
    java.util.List<dominion.Card> list_card26 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card19, (java.lang.Integer)23);
    dominion.Card[] card_array27 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card28 = new java.util.ArrayList<dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card28, card_array27);
    dominion.Card.CardName cardName30 = dominion.Card.CardName.Province;
    dominion.Card card31 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card28, cardName30);
    dominion.GameState gameState32 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card28);
    dominion.Card.Type type33 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card34 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card28, type33);
    java.util.List<dominion.Card> list_card35 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card19, type33);
    gameState16.cards = list_card35;
    dominion.Player player38 = new dominion.Player(gameState16, "The board game is empty you need to intialize the game!!!!");
    dominion.Card card39 = null;
    player38.trash(card39);
    player38.buyCard();
    player38.buyCard();
    gameState10.addPlayer(player38);
    boolean b44 = gameState10.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str6.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Province + "'", cardName14.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str17.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + dominion.Card.CardName.Province + "'", cardName21.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName23.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + dominion.Card.CardName.Province + "'", cardName30.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    org.junit.Assert.assertTrue("'" + type33 + "' != '" + dominion.Card.Type.TREASURE + "'", type33.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);

  }

  @Test
  public void test410() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test410"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    dominion.Card card10 = null;
    player9.trash(card10);
    dominion.Card card12 = null;
    player9.discard(card12);
    player9.buyCard();
    player9.playKingdomCard();
    player9.playTreasureCard();
    dominion.Card card17 = null;
    player9.discard(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test411() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test411"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState7.getWinners();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i9 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.embargoTokens;
    java.util.List<dominion.Card> list_card11 = gameState7.cards;
    dominion.GameState gameState12 = new dominion.GameState(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);

  }

  @Test
  public void test412() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test412"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Council_Room;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.Card.Type type17 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card18 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card13, type17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState19.embargoTokens;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i21 = gameState19.embargoTokens;
    gameState7.gameBoard = hashmap_card_i21;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i23 = gameState7.play();
    dominion.GameState gameState24 = null;
    dominion.Player player26 = new dominion.Player(gameState24, "");
    player26.playTreasureCard();
    dominion.Card card28 = null;
    player26.trash(card28);
    gameState7.addPlayer(player26);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i31 = gameState7.embargoTokens;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName15.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + dominion.Card.Type.TREASURE + "'", type17.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i31);

  }

  @Test
  public void test413() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test413"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    boolean b6 = gameState5.isGameOver();
    dominion.GameState gameState7 = null;
    dominion.Player player9 = new dominion.Player(gameState7, "");
    player9.playTreasureCard();
    gameState5.addPlayer(player9);
    java.lang.String str12 = gameState5.toString();
    dominion.Card[] card_array13 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card14 = new java.util.ArrayList<dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card14, card_array13);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Council_Room;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card14, cardName16);
    dominion.Card.Type type18 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card19 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card14, type18);
    dominion.GameState gameState20 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card14);
    gameState20.initializeGame();
    dominion.Card[] card_array22 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card23 = new java.util.ArrayList<dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card23, card_array22);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Council_Room;
    dominion.Card card26 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card23, cardName25);
    dominion.Card.Type type27 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card28 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card23, type27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card23);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i30 = gameState29.embargoTokens;
    gameState20.embargoTokens = hashmap_card_i30;
    boolean b32 = gameState20.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i33 = gameState20.play();
    dominion.Card[] card_array34 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card35 = new java.util.ArrayList<dominion.Card>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card35, card_array34);
    dominion.Card.CardName cardName37 = dominion.Card.CardName.Council_Room;
    dominion.Card card38 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card35, cardName37);
    dominion.Card.Type type39 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card40 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card35, type39);
    dominion.GameState gameState41 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card35);
    gameState41.initializeGame();
    dominion.Card[] card_array43 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card44 = new java.util.ArrayList<dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card44, card_array43);
    dominion.Card.CardName cardName46 = dominion.Card.CardName.Council_Room;
    dominion.Card card47 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card44, cardName46);
    dominion.Card.Type type48 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card49 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card44, type48);
    dominion.GameState gameState50 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card44);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i51 = gameState50.embargoTokens;
    gameState41.embargoTokens = hashmap_card_i51;
    gameState20.gameBoard = hashmap_card_i51;
    gameState5.embargoTokens = hashmap_card_i51;
    dominion.Card[] card_array55 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card56 = new java.util.ArrayList<dominion.Card>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card56, card_array55);
    dominion.Card.CardName cardName58 = dominion.Card.CardName.Council_Room;
    dominion.Card card59 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card56, cardName58);
    dominion.Card.Type type60 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card61 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card56, type60);
    dominion.GameState gameState62 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card56);
    gameState5.cards = arraylist_card56;
    dominion.Card[] card_array64 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card65 = new java.util.ArrayList<dominion.Card>();
    boolean b66 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card65, card_array64);
    dominion.Card.CardName cardName67 = dominion.Card.CardName.Council_Room;
    dominion.Card card68 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card65, cardName67);
    dominion.Card.Type type69 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card70 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card65, type69);
    dominion.GameState gameState71 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card65);
    dominion.Player player73 = new dominion.Player(gameState71, "hi!");
    dominion.Card card74 = null;
    player73.trash(card74);
    dominion.Card card76 = null;
    player73.discard(card76);
    java.lang.String str78 = player73.toString();
    java.lang.String str79 = player73.toString();
    gameState5.addPlayer(player73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str12.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName16.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    org.junit.Assert.assertTrue("'" + type18 + "' != '" + dominion.Card.Type.TREASURE + "'", type18.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName25.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + type27 + "' != '" + dominion.Card.Type.TREASURE + "'", type27.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName37.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    org.junit.Assert.assertTrue("'" + type39 + "' != '" + dominion.Card.Type.TREASURE + "'", type39.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName46.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card47);
    org.junit.Assert.assertTrue("'" + type48 + "' != '" + dominion.Card.Type.TREASURE + "'", type48.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName58.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card59);
    org.junit.Assert.assertTrue("'" + type60 + "' != '" + dominion.Card.Type.TREASURE + "'", type60.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    org.junit.Assert.assertTrue("'" + cardName67 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName67.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card68);
    org.junit.Assert.assertTrue("'" + type69 + "' != '" + dominion.Card.Type.TREASURE + "'", type69.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + " --- hi! --- \nHand: []\nDiscard: [null]\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str78.equals(" --- hi! --- \nHand: []\nDiscard: [null]\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + " --- hi! --- \nHand: []\nDiscard: [null]\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str79.equals(" --- hi! --- \nHand: []\nDiscard: [null]\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test414() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test414"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    java.util.List<dominion.Card> list_card12 = gameState7.pileRetrieve();
    java.util.List<dominion.Card> list_card14 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card12, (java.lang.Integer)100);
    java.util.List<dominion.Card> list_card16 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card14, (java.lang.Integer)1);
    dominion.Card[] card_array17 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card18 = new java.util.ArrayList<dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card18, card_array17);
    dominion.Card.CardName cardName20 = dominion.Card.CardName.Province;
    dominion.Card card21 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card18, cardName20);
    dominion.GameState gameState22 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card18);
    java.util.List<dominion.Card> list_card23 = gameState22.cards;
    dominion.Card.Type type24 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card25 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card23, type24);
    dominion.Card[] card_array26 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card27 = new java.util.ArrayList<dominion.Card>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card27, card_array26);
    dominion.Card.CardName cardName29 = dominion.Card.CardName.Province;
    dominion.Card card30 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card27, cardName29);
    dominion.GameState gameState31 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card27);
    java.util.List<dominion.Card> list_card32 = gameState31.cards;
    dominion.Card.Type type33 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card34 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card32, type33);
    java.util.List<dominion.Card> list_card35 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card25, type33);
    java.util.List<dominion.Card> list_card36 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card14, type33);
    dominion.Card[] card_array37 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card38 = new java.util.ArrayList<dominion.Card>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card38, card_array37);
    dominion.Card.CardName cardName40 = dominion.Card.CardName.Council_Room;
    dominion.Card card41 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card38, cardName40);
    dominion.Card.Type type42 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card43 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card38, type42);
    dominion.GameState gameState44 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card38);
    gameState44.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i46 = gameState44.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i47 = gameState44.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i48 = gameState44.gameBoard;
    java.util.List<dominion.Card> list_card49 = gameState44.pileRetrieve();
    java.util.List<dominion.Card> list_card51 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card49, (java.lang.Integer)100);
    dominion.Card[] card_array52 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card53 = new java.util.ArrayList<dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card53, card_array52);
    dominion.Card.CardName cardName55 = dominion.Card.CardName.Province;
    dominion.Card card56 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card53, cardName55);
    dominion.GameState gameState57 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card53);
    java.util.List<dominion.Card> list_card58 = gameState57.cards;
    dominion.Card.Type type59 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card60 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card58, type59);
    dominion.Card[] card_array61 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card62 = new java.util.ArrayList<dominion.Card>();
    boolean b63 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card62, card_array61);
    dominion.Card.CardName cardName64 = dominion.Card.CardName.Province;
    dominion.Card card65 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card62, cardName64);
    dominion.GameState gameState66 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card62);
    java.util.List<dominion.Card> list_card67 = gameState66.cards;
    dominion.Card.Type type68 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card69 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card67, type68);
    java.util.List<dominion.Card> list_card70 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card60, type68);
    java.util.List<dominion.Card> list_card71 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card49, type68);
    java.util.List<dominion.Card> list_card72 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card36, type68);
    dominion.GameState gameState73 = new dominion.GameState(list_card36);
    java.util.List<dominion.Player> list_player74 = gameState73.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + dominion.Card.CardName.Province + "'", cardName20.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + dominion.Card.Type.VICTORY + "'", type24.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + dominion.Card.CardName.Province + "'", cardName29.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    org.junit.Assert.assertTrue("'" + type33 + "' != '" + dominion.Card.Type.VICTORY + "'", type33.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    org.junit.Assert.assertTrue("'" + cardName40 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName40.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card41);
    org.junit.Assert.assertTrue("'" + type42 + "' != '" + dominion.Card.Type.TREASURE + "'", type42.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + dominion.Card.CardName.Province + "'", cardName55.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card58);
    org.junit.Assert.assertTrue("'" + type59 + "' != '" + dominion.Card.Type.VICTORY + "'", type59.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    org.junit.Assert.assertTrue("'" + cardName64 + "' != '" + dominion.Card.CardName.Province + "'", cardName64.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    org.junit.Assert.assertTrue("'" + type68 + "' != '" + dominion.Card.Type.VICTORY + "'", type68.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player74);

  }

  @Test
  public void test415() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test415"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Council_Room;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    dominion.Card.Type type15 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card16 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card11, type15);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card11);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i18 = gameState17.embargoTokens;
    java.util.List<dominion.Player> list_player19 = gameState17.players;
    gameState7.players = list_player19;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i21 = gameState7.embargoTokens;
    boolean b22 = gameState7.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName13.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + dominion.Card.Type.TREASURE + "'", type15.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);

  }

  @Test
  public void test416() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test416"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    java.util.List<dominion.Card> list_card12 = gameState7.pileRetrieve();
    java.util.List<dominion.Card> list_card14 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card12, (java.lang.Integer)0);
    dominion.GameState gameState15 = new dominion.GameState(list_card12);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Province;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    dominion.Card.CardName cardName21 = dominion.Card.CardName.Cutpurse;
    dominion.Card card22 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName21);
    java.util.List<dominion.Card> list_card24 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card17, (java.lang.Integer)23);
    dominion.Card[] card_array25 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card26 = new java.util.ArrayList<dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card26, card_array25);
    dominion.Card.CardName cardName28 = dominion.Card.CardName.Council_Room;
    dominion.Card card29 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card26, cardName28);
    dominion.Card.Type type30 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card31 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card26, type30);
    dominion.GameState gameState32 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card26);
    gameState32.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i34 = gameState32.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i35 = gameState32.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i36 = gameState32.gameBoard;
    java.util.List<dominion.Card> list_card37 = gameState32.pileRetrieve();
    java.util.List<dominion.Card> list_card39 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card37, (java.lang.Integer)100);
    java.util.List<dominion.Card> list_card41 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card39, (java.lang.Integer)1);
    dominion.Card[] card_array42 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card43 = new java.util.ArrayList<dominion.Card>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card43, card_array42);
    dominion.Card.CardName cardName45 = dominion.Card.CardName.Province;
    dominion.Card card46 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card43, cardName45);
    dominion.GameState gameState47 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card43);
    java.util.List<dominion.Card> list_card48 = gameState47.cards;
    dominion.Card.Type type49 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card50 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card48, type49);
    dominion.Card[] card_array51 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card52 = new java.util.ArrayList<dominion.Card>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card52, card_array51);
    dominion.Card.CardName cardName54 = dominion.Card.CardName.Province;
    dominion.Card card55 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card52, cardName54);
    dominion.GameState gameState56 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card52);
    java.util.List<dominion.Card> list_card57 = gameState56.cards;
    dominion.Card.Type type58 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card59 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card57, type58);
    java.util.List<dominion.Card> list_card60 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card50, type58);
    java.util.List<dominion.Card> list_card61 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card39, type58);
    java.util.List<dominion.Card> list_card62 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type58);
    java.util.List<dominion.Card> list_card63 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card12, type58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Province + "'", cardName19.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName21.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName28.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + dominion.Card.Type.TREASURE + "'", type30.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    org.junit.Assert.assertTrue("'" + cardName45 + "' != '" + dominion.Card.CardName.Province + "'", cardName45.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    org.junit.Assert.assertTrue("'" + type49 + "' != '" + dominion.Card.Type.VICTORY + "'", type49.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + dominion.Card.CardName.Province + "'", cardName54.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    org.junit.Assert.assertTrue("'" + type58 + "' != '" + dominion.Card.Type.VICTORY + "'", type58.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);

  }

  @Test
  public void test417() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test417"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    dominion.GameState gameState11 = new dominion.GameState(list_card10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i12 = gameState11.gameBoard;
    dominion.GameState gameState13 = null;
    dominion.Player player15 = new dominion.Player(gameState13, "");
    player15.playTreasureCard();
    dominion.Card card17 = null;
    player15.trash(card17);
    gameState11.addPlayer(player15);
    dominion.Card[] card_array20 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card21 = new java.util.ArrayList<dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card21, card_array20);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Council_Room;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName23);
    dominion.Card.Type type25 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card26 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card21, type25);
    dominion.GameState gameState27 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    gameState27.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i29 = gameState27.getWinners();
    java.util.List<dominion.Card> list_card30 = gameState27.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i31 = gameState27.gameBoard;
    gameState11.embargoTokens = hashmap_card_i31;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i33 = gameState11.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName23.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    org.junit.Assert.assertTrue("'" + type25 + "' != '" + dominion.Card.Type.TREASURE + "'", type25.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i33);

  }

  @Test
  public void test418() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test418"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.lang.String str6 = gameState5.toString();
    gameState5.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState5.gameBoard;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState5.play();
    dominion.GameState gameState10 = gameState5.clone();
    dominion.GameState gameState11 = gameState5.clone();
    dominion.GameState gameState12 = gameState11.clone();
    dominion.Card[] card_array13 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card14 = new java.util.ArrayList<dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card14, card_array13);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Province;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card14, cardName16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card14);
    java.util.List<dominion.Card> list_card19 = gameState18.cards;
    gameState18.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState18.play();
    dominion.Card[] card_array22 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card23 = new java.util.ArrayList<dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card23, card_array22);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Province;
    dominion.Card card26 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card23, cardName25);
    dominion.GameState gameState27 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card23);
    java.lang.String str28 = gameState27.toString();
    dominion.Card[] card_array29 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card30 = new java.util.ArrayList<dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card30, card_array29);
    dominion.Card.CardName cardName32 = dominion.Card.CardName.Council_Room;
    dominion.Card card33 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card30, cardName32);
    gameState27.cards = arraylist_card30;
    dominion.Card[] card_array35 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card36 = new java.util.ArrayList<dominion.Card>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card36, card_array35);
    dominion.Card.CardName cardName38 = dominion.Card.CardName.Council_Room;
    dominion.Card card39 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card36, cardName38);
    dominion.Card.Type type40 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card41 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card36, type40);
    dominion.GameState gameState42 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card36);
    gameState42.initializeGame();
    java.util.List<dominion.Player> list_player44 = gameState42.players;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i45 = gameState42.getWinners();
    java.util.List<dominion.Player> list_player46 = gameState42.players;
    gameState27.players = list_player46;
    gameState18.players = list_player46;
    gameState12.players = list_player46;
    dominion.Card[] card_array50 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card51 = new java.util.ArrayList<dominion.Card>();
    boolean b52 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card51, card_array50);
    dominion.Card.CardName cardName53 = dominion.Card.CardName.Council_Room;
    dominion.Card card54 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card51, cardName53);
    dominion.Card.Type type55 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card56 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card51, type55);
    dominion.GameState gameState57 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card51);
    gameState57.initializeGame();
    java.util.List<dominion.Player> list_player59 = gameState57.players;
    java.util.List<dominion.Card> list_card60 = gameState57.cards;
    dominion.Card[] card_array61 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card62 = new java.util.ArrayList<dominion.Card>();
    boolean b63 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card62, card_array61);
    dominion.Card.CardName cardName64 = dominion.Card.CardName.Council_Room;
    dominion.Card card65 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card62, cardName64);
    dominion.Card.Type type66 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card67 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card62, type66);
    dominion.GameState gameState68 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card62);
    gameState68.initializeGame();
    java.util.List<dominion.Player> list_player70 = gameState68.players;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i71 = gameState68.getWinners();
    java.util.List<dominion.Player> list_player72 = gameState68.players;
    gameState57.players = list_player72;
    java.util.List<dominion.Card> list_card74 = gameState57.pileRetrieve();
    gameState12.cards = list_card74;
    java.lang.String str76 = gameState12.toString();
    gameState12.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str6.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Province + "'", cardName16.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Province + "'", cardName25.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str28.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName32.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName38.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card39);
    org.junit.Assert.assertTrue("'" + type40 + "' != '" + dominion.Card.Type.TREASURE + "'", type40.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    org.junit.Assert.assertTrue("'" + cardName53 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName53.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card54);
    org.junit.Assert.assertTrue("'" + type55 + "' != '" + dominion.Card.Type.TREASURE + "'", type55.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    org.junit.Assert.assertTrue("'" + cardName64 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName64.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card65);
    org.junit.Assert.assertTrue("'" + type66 + "' != '" + dominion.Card.Type.TREASURE + "'", type66.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str76.equals("The board game is empty you need to intialize the game!!!!"));

  }

  @Test
  public void test419() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test419"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    dominion.GameState gameState10 = gameState7.clone();
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Council_Room;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.Card.Type type16 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card17 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card12, type16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    gameState18.initializeGame();
    java.util.List<dominion.Player> list_player20 = gameState18.players;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState18.getWinners();
    java.util.List<dominion.Card> list_card22 = gameState18.pileRetrieve();
    gameState7.cards = list_card22;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName14.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + type16 + "' != '" + dominion.Card.Type.TREASURE + "'", type16.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);

  }

  @Test
  public void test420() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test420"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i17 = gameState16.embargoTokens;
    gameState7.embargoTokens = hashmap_card_i17;
    boolean b19 = gameState7.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState7.play();
    java.util.List<dominion.Player> list_player21 = null;
    gameState7.players = list_player21;
    java.util.List<dominion.Card> list_card23 = gameState7.cards;
    java.util.List<dominion.Player> list_player24 = gameState7.players;
    java.lang.String str25 = gameState7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_player24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str25.equals("The board game is empty you need to intialize the game!!!!"));

  }

  @Test
  public void test421() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test421"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    boolean b10 = gameState7.isGameOver();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    dominion.GameState gameState12 = gameState7.clone();
    java.util.List<dominion.Card> list_card13 = gameState12.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i14 = gameState12.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i14);

  }

  @Test
  public void test422() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test422"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    boolean b10 = gameState7.isGameOver();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    dominion.Player player13 = new dominion.Player(gameState7, " --- The board game is empty you need to intialize the game!!!! --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n");
    java.lang.String str14 = player13.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " ---  --- The board game is empty you need to intialize the game!!!! --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str14.equals(" ---  --- The board game is empty you need to intialize the game!!!! --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test423() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test423"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    dominion.Card card10 = null;
    player9.trash(card10);
    dominion.Card card12 = null;
    player9.discard(card12);
    java.lang.String str14 = player9.toString();
    dominion.Card card15 = null;
    player9.discard(card15);
    dominion.Card card17 = null;
    player9.trash(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " --- hi! --- \nHand: []\nDiscard: [null]\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str14.equals(" --- hi! --- \nHand: []\nDiscard: [null]\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test424() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test424"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Council_Room;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    dominion.Card.Type type15 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card16 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card11, type15);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card11);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i18 = gameState17.embargoTokens;
    java.util.List<dominion.Player> list_player19 = gameState17.players;
    gameState7.players = list_player19;
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Council_Room;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.Card.Type type26 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card27 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card22, type26);
    dominion.GameState gameState28 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i29 = gameState28.embargoTokens;
    boolean b30 = gameState28.isGameOver();
    boolean b31 = gameState28.isGameOver();
    dominion.Card[] card_array32 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card33 = new java.util.ArrayList<dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card33, card_array32);
    dominion.Card.CardName cardName35 = dominion.Card.CardName.Council_Room;
    dominion.Card card36 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card33, cardName35);
    dominion.Card.Type type37 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card38 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card33, type37);
    dominion.GameState gameState39 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card33);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i40 = gameState39.embargoTokens;
    boolean b41 = gameState39.isGameOver();
    boolean b42 = gameState39.isGameOver();
    dominion.Card[] card_array43 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card44 = new java.util.ArrayList<dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card44, card_array43);
    gameState39.cards = arraylist_card44;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i47 = gameState39.embargoTokens;
    gameState28.embargoTokens = hashmap_card_i47;
    gameState7.gameBoard = hashmap_card_i47;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i50 = gameState7.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName13.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + dominion.Card.Type.TREASURE + "'", type15.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName24.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + dominion.Card.Type.TREASURE + "'", type26.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName35.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    org.junit.Assert.assertTrue("'" + type37 + "' != '" + dominion.Card.Type.TREASURE + "'", type37.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i50);

  }

  @Test
  public void test425() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test425"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.List<dominion.Card> list_card11 = gameState7.cards;
    gameState7.initializeGame();
    dominion.Card[] card_array13 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card14 = new java.util.ArrayList<dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card14, card_array13);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Council_Room;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card14, cardName16);
    dominion.Card.Type type18 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card19 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card14, type18);
    dominion.GameState gameState20 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card14);
    gameState20.initializeGame();
    dominion.Card[] card_array22 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card23 = new java.util.ArrayList<dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card23, card_array22);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Council_Room;
    dominion.Card card26 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card23, cardName25);
    dominion.Card.Type type27 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card28 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card23, type27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card23);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i30 = gameState29.embargoTokens;
    gameState20.embargoTokens = hashmap_card_i30;
    gameState7.gameBoard = hashmap_card_i30;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i33 = gameState7.embargoTokens;
    java.util.List<dominion.Player> list_player34 = gameState7.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName16.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    org.junit.Assert.assertTrue("'" + type18 + "' != '" + dominion.Card.Type.TREASURE + "'", type18.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName25.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + type27 + "' != '" + dominion.Card.Type.TREASURE + "'", type27.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);

  }

  @Test
  public void test426() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test426"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    gameState5.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState5.play();
    java.lang.String str9 = gameState5.toString();
    dominion.Player player11 = new dominion.Player(gameState5, "");
    dominion.Card card12 = null;
    player11.trash(card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str9.equals("The board game is empty you need to intialize the game!!!!"));

  }

  @Test
  public void test427() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test427"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    java.util.List<dominion.Player> list_player11 = null;
    gameState7.players = list_player11;
    dominion.Card[] card_array13 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card14 = new java.util.ArrayList<dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card14, card_array13);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Council_Room;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card14, cardName16);
    dominion.Card.Type type18 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card19 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card14, type18);
    dominion.GameState gameState20 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card14);
    gameState20.initializeGame();
    dominion.Card[] card_array22 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card23 = new java.util.ArrayList<dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card23, card_array22);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Council_Room;
    dominion.Card card26 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card23, cardName25);
    dominion.Card.Type type27 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card28 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card23, type27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card23);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i30 = gameState29.embargoTokens;
    gameState20.embargoTokens = hashmap_card_i30;
    gameState7.gameBoard = hashmap_card_i30;
    dominion.Player player34 = new dominion.Player(gameState7, " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n");
    player34.playTreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName16.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    org.junit.Assert.assertTrue("'" + type18 + "' != '" + dominion.Card.Type.TREASURE + "'", type18.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName25.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + type27 + "' != '" + dominion.Card.Type.TREASURE + "'", type27.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i30);

  }

  @Test
  public void test428() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test428"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState(list_card6);
    java.util.List<dominion.Card> list_card9 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card6, (java.lang.Integer)50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);

  }

  @Test
  public void test429() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test429"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    dominion.GameState gameState12 = null;
    dominion.Player player14 = new dominion.Player(gameState12, "");
    dominion.Card card15 = null;
    player14.trash(card15);
    dominion.Card card17 = null;
    player14.discard(card17);
    gameState7.addPlayer(player14);
    player14.buyCard();
    dominion.Card card21 = null;
    player14.trash(card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);

  }

  @Test
  public void test430() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test430"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.List<dominion.Card> list_card6 = gameState5.cards;
    dominion.Card[] card_array7 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card8 = new java.util.ArrayList<dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card8, card_array7);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Council_Room;
    dominion.Card card11 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName10);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Mine;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName12);
    gameState5.cards = arraylist_card8;
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card8);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i16 = gameState15.embargoTokens;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState15.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName10.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Mine + "'", cardName12.equals(dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);

  }

  @Test
  public void test431() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test431"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.trash(card3);
    player2.buyCard();
    player2.playTreasureCard();
    dominion.Card card7 = null;
    player2.discard(card7);

  }

  @Test
  public void test432() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test432"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    dominion.Card card10 = null;
    player9.trash(card10);
    player9.printStateGame();
    player9.buyCard();
    player9.printStateGame();
    player9.printStateGame();
    dominion.Card card16 = null;
    player9.trash(card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test433() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test433"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    boolean b6 = gameState5.isGameOver();
    dominion.GameState gameState7 = null;
    dominion.Player player9 = new dominion.Player(gameState7, "");
    player9.playTreasureCard();
    gameState5.addPlayer(player9);
    dominion.Player player13 = new dominion.Player(gameState5, " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n");
    player13.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test434() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test434"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.List<dominion.Player> list_player9 = gameState7.players;
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Council_Room;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.Card.Type type16 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card17 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card12, type16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    gameState18.initializeGame();
    java.util.List<dominion.Player> list_player20 = gameState18.players;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState18.getWinners();
    java.util.List<dominion.Player> list_player22 = gameState18.players;
    gameState7.players = list_player22;
    java.util.List<dominion.Card> list_card24 = gameState7.pileRetrieve();
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Copper;
    dominion.Card card26 = dominion.Card.getCard(list_card24, cardName25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName14.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + type16 + "' != '" + dominion.Card.Type.TREASURE + "'", type16.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Copper + "'", cardName25.equals(dominion.Card.CardName.Copper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);

  }

  @Test
  public void test435() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test435"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Council_Room;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    dominion.Card.Type type15 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card16 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card11, type15);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card11);
    gameState17.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i19 = gameState17.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState17.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i21 = gameState17.gameBoard;
    java.util.List<dominion.Card> list_card22 = gameState17.pileRetrieve();
    java.util.List<dominion.Card> list_card24 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card22, (java.lang.Integer)100);
    java.util.List<dominion.Card> list_card26 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card24, (java.lang.Integer)1);
    gameState7.cards = list_card24;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card28 = dominion.Randomness.randomMember(list_card24);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName13.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + dominion.Card.Type.TREASURE + "'", type15.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);

  }

  @Test
  public void test436() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test436"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i10 = gameState7.getWinners();
    dominion.GameState gameState11 = gameState7.clone();
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Council_Room;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.Card.Type type17 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card18 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card13, type17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    gameState19.initializeGame();
    java.util.List<dominion.Player> list_player21 = gameState19.players;
    java.util.List<dominion.Card> list_card22 = gameState19.cards;
    boolean b23 = gameState19.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i24 = gameState19.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i25 = gameState19.gameBoard;
    gameState11.embargoTokens = hashmap_card_i25;
    dominion.Card[] card_array27 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card28 = new java.util.ArrayList<dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card28, card_array27);
    dominion.Card.CardName cardName30 = dominion.Card.CardName.Council_Room;
    dominion.Card card31 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card28, cardName30);
    dominion.Card.Type type32 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card33 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card28, type32);
    dominion.GameState gameState34 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card28);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i35 = gameState34.embargoTokens;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i36 = gameState34.embargoTokens;
    gameState11.embargoTokens = hashmap_card_i36;
    dominion.GameState gameState38 = gameState11.clone();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i39 = gameState11.getWinners();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i40 = gameState11.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName15.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + dominion.Card.Type.TREASURE + "'", type17.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName30.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    org.junit.Assert.assertTrue("'" + type32 + "' != '" + dominion.Card.Type.TREASURE + "'", type32.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i40);

  }

  @Test
  public void test437() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test437"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.embargoTokens;
    boolean b9 = gameState7.isGameOver();
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Province;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card11);
    java.util.List<dominion.Card> list_card16 = gameState15.cards;
    dominion.Card.Type type17 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card18 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card16, type17);
    dominion.Card[] card_array19 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card20 = new java.util.ArrayList<dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card20, card_array19);
    dominion.Card.CardName cardName22 = dominion.Card.CardName.Province;
    dominion.Card card23 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card20, cardName22);
    dominion.GameState gameState24 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card20);
    java.util.List<dominion.Card> list_card25 = gameState24.cards;
    dominion.Card.Type type26 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card27 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card25, type26);
    java.util.List<dominion.Card> list_card28 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card16, type26);
    gameState7.cards = list_card16;
    java.util.List<dominion.Card> list_card31 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card16, (java.lang.Integer)(-1));
    dominion.Card[] card_array32 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card33 = new java.util.ArrayList<dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card33, card_array32);
    dominion.Card.CardName cardName35 = dominion.Card.CardName.Province;
    dominion.Card card36 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card33, cardName35);
    dominion.Card.CardName cardName37 = dominion.Card.CardName.Cutpurse;
    dominion.Card card38 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card33, cardName37);
    java.util.List<dominion.Card> list_card40 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card33, (java.lang.Integer)23);
    dominion.Card[] card_array41 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card42 = new java.util.ArrayList<dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card42, card_array41);
    dominion.Card.CardName cardName44 = dominion.Card.CardName.Council_Room;
    dominion.Card card45 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card42, cardName44);
    dominion.Card.Type type46 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card47 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card42, type46);
    java.util.List<dominion.Card> list_card48 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card40, type46);
    java.util.List<dominion.Card> list_card49 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card31, type46);
    dominion.Card.CardName cardName50 = dominion.Card.CardName.Salvager;
    dominion.Card card51 = dominion.Card.getCard(list_card31, cardName50);
    dominion.GameState gameState52 = new dominion.GameState(list_card31);
    dominion.GameState gameState53 = null;
    dominion.Player player55 = new dominion.Player(gameState53, "");
    player55.playTreasureCard();
    dominion.Card card57 = null;
    player55.trash(card57);
    player55.playTreasureCard();
    dominion.Card card60 = null;
    // The following exception was thrown during execution in test generation
    try {
    gameState52.pollPile(player55, card60);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Province + "'", cardName13.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + dominion.Card.Type.VICTORY + "'", type17.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + dominion.Card.CardName.Province + "'", cardName22.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + dominion.Card.Type.VICTORY + "'", type26.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + dominion.Card.CardName.Province + "'", cardName35.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName37.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName44.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card45);
    org.junit.Assert.assertTrue("'" + type46 + "' != '" + dominion.Card.Type.TREASURE + "'", type46.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    org.junit.Assert.assertTrue("'" + cardName50 + "' != '" + dominion.Card.CardName.Salvager + "'", cardName50.equals(dominion.Card.CardName.Salvager));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card51);

  }

  @Test
  public void test438() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test438"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.lang.String str6 = gameState5.toString();
    dominion.Card[] card_array7 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card8 = new java.util.ArrayList<dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card8, card_array7);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Province;
    dominion.Card card11 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName10);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Cutpurse;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName12);
    java.util.List<dominion.Card> list_card15 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)arraylist_card8, (java.lang.Integer)23);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Province;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    dominion.GameState gameState21 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card17);
    dominion.Card.Type type22 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card23 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card17, type22);
    java.util.List<dominion.Card> list_card24 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card8, type22);
    gameState5.cards = list_card24;
    dominion.Player player27 = new dominion.Player(gameState5, "The board game is empty you need to intialize the game!!!!");
    dominion.Card card28 = null;
    player27.trash(card28);
    player27.buyCard();
    dominion.Card card31 = null;
    player27.discard(card31);
    player27.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str6.equals("The board game is empty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Province + "'", cardName10.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName12.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Province + "'", cardName19.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + dominion.Card.Type.TREASURE + "'", type22.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);

  }

  @Test
  public void test439() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test439"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Card[] card_array8 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card9 = new java.util.ArrayList<dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card9, card_array8);
    dominion.Card.CardName cardName11 = dominion.Card.CardName.Council_Room;
    dominion.Card card12 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card9, cardName11);
    dominion.Card.Type type13 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card14 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card9, type13);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card9);
    gameState15.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState15.getWinners();
    java.util.List<dominion.Card> list_card18 = gameState15.cards;
    dominion.GameState gameState19 = new dominion.GameState(list_card18);
    gameState7.cards = list_card18;
    dominion.GameState gameState21 = new dominion.GameState(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName11.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    org.junit.Assert.assertTrue("'" + type13 + "' != '" + dominion.Card.Type.TREASURE + "'", type13.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);

  }

  @Test
  public void test440() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test440"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    player2.playTreasureCard();
    dominion.Card card4 = null;
    player2.trash(card4);
    player2.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test441() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test441"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    java.lang.String str10 = gameState7.toString();
    dominion.Player player12 = new dominion.Player(gameState7, " --- hi! --- \nHand: []\nDiscard: [null]\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n");
    player12.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "The board game is empty you need to intialize the game!!!!"+ "'", str10.equals("The board game is empty you need to intialize the game!!!!"));

  }

  @Test
  public void test442() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test442"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    boolean b6 = gameState5.isGameOver();
    dominion.GameState gameState7 = null;
    dominion.Player player9 = new dominion.Player(gameState7, "");
    player9.playTreasureCard();
    gameState5.addPlayer(player9);
    dominion.GameState gameState12 = gameState5.clone();
    boolean b13 = gameState12.isGameOver();
    dominion.Player player15 = new dominion.Player(gameState12, " --- The board game is empty you need to intialize the game!!!! --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n");
    player15.playTreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test443() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test443"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    player2.playTreasureCard();
    dominion.Card card4 = null;
    player2.trash(card4);
    player2.playKingdomCard();
    dominion.Card card7 = null;
    player2.trash(card7);
    dominion.Card card9 = null;
    player2.discard(card9);
    player2.buyCard();

  }

  @Test
  public void test444() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test444"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card9 = gameState7.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.embargoTokens;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);

  }

  @Test
  public void test445() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test445"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Council_Room;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.Card.Type type14 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card15 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card10, type14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i17 = gameState16.embargoTokens;
    gameState7.embargoTokens = hashmap_card_i17;
    boolean b19 = gameState7.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState7.getWinners();
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Council_Room;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.Card.Type type26 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card27 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card22, type26);
    dominion.GameState gameState28 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    gameState28.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i30 = gameState28.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i31 = gameState28.getWinners();
    dominion.GameState gameState32 = gameState28.clone();
    dominion.Card[] card_array33 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card34 = new java.util.ArrayList<dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card34, card_array33);
    dominion.Card.CardName cardName36 = dominion.Card.CardName.Council_Room;
    dominion.Card card37 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card34, cardName36);
    dominion.Card.Type type38 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card39 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card34, type38);
    dominion.GameState gameState40 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card34);
    gameState40.initializeGame();
    java.util.List<dominion.Player> list_player42 = gameState40.players;
    java.util.List<dominion.Card> list_card43 = gameState40.cards;
    boolean b44 = gameState40.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i45 = gameState40.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i46 = gameState40.gameBoard;
    gameState32.embargoTokens = hashmap_card_i46;
    dominion.Card[] card_array48 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card49 = new java.util.ArrayList<dominion.Card>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card49, card_array48);
    dominion.Card.CardName cardName51 = dominion.Card.CardName.Council_Room;
    dominion.Card card52 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card49, cardName51);
    dominion.Card.Type type53 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card54 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card49, type53);
    dominion.GameState gameState55 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card49);
    gameState55.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i57 = gameState55.getWinners();
    dominion.Card[] card_array58 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card59 = new java.util.ArrayList<dominion.Card>();
    boolean b60 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card59, card_array58);
    dominion.Card.CardName cardName61 = dominion.Card.CardName.Council_Room;
    dominion.Card card62 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card59, cardName61);
    dominion.Card.Type type63 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card64 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card59, type63);
    dominion.GameState gameState65 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card59);
    gameState65.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i67 = gameState65.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i68 = gameState65.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i69 = gameState65.gameBoard;
    java.util.List<dominion.Card> list_card70 = gameState65.pileRetrieve();
    java.util.List<dominion.Card> list_card72 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card70, (java.lang.Integer)100);
    java.util.List<dominion.Card> list_card74 = dominion.Card.priceCheck((java.lang.Iterable<dominion.Card>)list_card72, (java.lang.Integer)1);
    gameState55.cards = list_card72;
    gameState32.cards = list_card72;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i77 = gameState32.embargoTokens;
    gameState7.gameBoard = hashmap_card_i77;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i79 = gameState7.embargoTokens;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName12.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + dominion.Card.Type.TREASURE + "'", type14.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName24.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + dominion.Card.Type.TREASURE + "'", type26.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName36.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    org.junit.Assert.assertTrue("'" + type38 + "' != '" + dominion.Card.Type.TREASURE + "'", type38.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName51.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card52);
    org.junit.Assert.assertTrue("'" + type53 + "' != '" + dominion.Card.Type.TREASURE + "'", type53.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    org.junit.Assert.assertTrue("'" + cardName61 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName61.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card62);
    org.junit.Assert.assertTrue("'" + type63 + "' != '" + dominion.Card.Type.TREASURE + "'", type63.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i79);

  }

  @Test
  public void test446() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test446"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    dominion.Card card10 = null;
    player9.trash(card10);
    dominion.Card card12 = null;
    player9.discard(card12);
    player9.buyCard();
    player9.playKingdomCard();
    dominion.Card card16 = null;
    player9.trash(card16);
    player9.playTreasureCard();
    player9.playKingdomCard();
    player9.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);

  }

  @Test
  public void test447() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test447"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Council_Room;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.Card.Type type5 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card6 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type5);
    dominion.GameState gameState7 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<dominion.Card> list_card10 = gameState7.cards;
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Council_Room;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.Card.Type type16 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card17 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card12, type16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    gameState18.initializeGame();
    java.util.List<dominion.Player> list_player20 = gameState18.players;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i21 = gameState18.gameBoard;
    dominion.Card[] card_array22 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card23 = new java.util.ArrayList<dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card23, card_array22);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Council_Room;
    dominion.Card card26 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card23, cardName25);
    dominion.Card.Type type27 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card28 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card23, type27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card23);
    dominion.Player player31 = new dominion.Player(gameState29, "hi!");
    dominion.Card card32 = null;
    player31.trash(card32);
    player31.printStateGame();
    player31.buyCard();
    player31.printStateGame();
    gameState18.addPlayer(player31);
    gameState7.addPlayer(player31);
    java.lang.String str39 = player31.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName3.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + dominion.Card.Type.TREASURE + "'", type5.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName14.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + type16 + "' != '" + dominion.Card.Type.TREASURE + "'", type16.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName25.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + type27 + "' != '" + dominion.Card.Type.TREASURE + "'", type27.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + " --- hi! --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str39.equals(" --- hi! --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));

  }

  @Test
  public void test448() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test448"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Province;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    boolean b6 = gameState5.isGameOver();
    dominion.GameState gameState7 = null;
    dominion.Player player9 = new dominion.Player(gameState7, "");
    player9.playTreasureCard();
    gameState5.addPlayer(player9);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState5.getWinners();
    dominion.Card[] card_array13 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card14 = new java.util.ArrayList<dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card14, card_array13);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Council_Room;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card14, cardName16);
    dominion.Card.Type type18 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card19 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card14, type18);
    dominion.GameState gameState20 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card14);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i21 = gameState20.embargoTokens;
    java.util.List<dominion.Player> list_player22 = gameState20.players;
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Council_Room;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.Card.Type type28 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card24, type28);
    dominion.GameState gameState30 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card24);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i31 = gameState30.embargoTokens;
    java.util.List<dominion.Player> list_player32 = gameState30.players;
    gameState20.players = list_player32;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = gameState20.embargoTokens;
    gameState5.embargoTokens = hashmap_card_i34;
    dominion.GameState gameState36 = null;
    dominion.Player player38 = new dominion.Player(gameState36, "");
    player38.playTreasureCard();
    java.lang.String str40 = player38.toString();
    player38.buyCard();
    gameState5.addPlayer(player38);
    java.util.List<dominion.Card> list_card43 = gameState5.pileRetrieve();
    dominion.GameState gameState44 = new dominion.GameState(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Province + "'", cardName3.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName16.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    org.junit.Assert.assertTrue("'" + type18 + "' != '" + dominion.Card.Type.TREASURE + "'", type18.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName26.equals(dominion.Card.CardName.Council_Room));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + dominion.Card.Type.TREASURE + "'", type28.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + " ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"+ "'", str40.equals(" ---  --- \nHand: []\nDiscard: []\nDeck: []\nPlayed Cards: []\nnumActions: 0\ncoins: 0\nnumBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);

  }

}
