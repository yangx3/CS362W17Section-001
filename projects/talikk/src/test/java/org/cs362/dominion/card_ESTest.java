/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 28 00:32:14 GMT 2017
 */

package org.cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.List;
import org.cs362.dominion.card;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class card_ESTest extends card_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      card.initVictoryStock((-2659));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      card.CardName card_CardName0 = card.CardName.Silver;
      card.Type card_Type0 = card.Type.ACTION;
      card card0 = new card(card_CardName0, card_Type0, 350, 350, 1);
      card0.getType();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      card.CardName card_CardName0 = card.CardName.Providence;
      card.Type card_Type0 = card.Type.TREASURE;
      card card0 = new card(card_CardName0, card_Type0, 7, 7, 7);
      card0.getType();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      card.CardName card_CardName0 = card.CardName.Estate;
      card.Type card_Type0 = card.Type.TREASURE;
      card card0 = new card(card_CardName0, card_Type0, 0, 0, 0);
      card0.getTreasureValue();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      card.CardName card_CardName0 = card.CardName.Silver;
      card.Type card_Type0 = card.Type.VICTORY;
      card card0 = new card(card_CardName0, card_Type0, (-2659), (-2659), (-1992));
      card0.getTreasureValue();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      card.CardName card_CardName0 = card.CardName.Providence;
      card.Type card_Type0 = card.Type.ACTION;
      card card0 = new card(card_CardName0, card_Type0, 0, 0, 0);
      card0.getScore();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      card.CardName card_CardName0 = card.CardName.Duchy;
      card.Type card_Type0 = card.Type.VICTORY;
      card card0 = new card(card_CardName0, card_Type0, (-5340), (-5340), 1769);
      card0.getScore();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      card.CardName card_CardName0 = card.CardName.Gold;
      card.Type card_Type0 = card.Type.ACTION;
      card card0 = new card(card_CardName0, card_Type0, 5, 82, 5);
      card0.getName();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      card.CardName card_CardName0 = card.CardName.Duchy;
      card.Type card_Type0 = card.Type.VICTORY;
      card card0 = new card(card_CardName0, card_Type0, 250, 250, 250);
      card0.getName();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      card.CardName card_CardName0 = card.CardName.Estate;
      card.Type card_Type0 = card.Type.VICTORY;
      card card0 = new card(card_CardName0, card_Type0, 0, 1253, 0);
      card0.getCost();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      card.CardName card_CardName0 = card.CardName.Silver;
      card.Type card_Type0 = card.Type.ACTION;
      card card0 = new card(card_CardName0, card_Type0, (-1), (-1), (-1));
      card0.getCost();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      card.initVictoryStock(3);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      card.initVictoryStock(2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      card.initVictoryStock(350);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      card.initVictoryStock(1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      card.initGoldStock();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      card.initSilverStock();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      List<card> list0 = card.initCopperStock();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      List<card> list0 = card.initDeck();
      assertEquals(10, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      card.CardName card_CardName0 = card.CardName.Silver;
      card card0 = new card(card_CardName0, (card.Type) null, 350, 1, 1);
      card0.getType();
      assertEquals(350, card0.getCost());
      assertEquals(1, card0.getScore());
      assertEquals(1, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      card.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      card.CardName card_CardName0 = card.CardName.Silver;
      card card0 = new card(card_CardName0, (card.Type) null, 350, 1, 1);
      int int0 = card0.getTreasureValue();
      assertEquals(1, card0.getScore());
      assertEquals(1, int0);
      assertEquals(350, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      card.CardName card_CardName0 = card.CardName.Silver;
      card card0 = new card(card_CardName0, (card.Type) null, 350, 1, 1);
      int int0 = card0.getScore();
      assertEquals(350, card0.getCost());
      assertEquals(1, int0);
      assertEquals(1, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      card.CardName card_CardName0 = card.CardName.Silver;
      card card0 = new card(card_CardName0, (card.Type) null, 350, 1, 1);
      card0.displaySimpleInfo();
      assertEquals(350, card0.getCost());
      assertEquals(1, card0.getTreasureValue());
      assertEquals(1, card0.getScore());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      card.CardName card_CardName0 = card.CardName.Silver;
      card card0 = new card(card_CardName0, (card.Type) null, 350, 1, 1);
      card0.displayCardInfo();
      assertEquals(1, card0.getScore());
      assertEquals(1, card0.getTreasureValue());
      assertEquals(350, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      card.Type card_Type0 = card.Type.VICTORY;
      card card0 = new card((card.CardName) null, card_Type0, 21, 21, 21);
      int int0 = card0.getCost();
      assertEquals(21, card0.getTreasureValue());
      assertEquals(21, card0.getScore());
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      card.Type card_Type0 = card.Type.VICTORY;
      card card0 = new card((card.CardName) null, card_Type0, 21, 21, 21);
      card0.getName();
      assertEquals(21, card0.getTreasureValue());
      assertEquals(21, card0.getCost());
      assertEquals(21, card0.getScore());
  }
}
