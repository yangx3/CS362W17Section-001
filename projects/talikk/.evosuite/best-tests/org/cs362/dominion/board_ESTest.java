/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 28 01:19:52 GMT 2017
 */

package org.cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import org.cs362.dominion.board;
import org.cs362.dominion.card;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class board_ESTest extends board_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      board board0 = new board();
      board0.takeProvidence();
      board0.takeProvidence();
      board0.takeProvidence();
      board0.takeProvidence();
      board0.takeProvidence();
      board0.takeProvidence();
      board0.takeProvidence();
      board0.takeProvidence();
      board0.takeProvidence();
      assertFalse(board0.isProvidenceEmpty());
      
      board0.takeProvidence();
      boolean boolean0 = board0.isProvidenceEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      board board0 = new board();
      board0.takeGold();
      board0.takeGold();
      board0.takeGold();
      board0.takeGold();
      board0.takeGold();
      board0.takeGold();
      board0.takeGold();
      board0.takeGold();
      board0.takeGold();
      board0.takeGold();
      int int0 = board0.getNumberOfEmptyDecks();
      assertEquals(1, int0);
      assertFalse(board0.isProvidenceEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      board board0 = new board();
      board0.takeSilver();
      board0.takeSilver();
      board0.takeSilver();
      board0.takeSilver();
      board0.takeSilver();
      board0.takeSilver();
      board0.takeSilver();
      board0.takeSilver();
      board0.takeSilver();
      board0.takeSilver();
      int int0 = board0.getNumberOfEmptyDecks();
      assertFalse(board0.isProvidenceEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      board board0 = new board();
      board0.takeCopper();
      board0.takeCopper();
      board0.takeCopper();
      board0.takeCopper();
      board0.takeCopper();
      board0.takeCopper();
      board0.takeCopper();
      board0.takeCopper();
      board0.takeCopper();
      board0.takeCopper();
      int int0 = board0.getNumberOfEmptyDecks();
      assertFalse(board0.isProvidenceEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      board board0 = new board();
      board0.takeProvidence();
      board0.takeProvidence();
      board0.takeProvidence();
      board0.takeProvidence();
      board0.takeProvidence();
      board0.takeProvidence();
      board0.takeProvidence();
      board0.takeProvidence();
      board0.takeProvidence();
      assertFalse(board0.isProvidenceEmpty());
      
      board0.takeProvidence();
      int int0 = board0.getNumberOfEmptyDecks();
      assertTrue(board0.isProvidenceEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      board board0 = new board();
      board0.takeDuchy();
      board0.takeDuchy();
      board0.takeDuchy();
      board0.takeDuchy();
      board0.takeDuchy();
      board0.takeDuchy();
      board0.takeDuchy();
      board0.takeDuchy();
      board0.takeDuchy();
      card card0 = board0.takeDuchy();
      assertEquals(3, card0.getScore());
      assertNotNull(card0);
      
      int int0 = board0.getNumberOfEmptyDecks();
      assertFalse(board0.isProvidenceEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      board board0 = new board();
      board0.takeEstate();
      board0.takeEstate();
      board0.takeEstate();
      board0.takeEstate();
      board0.takeEstate();
      board0.takeEstate();
      board0.takeEstate();
      board0.takeEstate();
      board0.takeEstate();
      card card0 = board0.takeEstate();
      assertNotNull(card0);
      
      int int0 = board0.getNumberOfEmptyDecks();
      assertEquals(1, int0);
      assertFalse(board0.isProvidenceEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      board board0 = new board();
      int int0 = board0.getNumberOfEmptyDecks();
      assertFalse(board0.isProvidenceEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      board board0 = new board();
      board0.takeProvidence();
      board0.takeProvidence();
      board0.takeProvidence();
      board0.takeProvidence();
      board0.takeProvidence();
      board0.takeProvidence();
      board0.takeProvidence();
      board0.takeProvidence();
      board0.takeProvidence();
      assertFalse(board0.isProvidenceEmpty());
      
      board0.takeProvidence();
      board0.takeProvidence();
      assertTrue(board0.isProvidenceEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      board board0 = new board();
      board0.takeDuchy();
      board0.takeDuchy();
      board0.takeDuchy();
      board0.takeDuchy();
      card card0 = board0.takeDuchy();
      board0.takeDuchy();
      board0.takeDuchy();
      board0.takeDuchy();
      card card1 = board0.takeDuchy();
      assertNotSame(card1, card0);
      
      card card2 = board0.takeDuchy();
      assertEquals(5, card2.getCost());
      assertNotNull(card2);
      
      board0.takeDuchy();
      assertFalse(board0.isProvidenceEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      board board0 = new board();
      board0.takeEstate();
      board0.takeEstate();
      board0.takeEstate();
      board0.takeEstate();
      board0.takeEstate();
      board0.takeEstate();
      board0.takeEstate();
      card card0 = board0.takeEstate();
      card card1 = board0.takeEstate();
      assertNotSame(card1, card0);
      
      card card2 = board0.takeEstate();
      assertNotNull(card2);
      
      board0.takeEstate();
      assertFalse(board0.isProvidenceEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      board board0 = new board();
      board0.takeGold();
      board0.takeGold();
      board0.takeGold();
      board0.takeGold();
      board0.takeGold();
      card card0 = board0.takeGold();
      board0.takeGold();
      board0.takeGold();
      card card1 = board0.takeGold();
      assertNotSame(card1, card0);
      
      card card2 = board0.takeGold();
      assertNotNull(card2);
      
      board0.takeGold();
      assertFalse(board0.isProvidenceEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      board board0 = new board();
      board0.takeSilver();
      board0.takeSilver();
      board0.takeSilver();
      board0.takeSilver();
      board0.takeSilver();
      board0.takeSilver();
      board0.takeSilver();
      card card0 = board0.takeSilver();
      card card1 = board0.takeSilver();
      assertNotSame(card1, card0);
      
      card card2 = board0.takeSilver();
      assertNotNull(card2);
      
      board0.takeSilver();
      assertFalse(board0.isProvidenceEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      board board0 = new board();
      board0.takeCopper();
      board0.takeCopper();
      board0.takeCopper();
      board0.takeCopper();
      card card0 = board0.takeCopper();
      board0.takeCopper();
      board0.takeCopper();
      board0.takeCopper();
      card card1 = board0.takeCopper();
      assertNotSame(card1, card0);
      
      card card2 = board0.takeCopper();
      assertNotNull(card2);
      
      board0.takeCopper();
      assertFalse(board0.isProvidenceEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[0];
      board.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      board board0 = new board();
      boolean boolean0 = board0.isProvidenceEmpty();
      assertFalse(boolean0);
  }
}
