/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 28 05:56:34 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ActionCard_ESTest extends ActionCard_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("council_room", "council_room", 779, 779);
      Player player0 = new Player("council_room");
      ArrayList<Card> arrayList0 = player0.discard;
      Board board0 = new Board(arrayList0);
      Player player1 = new Player("council_room");
      actionCard0.market(player0, player1, board0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("Position: ", "Position: ", (-2382), (-2382));
      Player player0 = new Player("Position: ");
      ArrayList<Card> arrayList0 = player0.in_play;
      Board board0 = new Board(arrayList0);
      board0.on_board = arrayList0;
      actionCard0.market(player0, player0, board0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("94^]b", "94^]b", (-382), (-382));
      Player player0 = new Player("94^]b");
      ArrayList<Card> arrayList0 = player0.deck;
      Board board0 = new Board(arrayList0);
      actionCard0.festival(player0, player0, board0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard((String) null, " Not Treasure: ", (-1), (-1));
      Player player0 = new Player("\nPlaying feast card.\n");
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      Board board0 = new Board(arrayList0);
      actionCard0.festival(player0, (Player) null, board0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("cS?Pbx'-y:gd9", "", 25, 1086);
      Player player0 = new Player("cS?Pbx'-y:gd9");
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      Board board0 = new Board(arrayList0);
      // Undeclared exception!
      try { 
        actionCard0.festival((Player) null, player0, board0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("ActionCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard(" is drawing from the board card: \n type:  ", " is drawing from the board card: \n type:  ", 635, 635);
      Player player0 = new Player("l6J51u':mf> l+");
      ArrayList<Card> arrayList0 = player0.deck;
      Board board0 = new Board(arrayList0);
      Random.setNextRandom(635);
      actionCard0.smithy(player0, player0, board0);
      actionCard0.chapel(player0, player0, board0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard(" is drawing from the board card: \n type:  ", " is drawing from the board card: \n type:  ", 635, 635);
      Player player0 = new Player("l6J51u':mf> l+");
      ArrayList<Card> arrayList0 = player0.deck;
      Board board0 = new Board(arrayList0);
      Player player1 = new Player((String) null);
      actionCard0.market(player0, player1, board0);
      actionCard0.chapel(player0, player1, board0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player("festival");
      Random.setNextRandom(635);
      ArrayList<Card> arrayList0 = player0.discard;
      Board board0 = new Board(arrayList0);
      ActionCard actionCard0 = new ActionCard("festival", "l6J51u':mf> l+", (-1095), 1452);
      Player player1 = new Player("&zts5?he%I");
      actionCard0.chancellor(player1, player0, board0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("festival", "copper", 13, 13);
      Player player0 = new Player((String) null);
      ArrayList<Card> arrayList0 = player0.in_play;
      Board board0 = new Board(arrayList0);
      board0.on_board = arrayList0;
      int int0 = actionCard0.chancellor(player0, player0, board0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("aFwB3Vl,sZMv$6B", " Found Treasure: ", 0, 0);
      Player player0 = new Player("aFwB3Vl,sZMv$6B");
      ArrayList<Card> arrayList0 = player0.deck;
      Board board0 = new Board(arrayList0);
      actionCard0.village(player0, player0, board0);
      Player player1 = new Player("DL#^sq&W?Xg,");
      int int0 = actionCard0.cellar(player0, player1, board0);
      assertEquals(8, arrayList0.size());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("M#", "M#", 0, 0);
      Player player0 = new Player("mA%i\"L=aJ,Ff");
      ArrayList<Card> arrayList0 = player0.in_play;
      Board board0 = new Board(arrayList0);
      int int0 = actionCard0.smithy(player0, player0, board0);
      assertEquals(1, int0);
      
      Random.setNextRandom(19);
      int int1 = actionCard0.cellar(player0, player0, board0);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("5!9.<2kA$xJ>\":", "\"5o(tk%*b!RP\"Olt", 44, 891);
      Player player0 = new Player("\"5o(tk%*b!RP\"Olt");
      ArrayList<Card> arrayList0 = player0.hand;
      Board board0 = new Board(arrayList0);
      Player player1 = new Player("\"5o(tk%*b!RP\"Olt");
      // Undeclared exception!
      try { 
        actionCard0.cellar(player0, player1, board0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard((String) null, "B1", (-573), 4);
      Player player0 = new Player("");
      ArrayList<Card> arrayList0 = player0.in_play;
      Board board0 = new Board(arrayList0);
      Player player1 = new Player("S<GL");
      int int0 = actionCard0.smithy(player0, player1, board0);
      assertEquals(1, int0);
      
      int int1 = actionCard0.bureaucrat(player1, player0, board0);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard((String) null, "B1", (-573), 4);
      Player player0 = new Player("");
      ArrayList<Card> arrayList0 = player0.in_play;
      Board board0 = new Board(arrayList0);
      Player player1 = new Player("S<GL");
      int int0 = actionCard0.bureaucrat(player1, player0, board0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("?(O=cb#''Q`/*a5M;v", (String) null, 6, (-1612));
      Player player0 = new Player((String) null);
      ArrayList<Card> arrayList0 = player0.in_play;
      Board board0 = new Board(arrayList0);
      // Undeclared exception!
      try { 
        actionCard0.bureaucrat((Player) null, player0, board0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("ActionCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("cS?Pbx'-y:gd9", "", 25, 1086);
      Player player0 = new Player("cS?Pbx'-y:gd9");
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      Board board0 = new Board(arrayList0);
      player0.shuffle_deck();
      int int0 = actionCard0.adventurer(player0, (Player) null, board0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player("chapel");
      ArrayList<Card> arrayList0 = player0.deck;
      Board board0 = new Board(arrayList0);
      ActionCard actionCard0 = new ActionCard("chapel", " you currently have no treasure cards in your deck.", 86, (-2675));
      int int0 = actionCard0.play(player0, player0, board0);
      //  // Unstable assertion: assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("smithy", "smithy", 98, 98);
      Player player0 = new Player("smithy");
      ArrayList<Card> arrayList0 = player0.in_play;
      Board board0 = new Board(arrayList0);
      int int0 = actionCard0.play(player0, player0, board0);
      //  // Unstable assertion: assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("council_room", "council_room", 779, 779);
      Player player0 = new Player("council_room");
      ArrayList<Card> arrayList0 = player0.discard;
      Board board0 = new Board(arrayList0);
      int int0 = actionCard0.play(player0, player0, board0);
      //  // Unstable assertion: assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("adventurer", "adventurer", (-2116), (-2116));
      Player player0 = new Player("adventurer");
      ArrayList<Card> arrayList0 = player0.hand;
      Board board0 = new Board(arrayList0);
      int int0 = actionCard0.play(player0, player0, board0);
      //  // Unstable assertion: assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("'s deck pile:", "'s deck pile:", (-609), (-163));
      Player player0 = new Player("'s deck pile:");
      ArrayList<Card> arrayList0 = player0.deck;
      Board board0 = new Board(arrayList0);
      int int0 = actionCard0.laboratory(player0, player0, board0);
      assertEquals(8, arrayList0.size());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard(" fK,D", " fK,D", 3716, 3716);
      Player player0 = new Player(" fK,D");
      ArrayList<Card> arrayList0 = player0.hand;
      Board board0 = new Board(arrayList0);
      // Undeclared exception!
      try { 
        actionCard0.feast(player0, player0, board0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard((String) null, (String) null, 0, 0);
      Player player0 = new Player((String) null);
      ArrayList<Card> arrayList0 = player0.deck;
      Board board0 = new Board(arrayList0);
      Player player1 = new Player("=3<r");
      player1.hand = null;
      // Undeclared exception!
      try { 
        actionCard0.village(player1, (Player) null, board0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("|", "|", (-2845), (-2845));
      Player player0 = new Player("V8ypA)[O");
      player0.draw_from_deck();
      ArrayList<Card> arrayList0 = player0.hand;
      player0.draw_from_deck();
      Board board0 = new Board(arrayList0);
      // Undeclared exception!
      try { 
        actionCard0.village(player0, player0, board0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("\nPlaying feast card.\n", "\nPlaying feast card.\n", 0, 0);
      Player player0 = new Player("\nPlaying feast card.\n");
      ArrayList<Card> arrayList0 = player0.hand;
      Board board0 = new Board(arrayList0);
      // Undeclared exception!
      try { 
        actionCard0.smithy((Player) null, (Player) null, board0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("ActionCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("\nPlaying village card.\n", "bJ", (-1457), (-1457));
      Player player0 = new Player((String) null);
      // Undeclared exception!
      try { 
        actionCard0.market(player0, player0, (Board) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("ActionCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("", "", (-1099), 0);
      // Undeclared exception!
      try { 
        actionCard0.laboratory((Player) null, (Player) null, (Board) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("ActionCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("^t>(M3G`=,=__B", "^t>(M3G`=,=__B", 0, (-1833));
      Player player0 = new Player("^t>(M3G`=,=__B");
      ArrayList<Card> arrayList0 = player0.hand;
      Board board0 = new Board(arrayList0);
      actionCard0.council_room(player0, player0, board0);
      player0.draw_from_deck();
      // Undeclared exception!
      try { 
        actionCard0.laboratory(player0, player0, board0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("\"<,H?Y*oo|,q @12$C", " Card: ", 1, 5);
      // Undeclared exception!
      try { 
        actionCard0.feast((Player) null, (Player) null, (Board) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("ActionCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("treasure", "treasure", 77, 77);
      Player player0 = new Player("treasure");
      // Undeclared exception!
      try { 
        actionCard0.council_room(player0, player0, (Board) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("W6NLx46", ")3_g((e\"[8$+UMA@'u", 0, 0);
      Player player0 = new Player("W6NLx46");
      ArrayList<Card> arrayList0 = player0.hand;
      Board board0 = new Board(arrayList0);
      actionCard0.council_room(player0, player0, board0);
      actionCard0.cellar(player0, player0, board0);
      // Undeclared exception!
      try { 
        actionCard0.council_room(player0, player0, board0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("", "", 2538, 86);
      Player player0 = new Player((String) null);
      ArrayList<Card> arrayList0 = player0.discard;
      Board board0 = new Board(arrayList0);
      // Undeclared exception!
      try { 
        actionCard0.chapel((Player) null, (Player) null, board0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("ActionCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("", "", 0, 0);
      ArrayList<Card> arrayList0 = new ArrayList<Card>(0);
      Board board0 = new Board(arrayList0);
      // Undeclared exception!
      try { 
        actionCard0.chancellor((Player) null, (Player) null, board0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("ActionCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("", "", 1137, 1137);
      Player player0 = new Player("");
      ArrayList<Card> arrayList0 = player0.in_play;
      Board board0 = new Board(arrayList0);
      // Undeclared exception!
      try { 
        actionCard0.cellar((Player) null, player0, board0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("ActionCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("province", "", (-1261), (-1261));
      Player player0 = new Player("Up5oBgcQh`!M`S/9!");
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      Board board0 = new Board(arrayList0);
      // Undeclared exception!
      try { 
        actionCard0.adventurer((Player) null, player0, board0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("ActionCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("", "", 443, 443);
      Player player0 = new Player("&");
      ArrayList<Card> arrayList0 = player0.discard;
      Board board0 = new Board(arrayList0);
      board0.on_board = arrayList0;
      int int0 = actionCard0.festival(player0, player0, board0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard(" is drawing from the board card: \n type:  ", " is drawing from the board card: \n type:  ", 635, 635);
      Player player0 = new Player("l6J51u':f> l+");
      ArrayList<Card> arrayList0 = player0.deck;
      Board board0 = new Board(arrayList0);
      Random.setNextRandom(635);
      actionCard0.chancellor(player0, player0, board0);
      // Undeclared exception!
      try { 
        actionCard0.smithy(player0, player0, board0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("", "", (-1482), (-1482));
      Player player0 = new Player("");
      ArrayList<Card> arrayList0 = player0.in_play;
      Board board0 = new Board(arrayList0);
      actionCard0.council_room(player0, player0, board0);
      actionCard0.smithy(player0, player0, board0);
      int int0 = actionCard0.cellar(player0, player0, board0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("Position: ", "Position: ", (-2382), (-2382));
      Player player0 = new Player("Position: ");
      ArrayList<Card> arrayList0 = player0.hand;
      Board board0 = new Board(arrayList0);
      board0.on_board = arrayList0;
      int int0 = actionCard0.bureaucrat(player0, player0, board0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("ZFsuJ", "ZFsuJ", (-1), (-1));
      Player player0 = new Player("");
      ArrayList<Card> arrayList0 = player0.in_play;
      Board board0 = new Board(arrayList0);
      actionCard0.adventurer(player0, player0, board0);
      actionCard0.adventurer(player0, player0, board0);
      actionCard0.adventurer(player0, player0, board0);
      // Undeclared exception!
      try { 
        actionCard0.adventurer(player0, player0, board0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("94^]b", "94^]b", (-382), (-382));
      Player player0 = new Player("94^]b");
      ArrayList<Card> arrayList0 = player0.deck;
      Board board0 = new Board(arrayList0);
      arrayList0.clear();
      int int0 = actionCard0.adventurer(player0, player0, board0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("market", "market", 8, 8);
      Player player0 = new Player("market");
      ArrayList<Card> arrayList0 = player0.hand;
      Board board0 = new Board(arrayList0);
      int int0 = actionCard0.play(player0, player0, board0);
      //  // Unstable assertion: assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("laboratory", "", 2106, 0);
      Player player0 = new Player("FnbJT;0sV=");
      ArrayList<Card> arrayList0 = player0.deck;
      Board board0 = new Board(arrayList0);
      int int0 = actionCard0.play(player0, player0, board0);
      //  // Unstable assertion: assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("chancellor", "chancellor", 4, 4);
      Player player0 = new Player("chancellor");
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      Board board0 = new Board(arrayList0);
      int int0 = actionCard0.play(player0, player0, board0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ActionCard actionCard0 = new ActionCard("bureaucrat", (String) null, 52, 52);
      Player player0 = new Player((String) null);
      ArrayList<Card> arrayList0 = player0.deck;
      Board board0 = new Board(arrayList0);
      int int0 = actionCard0.play(player0, player0, board0);
      //  // Unstable assertion: assertEquals(0, int0);
  }
}
