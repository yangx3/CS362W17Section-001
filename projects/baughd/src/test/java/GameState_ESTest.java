/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 26 23:55:51 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.TooManyResourcesException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GameState_ESTest extends GameState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      LinkedList<Player> linkedList0 = new LinkedList<Player>();
      gameState0.players = (List<Player>) linkedList0;
      GameState.addEmbargo((Card) null);
      gameState0.initializeGame();
      gameState0.initializeGame();
      Card.CardName.values();
      linkedList0.addLast((Player) null);
      Player player0 = new Player(gameState0, "");
      linkedList0.add(player0);
      linkedList0.add(player0);
      Player player1 = new Player(gameState0, "");
      LinkedList<Card> linkedList1 = new LinkedList<Card>();
      player1.deck = linkedList1;
      linkedList0.add(player0);
      gameState0.addPlayer(player1);
      List<Card> list1 = gameState0.embargoTokens;
      gameState0.initializeGame();
      Card.Type.values();
      Card.CardName.values();
      gameState0.isGameOver();
      // Undeclared exception!
      try { 
        Card.CardName.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant Card.CardName.
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      gameState0.gameBoard = null;
      gameState0.getWinners();
      // Undeclared exception!
      try { 
        gameState0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState(arrayList0);
      Player player0 = new Player(gameState0, "%DCYl[8qG~?S");
      LinkedList<Card> linkedList0 = player0.deck;
      player0.deck = linkedList0;
      player0.drawCard();
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card.filter(arrayList0, card_Type0);
      player0.deck.add((Card) null);
      gameState0.initializeGame();
      gameState0.addPlayer(player0);
      gameState0.addPlayer(player0);
      gameState0.isGameOver();
      // Undeclared exception!
      try { 
        gameState0.getWinners();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      LinkedList<Player> linkedList0 = new LinkedList<Player>();
      gameState0.players = (List<Player>) linkedList0;
      GameState.addEmbargo((Card) null);
      gameState0.initializeGame();
      gameState0.initializeGame();
      Card.CardName.values();
      Player player0 = new Player(gameState0, "");
      linkedList0.add(player0);
      Player player1 = new Player(gameState0, "");
      LinkedList<Card> linkedList1 = new LinkedList<Card>();
      player1.deck = linkedList1;
      gameState0.addPlayer(player1);
      List<Card> list1 = gameState0.embargoTokens;
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashSet<Card> linkedHashSet0 = new LinkedHashSet<Card>();
      Card.Type card_Type0 = Card.Type.TREASURE;
      Object object0 = new Object();
      linkedHashSet0.remove(object0);
      linkedHashSet0.parallelStream();
      List<Card> list0 = Card.filter(linkedHashSet0, card_Type0);
      GameState gameState0 = new GameState(list0);
      LinkedList<Player> linkedList0 = new LinkedList<Player>();
      gameState0.players = (List<Player>) linkedList0;
      gameState0.getWinners();
      gameState0.play();
      gameState0.play();
      Player player0 = new Player(gameState0, "");
      player0.printStateGame();
      gameState0.addPlayer(player0);
      gameState0.addPlayer(player0);
      gameState0.addPlayer(player0);
      gameState0.isGameOver();
      Card.Type.values();
      Card.CardName.values();
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState(stack0);
      Player player0 = new Player(gameState0, "6C((E|7f\"mHV0Z,R");
      gameState0.addPlayer(player0);
      Card.Type.values();
      Card.CardName card_CardName0 = Card.CardName.Remodel;
      Card.getCard(stack0, card_CardName0);
      GameState.addEmbargo((Card) null);
      gameState0.getWinners();
      gameState0.getWinners();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      // Undeclared exception!
      try { 
        gameState0.play();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Card.Type.values();
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState(vector0);
      gameState0.cards = (List<Card>) vector0;
      vector0.add((Card) null);
      vector0.add((Card) null);
      Player player0 = new Player(gameState0, "Player.actionPhase Card:");
      gameState0.addPlayer(player0);
      // Undeclared exception!
      try { 
        gameState0.isGameOver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      gameState0.players = null;
      gameState0.isGameOver();
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>(1623);
      GameState gameState0 = new GameState(arrayList0);
      gameState0.getWinners();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Card.Type.valueOf("org.apache.oro.text.MalformedCachePatternException");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant Card.Type.org.apache.oro.text.MalformedCachePatternException
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState(arrayList0);
      gameState0.toString();
      Stack<Card> stack0 = new Stack<Card>();
      Card.CardName card_CardName0 = Card.CardName.Mine;
      Card.getCard(stack0, card_CardName0);
      GameState.addEmbargo((Card) null);
      gameState0.initializeGame();
      GameState gameState1 = new GameState(arrayList0);
      GameState gameState2 = new GameState(arrayList0);
      gameState0.play();
      GameState gameState3 = new GameState(arrayList0);
      gameState1.isGameOver();
      Random.setNextRandom((-1887));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Card.Type.values();
      Card.CardName.values();
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState(stack0);
      gameState0.play();
      Player player0 = new Player(gameState0, (String) null);
      gameState0.addPlayer(player0);
      gameState0.play();
      gameState0.toString();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      LinkedList<Player> linkedList0 = new LinkedList<Player>();
      gameState0.players = (List<Player>) linkedList0;
      GameState.addEmbargo((Card) null);
      gameState0.initializeGame();
      gameState0.initializeGame();
      Card.CardName.values();
      Player player0 = new Player(gameState0, "");
      linkedList0.add(player0);
      linkedList0.add(player0);
      String string0 = "";
      Player player1 = new Player(gameState0, "");
      LinkedList<Card> linkedList1 = new LinkedList<Card>();
      player1.deck = linkedList1;
      linkedList0.add(player0);
      gameState0.addPlayer(player1);
      List<Card> list1 = gameState0.embargoTokens;
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Card.CardName.valueOf("'V^szv");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant Card.CardName.'V^szv
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }
}
