/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 20:29:22 GMT 2017
 */

package org.cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Stack;
import org.cs362.dominion.Card;
import org.cs362.dominion.GameState;
import org.cs362.dominion.Player;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Card_ESTest extends Card_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 4137, 16, 4137, 16);
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      linkedList0.offerFirst(card0);
      Player player0 = new Player(gameState0, "Village");
      card0.play(player0, gameState0);
      assertEquals(17, card0.supplyPile);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Mine;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 298, 298, 705, 298);
      int int0 = card0.score();
      assertEquals(298, card0.supplyPile);
      assertEquals(705, card0.getTreasureValue());
      assertEquals(298, card0.getCost());
      assertEquals(298, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Mine;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 0, (-278), (-66), (-732));
      int int0 = card0.score();
      assertEquals((-278), int0);
      assertEquals(0, card0.getCost());
      assertEquals((-732), card0.supplyPile);
      assertEquals(-66, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Gardens;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, (-1724), 16, 1395, 2721);
      card0.getType();
      assertEquals(1395, card0.getTreasureValue());
      assertEquals(-1724, card0.getCost());
      assertEquals(16, card0.score());
      assertEquals(2721, card0.supplyPile);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Great_Hall;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, (-3159), 0, 0, 0);
      int int0 = card0.getTreasureValue();
      assertEquals(-3159, card0.getCost());
      assertEquals(0, card0.supplyPile);
      assertEquals(0, int0);
      assertEquals(0, card0.score());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Mine;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 298, 0, 689, 298);
      int int0 = card0.getTreasureValue();
      assertEquals(689, int0);
      assertEquals(0, card0.score());
      assertEquals(298, card0.supplyPile);
      assertEquals(298, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, (-971), 16, (-971), 16);
      int int0 = card0.getCost();
      assertEquals(16, card0.supplyPile);
      assertEquals((-971), int0);
      assertEquals(-971, card0.getTreasureValue());
      assertEquals(16, card0.score());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Duchy;
      Card card0 = Card.getCard(list0, card_CardName0);
      assertNull(card0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Gold;
      Card card0 = Card.getCard(list0, card_CardName0);
      assertNull(card0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Curse;
      List<Card> list0 = Card.createCards();
      Card card0 = Card.getCard(list0, card_CardName0);
      assertNull(card0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Great_Hall;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, (-3159), 0, (-1167), (-1167));
      ArrayDeque<Card> arrayDeque0 = new ArrayDeque<Card>(15);
      arrayDeque0.addFirst(card0);
      List<Card> list0 = Card.filter(arrayDeque0, card_Type0);
      Card card1 = Card.getCard(list0, card_CardName0);
      assertEquals(-1167, card1.getTreasureValue());
      assertEquals((-1167), card1.supplyPile);
      assertNotNull(card1);
      assertEquals(-3159, card1.getCost());
      assertEquals(0, card1.score());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 840, (-303), (-3060), (-303));
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "Feast");
      player0.discard = list0;
      Card card1 = player0.drawCard();
      int int0 = card0.compareTo(card1);
      assertEquals(7, int0);
      assertEquals(0, card1.supplyPile);
      assertEquals(3, card1.getTreasureValue());
      assertEquals((-303), card0.supplyPile);
      assertEquals(6, card1.getCost());
      assertEquals(-303, card0.score());
      assertEquals(0, card1.score());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Curse;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 0, 0);
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName1 = Card.CardName.Village;
      Card card1 = Card.getCard(list0, card_CardName1);
      // Undeclared exception!
      try { 
        card0.compareTo(card1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Ambassador;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 821, (-324), (-3110), (-324));
      Card card1 = (Card)card0.clone();
      assertEquals(-324, card1.score());
      assertEquals((-324), card1.supplyPile);
      assertEquals(821, card1.getCost());
      assertEquals(-3110, card1.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Council_Room;
      // Undeclared exception!
      try { 
        Card.getCard((List<Card>) null, card_CardName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      LinkedList<Card> linkedList0 = new LinkedList<Card>((Collection<? extends Card>) arrayList0);
      Card.Type card_Type0 = Card.Type.VICTORY;
      linkedList0.add((Card) null);
      // Undeclared exception!
      try { 
        Card.filter(linkedList0, card_Type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Gardens;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, (-1724), 16, (-1724), 2721);
      // Undeclared exception!
      try { 
        card0.compareTo((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 3, 16, 3, 16);
      boolean boolean0 = card0.equals(card_CardName0);
      assertEquals(16, card0.score());
      assertEquals(3, card0.getTreasureValue());
      assertEquals(3, card0.getCost());
      assertEquals(16, card0.supplyPile);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Council_Room;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 840, (-303), (-3110), (-303));
      boolean boolean0 = card0.equals(card0);
      assertEquals(-303, card0.score());
      assertEquals(-3110, card0.getTreasureValue());
      assertEquals(840, card0.getCost());
      assertTrue(boolean0);
      assertEquals((-303), card0.supplyPile);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Great_Hall;
      Card.Type card_Type0 = Card.Type.ACTION;
      PriorityQueue<Card> priorityQueue0 = new PriorityQueue<Card>((Comparator<? super Card>) null);
      List<Card> list0 = Card.filter(priorityQueue0, card_Type0);
      Card card0 = Card.getCard(list0, card_CardName0);
      assertNull(card0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 4137, 16, 4137, 16);
      card0.getType();
      assertEquals(4137, card0.getCost());
      assertEquals(4137, card0.getTreasureValue());
      assertEquals(16, card0.score());
      assertEquals(16, card0.supplyPile);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 840, (-303), (-3060), (-303));
      String string0 = card0.toString();
      assertEquals(-3060, card0.getTreasureValue());
      assertEquals(-303, card0.score());
      assertEquals(" \n\tAdventurer", string0);
      assertEquals((-303), card0.supplyPile);
      assertEquals(840, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 4137, 16, 4137, 16);
      card0.getCardName();
      assertEquals(16, card0.supplyPile);
      assertEquals(4137, card0.getCost());
      assertEquals(16, card0.score());
      assertEquals(4137, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 840, (-303), (-3060), (-303));
      card0.compareTo(card0);
      assertEquals((-303), card0.supplyPile);
      assertEquals(-303, card0.score());
      assertEquals(840, card0.getCost());
      assertEquals(-3060, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Card.Type card_Type0 = Card.Type.ACTION;
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      List<Card> list1 = Card.filter(gameState0.cards, card_Type0);
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Mine;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 298, 0, 705, 298);
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      player0.hand = list0;
      // Undeclared exception!
      try { 
        card0.play(player0, gameState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Gardens;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 840, (-303), (-3110), (-303));
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "Feast");
      player0.discard = gameState1.cards;
      // Undeclared exception!
      try { 
        card0.play(player0, gameState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Cutpurse;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 4137, 16, 4137, 16);
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      LinkedList<Player> linkedList1 = new LinkedList<Player>();
      gameState0.players = (List<Player>) linkedList1;
      Player player0 = new Player(gameState0, "The board game is embty you need to intialize the game!!!!");
      player0.drawCard();
      linkedList1.addLast(player0);
      // Undeclared exception!
      try { 
        card0.play(player0, gameState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Cutpurse;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 4137, 16, 4137, 16);
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      LinkedList<Player> linkedList1 = new LinkedList<Player>();
      gameState0.players = (List<Player>) linkedList1;
      Player player0 = new Player(gameState0, "The board game is embty you need to intialize the game!!!!");
      linkedList1.addLast(player0);
      card0.play(player0, gameState0);
      assertEquals(16, card0.supplyPile);
      assertEquals(4137, card0.getCost());
      assertEquals(16, card0.score());
      assertEquals(4137, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Council_Room;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 840, (-303), (-3110), (-303));
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "Feast");
      player0.discard = gameState1.cards;
      gameState0.addPlayer(player0);
      card0.play(player0, gameState0);
      assertEquals(-303, card0.score());
      assertEquals((-303), card0.supplyPile);
      assertEquals(840, card0.getCost());
      assertEquals(-3110, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Baron;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 840, (-303), (-3110), (-303));
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "Feast");
      MockRandom mockRandom0 = (MockRandom)player0.randomGenerator;
      mockRandom0.nextLong();
      // Undeclared exception!
      try { 
        card0.play(player0, gameState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Ambassador;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 821, (-324), (-3110), (-324));
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "Feast");
      player0.hand = gameState0.cards;
      card0.play(player0, gameState0);
      assertEquals(-324, card0.score());
      assertEquals((-324), card0.supplyPile);
      assertEquals(20, list0.size());
      assertEquals(-3110, card0.getTreasureValue());
      assertEquals(821, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Copper;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, (-1685), 0, (-1685), (-1685));
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, "jjo~\"</=<nG[2");
      card0.play(player0, gameState0);
      assertEquals(-1685, card0.getTreasureValue());
      assertEquals(-1685, card0.getCost());
      assertEquals((-1685), card0.supplyPile);
      assertEquals(0, card0.score());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Salvager;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 4137, 16, 4137, 16);
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, "Village");
      // Undeclared exception!
      try { 
        card0.play(player0, gameState0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Village;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 840, (-303), (-3110), (-303));
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "Feast");
      card0.play(player0, gameState0);
      assertEquals((-303), card0.supplyPile);
      assertEquals(-303, card0.score());
      assertEquals(-3110, card0.getTreasureValue());
      assertEquals(840, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Smithy;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, (-1724), 16, 1395, 2721);
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, " \n\tSmithy");
      // Undeclared exception!
      try { 
        card0.play(player0, gameState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Mine;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 298, 0, 689, 298);
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      card0.play(player0, gameState0);
      assertEquals(298, card0.supplyPile);
      assertEquals(0, card0.score());
      assertEquals(298, card0.getCost());
      assertEquals(689, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Great_Hall;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 298, 0, 689, 298);
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      // Undeclared exception!
      try { 
        card0.play(player0, gameState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Feast;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, (-1724), (-1724), 1635, 2721);
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, "s{4");
      // Undeclared exception!
      try { 
        card0.play(player0, gameState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 3, 16, 3, 16);
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, "Village");
      // Undeclared exception!
      try { 
        card0.play(player0, gameState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Curse;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, (-1724), (-4005), 1635, 2721);
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, "s{4");
      // Undeclared exception!
      try { 
        card0.play(player0, gameState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Baron;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 840, (-303), (-3110), (-303));
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "Feast");
      card0.play(player0, gameState0);
      assertEquals(840, card0.getCost());
      assertEquals(-3110, card0.getTreasureValue());
      assertEquals(-303, card0.score());
      assertEquals((-303), card0.supplyPile);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Gardens;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 840, (-303), (-3110), (-303));
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "Feast");
      card0.play(player0, gameState0);
      assertEquals(-303, card0.score());
      assertEquals((-303), card0.supplyPile);
      assertEquals(-3110, card0.getTreasureValue());
      assertEquals(840, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Mine;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 298, 0, 705, 298);
      int int0 = card0.score();
      assertEquals(298, card0.supplyPile);
      assertEquals(0, int0);
      assertEquals(298, card0.getCost());
      assertEquals(705, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Copper;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, (-3159), 0, (-1167), (-1167));
      int int0 = card0.getTreasureValue();
      assertEquals(0, card0.score());
      assertEquals((-1167), card0.supplyPile);
      assertEquals((-1167), int0);
      assertEquals(-3159, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Copper;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = null;
      try {
        card0 = new Card(card_CardName0, card_Type0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported yet.
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 840, (-303), (-3060), (-303));
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "Feast");
      player0.discard = list0;
      card0.play(player0, gameState0);
      assertEquals(1, list0.size());
      assertEquals(840, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 840, (-303), (-3060), (-303));
      int int0 = card0.getCost();
      assertEquals((-303), card0.supplyPile);
      assertEquals(840, int0);
      assertEquals(-3060, card0.getTreasureValue());
      assertEquals(-303, card0.score());
  }
}
