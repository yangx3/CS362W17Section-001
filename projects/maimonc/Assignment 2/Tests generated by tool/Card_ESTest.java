/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 22 21:23:43 GMT 2017
 */

package org.cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.cs362.dominion.Card;
import org.cs362.dominion.GameState;
import org.cs362.dominion.Player;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.testcase.execution.CodeUnderTestException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Card_ESTest extends Card_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Cutpurse;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 0);
      int int0 = card0.score();
      assertEquals(0, int0);
      assertEquals(0, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Curse;
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Gardens;
      Card card0 = new Card(card_CardName0, (Card.Type) null, 16, (-4226), (-4226));
      card0.getType();
      assertEquals(-4226, card0.score());
      assertEquals(-4226, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Council_room;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, (-2100), (-2100), (-2100));
      card0.getType();
      assertEquals(-2100, card0.getTreasureValue());
      assertEquals(-2100, card0.score());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 0);
      int int0 = card0.getTreasureValue();
      assertEquals(0, int0);
      assertEquals(0, card0.score());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Gardens;
      Card.Type card_Type0 = Card.Type.CURSE;
      Card card0 = new Card(card_CardName0, card_Type0, 68, 8, 54);
      int int0 = card0.getTreasureValue();
      assertEquals(54, int0);
      assertEquals(8, card0.score());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Estate;
      List<Card> list0 = Card.createCards();
      Card card0 = Card.getCard(list0, card_CardName0);
      assertNull(card0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Gold;
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Feast;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, (-290));
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      arrayList0.add(card0);
      Card card1 = Card.getCard(arrayList0, card_CardName0);
      assertEquals(0, card1.score());
      assertNotNull(card1);
      assertEquals(-290, card1.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Estate;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 497, 497, 497);
      int int0 = card0.cost(card0);
      assertEquals(497, card0.getTreasureValue());
      assertEquals(497, int0);
      assertEquals(497, card0.score());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Feast;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, (-1279), 4592, (-1279));
      int int0 = card0.cost(card0);
      assertEquals(4592, card0.score());
      assertEquals(-1279, card0.getTreasureValue());
      assertEquals((-1279), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Great_hall;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, (-1143), 109, (-4231));
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName1 = Card.CardName.Curse;
      Card card1 = Card.getCard(list0, card_CardName1);
      // Undeclared exception!
      try { 
        card0.compareTo(card1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Ambassador;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 23);
      Card.CardName card_CardName1 = Card.CardName.Great_hall;
      Card card1 = new Card(card_CardName1, card_Type0, 23, 2896, 2896);
      int int0 = card0.compareTo(card1);
      assertEquals((-7), int0);
      assertEquals(2896, card1.score());
      assertEquals(23, card0.getTreasureValue());
      assertEquals(0, card0.score());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Great_hall;
      // Undeclared exception!
      try { 
        Card.getCard((List<Card>) null, card_CardName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Card.Type card_Type0 = Card.Type.CURSE;
      // Undeclared exception!
      try { 
        Card.filter((Iterable<Card>) null, card_Type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Gold;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 60, 60, (-604));
      // Undeclared exception!
      try { 
        card0.compareTo((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Estate;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 497, 497, 497);
      Card card1 = new Card(card_CardName0, card_Type0, 497, 497, 497);
      boolean boolean0 = card0.equals(card1);
      assertEquals(497, card1.getTreasureValue());
      assertFalse(boolean0);
      assertEquals(497, card1.score());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Gardens;
      Card card0 = new Card(card_CardName0, (Card.Type) null, 16, (-4226), (-4226));
      boolean boolean0 = card0.equals(card0);
      assertEquals(-4226, card0.score());
      assertEquals(-4226, card0.getTreasureValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Estate;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 497, 497, 497);
      LinkedHashSet<Card> linkedHashSet0 = new LinkedHashSet<Card>(497);
      List<Card> list0 = Card.filter(linkedHashSet0, card_Type0);
      Card.CardName card_CardName1 = card0.getCardName();
      Card.getCard(list0, card_CardName1);
      assertEquals(497, card0.score());
      assertEquals(497, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Cutpurse;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 0);
      card0.getType();
      assertEquals(0, card0.getTreasureValue());
      assertEquals(0, card0.score());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.Type card_Type0 = Card.Type.ACTION;
      List<Card> list1 = Card.filter(list0, card_Type0);
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 0);
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, (String) null);
      player0.hand = list0;
      card0.play(player0, gameState0);
      assertEquals(19, list0.size());
      assertEquals(0, card0.score());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "v{S|");
      player0.deck = list0;
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Estate;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 497, 497, 497);
      LinkedHashSet<Card> linkedHashSet0 = new LinkedHashSet<Card>(497);
      List<Card> list0 = Card.filter(linkedHashSet0, card_Type0);
      GameState gameState0 = new GameState(list0);
      card0.play((Player) null, gameState0);
      assertEquals(497, card0.score());
      assertEquals(497, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Mine;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 4, 316, 316);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "3th");
      card0.play(player0, gameState0);
      assertEquals(316, card0.score());
      assertEquals(316, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Great_hall;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, (-1143), 109, (-4231));
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, " \tGreat_hall-TREASURE \t\t Cost: -1143 \t\t Score: 109 \tTreasure Value: -4231");
      // Undeclared exception!
      try { 
        card0.play(player0, gameState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Feast;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 0);
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, (String) null);
      card0.play(player0, gameState0);
      assertEquals(0, card0.score());
      assertEquals(0, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Cutpurse;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, (-3088));
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      card0.play(player0, gameState0);
      assertEquals(-3088, card0.getTreasureValue());
      assertEquals(0, card0.score());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Council_room;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, (-2100), (-2100), (-2100));
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, "LJ:A");
      // Undeclared exception!
      try { 
        card0.play(player0, gameState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card.CardName card_CardName0 = Card.CardName.Baron;
      Card card0 = new Card(card_CardName0, card_Type0, (-717), 515, (-717));
      Player player0 = new Player((GameState) null, " -rashedC");
      card0.play(player0, (GameState) null);
      assertEquals(515, card0.score());
      assertEquals(-717, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Ambassador;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 3471, 3471, (-2439));
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      // Undeclared exception!
      try { 
        card0.play((Player) null, gameState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Village;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Salvager;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 20, 20, 20);
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, " \tSalvager-ACTION \t\t Cost: 20 \t\t Score: 20 \tTreasure Value: 20");
      // Undeclared exception!
      try { 
        card0.play(player0, gameState0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         assertThrownBy("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Smithy;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Gardens;
      Card card0 = new Card(card_CardName0, (Card.Type) null, 16, (-4226), (-4226));
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Player player0 = new Player(gameState0, "");
      card0.play(player0, gameState0);
      assertEquals(-4226, card0.score());
      assertEquals(-4226, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Great_hall;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, (-1143), 109, (-4231));
      int int0 = card0.score();
      assertEquals(109, int0);
      assertEquals(-4231, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Cutpurse;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, (-3088));
      int int0 = card0.getTreasureValue();
      assertEquals(0, card0.score());
      assertEquals((-3088), int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Gardens;
      Card card0 = new Card(card_CardName0, (Card.Type) null, 16, (-4226), (-4226));
      String string0 = card0.toString();
      assertEquals(" \tGardens-null \t\t Cost: 16 \t\t Score: -4226 \tTreasure Value: -4226", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Ambassador;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 23);
      int int0 = card0.cost(card0);
      assertEquals(0, int0);
      assertEquals(23, card0.getTreasureValue());
      assertEquals(0, card0.score());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Gardens;
      Card card0 = new Card(card_CardName0, (Card.Type) null, 16, (-4226), (-4226));
      card0.compareTo(card0);
      assertEquals(-4226, card0.getTreasureValue());
      assertEquals(-4226, card0.score());
  }
}
