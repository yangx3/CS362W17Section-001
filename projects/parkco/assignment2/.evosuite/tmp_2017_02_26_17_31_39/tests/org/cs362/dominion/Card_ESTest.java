/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 01:36:36 GMT 2017
 */

package org.cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.cs362.dominion.Card;
import org.cs362.dominion.GameState;
import org.cs362.dominion.Player;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Card_ESTest extends Card_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      Card.CardName card_CardName0 = Card.CardName.Ambassador;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, (-354), 0, 0);
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "Setting up the board...");
      int int0 = card0.score(player0);
      assertEquals(0, int0);
      assertEquals(0, card0.getTreasureValue());
      assertEquals(-354, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, (-5816), (-5816), (-2295));
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      int int0 = card0.score(player0);
      assertEquals(-2295, card0.getTreasureValue());
      assertEquals((-5816), int0);
      assertEquals(-5816, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Feast;
      Card card0 = new Card(card_CardName0, (Card.Type) null, (-5816), (-5816), (-2295));
      card0.getType();
      assertEquals(-5816, card0.getCost());
      assertEquals(-5816, card0.getScore());
      assertEquals(-2295, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Feast;
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 4524, 4524, 4524);
      int int0 = card0.getTreasureValue();
      assertEquals(4524, card0.getCost());
      assertEquals(4524, int0);
      assertEquals(4524, card0.getScore());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, (-5816), (-5816), (-2295));
      int int0 = card0.getTreasureValue();
      assertEquals((-2295), int0);
      assertEquals(-5816, card0.getScore());
      assertEquals(-5816, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Silver;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 0);
      int int0 = card0.getScore();
      assertEquals(0, card0.getTreasureValue());
      assertEquals(0, card0.getCost());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Mine;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, (-37), (-1247), 14);
      int int0 = card0.getScore();
      assertEquals(14, card0.getTreasureValue());
      assertEquals((-1247), int0);
      assertEquals(-37, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Silver;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 0);
      int int0 = card0.getCost();
      assertEquals(0, card0.getScore());
      assertEquals(0, int0);
      assertEquals(0, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 4524, 4524, 4524);
      int int0 = card0.getCost();
      assertEquals(4524, int0);
      assertEquals(4524, card0.getScore());
      assertEquals(4524, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Village;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, (-1323), 5141, 12);
      Vector<Card> vector0 = new Vector<Card>();
      vector0.add(card0);
      Card.getCard(vector0, card_CardName0);
      assertEquals("[ \tVillage-VICTORY \t\t Cost: -1323 \t\t Score: 5141 \tTreasure Value: 12]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Card.Type card_Type0 = Card.Type.VICTORY;
      HashSet<Card> hashSet0 = new HashSet<Card>(2456);
      List<Card> list0 = Card.filter(hashSet0, card_Type0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Feast;
      Vector<Card> vector0 = new Vector<Card>();
      int int0 = Card.countCardName(vector0, card_CardName0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 4524, 4524, 4524);
      Card.CardName card_CardName1 = Card.CardName.Copper;
      Card card1 = new Card(card_CardName1, card_Type0, 4524, 26, (-2395));
      int int0 = card0.compareTo(card1);
      assertEquals(-2395, card1.getTreasureValue());
      assertEquals(5, int0);
      assertEquals(26, card1.getScore());
      assertEquals(4524, card1.getCost());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Province;
      Card.getCard(list0, card_CardName0);
      Card.CardName card_CardName1 = Card.CardName.Curse;
      Card.getCard(list0, card_CardName1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      arrayList0.add((Card) null);
      Card.CardName card_CardName0 = Card.CardName.Village;
      // Undeclared exception!
      try { 
        Card.getCard(arrayList0, card_CardName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Card.Type card_Type0 = Card.Type.VICTORY;
      // Undeclared exception!
      try { 
        Card.filter((Iterable<Card>) null, card_Type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      // Undeclared exception!
      try { 
        Card.countCardName((List<Card>) null, card_CardName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Card.Type card_Type0 = Card.Type.ACTION;
      Card.CardName card_CardName0 = Card.CardName.Copper;
      Card card0 = new Card(card_CardName0, card_Type0, 763, 1, 763);
      // Undeclared exception!
      try { 
        card0.compareTo((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Council_Room;
      Player player0 = new Player((GameState) null, " --- ");
      LinkedList<Card> linkedList0 = player0.deck;
      Card card0 = Card.getCard(linkedList0, card_CardName0);
      assertNull(card0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Silver;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 0);
      String string0 = card0.toString();
      assertEquals(" \tSilver-TREASURE \t\t Cost: 0 \t\t Score: 0 \tTreasure Value: 0", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Steward;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, (-676), (-676), 4);
      card0.getCardName();
      assertEquals(4, card0.getTreasureValue());
      assertEquals(-676, card0.getScore());
      assertEquals(-676, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Village;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, (-1323), 5141, 12);
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, (String) null);
      int int0 = card0.score(player0);
      assertEquals(5141, int0);
      assertEquals(-1323, card0.getCost());
      assertEquals(12, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Gardens;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 7, (-320), 7);
      Object object0 = new Object();
      boolean boolean0 = card0.equals(object0);
      assertFalse(boolean0);
      assertEquals(7, card0.getCost());
      assertEquals(7, card0.getTreasureValue());
      assertEquals(-320, card0.getScore());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Random.setNextRandom((-665));
      Card.CardName card_CardName0 = Card.CardName.Steward;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, (-665), (-665), 4);
      Player player0 = new Player((GameState) null, "Village");
      card0.play(player0, (GameState) null);
      assertEquals(4, card0.getTreasureValue());
      assertEquals(-665, card0.getScore());
      assertEquals(-665, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Random.setNextRandom((-676));
      Card.CardName card_CardName0 = Card.CardName.Steward;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, (-676), (-676), 4);
      Player player0 = new Player((GameState) null, "Village");
      card0.play(player0, (GameState) null);
      assertEquals(-676, card0.getCost());
      assertEquals(4, card0.getTreasureValue());
      assertEquals(-676, card0.getScore());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Cutpurse;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "does not have Copper.");
      gameState0.addPlayer(player0);
      Player player1 = new Player(gameState0, "R$rpD+EXfaOn-z7F");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Village;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, (-1323), 5141, 12);
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, (String) null);
      player0.gain(card0);
      card0.play(player0, gameState0);
      Card.CardName card_CardName1 = Card.CardName.Baron;
      Card card1 = new Card(card_CardName1, card_Type0, (-1323), (-1323), 5141);
      // Undeclared exception!
      try { 
        card1.play(player0, gameState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      Card.CardName card_CardName0 = Card.CardName.Ambassador;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, (-354), 0, 0);
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "Setting up the board...");
      gameState0.addPlayer(player0);
      card0.play(player0, gameState0);
      assertEquals(0, card0.getScore());
      assertEquals(-354, card0.getCost());
      assertEquals(0, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      Card.CardName card_CardName0 = Card.CardName.Silver;
      List<Card> list0 = Card.createCards();
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "R$rpD+EXfaOn-z7F");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Smithy;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "XB4H=N!e!KcfZVw(");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      Card.CardName card_CardName0 = Card.CardName.Mine;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, (-37), (-1247), 14);
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, (String) null);
      // Undeclared exception!
      try { 
        card0.play(player0, gameState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Great_Hall;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, (-37), (-1247), 14);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, (String) null);
      card0.play(player0, gameState0);
      assertEquals(14, card0.getTreasureValue());
      assertEquals(-37, card0.getCost());
      assertEquals(-1247, card0.getScore());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Gardens;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 7, (-320), 7);
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, " \t");
      card0.play(player0, gameState0);
      assertEquals(-320, card0.getScore());
      assertEquals(7, card0.getTreasureValue());
      assertEquals(7, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, (String) null);
      Card.CardName card_CardName0 = Card.CardName.Feast;
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Card.Type card_Type0 = Card.Type.TREASURE;
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 1, 1299);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      card0.play(player0, gameState0);
      assertEquals(1, card0.getScore());
      assertEquals(1299, card0.getTreasureValue());
      assertEquals(0, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Council_Room;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 10, 10, 10);
      Player player0 = new Player((GameState) null, " --- ");
      // Undeclared exception!
      try { 
        card0.play(player0, (GameState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Village;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, (-1323), 5141, 12);
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, (String) null);
      Card.Type card_Type1 = card0.getType();
      Card.CardName card_CardName1 = Card.CardName.Baron;
      Card card1 = new Card(card_CardName1, card_Type1, (-1323), (-1323), 5141);
      // Undeclared exception!
      try { 
        card1.play(player0, gameState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 4524, 4524, 4524);
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "Total Turns: ");
      card0.play(player0, gameState0);
      assertEquals(4524, card0.getScore());
      assertEquals(4524, card0.getCost());
      assertEquals(4524, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Steward;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, (-676), (-676), 4);
      Player player0 = new Player((GameState) null, "Village");
      // Undeclared exception!
      try { 
        card0.play(player0, (GameState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Feast;
      int int0 = Card.countCardName(list0, card_CardName0);
      //  // Unstable assertion: assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Ambassador;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 1872, 938, 938);
      int int0 = card0.getScore();
      assertEquals(1872, card0.getCost());
      assertEquals(938, int0);
      assertEquals(938, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Cutpurse;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 0);
      int int0 = card0.getTreasureValue();
      assertEquals(0, card0.getCost());
      assertEquals(0, int0);
      assertEquals(0, card0.getScore());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Card.Type card_Type0 = Card.Type.VICTORY;
      List<Card> list0 = Card.createCards();
      List<Card> list1 = Card.filter(list0, card_Type0);
      //  // Unstable assertion: assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Silver;
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Estate;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, (-257), 1436, 1436);
      int int0 = card0.getCost();
      assertEquals((-257), int0);
      assertEquals(1436, card0.getScore());
      assertEquals(1436, card0.getTreasureValue());
  }
}
