/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 01:39:18 GMT 2017
 */

package org.cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.InputMismatchException;
import java.util.NoSuchElementException;
import org.cs362.dominion.RandomTestDominion;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomTestDominion_ESTest extends RandomTestDominion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SystemInUtil.addInputLine("\"");
      RandomTestDominion randomTestDominion0 = new RandomTestDominion();
      // Undeclared exception!
      try { 
        randomTestDominion0.myAssertTrue(false);
        fail("Expecting exception: InputMismatchException");
      
      } catch(InputMismatchException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomTestDominion.main((String[]) null);
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RandomTestDominion randomTestDominion0 = new RandomTestDominion();
      randomTestDominion0.myAssertTrue(true);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RandomTestDominion randomTestDominion0 = new RandomTestDominion();
      // Undeclared exception!
      try { 
        randomTestDominion0.myAssertTrue(false);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.Scanner", e);
      }
  }
}
