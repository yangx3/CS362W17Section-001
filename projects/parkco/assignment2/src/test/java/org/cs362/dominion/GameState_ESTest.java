/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 01:38:19 GMT 2017
 */

package org.cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.Vector;
import org.cs362.dominion.Card;
import org.cs362.dominion.GameState;
import org.cs362.dominion.Player;
import org.cs362.dominion.Randomness;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.TooManyResourcesException;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GameState_ESTest extends GameState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      GameState gameState1 = new GameState((List<Card>) vector0);
      HashMap<Card, Integer> hashMap0 = gameState1.supplyEmbargo;
      Player player0 = new Player(gameState0, "");
      gameState0.addPlayer(player0);
      player0.drawCard();
      hashMap0.keySet();
      Card.CardName card_CardName0 = Card.CardName.Curse;
      Card.getCard(vector0, card_CardName0);
      Integer integer0 = new Integer((-3289));
      hashMap0.putIfAbsent((Card) null, integer0);
      gameState0.gameBoard = hashMap0;
      // Undeclared exception!
      try { 
        gameState0.play();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PriorityQueue<Card> priorityQueue0 = new PriorityQueue<Card>();
      Card.Type card_Type0 = Card.Type.VICTORY;
      List<Card> list0 = Card.filter(priorityQueue0, card_Type0);
      GameState gameState0 = new GameState(list0);
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      gameState0.gameBoard = hashMap0;
      Player player0 = new Player(gameState0, "");
      player0.drawCard();
      Integer integer0 = new Integer(0);
      hashMap0.put((Card) null, integer0);
      Card.CardName card_CardName0 = Card.CardName.Province;
      hashMap0.putIfAbsent((Card) null, integer0);
      Card.getCard(list0, card_CardName0);
      Integer integer1 = new Integer(3077);
      Integer.getInteger((String) null);
      hashMap0.put((Card) null, integer1);
      gameState0.supplyEmbargo = hashMap0;
      Randomness.random = null;
      Player player1 = new Player(gameState0, " discards ");
      player1.gain((Card) null);
      gameState0.addPlayer(player1);
      // Undeclared exception!
      try { 
        gameState0.getWinners();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "//yQ^Kyb)P>");
      vector0.removeAllElements();
      gameState0.addPlayer(player0);
      gameState0.play();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      gameState0.play();
      gameState0.isGameOver();
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      gameState0.isGameOver();
      gameState0.supplyEmbargo = hashMap0;
      gameState0.getWinners();
      Randomness.reset();
      Player player0 = new Player(gameState0, "Ambassador");
      player0.scoreFor();
      player0.drawCard();
      Integer integer0 = new Integer(0);
      gameState0.isGameOver();
      hashMap0.put((Card) null, integer0);
      gameState0.gameBoard = hashMap0;
      Card.CardName.values();
      player0.discard = (List<Card>) vector0;
      hashMap0.put((Card) null, integer0);
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      gameState0.isGameOver();
      HashMap<Card, Integer> hashMap1 = gameState0.gameBoard;
      HashMap<Card, Integer> hashMap2 = gameState0.gameBoard;
      // Undeclared exception!
      try { 
        gameState0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      // Undeclared exception!
      try { 
        gameState0.isGameOver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      GameState gameState1 = new GameState((List<Card>) null);
      GameState gameState2 = new GameState((List<Card>) null);
      gameState2.gameBoard = gameState1.gameBoard;
      gameState2.initializeGame();
      // Undeclared exception!
      try { 
        gameState1.play();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Card.Type.valueOf("-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.cs362.dominion.Card.Type.-
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      gameState0.play();
      gameState0.isGameOver();
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      Card.CardName card_CardName0 = Card.CardName.Village;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 2, 2, (-24));
      stack0.add(card0);
      gameState0.isGameOver();
      gameState0.supplyEmbargo = hashMap0;
      gameState0.getWinners();
      Randomness.reset();
      Player player0 = new Player(gameState0, "Ambassador");
      player0.scoreFor();
      Card card1 = new Card(card_CardName0, card_Type0, 2, (-24), 0);
      Integer integer0 = new Integer(1);
      gameState0.isGameOver();
      hashMap0.put(card1, integer0);
      gameState0.gameBoard = hashMap0;
      Card.CardName.values();
      player0.discard = (List<Card>) stack0;
      hashMap0.put(card1, integer0);
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      gameState0.isGameOver();
      HashMap<Card, Integer> hashMap1 = gameState0.gameBoard;
      hashMap0.put(card0, integer0);
      HashMap<Card, Integer> hashMap2 = gameState0.gameBoard;
      gameState0.toString();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      GameState gameState1 = new GameState((List<Card>) vector0);
      HashMap<Card, Integer> hashMap0 = gameState1.supplyEmbargo;
      Player player0 = new Player(gameState0, "");
      player0.drawCard();
      Integer integer0 = new Integer((-3289));
      hashMap0.putIfAbsent((Card) null, integer0);
      gameState0.gameBoard = hashMap0;
      gameState0.play();
      Random.setNextRandom(3);
      Random.setNextRandom(3);
      Randomness.reset();
      Random.setNextRandom(3);
      Card.CardName.values();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      gameState0.play();
      gameState0.isGameOver();
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      Card.CardName card_CardName0 = Card.CardName.Village;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 2, 2, 0);
      vector0.add(card0);
      gameState0.isGameOver();
      gameState0.supplyEmbargo = hashMap0;
      gameState0.getWinners();
      Randomness.reset();
      Player player0 = new Player(gameState0, "Ambassador");
      player0.scoreFor();
      player0.drawCard();
      Integer integer0 = new Integer(1);
      gameState0.isGameOver();
      hashMap0.put((Card) null, integer0);
      gameState0.gameBoard = hashMap0;
      Card.CardName.values();
      player0.discard = (List<Card>) vector0;
      hashMap0.put((Card) null, integer0);
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      gameState0.isGameOver();
      HashMap<Card, Integer> hashMap1 = gameState0.gameBoard;
      hashMap0.put(card0, integer0);
      HashMap<Card, Integer> hashMap2 = gameState0.gameBoard;
      // Undeclared exception!
      try { 
        gameState0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      gameState0.play();
      gameState0.initializeGame();
      gameState0.play();
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      gameState0.play();
      Player player0 = new Player(gameState0, "");
      gameState0.addPlayer(player0);
      player0.numBuys = 15;
      gameState0.toString();
      player0.coins = 644;
      player0.printStateGame();
      gameState0.addPlayer(player0);
      GameState gameState1 = new GameState(list0);
      String string0 = "";
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayDeque<Card> arrayDeque0 = new ArrayDeque<Card>();
      LinkedList<Card> linkedList0 = new LinkedList<Card>((Collection<? extends Card>) arrayDeque0);
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      gameState0.getWinners();
      gameState0.play();
      GameState gameState1 = new GameState((List<Card>) linkedList0);
      gameState0.play();
      Player player0 = new Player(gameState0, ":<V.");
      player0.drawCard();
      // Undeclared exception!
      try { 
        arrayDeque0.add((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      // Undeclared exception!
      try { 
        Card.CardName.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      Integer integer0 = new Integer((-1214));
      gameState0.supplyEmbargo = hashMap0;
      boolean boolean0 = gameState0.isGameOver();
      assertTrue(boolean0);
      
      Player player0 = new Player(gameState0, "TR.{");
      gameState0.addPlayer(player0);
      gameState0.initializeGame();
      Card.CardName.values();
      HashMap<Player, Integer> hashMap1 = gameState0.getWinners();
      assertFalse(hashMap1.isEmpty());
      
      GameState gameState1 = new GameState(list0);
      assertEquals(20, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      linkedList0.add((Card) null);
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      Integer integer0 = new Integer(1885);
      Player player0 = new Player(gameState0, "");
      gameState0.addPlayer(player0);
      hashMap0.put((Card) null, integer0);
      linkedList0.add((Card) null);
      gameState0.getWinners();
      // Undeclared exception!
      try { 
        gameState0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
