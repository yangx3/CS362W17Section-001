import java.util.*;

public class CardStack
{
	public LinkedList<Card> cards;

	public CardStack (){
		cards = new LinkedList<Card>();
	}

	public void addCard(Card in){
		cards.add(in);
	}

	public Card takeTopCard(){
		if (cards.isEmpty())
			return null;
		Card returnCard;
		returnCard = cards.getLast();
		cards.removeLast();
		return returnCard;
	}

	public Card lookAtTopCard(){
		if (cards.isEmpty())
			return null;
		Card returnCard;
		returnCard = cards.getLast();
		return returnCard;
	}
	
	public Card takeBottomCard()
	{
		if (cards.isEmpty())
			return null;
		Card returnCard;
		returnCard = cards.getFirst();
		cards.removeFirst();
		return returnCard;
	}
	
	public Card lookAtBottomCard()
	{
		if (cards.isEmpty())
			return null;
		Card returnCard;
		returnCard = cards.getFirst();
		return returnCard;
	}

	public Card lookAtCardAt(int pos)
	{
		if (cards.isEmpty())
			return null;
		return cards.get(pos);
	}
	
	public Card takeCardAt(int pos)
	{
		if (cards.isEmpty())
			return null;
		return cards.remove(pos);
	}

	public void shuffleCards()
	{
		Collections.shuffle(cards);
	}
	public Card lookAtCardAt (int pos)
	{
		return cards.get(pos);
	}


}