/*
	LIve run with two players

*/

import java.util.*;
import java.lang.*;
import org.apache.commons.*;
import org.apache.commons.lang3.StringUtils;

public class GameRunner
{
	int numberOfPlayers;
	String[] names;
	String[] kingdoms;
	GameManager mgr;
	Scanner scan = new Scanner(System.in);
	
	public GameRunner()
	{
		numberOfPlayers = 2;
		String[] names1 = { "John", "Molly"};
		String[] kingdoms1 = { "Adventurer","Ambassador","Baron",
				"Cutpurse","Embargo",
				"Feast","Gardens","Great Hall",
				"Mine","Sea Hag" };
		this.names = names1;
		this.kingdoms = kingdoms1;
		this.mgr = new GameManager(numberOfPlayers, names, kingdoms);
	}
	public GameRunner(String[] NAMES, String[] KINGDOMS, int NUMBEROFPLAYERS)
	{
		this.names = NAMES;
		this.kingdoms = KINGDOMS;
		this.numberOfPlayers = NUMBEROFPLAYERS;
		this.mgr = new GameManager(numberOfPlayers, names, kingdoms);
	}
	
	
	public void runGame()
	{
		
		mgr.printBoard();
		ActionCard a = new ActionCard(6,"Baron");

		// Each player's turn
		// Action phase
		while ( !mgr.isGameOver() )
		{
			
			mgr.players[mgr.currentPlayer].hand.addCard(a);
			//*/
			
			mgr.printBoard();
			mgr.printPlayerStandard();
			System.out.print("Enter index of card you whish to play or \ntype \"End Actions\" or \"End Turn\" or \ntype the resource pile you wish to buy from\n::>: ");
			
			// Handle all input cases
			String input = scan.nextLine();
			if (StringUtils.isNumeric(input))
			{
				String playResult = mgr.playCard(Integer.parseInt(input));
				handleAdditionalActions(playResult);
				
			}
			else{
				switch (input){
					case "End Actions": mgr.endActions();
						break;
					case "End Turn": mgr.endPlayerTurn();
						break;
					case "Autoplay Treasures": mgr.AutoplayTreasures();
						break;
					default: mgr.buy(mgr.findResourceStack(input));
				}
			}

		}
		System.out.println(mgr.winner());

	}
	
	public void handleAdditionalActions(String input)
	{
		switch (input){
		case "Done": return;
		case "Baron":
			while (true){
				mgr.printCurrentPlayerHand();
				System.out.println("Type the index of the estate card you wish to play");
				System.out.println("If you do not wish to play type \"None\"");
				System.out.print("::>");
				String userInput = scan.nextLine();
				
				if(StringUtils.isNumeric(input))
				{
					
				}
				else if(input.equals("None"))
				{
					break;
				}
				System.out.println("Unrecognized input");
			}
			break;
		}
	}

	public static void printTurn(Player myPlayer)
	{
		System.out.println("\nNewTurn\nDeck:");
		for( Card e : myPlayer.deck.cards ){
			System.out.println(e.toString());
		}
		System.out.println("\nHand:");
		for( Card e : myPlayer.hand.cards ){
			System.out.println(e.toString());
		}
		System.out.println("\nDiscard:");
		for( Card e : myPlayer.discard.cards ){
			System.out.println(e.toString());
		}
		System.out.println("\nPlayPile:");
		for( Card e : myPlayer.playPile.cards ){
			System.out.println(e.toString());
		}
	}

}