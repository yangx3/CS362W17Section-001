/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 28 04:01:49 GMT 2017
 */

package dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dominion.Card;
import dominion.GameState;
import dominion.Player;
import java.util.InputMismatchException;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class Card_ESTest extends Card_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Card card0 = Card.SALVAGER;
      GameState gameState0 = new GameState();
      Player player0 = new Player("J}EIaI", gameState0, true);
      card0.play(player0);
      card0.getVictoryPoints(player0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom((-1454));
      Card card0 = Card.FEAST;
      GameState gameState0 = new GameState();
      Player player0 = new Player("Feast", gameState0, true);
      card0.play(player0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Card card0 = Card.AMBASSADOR;
      GameState gameState0 = new GameState();
      Player player0 = new Player("IJ}EI%aI", gameState0, true);
      gameState0.numPlayers = (-21);
      card0.play(player0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Card card0 = Card.ADVENTURER;
      GameState gameState0 = new GameState();
      gameState0.listCards();
      Player player0 = new Player("dominion.Card$11", gameState0, false);
      player0.addMoney(6);
      player0.scan = null;
      card0.getVictoryPoints(player0);
      card0.play(player0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Card.Type.values();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try {
        Card.Type.valueOf("#;3T");
        fail("Expecting exception: IllegalArgumentException");

      } catch(IllegalArgumentException e) {
         //
         // No enum constant dominion.Card.Type.#;3T
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Card.values();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Card.valueOf("CURSE");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Card.valueOf("COPPER");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GameState gameState0 = new GameState();
      Card card0 = Card.CURSE;
      Card card1 = gameState0.takeCard(card0);
      Player player0 = new Player("COUNCILROOM", gameState0, true);
      card1.play(player0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GameState gameState0 = new GameState();
      Card card0 = Card.CURSE;
      Card card1 = gameState0.takeCard(card0);
      Player player0 = new Player("COUNCILROOM", gameState0, true);
      card1.getVictoryPoints(player0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Card card0 = Card.valueOf("ESTATE");
      card0.getVictoryPoints();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GameState gameState0 = new GameState();
      Card card0 = Card.CURSE;
      Card card1 = gameState0.takeCard(card0);
      card1.getVictoryPoints();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player(")uwM+?]j", gameState0, true);
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = player0.chooseTypeOfCard(card_Type0);
      card0.getCost();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GameState gameState0 = new GameState();
      Card card0 = Card.GOLD;
      Card card1 = gameState0.takeCard(card0);
      card1.getActionCost();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try {
        Card.valueOf((String) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try {
        Card.valueOf("");
        fail("Expecting exception: IllegalArgumentException");

      } catch(IllegalArgumentException e) {
         //
         // No enum constant dominion.Card.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Card card0 = Card.ADVENTURER;
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0);
      gameState0.addPlayer("");
      card0.play(player0);
      player0.putInHand(card0);
      // Undeclared exception!
      card0.play(player0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SystemInUtil.addInputLine("%4L)iyjF");
      Card card0 = Card.SALVAGER;
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0, false);
      // Undeclared exception!
      try {
        card0.play(player0);
        fail("Expecting exception: InputMismatchException");

      } catch(InputMismatchException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Card card0 = Card.COUNCILROOM;
      GameState gameState0 = new GameState();
      Player[] playerArray0 = new Player[3];
      Player player0 = new Player("\"s=@5;Kia+h", gameState0);
      playerArray0[0] = player0;
      Player player1 = new Player("OPLTseIog:u`6!%3UgV", player0.gameState);
      playerArray0[1] = player1;
      gameState0.players = playerArray0;
      card0.play(playerArray0[0]);
      // Undeclared exception!
      try {
        card0.play(playerArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");

      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Card card0 = Card.GARDENS;
      // Undeclared exception!
      try {
        card0.getVictoryPoints((Player) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.Card$8", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0, true);
      Card card0 = player0.draw();
      card0.play(player0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Card card0 = Card.ADVENTURER;
      card0.toString();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Card card0 = Card.MINE;
      card0.getType();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Card card0 = Card.valueOf("ESTATE");
      GameState gameState0 = new GameState();
      Player player0 = new Player("ESTATE", gameState0, true);
      card0.play(player0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Card card0 = Card.SMITHY;
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0);
      card0.play(player0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Card card0 = Card.SALVAGER;
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0, true);
      card0.play(player0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Card card0 = Card.MINE;
      GameState gameState0 = new GameState();
      Player player0 = new Player("worth 2 money", gameState0, true);
      card0.play(player0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Random.setNextRandom((-1477));
      Card card0 = Card.FEAST;
      GameState gameState0 = new GameState();
      Player player0 = new Player("Feast", gameState0, true);
      card0.play(player0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Card card0 = Card.FEAST;
      GameState gameState0 = new GameState();
      Player player0 = new Player("Feast", gameState0, true);
      card0.play(player0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Card card0 = Card.FEAST;
      GameState gameState0 = new GameState();
      Player player0 = new Player("0,9K<rR", gameState0);
      // Undeclared exception!
      try {
        card0.play(player0);
        fail("Expecting exception: NoSuchElementException");

      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Card card0 = Card.CUTPURSE;
      GameState gameState0 = new GameState();
      Player player0 = new Player("Cutpurse", gameState0, true);
      gameState0.addPlayer("Cutpurse", true);
      card0.play(player0);
      assertEquals(2, player0.getMoney());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Card card0 = Card.CUTPURSE;
      GameState gameState0 = new GameState();
      Player player0 = new Player("Cutpurse", gameState0, true);
      // Undeclared exception!
      try {
        card0.play(player0);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.Card$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Card card0 = Card.CUTPURSE;
      GameState gameState0 = new GameState();
      Player player0 = new Player("#;3T", gameState0);
      Player[] playerArray0 = new Player[1];
      playerArray0[0] = player0;
      gameState0.players = playerArray0;
      card0.play(player0);
      assertEquals(2, player0.getMoney());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Card card0 = Card.COUNCILROOM;
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0);
      Player[] playerArray0 = new Player[4];
      playerArray0[0] = player0;
      playerArray0[1] = player0;
      playerArray0[2] = player0;
      playerArray0[3] = player0;
      gameState0.players = playerArray0;
      card0.play(player0);
      assertEquals(2, player0.getBuys());
      assertEquals(9, player0.getHandSize());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Card card0 = Card.BARON;
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0);
      Card card1 = card0.play(player0);
      card1.play(player0);
      // assertEquals(3, player0.getHandSize());
      // assertEquals(8, player0.getMoney());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Card card0 = Card.AMBASSADOR;
      GameState gameState0 = new GameState();
      Player player0 = new Player("IJ}EI%aI", gameState0, true);
      gameState0.numPlayers = 3;
      Player[] playerArray0 = new Player[9];
      playerArray0[0] = player0;
      gameState0.players = playerArray0;
      // Undeclared exception!
      try {
        card0.play(player0);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.Card$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Card card0 = Card.AMBASSADOR;
      GameState gameState0 = new GameState();
      Player player0 = new Player("0,9K<rR", gameState0, true);
      gameState0.addPlayer("");
      Card card1 = card0.play(player0);
      assertSame(card1, card0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("*%%#G", gameState0);
      Card card0 = Card.EMBARGO;
      player0.playCard(card0, player0);
      assertEquals(2, player0.getMoney());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Card card0 = Card.VILLAGE;
      GameState gameState0 = new GameState();
      Player player0 = new Player("%t]:y/x2cU", gameState0);
      card0.play(player0);
      assertEquals(3, player0.getActions());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Card card0 = Card.ADVENTURER;
      int int0 = card0.getVictoryPoints();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Card card0 = Card.FEAST;
      String string0 = card0.getDesc();
      assertEquals("Trash this card.  Gain a card costing up to 5 money.", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Card card0 = Card.FEAST;
      int int0 = card0.getCost();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Card card0 = Card.FEAST;
      int int0 = card0.getActionCost();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Card card0 = Card.GARDENS;
      GameState gameState0 = new GameState();
      Player player0 = new Player("'s discardPile:", gameState0, false);
      int int0 = card0.getVictoryPoints(player0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Card card0 = Card.GREAT_HALL;
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0, false);
      card0.play(player0);
      assertEquals(2, player0.getActions());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("worth 2 money", gameState0, false);
      Card card0 = Card.GREAT_HALL;
      int int0 = card0.getVictoryPoints(player0);
      assertEquals(1, int0);
  }
}
