/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 28 04:00:45 GMT 2017
 */

package dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dominion.Card;
import dominion.GameState;
import dominion.Player;
import java.util.InputMismatchException;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class GameState_ESTest extends GameState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.addPlayer("O[H}", true);
      gameState0.nextTurn();
      gameState0.nextTurn();
      Player player0 = new Player("O[H}", gameState0);
      Player player1 = new Player((String) null, gameState0, true);
      gameState0.addPlayer(player0);
      Player player2 = new Player((String) null, gameState0, true);
      gameState0.addPlayer((String) null, true);
      gameState0.addPlayer("");
      gameState0.addPlayer((String) null, true);
      gameState0.addPlayer("O[H}");
      gameState0.nextTurn();
      player2.addMoney(40);
      // Undeclared exception!
      try { 
        player2.gameState.nextTurn();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GameState gameState0 = new GameState();
      Card card0 = Card.CURSE;
      gameState0.addPlayer("dominion.Card$1", true);
      gameState0.takeCard(card0);
      gameState0.addPlayer((String) null);
      gameState0.addPlayer("ca6", true);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.playerTurn = 0;
      Card card0 = Card.ESTATE;
      gameState0.addPlayer((String) null, true);
      Card card1 = Card.AMBASSADOR;
      gameState0.addCard(card1);
      Player player0 = new Player((String) null, gameState0);
      Player player1 = new Player("<Nzwv.]Tz!6~Q.Hs", player0.gameState, true);
      Player player2 = new Player((String) null, gameState0, false);
      Player player3 = new Player((String) null, player2.gameState);
      Player player4 = new Player((String) null, player3.gameState);
      Player player5 = new Player((String) null, player4.gameState);
      Player player6 = new Player("", player5.gameState);
      gameState0.takeCard(card0);
      gameState0.countCard((Card) null);
      // Undeclared exception!
      try { 
        gameState0.addPlayer((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GameState gameState0 = new GameState();
      Card card0 = Card.FEAST;
      gameState0.countCard(card0);
      Card card1 = Card.ESTATE;
      gameState0.addCard(card1);
      gameState0.addCard(card0);
      SystemInUtil.addInputLine("!(L\"su;G");
      gameState0.listCards();
      Random.setNextRandom(1673);
      gameState0.addPlayer("!(L\"su;G", true);
      Card card2 = Card.SALVAGER;
      gameState0.addCard(card2);
      Player[] playerArray0 = gameState0.players;
      // Undeclared exception!
      gameState0.nextTurn();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GameState gameState0 = new GameState();
      Card card0 = Card.VILLAGE;
      gameState0.addCard(card0);
      SystemInUtil.addInputLine(" # - %-15s %s  %s  %s\n");
      Player[] playerArray0 = new Player[4];
      Player player0 = new Player("", gameState0, true);
      playerArray0[0] = player0;
      Player player1 = new Player("", player0.gameState, true);
      playerArray0[1] = player1;
      Player player2 = new Player("j!whivNBQB]w:dR6&*T", player0.gameState);
      playerArray0[2] = player2;
      Player player3 = new Player("j!whivNBQB]w:dR6&*T", player0.gameState);
      playerArray0[3] = player3;
      gameState0.players = playerArray0;
      gameState0.addPlayer("%s amassed %d victory points.\n");
      // Undeclared exception!
      try { 
        gameState0.nextTurn();
        fail("Expecting exception: InputMismatchException");
      
      } catch(InputMismatchException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.addPlayer((Player) null);
      Player player0 = new Player("CD0E!(y6G>?V#Ae ~@", gameState0, false);
      player0.addBuys(1);
      gameState0.numPlayers = (-1212);
      // Undeclared exception!
      try { 
        gameState0.addPlayer(player0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1212
         //
         verifyException("dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.listCards();
      gameState0.playerTurn = (-2058);
      gameState0.takeCard((Card) null);
      gameState0.countCard((Card) null);
      gameState0.listCards();
      // Undeclared exception!
      try { 
        gameState0.nextTurn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2058
         //
         verifyException("dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GameState gameState0 = new GameState();
      Card card0 = Card.COPPER;
      gameState0.takeCard(card0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player[] playerArray0 = new Player[1];
      Player player0 = new Player("", gameState0, true);
      playerArray0[0] = player0;
      gameState0.players = playerArray0;
      // Undeclared exception!
      try { 
        gameState0.nextTurn();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GameState gameState0 = new GameState();
      GameState gameState1 = new GameState();
      gameState0.addPlayer((String) null);
      gameState0.playerTurn = 0;
      Card card0 = Card.ADVENTURER;
      gameState0.takeCard(card0);
      gameState0.players = null;
      Card card1 = Card.VILLAGE;
      gameState1.countCard(card1);
      // Undeclared exception!
      try { 
        gameState0.addPlayer((Player) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.addPlayer("#=.hWnXj=6@Y6", true);
      gameState0.players = null;
      // Undeclared exception!
      try { 
        gameState0.addPlayer("x9cj4b|c@*<_M).qlQ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.playerTurn = 8;
      Card card0 = Card.SALVAGER;
      gameState0.countCard(card0);
      // Undeclared exception!
      try { 
        gameState0.nextTurn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.numPlayers = 8;
      Card card0 = Card.SMITHY;
      gameState0.addCard(card0);
      Player[] playerArray0 = new Player[7];
      Player player0 = new Player("%s amassed %d victory points.\n", gameState0, false);
      playerArray0[0] = player0;
      Player player1 = new Player("B\" )y=[Lp2`\"~Ie", player0.gameState);
      playerArray0[1] = player1;
      Player player2 = new Player("worth 3 victory points", player1.gameState);
      playerArray0[2] = player2;
      Player player3 = new Player("7,/l[`!w;tm", player0.gameState, false);
      playerArray0[3] = player3;
      Player player4 = new Player("", player3.gameState, false);
      playerArray0[4] = player4;
      Player player5 = new Player("", player2.gameState);
      playerArray0[5] = player5;
      Player player6 = new Player("Thanks for playing!", player3.gameState, false);
      playerArray0[6] = player6;
      gameState0.players = playerArray0;
      gameState0.addPlayer("", false);
      // Undeclared exception!
      try { 
        gameState0.addPlayer((String) null, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.players = null;
      // Undeclared exception!
      try { 
        gameState0.addPlayer(" U<", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.numPlayers = 115;
      gameState0.addPlayer("");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.countCard((Card) null);
      gameState0.listCards();
      // Undeclared exception!
      try { 
        gameState0.nextTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.addPlayer("O[H}", true);
      gameState0.nextTurn();
      gameState0.nextTurn();
      Player player0 = new Player("O[H}", gameState0, true);
      Card card0 = Card.GREAT_HALL;
      Player player1 = new Player((String) null, gameState0, true);
      gameState0.addPlayer(player0);
      Player player2 = new Player((String) null, gameState0, true);
      gameState0.addPlayer((String) null, true);
      gameState0.addPlayer((String) null);
      gameState0.addPlayer((String) null, true);
      gameState0.addPlayer("O[H}");
      gameState0.nextTurn();
      gameState0.addCard(card0);
      assertEquals(4, gameState0.numPlayers);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.addPlayer(")O[H}", true);
      gameState0.nextTurn();
      gameState0.nextTurn();
      Player player0 = new Player("[J2:`U", gameState0, true);
      player0.newTurn();
      gameState0.addPlayer("[J2:`U", true);
      gameState0.addPlayer("");
      gameState0.addPlayer(")O[H}", true);
      gameState0.addPlayer(")O[H}");
      gameState0.nextTurn();
      player0.gameState.listCards();
      player0.gameState.nextTurn();
      Player player1 = new Player("", player0.gameState);
      player0.gameState.addPlayer(player1);
      player1.gameState.addPlayer("Thanks for playing!", true);
      boolean boolean0 = gameState0.checkEndConditions();
      assertEquals(2, gameState0.playerTurn);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GameState gameState0 = new GameState();
      Card card0 = Card.PROVINCE;
      gameState0.takeCard(card0);
      int int0 = gameState0.countCard(card0);
      assertEquals(11, int0);
      
      Card card1 = gameState0.takeCard(card0);
      Card card2 = gameState0.takeCard(card1);
      gameState0.takeCard(card2);
      Card card3 = gameState0.takeCard(card2);
      gameState0.takeCard(card3);
      boolean boolean0 = gameState0.checkEndConditions();
      assertEquals(0, gameState0.numPlayers);
      assertEquals(0, gameState0.playerTurn);
      assertFalse(boolean0);
  }
}
