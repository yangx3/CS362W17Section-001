/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 28 03:59:07 GMT 2017
 */

package dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dominion.Card;
import dominion.GameState;
import dominion.Player;
import java.net.URISyntaxException;
import java.nio.channels.DatagramChannel;
import java.nio.channels.NotYetConnectedException;
import java.nio.channels.ReadableByteChannel;
import java.util.InputMismatchException;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.Scanner;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.addPlayer((String) null, true);
      SystemInUtil.addInputLine("%s chose %s.\n");
      Card card0 = Card.CURSE;
      gameState0.countCard(card0);
      Player player0 = new Player((String) null, gameState0, true);
      int int0 = Pattern.CASE_INSENSITIVE;
      player0.putInHand(card0);
      gameState0.addPlayer(player0);
      Card card1 = Card.EMBARGO;
      gameState0.playerTurn = (-1);
      player0.discard(card1);
      Card.Type card_Type0 = Card.Type.VICTORY;
      player0.gameState = gameState0;
      player0.chooseTypeOfCard(card_Type0);
      player0.getBuys();
      player0.discardFromHand();
      player0.addActions(0);
      player0.addBuys(2218);
      player0.chooseHand();
      gameState0.playerTurn = 1;
      // Undeclared exception!
      gameState0.nextTurn();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0);
      player0.addMoney((-2565));
      player0.getMoney();
      Card card0 = Card.SILVER;
      gameState0.addCard(card0);
      player0.countVictoryPoints();
      player0.takeFreeCard(card0);
      Card card1 = Card.ESTATE;
      player0.discardFromHand(card1);
      player0.addActions(756);
      Scanner scanner0 = player0.scan;
      Player player1 = new Player("JNI", gameState0, false);
      player0.playCard(card0, player1);
      // Undeclared exception!
      try {
        player1.chooseHand();
        fail("Expecting exception: NoSuchElementException");

      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0, true);
      MockRandom mockRandom0 = new MockRandom();
      player0.rand = (Random) mockRandom0;
      mockRandom0.longs();
      mockRandom0.nextLong();
      gameState0.addPlayer("", false);
      Player player1 = new Player("", player0.gameState, true);
      player1.gameState = gameState0;
      mockRandom0.nextInt();
      Card card0 = Card.AMBASSADOR;
      player1.discardFromHand(card0);
      // Undeclared exception!
      player1.newTurn();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0);
      Card card0 = Card.SMITHY;
      player0.playCard(card0);
      gameState0.players = gameState0.players;
      player0.playCard(card0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try {
        player0.chooseHand();
        fail("Expecting exception: NoSuchElementException");

      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0, true);
      player0.chooseHand();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0, true);
      Card card0 = Card.MINE;
      player0.playCard(card0);
      gameState0.addPlayer("", true);
      Card card1 = Card.PROVINCE;
      player0.putInHand(card1);
      player0.discardFromHand();
      Card card2 = Card.GARDENS;
      player0.discard(card2);
      player0.getActions();
      Card card3 = Card.COUNCILROOM;
      GameState gameState1 = new GameState();
      Player player1 = new Player(".d^_c", gameState1);
      player0.playCard(card3, player1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0);
      gameState0.addPlayer(player0);
      player0.seeHand();
      Card card0 = Card.BARON;
      player0.takeFreeCard(card0);
      gameState0.countCard(card0);
      player0.getActions();
      Player player1 = new Player("", gameState0);
      player0.playCard(card0);
      player0.discardFromHand();
      player0.takeFreeCard(card0);
      player0.gameState = gameState0;
      Player player2 = new Player("", player0.gameState);
      player0.playCard(card0, player2);
      player2.gameState = null;
      player0.addMoney(19);
      player0.addBuys(19);
      player2.addBuys(20);
      player1.seeHand();
      player2.shuffle();
      player0.discardFromHand();
      Card card1 = Card.CUTPURSE;
      // Undeclared exception!
      try {
        player2.takeFreeCard(card1);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player((String) null, gameState0, true);
      player0.newTurn();
      Player[] playerArray0 = new Player[3];
      playerArray0[0] = player0;
      playerArray0[1] = player0;
      playerArray0[2] = player0;
      gameState0.players = playerArray0;
      gameState0.addPlayer("'s turn is OVER.\n\n", true);
      Card card0 = Card.SMITHY;
      gameState0.takeCard(card0);
      player0.countAllCards();
      Card card1 = Card.AMBASSADOR;
      Card.Type card_Type0 = Card.Type.ACTION;
      player0.chooseTypeOfCard(card_Type0);
      player0.rand = null;
      player0.discard(card1);
      // Undeclared exception!
      try {
        player0.discardFromHand();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("hW[!j{%{");
      GameState gameState0 = new GameState();
      Player player0 = new Player("s(V0S4=}&XN\u0001@W&`", gameState0, true);
      Card card0 = Card.DUCHY;
      gameState0.takeCard(card0);
      player0.getHandSize();
      GameState gameState1 = player0.gameState;
      MockRandom mockRandom0 = (MockRandom)player0.rand;
      Card.Type card_Type0 = Card.Type.ACTION;
      player0.rand = null;
      player0.chooseTypeOfCard(card_Type0);
      gameState0.addPlayer(player0);
      // Undeclared exception!
      try {
        player0.newTurn();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SystemInUtil.addInputLine("+1 buy.  Trash a card from your hand.  Gain money equal to it's cost.");
      SystemInUtil.addInputLine("3\"om1=BPM|j {JwmI");
      org.evosuite.runtime.Random.setNextRandom((-1857));
      GameState gameState0 = new GameState();
      gameState0.addPlayer("Player ");
      Player player0 = new Player("A|#[1W", gameState0, false);
      player0.chooseHand();
      Player[] playerArray0 = new Player[6];
      playerArray0[0] = player0;
      playerArray0[1] = player0;
      playerArray0[2] = player0;
      playerArray0[3] = player0;
      playerArray0[4] = player0;
      playerArray0[5] = player0;
      gameState0.players = playerArray0;
      Card card0 = Card.COUNCILROOM;
      player0.playCard(card0, player0);
      player0.addActions((-580));
      Card card1 = Card.CURSE;
      player0.takeFreeCard(card1);
      player0.seeDeck();
      player0.getActions();
      player0.countAllCards();
      DatagramChannel datagramChannel0 = DatagramChannel.open();
      Scanner scanner0 = new Scanner((ReadableByteChannel) datagramChannel0);
      // Undeclared exception!
      try {
        scanner0.hasNextLine();
        fail("Expecting exception: NotYetConnectedException");

      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("d", gameState0);
      player0.addBuys(1168);
      gameState0.addPlayer(player0);
      player0.getActions();
      player0.addActions((-1251));
      Card card0 = player0.draw();
      Card.Type.values();
      player0.playCard(card0);
      player0.seeDeck();
      player0.draw();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SystemInUtil.addInputLine("+1 buy.  Trash a card from your hand.  Gain money equal to it's cost.");
      SystemInUtil.addInputLine("3\"om1=BPM|j {JwmI");
      org.evosuite.runtime.Random.setNextRandom((-1857));
      GameState gameState0 = new GameState();
      gameState0.addPlayer("Player ");
      Player player0 = new Player("A|#[1W", gameState0, false);
      player0.chooseHand();
      Player[] playerArray0 = new Player[6];
      playerArray0[0] = player0;
      playerArray0[1] = player0;
      playerArray0[2] = player0;
      playerArray0[3] = player0;
      playerArray0[4] = player0;
      playerArray0[5] = player0;
      gameState0.players = playerArray0;
      Card card0 = Card.AMBASSADOR;
      // Undeclared exception!
      try {
        player0.playCard(card0, player0);
        fail("Expecting exception: InputMismatchException");

      } catch(InputMismatchException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.addPlayer((String) null, true);
      SystemInUtil.addInputLine("%s chose %s.\n");
      Card card0 = Card.CURSE;
      gameState0.countCard(card0);
      Player player0 = new Player((String) null, gameState0, true);
      int int0 = Pattern.CASE_INSENSITIVE;
      Card card1 = Card.CUTPURSE;
      player0.putInHand(card1);
      gameState0.addPlayer(player0);
      Card card2 = Card.EMBARGO;
      gameState0.playerTurn = (-1);
      player0.discard(card2);
      Card.Type card_Type0 = Card.Type.VICTORY;
      player0.addBuys((-1));
      player0.gameState = gameState0;
      player0.chooseTypeOfCard(card_Type0);
      player0.getBuys();
      player0.discardFromHand();
      player0.addActions(0);
      player0.addBuys(2218);
      player0.seeHand();
      player0.chooseHand();
      gameState0.playerTurn = 0;
      gameState0.nextTurn();
      Card card3 = Card.ESTATE;
      player0.takeFreeCard(card3);
      player0.seeHand();
      player0.gameState = gameState0;
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0);
      Card card0 = Card.COUNCILROOM;
      player0.seeDeck();
      Card card1 = Card.GOLD;
      player0.discard(card1);
      player0.addActions(0);
      Card card2 = Card.VILLAGE;
      gameState0.countCard(card2);
      player0.discardFromHand();
      gameState0.playerTurn = (-1);
      player0.takeFreeCard(card0);
      player0.countAllCards();
      Card card3 = Card.SILVER;
      player0.takeFreeCard(card3);
      player0.draw();
      gameState0.addCard(card1);
      player0.seeHand();
      player0.addBuys((-1));
      Card card4 = Card.GOLD;
      gameState0.addCard(card4);
      gameState0.addPlayer("(z%T9pNe\"D+rVeWD\"'", false);
      // Undeclared exception!
      try {
        player0.chooseHand();
        fail("Expecting exception: NoSuchElementException");

      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0);
      gameState0.addPlayer(player0);
      player0.seeHand();
      Card card0 = Card.AMBASSADOR;
      player0.takeFreeCard(card0);
      SystemInUtil.addInputLine("Cutpurse");
      gameState0.countCard(card0);
      player0.getActions();
      Player player1 = new Player("", gameState0);
      // Undeclared exception!
      try {
        player0.playCard(card0);
        fail("Expecting exception: InputMismatchException");

      } catch(InputMismatchException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SystemInUtil.addInputLine("'s turn:");
      GameState gameState0 = new GameState();
      Card card0 = Card.CURSE;
      gameState0.takeCard(card0);
      Player player0 = new Player("CUTPURSE", gameState0);
      // Undeclared exception!
      try {
        player0.newTurn();
        fail("Expecting exception: InputMismatchException");

      } catch(InputMismatchException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.addPlayer("");
      Player[] playerArray0 = new Player[8];
      Player player0 = new Player(")CBg~i", gameState0, false);
      playerArray0[0] = player0;
      Player player1 = new Player("", player0.gameState, true);
      playerArray0[1] = player1;
      Player player2 = new Player((String) null, player1.gameState);
      playerArray0[2] = player2;
      Player player3 = new Player("m[d?@r}M'\")v.59A", player1.gameState, true);
      playerArray0[3] = player3;
      Player player4 = new Player("", player3.gameState, false);
      playerArray0[4] = player4;
      GameState gameState1 = new GameState();
      Player player5 = new Player((String) null, gameState1, true);
      playerArray0[5] = player5;
      Player player6 = new Player("`9I(", player3.gameState);
      playerArray0[6] = player6;
      Player player7 = new Player("'s drawPile:", player6.gameState, true);
      playerArray0[7] = player7;
      gameState0.players = playerArray0;
      Player player8 = null;
      try {
        player8 = new Player("", gameState0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");

      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player((String) null, gameState0, false);
      Card card0 = Card.FEAST;
      // Undeclared exception!
      try {
        player0.playCard(card0, (Player) null);
        fail("Expecting exception: NoSuchElementException");

      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("M= p]5p#-sR(P8CC/C", gameState0, false);
      player0.addActions(0);
      player0.addMoney((-2351));
      player0.toString();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GameState gameState0 = new GameState();
      Card card0 = Card.CUTPURSE;
      gameState0.countCard(card0);
      Player player0 = new Player("", gameState0, true);
      MockRandom mockRandom0 = new MockRandom();
      player0.rand = (Random) mockRandom0;
      mockRandom0.longs();
      mockRandom0.nextLong();
      gameState0.addPlayer("", false);
      Player player1 = new Player("", player0.gameState, true);
      Card card1 = Card.AMBASSADOR;
      player1.discardFromHand(card1);
      player1.newTurn();
      // Undeclared exception!
      try {
        mockRandom0.doubles((long) 0, 0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");

      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player((String) null, gameState0);
      gameState0.listCards();
      player0.toString();
      Card card0 = Card.PROVINCE;
      Player player1 = new Player((String) null, gameState0);
      player0.playCard(card0, player1);
      gameState0.addPlayer((String) null);
      // Undeclared exception!
      try {
        player0.newTurn();
        fail("Expecting exception: NoSuchElementException");

      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("Card Name", gameState0);
      Card card0 = Card.CUTPURSE;
      // Undeclared exception!
      try {
        player0.playCard(card0, (Player) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.Card$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("~~r&uoWTN(hw", gameState0, true);
      Card card0 = Card.COUNCILROOM;
      // Undeclared exception!
      try {
        player0.playCard(card0);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.Card$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("Bhg!P-3Z@", gameState0, false);
      player0.getName();
      gameState0.listCards();
      Card card0 = Card.FEAST;
      // Undeclared exception!
      try {
        player0.playCard(card0);
        fail("Expecting exception: NoSuchElementException");

      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = null;
      try {
        player0 = new Player("}hd[KcT~^yZ}", (GameState) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player((String) null, gameState0);
      Scanner scanner0 = player0.scan;
      Card card0 = Card.ADVENTURER;
      player0.takeFreeCard(card0);
      Card card1 = Card.COPPER;
      player0.discardFromHand(card1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0);
      player0.shuffle();
      player0.getName();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("785FmGIxPpU{\"W[", gameState0, true);
      Player player1 = new Player("worth 3 money", player0.gameState, true);
      Player player2 = new Player("worth 3 money", gameState0);
      Player player3 = new Player(")/&2I3\"/WBzt7@L", player1.gameState, true);
      Player player4 = new Player("worth 3 money", player2.gameState, true);
      Player player5 = new Player("worth 3 money", player2.gameState, false);
      Player player6 = new Player("worth 3 money", player4.gameState);
      Player player7 = new Player("worth 3 money", player2.gameState, true);
      GameState gameState1 = new GameState();
      Player player8 = null;
      try {
        player8 = new Player("785FmGIxPpU{\"W[", gameState0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");

      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = null;
      try {
        player0 = new Player("gUM", (GameState) null, false);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SystemInUtil.addInputLine("0");
      GameState gameState0 = new GameState();
      Player player0 = new Player("$", gameState0);
      player0.gameState = gameState0;
      player0.newTurn();
      SystemInUtil.addInputLine("$");
      Card.Type card_Type0 = Card.Type.ACTION;
      // Undeclared exception!
      try {
        player0.chooseTypeOfCard(card_Type0);
        fail("Expecting exception: InputMismatchException");

      } catch(InputMismatchException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0, true);
      player0.chooseHand();
      player0.seeDeck();
      Card card0 = Card.GARDENS;
      gameState0.countCard(card0);
      player0.addBuys((-340));
      player0.getBuys();
      player0.countVictoryPoints();
      player0.seeDeck();
      player0.chooseHand();
      try {
        MockURI.URI("Smithy", "", (String) null);
        fail("Expecting exception: URISyntaxException");

      } catch(URISyntaxException e) {
         //
         // Expected scheme-specific part at index 7: Smithy:
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0, false);
      player0.shuffle();
      player0.addMoney(0);
      Card card0 = Card.CUTPURSE;
      gameState0.addCard(card0);
      player0.discardFromHand();
      player0.addBuys((-44));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SystemInUtil.addInputLine("0");
      GameState gameState0 = new GameState();
      Player player0 = new Player("$", gameState0);
      player0.gameState = gameState0;
      player0.newTurn();
      SystemInUtil.addInputLine("$");
      player0.draw();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SystemInUtil.addInputLine("7");
      GameState gameState0 = new GameState();
      SystemInUtil.addInputLine("7");
      Player player0 = new Player("$", gameState0);
      Card card0 = Card.SILVER;
      player0.putInHand(card0);
      Card.Type card_Type0 = Card.Type.VICTORY;
      player0.chooseHand();
      gameState0.playerTurn = 0;
      // Undeclared exception!
      try {
        player0.chooseTypeOfCard(card_Type0);
        fail("Expecting exception: NoSuchElementException");

      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0);
      player0.toString();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GameState gameState0 = new GameState();
      Card card0 = Card.DUCHY;
      gameState0.countCard(card0);
      Player player0 = new Player((String) null, gameState0, false);
      player0.getName();
      // Undeclared exception!
      try {
        player0.newTurn();
        fail("Expecting exception: NoSuchElementException");

      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "PROVINCE");
      SystemInUtil.addInputLine("3");
      GameState gameState0 = new GameState();
      SystemInUtil.addInputLine("3");
      Player player0 = new Player("$", gameState0);
      player0.putInHand((Card) null);
      Card.Type card_Type0 = Card.Type.ACTION;
      // Undeclared exception!
      try {
        player0.chooseTypeOfCard(card_Type0);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0);
      Card card0 = Card.BARON;
      Player player1 = new Player("'s turn:", player0.gameState);
      gameState0.listCards();
      player0.playCard(card0, player1);
      player0.seeDeck();
      Player[] playerArray0 = new Player[3];
      playerArray0[0] = player1;
      playerArray0[1] = player1;
      GameState gameState1 = new GameState();
      Player player2 = new Player("", gameState1);
      playerArray0[2] = player2;
      gameState0.players = playerArray0;
      Scanner scanner0 = player1.scan;
      player0.getMoney();
      player1.seeHand();
      player0.shuffle();
      player0.getBuys();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("/eF5eE+*^", gameState0);
      gameState0.addPlayer("/eF5eE+*^");
      MockRandom mockRandom0 = (MockRandom)player0.rand;
      player0.rand = (Random) mockRandom0;
      Card card0 = player0.draw();
      player0.countVictoryPoints();
      Player player1 = new Player(";\"UDOL7}J!", gameState0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/eF5eE+*^");
      Card card1 = Card.COUNCILROOM;
      player0.playCard(card1);
      player0.playCard(card0);
      player1.discardFromHand();
      Scanner scanner0 = player1.scan;
      player0.scan = scanner0;
      player1.countVictoryPoints();
      Card card2 = Card.GOLD;
      player0.takeFreeCard(card2);
      player1.draw();
      // Undeclared exception!
      try {
        Card.Type.valueOf("+1 Action, +1 Card.  Worth 1 Victory Point.");
        fail("Expecting exception: IllegalArgumentException");

      } catch(IllegalArgumentException e) {
         //
         // No enum constant dominion.Card.Type.+1 Action, +1 Card.  Worth 1 Victory Point.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("You do not have an action to play ", gameState0, true);
      Scanner scanner0 = player0.scan;
      org.evosuite.runtime.Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("| $7J6&ji%OhE", gameState0, true);
      player0.chooseHand();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player((String) null, gameState0, false);
      player0.gameState = gameState0;
      player0.addBuys(12);
      Card card0 = Card.EMBARGO;
      player0.countVictoryPoints();
      GameState gameState1 = new GameState();
      Player player1 = new Player((String) null, gameState1, false);
      Card card1 = Card.SALVAGER;
      player1.putInHand(card1);
      player1.playCard(card0, player0);
      player0.playCard(card0, player1);
      player0.countVictoryPoints();
      int int0 = gameState0.playerTurn;
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "'<uyJeUs8p";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'<uyJeUs8p");
      GameState gameState0 = new GameState();
      Player player0 = new Player("'<uyJeUs8p", gameState0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      gameState0.addPlayer(player0);
      player0.countAllCards();
      // Undeclared exception!
      try {
        player0.chooseHand();
        fail("Expecting exception: NoSuchElementException");

      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SystemInUtil.addInputLine("2");
      GameState gameState0 = new GameState();
      Player player0 = new Player("`", gameState0);
      player0.gameState = gameState0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Card card0 = player0.chooseHand();
      player0.isCardInHand(card0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(58);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      GameState gameState0 = new GameState();
      Player player0 = new Player((String) null, gameState0, true);
      gameState0.addPlayer(player0);
      // Undeclared exception!
      gameState0.nextTurn();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GameState gameState0 = new GameState();
      SystemInUtil.addInputLine("7");
      Player player0 = new Player("$", gameState0);
      Card.Type card_Type0 = Card.Type.VICTORY;
      // Undeclared exception!
      try {
        player0.chooseTypeOfCard(card_Type0);
        fail("Expecting exception: NoSuchElementException");

      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SystemInUtil.addInputLine("7");
      GameState gameState0 = new GameState();
      SystemInUtil.addInputLine("7");
      Player player0 = new Player("$", gameState0);
      Card card0 = Card.SMITHY;
      player0.takeFreeCard(card0);
      player0.chooseHand();
      gameState0.playerTurn = 0;
      player0.takeFreeCard((Card) null);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0, true);
      player0.shuffle();
      player0.discardFromHand();
      player0.countAllCards();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Card card0 = Card.MINE;
      Card card1 = Card.AMBASSADOR;
      player0.discard(card1);
      gameState0.countCard(card0);
      Card card2 = Card.AMBASSADOR;
      player0.takeFreeCard(card2);
      Card card3 = Card.SMITHY;
      GameState gameState1 = new GameState();
      Player player1 = new Player("", gameState1);
      player1.countVictoryPoints();
      player0.playCard(card3, player1);
      player0.seeDeck();
      MockRandom mockRandom0 = new MockRandom((long) 0);
      mockRandom0.nextInt();
      player0.rand = (Random) mockRandom0;
      Card card4 = Card.FEAST;
      player1.isCardInHand(card4);
      player1.draw();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("ofT*&y", gameState0, true);
      Card card0 = Card.BARON;
      Card card1 = Card.MINE;
      player0.discard(card1);
      player0.playCard(card0);
      gameState0.addPlayer((String) null);
      player0.countAllCards();
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.addActions(0);
      player0.addActions(48);
      gameState0.playerTurn = 3;
      player0.getActions();
      player0.addBuys(0);
      player0.addActions(48);
      player0.getHandSize();
      // Undeclared exception!
      try {
        Card.Type.valueOf("ofT*&y");
        fail("Expecting exception: IllegalArgumentException");

      } catch(IllegalArgumentException e) {
         //
         // No enum constant dominion.Card.Type.ofT*&y
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("@{e)J>yWZErAw Q", gameState0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      player0.seeDeck();
      player0.getName();
      player0.countVictoryPoints();
      Card card0 = Card.VILLAGE;
      SystemInUtil.addInputLine("Rh6pwo");
      MockRandom mockRandom0 = new MockRandom();
      player0.rand = (Random) mockRandom0;
      Card card1 = Card.AMBASSADOR;
      gameState0.numPlayers = 3;
      gameState0.countCard(card1);
      player0.returnCardToShared(card0);
      player0.seeDeck();
      MockRandom mockRandom1 = (MockRandom)player0.rand;
      // Undeclared exception!
      try {
        player0.chooseHand();
        fail("Expecting exception: InputMismatchException");

      } catch(InputMismatchException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "PROVINCE");
      SystemInUtil.addInputLine("3");
      GameState gameState0 = new GameState();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SystemInUtil.addInputLine("3");
      Player player0 = new Player("$", gameState0);
      gameState0.listCards();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Card.Type card_Type0 = Card.Type.VICTORY;
      // player0.chooseTypeOfCard(card_Type0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "0";
      SystemInUtil.addInputLine("0");
      GameState gameState0 = new GameState();
      SystemInUtil.addInputLine("0");
      Player player0 = new Player("$", gameState0);
      Card.Type card_Type0 = Card.Type.ACTION;
      player0.chooseHand();
      // Undeclared exception!
      try {
        player0.chooseTypeOfCard(card_Type0);
        fail("Expecting exception: NoSuchElementException");

      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("'s hand:", gameState0, true);
      player0.addMoney(0);
      Card card0 = Card.GREAT_HALL;
      player0.putInHand(card0);
      gameState0.numPlayers = 3844;
      Card card1 = Card.ESTATE;
      Player player1 = new Player("'s hand:", player0.gameState);
      player0.newTurn();
      player0.playCard(card1, player1);
      player0.getMoney();
      Card card2 = Card.CURSE;
      player1.countVictoryPoints();
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.addMoney(0);
      gameState0.addPlayer("'s hand:");
      player1.seeDeck();
      player0.isCardInHand(card1);
      Card card3 = Card.BARON;
      player1.addActions(3);
      player0.playCard(card2, player1);
      gameState0.addPlayer(player1);
      player1.getBuys();
      player0.countVictoryPoints();
      player0.takeFreeCard(card3);
      Card.Type card_Type0 = Card.Type.ACTION;
      player0.chooseTypeOfCard(card_Type0);
      Card.Type card_Type1 = Card.Type.ACTION;
      // Undeclared exception!
      try {
        player1.chooseTypeOfCard(card_Type1);
        fail("Expecting exception: NoSuchElementException");

      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "fun";
      GameState gameState0 = new GameState();
      Player player0 = new Player("fun", gameState0);
      player0.draw();
      player0.shuffle();
      // Undeclared exception!
      try {
        Card.Type.valueOf("fun");
        fail("Expecting exception: IllegalArgumentException");

      } catch(IllegalArgumentException e) {
         //
         // No enum constant dominion.Card.Type.fun
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.addPlayer((String) null, true);
      SystemInUtil.addInputLine("%s chose %s.\n");
      Player player0 = new Player((String) null, gameState0, true);
      int int0 = Pattern.CASE_INSENSITIVE;
      Card card0 = Card.CUTPURSE;
      player0.putInHand(card0);
      gameState0.addPlayer(player0);
      Card card1 = Card.EMBARGO;
      gameState0.playerTurn = (-1);
      player0.discard(card1);
      Card.Type card_Type0 = Card.Type.TREASURE;
      player0.gameState = gameState0;
      player0.chooseTypeOfCard(card_Type0);
      player0.chooseTypeOfCard(card_Type0);
      player0.getBuys();
      player0.discardFromHand();
      player0.addActions(0);
      player0.addBuys(2218);
      player0.seeHand();
      player0.chooseHand();
      gameState0.playerTurn = 1;
      // Undeclared exception!
      gameState0.nextTurn();
  }
}
