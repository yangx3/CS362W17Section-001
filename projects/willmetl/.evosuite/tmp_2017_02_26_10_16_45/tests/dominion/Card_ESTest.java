/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 26 18:22:46 GMT 2017
 */

package dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dominion.Card;
import dominion.GameState;
import dominion.Player;
import java.util.InputMismatchException;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Card_ESTest extends Card_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Card card0 = Card.SALVAGER;
      GameState gameState0 = new GameState();
      Player player0 = new Player("IJ}EI%aI", gameState0, true);
      card0.play(player0);
      card0.getVictoryPoints(player0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Card card0 = Card.GARDENS;
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0);
      card0.getVictoryPoints(player0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Card card0 = Card.AMBASSADOR;
      GameState gameState0 = new GameState();
      Player player0 = new Player("IJ}EI%aI", gameState0, true);
      gameState0.numPlayers = (-21);
      card0.play(player0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Card card0 = Card.ADVENTURER;
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0, true);
      gameState0.listCards();
      player0.newTurn();
      player0.takeFreeCard(card0);
      card0.play(player0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Card.Type.values();
      Card card0 = Card.VILLAGE;
      GameState gameState0 = new GameState();
      Player player0 = new Player("e~bF< ", gameState0);
      card0.play(player0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Card.Type.valueOf("#;3T");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant dominion.Card.Type.#;3T
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Card card0 = Card.COUNCILROOM;
      GameState gameState0 = new GameState();
      Player[] playerArray0 = new Player[3];
      Player player0 = new Player("\"s=@5;Kia+h", gameState0);
      playerArray0[0] = player0;
      Player player1 = new Player("OPLTseIog:u`6!%3UgV", player0.gameState);
      playerArray0[1] = player1;
      gameState0.players = playerArray0;
      card0.play(playerArray0[1]);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Card card0 = Card.COUNCILROOM;
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0);
      // Undeclared exception!
      try { 
        card0.play(player0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.Card$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Card.values();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Card.valueOf("CURSE");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Card.valueOf("COPPER");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Card card0 = Card.valueOf("ESTATE");
      card0.play((Player) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Card card0 = Card.valueOf("ESTATE");
      card0.getVictoryPoints();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("e~bF< ", gameState0);
      Card card0 = player0.draw();
      card0.getCost();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GameState gameState0 = new GameState();
      Card card0 = Card.COPPER;
      Card card1 = gameState0.takeCard(card0);
      card1.getActionCost();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Card.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Card.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant dominion.Card.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Card card0 = Card.ADVENTURER;
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0);
      gameState0.addPlayer("");
      Card card1 = Card.COUNCILROOM;
      card0.play(player0);
      player0.addMoney(1);
      card0.play(player0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SystemInUtil.addInputLine("%4L)iyjF");
      Card card0 = Card.SALVAGER;
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0, false);
      // Undeclared exception!
      try { 
        card0.play(player0);
        fail("Expecting exception: InputMismatchException");
      
      } catch(InputMismatchException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Card card0 = Card.COUNCILROOM;
      GameState gameState0 = new GameState();
      Player[] playerArray0 = new Player[3];
      Player player0 = new Player("\"s=@5;Kia+h", gameState0);
      playerArray0[0] = player0;
      playerArray0[1] = player0;
      playerArray0[2] = playerArray0[1];
      gameState0.players = playerArray0;
      card0.play(playerArray0[2]);
      // Undeclared exception!
      try { 
        card0.play(playerArray0[2]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("e~bF< ", gameState0);
      Card card0 = player0.draw();
      Card card1 = card0.play(player0);
      assertEquals(2, card1.getCost());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Card card0 = Card.COUNCILROOM;
      String string0 = card0.toString();
      assertEquals("Council Room", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Card card0 = Card.SALVAGER;
      String string0 = card0.getDesc();
      assertEquals("+1 buy.  Trash a card from your hand.  Gain money equal to it's cost.", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Card card0 = Card.GREAT_HALL;
      int int0 = card0.getCost();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Card card0 = Card.GREAT_HALL;
      Card.Type card_Type0 = card0.getType();
      assertEquals(Card.Type.ACTION, card_Type0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GameState gameState0 = new GameState();
      Card card0 = Card.CURSE;
      Card card1 = gameState0.takeCard(card0);
      Player player0 = new Player("COUNCILROOM", gameState0, true);
      Card card2 = card1.play(player0);
      assertSame(card1, card2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Card card0 = Card.SMITHY;
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0);
      card0.play(player0);
      assertEquals(8, player0.getHandSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Card card0 = Card.MINE;
      GameState gameState0 = new GameState();
      Player player0 = new Player("Gardens", gameState0, true);
      card0.play(player0);
      assertEquals(5, player0.getHandSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Card card0 = Card.FEAST;
      GameState gameState0 = new GameState();
      Player player0 = new Player("'s turn is OVER.\n\n", gameState0, true);
      card0.play(player0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Card card0 = Card.FEAST;
      GameState gameState0 = new GameState();
      Player player0 = new Player("+1 buy.  Trash a card from your hand.  Gain money equal to it's cost.", gameState0);
      // Undeclared exception!
      try { 
        card0.play(player0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Card card0 = Card.CUTPURSE;
      GameState gameState0 = new GameState();
      Player player0 = new Player("8np<}w2jSSk", gameState0);
      gameState0.addPlayer("8np<}w2jSSk", false);
      card0.play(player0);
      assertEquals(2, player0.getMoney());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Card card0 = Card.CUTPURSE;
      GameState gameState0 = new GameState();
      Player player0 = new Player("#;3T", gameState0);
      Player[] playerArray0 = new Player[1];
      playerArray0[0] = player0;
      gameState0.players = playerArray0;
      card0.play(player0);
      assertEquals(2, player0.getMoney());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("e~bF< ", gameState0);
      Card card0 = Card.BARON;
      card0.play(player0);
      assertEquals(4, player0.getHandSize());
      assertEquals(4, player0.getMoney());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = ";^)bs";
      GameState gameState0 = new GameState();
      String string1 = "C?jC";
      gameState0.addPlayer("C?jC", false);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "C?jC");
      Player player0 = new Player(";^)bs", gameState0);
      Card card0 = Card.EMBARGO;
      gameState0.countCard(card0);
      Card card1 = Card.BARON;
      player0.playCard(card1);
      Card card2 = gameState0.takeCard(card1);
      assertSame(card2, card1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Card card0 = Card.AMBASSADOR;
      GameState gameState0 = new GameState();
      Player player0 = new Player("IJ}EI%aI", gameState0, true);
      gameState0.numPlayers = 3;
      // Undeclared exception!
      try { 
        card0.play(player0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.Card$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Card card0 = Card.AMBASSADOR;
      GameState gameState0 = new GameState();
      Player player0 = new Player("IJ}EI%aI", gameState0, true);
      Card card1 = card0.play(player0);
      assertSame(card0, card1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0);
      Card card0 = Card.EMBARGO;
      player0.playCard(card0, player0);
      assertEquals(2, player0.getMoney());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Card card0 = Card.VILLAGE;
      GameState gameState0 = new GameState();
      Player player0 = new Player("e~bF< ", gameState0);
      card0.play(player0);
      assertEquals(3, player0.getActions());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Card card0 = Card.AMBASSADOR;
      int int0 = card0.getVictoryPoints();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GameState gameState0 = new GameState();
      Card card0 = Card.CURSE;
      Card card1 = gameState0.takeCard(card0);
      Player player0 = new Player("COUNCILROOM", gameState0, true);
      int int0 = card1.getVictoryPoints(player0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Card card0 = Card.VILLAGE;
      int int0 = card0.getActionCost();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Card card0 = Card.GARDENS;
      // Undeclared exception!
      try { 
        card0.getVictoryPoints((Player) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.Card$8", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Card card0 = Card.GREAT_HALL;
      GameState gameState0 = new GameState();
      Player player0 = new Player(";3\"Db]l~o,@2px#9e", gameState0, false);
      card0.play(player0);
      assertEquals(2, player0.getActions());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Card card0 = Card.GREAT_HALL;
      GameState gameState0 = new GameState();
      Player player0 = new Player((String) null, gameState0);
      int int0 = card0.getVictoryPoints(player0);
      assertEquals(1, int0);
  }
}
