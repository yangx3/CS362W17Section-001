/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 26 18:19:55 GMT 2017
 */

package dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dominion.Card;
import dominion.GameState;
import dominion.Player;
import java.nio.channels.DatagramChannel;
import java.nio.channels.NotYetConnectedException;
import java.nio.channels.ReadableByteChannel;
import java.util.InputMismatchException;
import java.util.NoSuchElementException;
import java.util.Scanner;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.addPlayer((String) null, true);
      SystemInUtil.addInputLine("%s chose %s.\n");
      Card card0 = Card.CURSE;
      gameState0.countCard(card0);
      Player player0 = new Player((String) null, gameState0, true);
      player0.countAllCards();
      player0.putInHand(card0);
      gameState0.addPlayer(player0);
      Card card1 = Card.EMBARGO;
      gameState0.playerTurn = (-1);
      player0.discard(card1);
      Card.Type card_Type0 = Card.Type.VICTORY;
      player0.gameState = gameState0;
      player0.chooseTypeOfCard(card_Type0);
      player0.getBuys();
      player0.discardFromHand();
      player0.addActions(0);
      player0.addActions((-915));
      player0.addBuys(2218);
      player0.seeHand();
      gameState0.playerTurn = 1;
      // Undeclared exception!
      gameState0.nextTurn();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0);
      gameState0.addPlayer(player0);
      player0.seeHand();
      Card card0 = Card.BARON;
      player0.takeFreeCard(card0);
      gameState0.countCard(card0);
      player0.getActions();
      Player player1 = new Player("", gameState0);
      player0.playCard(card0);
      player0.discardFromHand();
      player0.takeFreeCard(card0);
      player0.gameState = gameState0;
      Player player2 = new Player("", player0.gameState);
      player0.playCard(card0, player2);
      player2.gameState = null;
      player0.addMoney(19);
      player0.addBuys(19);
      player2.addBuys(20);
      player1.seeHand();
      player2.shuffle();
      boolean boolean0 = player0.discardFromHand();
      assertEquals(20, player0.getBuys());
      assertTrue(boolean0);
      
      Card card1 = Card.SMITHY;
      // Undeclared exception!
      try { 
        player2.returnCardToShared(card1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0);
      gameState0.addPlayer(player0);
      player0.seeHand();
      Card card0 = Card.BARON;
      player0.takeFreeCard(card0);
      gameState0.countCard(card0);
      player0.getActions();
      Player player1 = new Player("", gameState0);
      player0.playCard(card0);
      player0.discardFromHand();
      player0.takeFreeCard(card0);
      player0.gameState = gameState0;
      Player player2 = new Player("", player0.gameState);
      player0.playCard(card0, player2);
      player2.gameState = null;
      player0.addMoney(19);
      player0.addBuys(19);
      player2.addBuys(20);
      player1.seeHand();
      player2.shuffle();
      player0.discardFromHand();
      Card card1 = Card.CUTPURSE;
      // Undeclared exception!
      try { 
        player2.takeFreeCard(card1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SystemInUtil.addInputLine("+1 buy.  Trash a card from your hand.  Gain money equal to it's cost.");
      SystemInUtil.addInputLine("3\"om1=BPM|j {JwmI");
      Random.setNextRandom((-1857));
      GameState gameState0 = new GameState();
      gameState0.addPlayer("Player ");
      Player player0 = new Player("A|#[1W", gameState0, false);
      player0.chooseHand();
      Player[] playerArray0 = new Player[6];
      playerArray0[0] = player0;
      playerArray0[1] = player0;
      playerArray0[2] = player0;
      playerArray0[3] = player0;
      playerArray0[4] = player0;
      playerArray0[5] = player0;
      gameState0.players = playerArray0;
      Card card0 = Card.COUNCILROOM;
      player0.playCard(card0, player0);
      player0.addActions((-580));
      Card card1 = Card.CURSE;
      player0.takeFreeCard(card1);
      player0.seeDeck();
      player0.getActions();
      player0.countAllCards();
      DatagramChannel datagramChannel0 = DatagramChannel.open();
      Scanner scanner0 = new Scanner((ReadableByteChannel) datagramChannel0);
      // Undeclared exception!
      try { 
        scanner0.hasNextLine();
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player((String) null, gameState0, true);
      player0.newTurn();
      Player[] playerArray0 = new Player[3];
      playerArray0[0] = player0;
      playerArray0[1] = player0;
      playerArray0[2] = player0;
      gameState0.players = playerArray0;
      gameState0.addPlayer("'s turn is OVER.\n\n", true);
      Card card0 = Card.SMITHY;
      gameState0.takeCard(card0);
      player0.countAllCards();
      Card card1 = Card.AMBASSADOR;
      Card.Type card_Type0 = Card.Type.ACTION;
      player0.chooseTypeOfCard(card_Type0);
      player0.rand = null;
      player0.discard(card1);
      // Undeclared exception!
      try { 
        player0.discardFromHand();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SystemInUtil.addInputLine("0");
      GameState gameState0 = new GameState();
      Player player0 = new Player("$", gameState0);
      player0.gameState = gameState0;
      player0.chooseHand();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("hW[!j{%{");
      GameState gameState0 = new GameState();
      Player player0 = new Player("s(V0S4=}&XN\u0001@W&`", gameState0, true);
      Card card0 = Card.DUCHY;
      gameState0.takeCard(card0);
      player0.getHandSize();
      GameState gameState1 = player0.gameState;
      MockRandom mockRandom0 = (MockRandom)player0.rand;
      Card.Type card_Type0 = Card.Type.ACTION;
      player0.rand = null;
      player0.chooseTypeOfCard(card_Type0);
      gameState0.addPlayer(player0);
      // Undeclared exception!
      try { 
        player0.newTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0);
      gameState0.addPlayer(player0);
      player0.seeHand();
      Card card0 = Card.ADVENTURER;
      player0.takeFreeCard(card0);
      int int0 = gameState0.playerTurn;
      player0.getActions();
      Player player1 = new Player("", gameState0);
      player0.playCard(card0);
      player0.discardFromHand();
      player0.takeFreeCard(card0);
      Player player2 = new Player("", player0.gameState);
      player0.playCard(card0, player2);
      player2.gameState = null;
      player0.addMoney(19);
      player0.addBuys(19);
      player2.addBuys(20);
      player1.seeHand();
      player2.shuffle();
      Card card1 = Card.SALVAGER;
      player0.playCard(card1);
      player2.draw();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0);
      gameState0.addPlayer(player0);
      player0.seeHand();
      Card card0 = Card.AMBASSADOR;
      player0.takeFreeCard(card0);
      SystemInUtil.addInputLine("Cutpurse");
      gameState0.countCard(card0);
      player0.getActions();
      Player player1 = new Player("", gameState0);
      // Undeclared exception!
      try { 
        player0.playCard(card0);
        fail("Expecting exception: InputMismatchException");
      
      } catch(InputMismatchException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("@{e)J>yWZErAw Q", gameState0, false);
      player0.seeDeck();
      player0.getName();
      player0.countVictoryPoints();
      Card card0 = Card.SMITHY;
      SystemInUtil.addInputLine("Rh6pwo");
      MockRandom mockRandom0 = new MockRandom();
      player0.rand = (java.util.Random) mockRandom0;
      Card card1 = Card.AMBASSADOR;
      gameState0.numPlayers = 3;
      gameState0.countCard(card1);
      player0.returnCardToShared(card0);
      player0.seeDeck();
      MockRandom mockRandom1 = (MockRandom)player0.rand;
      player0.getBuys();
      // Undeclared exception!
      try { 
        player0.chooseHand();
        fail("Expecting exception: InputMismatchException");
      
      } catch(InputMismatchException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SystemInUtil.addInputLine("'s turn:");
      GameState gameState0 = new GameState();
      Card card0 = Card.CURSE;
      gameState0.takeCard(card0);
      Player player0 = new Player("CUTPURSE", gameState0);
      // Undeclared exception!
      try { 
        player0.newTurn();
        fail("Expecting exception: InputMismatchException");
      
      } catch(InputMismatchException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("%s bought a %s.\n", gameState0, true);
      gameState0.playerTurn = 30;
      gameState0.addPlayer("%s bought a %s.\n", true);
      player0.addBuys((-1));
      player0.seeHand();
      Card card0 = Card.BARON;
      player0.discardFromHand(card0);
      player0.countAllCards();
      gameState0.addPlayer(player0);
      player0.addMoney((-1));
      Card card1 = Card.COUNCILROOM;
      player0.putInHand(card1);
      gameState0.playerTurn = (-1);
      player0.toString();
      Card card2 = Card.DUCHY;
      Card card3 = Card.GOLD;
      player0.putInHand(card3);
      player0.discardFromHand(card2);
      player0.getActions();
      Card card4 = Card.FEAST;
      Player player1 = new Player("dominion.Card$8", gameState0);
      player0.playCard(card4, player1);
      Player player2 = new Player("dominion.Card$8", player0.gameState);
      player1.seeHand();
      player1.countAllCards();
      player2.getActions();
      player2.rand = player1.rand;
      player0.toString();
      Card.Type card_Type0 = Card.Type.TREASURE;
      player0.chooseTypeOfCard(card_Type0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.addPlayer("");
      Player[] playerArray0 = new Player[8];
      Player player0 = new Player(")CBg~i", gameState0, false);
      playerArray0[0] = player0;
      Player player1 = new Player("", player0.gameState, true);
      playerArray0[1] = player1;
      Player player2 = new Player((String) null, player1.gameState);
      playerArray0[2] = player2;
      Player player3 = new Player("m[d?@r}M'\")v.59A", player1.gameState, true);
      playerArray0[3] = player3;
      Player player4 = new Player("", player3.gameState, false);
      playerArray0[4] = player4;
      GameState gameState1 = new GameState();
      Player player5 = new Player((String) null, gameState1, true);
      playerArray0[5] = player5;
      Player player6 = new Player("`9I(", player3.gameState);
      playerArray0[6] = player6;
      Player player7 = new Player("'s drawPile:", player6.gameState, true);
      playerArray0[7] = player7;
      gameState0.players = playerArray0;
      Player player8 = null;
      try {
        player8 = new Player("", gameState0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player((String) null, gameState0, false);
      Card card0 = Card.FEAST;
      // Undeclared exception!
      try { 
        player0.playCard(card0, (Player) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("v3Hrq#8}#Y`", gameState0);
      player0.countVictoryPoints();
      player0.addMoney(0);
      player0.addMoney(0);
      player0.countVictoryPoints();
      Card card0 = Card.EMBARGO;
      Card card1 = gameState0.takeCard(card0);
      Scanner scanner0 = player0.scan;
      player0.discardFromHand(card0);
      gameState0.numPlayers = 0;
      player0.addActions((-1));
      player0.seeDeck();
      player0.addMoney((-3502));
      player0.getMoney();
      player0.returnCardToShared(card1);
      player0.putInHand(card0);
      player0.draw();
      player0.getName();
      MockRandom mockRandom0 = (MockRandom)player0.rand;
      Player player1 = new Player("v3Hrq#8}#Y`", player0.gameState);
      // Undeclared exception!
      try { 
        player0.chooseHand();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("ofT*&y", gameState0, true);
      Card card0 = Card.BARON;
      player0.playCard(card0);
      gameState0.addPlayer((String) null);
      player0.countAllCards();
      player0.putInHand(card0);
      player0.addActions(0);
      player0.getActions();
      player0.addBuys(0);
      player0.addActions(0);
      player0.getHandSize();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GameState gameState0 = new GameState();
      Card card0 = Card.CUTPURSE;
      gameState0.countCard(card0);
      Player player0 = new Player("", gameState0, true);
      MockRandom mockRandom0 = new MockRandom();
      player0.rand = (java.util.Random) mockRandom0;
      mockRandom0.longs();
      mockRandom0.nextLong();
      gameState0.addPlayer("", false);
      Player player1 = new Player("", player0.gameState, true);
      Card card1 = Card.AMBASSADOR;
      player1.discardFromHand(card1);
      player1.newTurn();
      // Undeclared exception!
      try { 
        mockRandom0.doubles((long) 0, 0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("'s hand:", gameState0, true);
      player0.addMoney(2397);
      Card card0 = Card.GREAT_HALL;
      player0.putInHand(card0);
      gameState0.numPlayers = 3844;
      Scanner scanner0 = player0.scan;
      Card card1 = Card.GOLD;
      Player player1 = new Player("'s hand:", player0.gameState);
      player0.newTurn();
      player0.playCard(card1, player1);
      player0.getMoney();
      Card card2 = Card.CURSE;
      player1.countVictoryPoints();
      player0.returnCardToShared(card2);
      player0.addMoney(0);
      player1.seeDeck();
      player0.isCardInHand(card1);
      player0.newTurn();
      player0.countAllCards();
      player1.countAllCards();
      Card card3 = Card.BARON;
      player0.putInHand(card3);
      player1.addActions(3);
      player0.playCard(card2, player1);
      gameState0.addPlayer(player1);
      player1.getBuys();
      player0.countVictoryPoints();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Card.Type.values();
      GameState gameState0 = new GameState();
      Player player0 = new Player(" - ", gameState0, true);
      player0.countAllCards();
      Card card0 = Card.CUTPURSE;
      Player player1 = new Player(" - ", gameState0, true);
      // Undeclared exception!
      try { 
        player0.playCard(card0, player1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.Card$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("~~r&uoWTN(hw", gameState0, true);
      Card card0 = Card.COUNCILROOM;
      // Undeclared exception!
      try { 
        player0.playCard(card0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.Card$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("Silver", gameState0);
      Card card0 = Card.DUCHY;
      player0.putInHand(card0);
      Card card1 = Card.DUCHY;
      player0.discardFromHand(card1);
      player0.getBuys();
      Player player1 = new Player("", player0.gameState, true);
      player1.rand = player0.rand;
      Card.Type card_Type0 = Card.Type.VICTORY;
      // Undeclared exception!
      try { 
        player0.chooseTypeOfCard(card_Type0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("Bhg!P-3Z@", gameState0, false);
      player0.getName();
      gameState0.listCards();
      Card card0 = Card.FEAST;
      // Undeclared exception!
      try { 
        player0.playCard(card0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("Please choose an Action card from your hand.", gameState0, true);
      player0.getName();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player((String) null, gameState0, true);
      Card.Type card_Type0 = Card.Type.TREASURE;
      player0.chooseTypeOfCard(card_Type0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0);
      player0.shuffle();
      player0.getName();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0);
      player0.addMoney(0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player((String) null, gameState0);
      gameState0.listCards();
      player0.toString();
      Card card0 = Card.PROVINCE;
      Player player1 = new Player((String) null, gameState0);
      player0.playCard(card0, player1);
      gameState0.addPlayer((String) null);
      // Undeclared exception!
      try { 
        player0.newTurn();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("M= p]5p#-sR(P8CC/C", gameState0, false);
      player0.addActions(0);
      player0.addMoney((-2351));
      player0.toString();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("4XM-zbMqv5?r6B", gameState0, true);
      player0.addActions(0);
      Card card0 = Card.ESTATE;
      player0.chooseHand();
      player0.putInHand(card0);
      player0.seeDeck();
      Card card1 = Card.COPPER;
      player0.putInHand(card1);
      Card card2 = Card.SMITHY;
      gameState0.countCard(card2);
      player0.shuffle();
      player0.addActions(0);
      player0.addBuys(856);
      player0.addActions(1);
      // Undeclared exception!
      player0.newTurn();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = null;
      try {
        player0 = new Player("}hd[KcT~^yZ}", (GameState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.numPlayers = 20;
      Player player0 = new Player("U hR.|P[!esF", gameState0, true);
      player0.newTurn();
      Player[] playerArray0 = new Player[4];
      Player player1 = new Player("U hR.|P[!esF", gameState0, true);
      playerArray0[0] = player1;
      playerArray0[1] = player0;
      playerArray0[2] = player0;
      playerArray0[3] = player0;
      Card card0 = Card.COPPER;
      gameState0.takeCard(card0);
      gameState0.players = playerArray0;
      player0.getActions();
      gameState0.nextTurn();
      player0.addBuys((-1410));
      player0.addActions(9);
      player0.getBuys();
      player0.gameState = gameState0;
      player0.draw();
      gameState0.nextTurn();
      Card card1 = Card.EMBARGO;
      player0.isCardInHand(card1);
      Card card2 = Card.VILLAGE;
      player0.discardFromHand(card2);
      player0.chooseHand();
      player0.chooseHand();
      Card card3 = Card.AMBASSADOR;
      player1.isCardInHand(card3);
      player1.seeDeck();
      playerArray0[3].scan = player1.scan;
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("Rc4S^qL8!Y%:~bh", gameState0, true);
      player0.addActions((-1133));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("785FmGIxPpU{\"W[", gameState0, true);
      Player player1 = new Player("worth 3 money", player0.gameState, true);
      Player player2 = new Player("worth 3 money", gameState0);
      Player player3 = new Player(")/&2I3\"/WBzt7@L", player1.gameState, true);
      Player player4 = new Player("worth 3 money", player2.gameState, true);
      Player player5 = new Player("worth 3 money", player2.gameState, false);
      Player player6 = new Player("worth 3 money", player4.gameState);
      Player player7 = new Player("worth 3 money", player2.gameState, true);
      GameState gameState1 = new GameState();
      Player player8 = null;
      try {
        player8 = new Player("785FmGIxPpU{\"W[", gameState0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0);
      // Undeclared exception!
      try { 
        player0.chooseHand();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "3&BR";
      GameState gameState0 = new GameState();
      Player player0 = new Player("3&BR", gameState0);
      player0.discardFromHand();
      player0.getHandSize();
      // Undeclared exception!
      try { 
        player0.newTurn();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0, true);
      MockRandom mockRandom0 = new MockRandom();
      player0.rand = (java.util.Random) mockRandom0;
      player0.seeHand();
      mockRandom0.nextInt();
      SystemInUtil.addInputLine("org.apache.oro.io.Perl5FilenameFilter");
      SystemInUtil.addInputLine("");
      mockRandom0.longs();
      player0.getHandSize();
      player0.discardFromHand();
      player0.discardFromHand();
      mockRandom0.longs();
      mockRandom0.nextLong();
      player0.chooseHand();
      player0.discardFromHand();
      player0.countAllCards();
      Card card0 = Card.GREAT_HALL;
      player0.returnCardToShared(card0);
      // Undeclared exception!
      try { 
        Card.Type.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant dominion.Card.Type.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("785FmGIxPpU{\"W[", gameState0, true);
      Player player1 = new Player("worth 3 money", player0.gameState, true);
      Player player2 = new Player("worth 3 money", gameState0);
      Player player3 = new Player(")/&2I3\"/WBzt7@L", player1.gameState, true);
      Player player4 = new Player("worth 3 money", player2.gameState, true);
      Player player5 = new Player("worth 3 money", player2.gameState, false);
      Player player6 = new Player("worth 3 money", player4.gameState);
      Player player7 = new Player("worth 3 money", player2.gameState, true);
      GameState gameState1 = new GameState();
      gameState0.players = gameState1.players;
      Card card0 = Card.FEAST;
      gameState0.addCard(card0);
      Card card1 = Card.PROVINCE;
      player3.returnCardToShared(card1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SystemInUtil.addInputLine("+1 buy.  Trash a card from your hand.  Gain money equal to it's cost.");
      SystemInUtil.addInputLine("3\"om1=BPM|j {JwmI");
      Random.setNextRandom((-1857));
      GameState gameState0 = new GameState();
      gameState0.addPlayer("Player ");
      Player player0 = new Player("A|#[1W", gameState0, false);
      player0.chooseHand();
      Player[] playerArray0 = new Player[6];
      playerArray0[0] = player0;
      playerArray0[1] = player0;
      playerArray0[2] = player0;
      playerArray0[3] = player0;
      playerArray0[4] = player0;
      playerArray0[5] = player0;
      gameState0.players = playerArray0;
      Card card0 = Card.AMBASSADOR;
      // Undeclared exception!
      try { 
        player0.playCard(card0, player0);
        fail("Expecting exception: InputMismatchException");
      
      } catch(InputMismatchException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GameState gameState0 = new GameState();
      Card card0 = Card.GOLD;
      gameState0.addCard(card0);
      Player player0 = new Player("'s discardPile:", gameState0, true);
      player0.newTurn();
      gameState0.listCards();
      player0.seeDeck();
      SystemInUtil.addInputLine("");
      SystemInUtil.addInputLine("+%3");
      player0.seeDeck();
      player0.getBuys();
      player0.countVictoryPoints();
      player0.draw();
      player0.countVictoryPoints();
      Card.Type.values();
      player0.gameState = gameState0;
      Card card1 = Card.ESTATE;
      gameState0.countCard(card1);
      player0.shuffle();
      player0.countAllCards();
      player0.putInHand(card0);
      Card.Type card_Type0 = Card.Type.ACTION;
      player0.chooseTypeOfCard(card_Type0);
      gameState0.addPlayer("zQX%z(B24", true);
      Player player1 = new Player("/Uv;ZG@lz8'M\"", player0.gameState, true);
      MockRandom mockRandom0 = (MockRandom)player1.rand;
      player1.discardFromHand();
      Player player2 = null;
      try {
        player2 = new Player("/Uv;ZG@lz8'M\"", (GameState) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SystemInUtil.addInputLine("7");
      GameState gameState0 = new GameState();
      SystemInUtil.addInputLine("7");
      Player player0 = new Player("$", gameState0);
      Card card0 = Card.SILVER;
      player0.putInHand(card0);
      Card.Type card_Type0 = Card.Type.VICTORY;
      player0.chooseHand();
      gameState0.playerTurn = 0;
      // Undeclared exception!
      try { 
        player0.chooseTypeOfCard(card_Type0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SystemInUtil.addInputLine("7");
      GameState gameState0 = new GameState();
      SystemInUtil.addInputLine("7");
      Player player0 = new Player("$", gameState0);
      Card.Type card_Type0 = Card.Type.VICTORY;
      player0.chooseHand();
      gameState0.playerTurn = 0;
      // Undeclared exception!
      try { 
        player0.chooseTypeOfCard(card_Type0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SystemInUtil.addInputLine("0");
      GameState gameState0 = new GameState();
      Player player0 = new Player("$", gameState0);
      player0.gameState = gameState0;
      player0.newTurn();
      SystemInUtil.addInputLine("$");
      Card.Type card_Type0 = Card.Type.ACTION;
      // Undeclared exception!
      try { 
        player0.chooseTypeOfCard(card_Type0);
        fail("Expecting exception: InputMismatchException");
      
      } catch(InputMismatchException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SystemInUtil.addInputLine("0");
      SystemInUtil.addInputLine("0");
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0);
      player0.gameState = gameState0;
      player0.newTurn();
      SystemInUtil.addInputLine("");
      Card.Type card_Type0 = Card.Type.ACTION;
      // Undeclared exception!
      try { 
        player0.chooseTypeOfCard(card_Type0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "fun";
      GameState gameState0 = new GameState();
      Player player0 = new Player("fun", gameState0);
      player0.draw();
      Card card0 = Card.SILVER;
      player0.shuffle();
      player0.isCardInHand(card0);
      // Undeclared exception!
      try { 
        Card.Type.valueOf("fun");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant dominion.Card.Type.fun
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.addPlayer((String) null, true);
      SystemInUtil.addInputLine("%s chose %s.\n");
      Card card0 = Card.CURSE;
      gameState0.countCard(card0);
      Player player0 = new Player((String) null, gameState0, true);
      int int0 = Pattern.CASE_INSENSITIVE;
      Card card1 = Card.CUTPURSE;
      player0.putInHand(card1);
      gameState0.addPlayer(player0);
      Card card2 = Card.EMBARGO;
      gameState0.playerTurn = (-1);
      player0.discard(card2);
      Card.Type card_Type0 = Card.Type.VICTORY;
      player0.gameState = gameState0;
      player0.chooseTypeOfCard(card_Type0);
      player0.getBuys();
      player0.discardFromHand();
      player0.addActions(0);
      player0.addBuys(2218);
      player0.seeHand();
      gameState0.playerTurn = 1;
      // Undeclared exception!
      gameState0.nextTurn();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GameState gameState0 = new GameState();
      gameState0.addPlayer((String) null, true);
      Card card0 = Card.CURSE;
      gameState0.countCard(card0);
      Player player0 = new Player((String) null, gameState0, true);
      Card card1 = Card.CUTPURSE;
      player0.putInHand(card1);
      gameState0.addPlayer(player0);
      gameState0.playerTurn = 10;
      player0.discard(card1);
      player0.gameState = gameState0;
      player0.getBuys();
      player0.addActions(0);
      player0.addBuys((-1097));
      player0.seeHand();
      gameState0.playerTurn = 1;
      gameState0.nextTurn();
      Card card2 = Card.ESTATE;
      Card card3 = Card.FEAST;
      Player player1 = new Player((String) null, player0.gameState, true);
      player0.playCard(card3, player1);
      player0.takeFreeCard(card2);
      player0.gameState = gameState0;
      int int0 = player1.shuffle();
      assertEquals(5, player0.getHandSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player((String) null, gameState0, true);
      Card card0 = Card.ADVENTURER;
      player0.seeDeck();
      gameState0.addPlayer(player0);
      Player player1 = new Player((String) null, player0.gameState, true);
      player1.shuffle();
      player1.countAllCards();
      player0.playCard(card0, player1);
      gameState0.listCards();
      player0.takeFreeCard(card0);
      Card card1 = Card.BARON;
      SystemInUtil.addInputLine("z9txQfwC");
      gameState0.addCard(card1);
      player0.addBuys((-2546));
      player0.countVictoryPoints();
      player0.newTurn();
      player0.discardFromHand(card0);
      Card card2 = player0.draw();
      player0.toString();
      Scanner scanner0 = player0.scan;
      player0.getName();
      player0.chooseHand();
      Player player2 = new Player((String) null, player0.gameState);
      player0.getActions();
      GameState gameState1 = player2.gameState;
      player0.isCardInHand(card2);
      MockRandom mockRandom0 = (MockRandom)player2.rand;
      assertNotNull(mockRandom0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      GameState gameState0 = new GameState();
      Player player0 = new Player("", gameState0);
      player0.toString();
      player0.getMoney();
      // Undeclared exception!
      try { 
        gameState0.nextTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dominion.GameState", e);
      }
  }
}
