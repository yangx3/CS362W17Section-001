/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 19:49:01 PST 2017
 */

package dominion;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.fail;

import java.util.ArrayList;
import java.util.Map;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true) 
public class dominionBoard_ESTest extends dominionBoard_ESTest_scaffolding {

  @Test
  public void test00()  throws Throwable  {
      dominionBoard dominionBoard0 = new dominionBoard(4);
      assertEquals(0, dominionBoard.turn);
  }

  @Test
  public void test01()  throws Throwable  {
      dominionBoard.cardOptions((-460));
      Map<Card.Name, Card> map0 = Card.cardList;
  }

  @Test
  public void test02()  throws Throwable  {
      Card.Name.values();
      dominionBoard.players = new Player[4];
      for(int i=0;i<4;i++)
    	  dominionBoard.players[i] = new Player();
      dominionBoard.winner();
      Player player0 = dominionBoard.whosTurn();
      Card.Type card_Type0 = Card.Type.action;
      Card.Name card_Name0 = Card.Name.council_room;
      Card card0 = new Card(card_Type0, card_Name0, 12);
      card0.cardList = null;
      // Undeclared exception!
      try { 
        dominionBoard.addCard(player0, card0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.dominionBoard", e);
      }
  }

  @Test
  public void test03()  throws Throwable  {
      dominionBoard.winner();
  }

  @Test
  public void test04()  throws Throwable  {
      Map<Card.Name, Card> map0 = Card.createCards();
      Player player0 = dominionBoard.whosTurn();
      player0.money = (-2284);
      Card.Type card_Type0 = Card.Type.treasure;
      Card.Name card_Name0 = Card.Name.province;
      Card card0 = new Card(card_Type0, card_Name0, 4);
      card0.cardList = map0;
      Card.createCards();
      card0.cardList = map0;
      player0.buys = 4;
      dominionBoard.buyCard(player0, card0);
      Map<Card, Integer> map1 = dominionBoard.pool;
      ArrayList<Card> arrayList0 = player0.gethand();
      arrayList0.add(card0);
      player0.hand = arrayList0;
      card_Name0.action();
      Card.Type.values();
      ArrayList<Card> arrayList1 = dominionBoard.cardOptions((-2284));
      card_Name0.action();
      dominionBoard.playCard(card0);
      dominionBoard.embargo = map1;
      Card.Name card_Name1 = Card.Name.smithy;
      Card card1 = new Card(card_Type0, card_Name1, 0);
      dominionBoard.buyCard(player0, card1);
      player0.hand = arrayList1;
      dominionBoard.cardOptions(6);
  }

  @Test
  public void test05()  throws Throwable  {
      Player player0 = dominionBoard.whosTurn();
      Card.Type card_Type0 = Card.Type.treasure;
      Card.Name card_Name0 = Card.Name.province;
      Card card0 = new Card(card_Type0, card_Name0, 4);
      player0.hand.add(card0);
      dominionBoard.playCard(card0);
  }

  @Test
  public void test06()  throws Throwable  {
      Player player0 = new Player();
      Card.Type card_Type0 = Card.Type.action;
      Card.Name card_Name0 = Card.Name.smithy;
      Card card0 = new Card(card_Type0, card_Name0, 0);
      // Undeclared exception!
      try { 
        dominionBoard.buyCard(player0, card0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.dominionBoard", e);
      }
  }

  @Test
  public void test07()  throws Throwable  {
	  try{
      dominionBoard.otherPlayer();
      fail("Expection exception: NullPointerException");
	  }
	  catch(NullPointerException e){
		 
	  }
  }

  @Test
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        dominionBoard.game();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
      }
  }

  /*@Test
  public void test09()  throws Throwable  {
      boolean boolean0 = dominionBoard.isGameOver();
      assertFalse(boolean0);
  }*/

  @Test
  public void test10()  throws Throwable  {
      Player[] playerArray0 = new Player[4];
      Player player0 = new Player();
      playerArray0[0] = player0;
      player0.cleanup();
      Player player1 = dominionBoard.whosTurn();
      player1.actions = (-2406);
      playerArray0[1] = player1;
      Player player2 = new Player();
      playerArray0[2] = player2;
      Player player3 = new Player();
      player3.vp = 0;
      playerArray0[3] = player3;
      dominionBoard.players = playerArray0;
      dominionBoard.embargo = null;
      Card.createCards();
      // Undeclared exception!
      try { 
        dominionBoard.game();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Player player0 = new Player();
      ArrayList<Card> arrayList0 = player0.gethand();
      player0.hand = arrayList0;
      player0.vp = 4;
      // Undeclared exception!
      try { 
        dominionBoard.game();
        //fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }


  @Test
  public void test13()  throws Throwable  {
      dominionBoard dominionBoard0 = new dominionBoard(2);
      assertEquals(0, dominionBoard.turn);
  }
}
