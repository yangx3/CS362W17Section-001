/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 01 21:14:12 GMT 2017
 */

package waitean.DominionMaven;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import waitean.DominionMaven.Card;
import waitean.DominionMaven.Pile;
import waitean.DominionMaven.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Pile_ESTest extends Pile_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 30 covered goals:
   * Goal 1. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch
   * Goal 2. waitean.DominionMaven.Pile.buyCard(I)I: I6 Branch 2 IF_ICMPLT L39 - false
   * Goal 3. waitean.DominionMaven.Pile.buyCard(I)I: I9 Branch 3 IFLE L39 - true
   * Goal 4. Branch waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch in context: waitean.DominionMaven.Pile:<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 5. Branch waitean.DominionMaven.Pile.buyCard(I)I: I9 Branch 3 IFLE L39 - true in context: waitean.DominionMaven.Pile:buyCard(I)I
   * Goal 6. Branch waitean.DominionMaven.Pile.buyCard(I)I: I6 Branch 2 IF_ICMPLT L39 - false in context: waitean.DominionMaven.Pile:buyCard(I)I
   * Goal 7. [Output]: waitean.DominionMaven.Pile.buyCard(I)I:Zero
   * Goal 8. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 8
   * Goal 9. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 9
   * Goal 10. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 10
   * Goal 11. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 11
   * Goal 12. waitean.DominionMaven.Pile.buyCard(I)I: Line 39
   * Goal 13. waitean.DominionMaven.Pile.buyCard(I)I: Line 43
   * Goal 14. [METHOD] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 15. [METHOD] waitean.DominionMaven.Pile.buyCard(I)I
   * Goal 16. [METHODNOEX] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 17. [METHODNOEX] waitean.DominionMaven.Pile.buyCard(I)I
   * Goal 18. Weak Mutation 0: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp Negation of n
   * Goal 19. Weak Mutation 1: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC 1 n
   * Goal 20. Weak Mutation 2: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC -1 n
   * Goal 21. Weak Mutation 3: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:10 - ReplaceConstant - 0 -> 1
   * Goal 22. Weak Mutation 32: waitean.DominionMaven.Pile.buyCard(I)I:39 - InsertUnaryOp Negation of money
   * Goal 23. Weak Mutation 33: waitean.DominionMaven.Pile.buyCard(I)I:39 - InsertUnaryOp IINC 1 money
   * Goal 24. Weak Mutation 34: waitean.DominionMaven.Pile.buyCard(I)I:39 - InsertUnaryOp IINC -1 money
   * Goal 25. Weak Mutation 35: waitean.DominionMaven.Pile.buyCard(I)I:39 - ReplaceComparisonOperator < -> !=
   * Goal 26. Weak Mutation 38: waitean.DominionMaven.Pile.buyCard(I)I:39 - InsertUnaryOp Negation
   * Goal 27. Weak Mutation 39: waitean.DominionMaven.Pile.buyCard(I)I:39 - InsertUnaryOp +1
   * Goal 28. Weak Mutation 40: waitean.DominionMaven.Pile.buyCard(I)I:39 - InsertUnaryOp -1
   * Goal 29. Weak Mutation 43: waitean.DominionMaven.Pile.buyCard(I)I:39 - ReplaceComparisonOperator <= -> <
   * Goal 30. Weak Mutation 60: waitean.DominionMaven.Pile.buyCard(I)I:43 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Silver;
      Card.CardType card_CardType0 = Card.CardType.ACTION;
      Card card0 = new Card(card_CardName0, card_CardType0, (-106));
      Pile pile0 = new Pile(card0, 0);
      int int0 = pile0.buyCard(1);
      assertEquals(0, int0);
      assertEquals(0, pile0.getEmbargo());
      assertEquals(0, pile0.getNumber());
  }

  //Test case number: 1
  /*
   * 36 covered goals:
   * Goal 1. waitean.DominionMaven.Pile.addCardToPile()V: root-Branch
   * Goal 2. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch
   * Goal 3. waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;: I4 Branch 1 IFLE L30 - true
   * Goal 4. Branch waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch in context: waitean.DominionMaven.Pile:<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 5. Branch waitean.DominionMaven.Pile.addCardToPile()V: root-Branch in context: waitean.DominionMaven.Pile:addCardToPile()V
   * Goal 6. Branch waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;: I4 Branch 1 IFLE L30 - true in context: waitean.DominionMaven.Pile:aquireCard()Lwaitean/DominionMaven/Card;
   * Goal 7. [Output]: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:Null
   * Goal 8. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 8
   * Goal 9. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 9
   * Goal 10. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 10
   * Goal 11. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 11
   * Goal 12. waitean.DominionMaven.Pile.addCardToPile()V: Line 47
   * Goal 13. waitean.DominionMaven.Pile.addCardToPile()V: Line 48
   * Goal 14. waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;: Line 30
   * Goal 15. waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;: Line 34
   * Goal 16. [METHOD] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 17. [METHOD] waitean.DominionMaven.Pile.addCardToPile()V
   * Goal 18. [METHOD] waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;
   * Goal 19. [METHODNOEX] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 20. [METHODNOEX] waitean.DominionMaven.Pile.addCardToPile()V
   * Goal 21. [METHODNOEX] waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;
   * Goal 22. Weak Mutation 0: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp Negation of n
   * Goal 23. Weak Mutation 1: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC 1 n
   * Goal 24. Weak Mutation 2: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC -1 n
   * Goal 25. Weak Mutation 3: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:10 - ReplaceConstant - 0 -> 1
   * Goal 26. Weak Mutation 18: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:30 - InsertUnaryOp Negation
   * Goal 27. Weak Mutation 19: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:30 - InsertUnaryOp +1
   * Goal 28. Weak Mutation 20: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:30 - InsertUnaryOp -1
   * Goal 29. Weak Mutation 23: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:30 - ReplaceComparisonOperator <= -> <
   * Goal 30. Weak Mutation 61: waitean.DominionMaven.Pile.addCardToPile()V:47 - InsertUnaryOp Negation
   * Goal 31. Weak Mutation 62: waitean.DominionMaven.Pile.addCardToPile()V:47 - InsertUnaryOp +1
   * Goal 32. Weak Mutation 63: waitean.DominionMaven.Pile.addCardToPile()V:47 - InsertUnaryOp -1
   * Goal 33. Weak Mutation 64: waitean.DominionMaven.Pile.addCardToPile()V:47 - ReplaceConstant - 1 -> 0
   * Goal 34. Weak Mutation 66: waitean.DominionMaven.Pile.addCardToPile()V:47 - ReplaceArithmeticOperator + -> -
   * Goal 35. Weak Mutation 67: waitean.DominionMaven.Pile.addCardToPile()V:47 - ReplaceArithmeticOperator + -> *
   * Goal 36. Weak Mutation 68: waitean.DominionMaven.Pile.addCardToPile()V:47 - ReplaceArithmeticOperator + -> /
   */

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Curse;
      Card card0 = new Card(card_CardName0, (Card.CardType) null, (-1));
      Pile pile0 = new Pile(card0, (-1));
      pile0.addCardToPile();
      pile0.aquireCard();
      assertEquals(0, pile0.getNumber());
  }

  //Test case number: 2
  /*
   * 21 covered goals:
   * Goal 1. waitean.DominionMaven.Pile.getNumber()I: root-Branch
   * Goal 2. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch
   * Goal 3. Branch waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch in context: waitean.DominionMaven.Pile:<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 4. Branch waitean.DominionMaven.Pile.getNumber()I: root-Branch in context: waitean.DominionMaven.Pile:getNumber()I
   * Goal 5. [Output]: waitean.DominionMaven.Pile.getNumber()I:Zero
   * Goal 6. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 8
   * Goal 7. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 9
   * Goal 8. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 10
   * Goal 9. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 11
   * Goal 10. waitean.DominionMaven.Pile.getNumber()I: Line 18
   * Goal 11. [METHOD] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 12. [METHOD] waitean.DominionMaven.Pile.getNumber()I
   * Goal 13. [METHODNOEX] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 14. [METHODNOEX] waitean.DominionMaven.Pile.getNumber()I
   * Goal 15. Weak Mutation 0: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp Negation of n
   * Goal 16. Weak Mutation 1: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC 1 n
   * Goal 17. Weak Mutation 2: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC -1 n
   * Goal 18. Weak Mutation 3: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:10 - ReplaceConstant - 0 -> 1
   * Goal 19. Weak Mutation 4: waitean.DominionMaven.Pile.getNumber()I:18 - InsertUnaryOp Negation
   * Goal 20. Weak Mutation 5: waitean.DominionMaven.Pile.getNumber()I:18 - InsertUnaryOp +1
   * Goal 21. Weak Mutation 6: waitean.DominionMaven.Pile.getNumber()I:18 - InsertUnaryOp -1
   */

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Great_Hall;
      Card.CardType card_CardType0 = Card.CardType.TREASURE;
      Card card0 = new Card(card_CardName0, card_CardType0, 0);
      Pile pile0 = new Pile(card0, 0);
      int int0 = pile0.getNumber();
      assertEquals(0, int0);
      assertEquals(0, pile0.getEmbargo());
  }

  //Test case number: 3
  /*
   * 21 covered goals:
   * Goal 1. waitean.DominionMaven.Pile.getNumber()I: root-Branch
   * Goal 2. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch
   * Goal 3. Branch waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch in context: waitean.DominionMaven.Pile:<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 4. Branch waitean.DominionMaven.Pile.getNumber()I: root-Branch in context: waitean.DominionMaven.Pile:getNumber()I
   * Goal 5. [Output]: waitean.DominionMaven.Pile.getNumber()I:Positive
   * Goal 6. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 8
   * Goal 7. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 9
   * Goal 8. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 10
   * Goal 9. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 11
   * Goal 10. waitean.DominionMaven.Pile.getNumber()I: Line 18
   * Goal 11. [METHOD] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 12. [METHOD] waitean.DominionMaven.Pile.getNumber()I
   * Goal 13. [METHODNOEX] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 14. [METHODNOEX] waitean.DominionMaven.Pile.getNumber()I
   * Goal 15. Weak Mutation 0: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp Negation of n
   * Goal 16. Weak Mutation 1: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC 1 n
   * Goal 17. Weak Mutation 2: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC -1 n
   * Goal 18. Weak Mutation 3: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:10 - ReplaceConstant - 0 -> 1
   * Goal 19. Weak Mutation 4: waitean.DominionMaven.Pile.getNumber()I:18 - InsertUnaryOp Negation
   * Goal 20. Weak Mutation 5: waitean.DominionMaven.Pile.getNumber()I:18 - InsertUnaryOp +1
   * Goal 21. Weak Mutation 6: waitean.DominionMaven.Pile.getNumber()I:18 - InsertUnaryOp -1
   */

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Gold;
      Card.CardType card_CardType0 = Card.CardType.VICTORY;
      Card card0 = new Card(card_CardName0, card_CardType0, 18);
      Pile pile0 = new Pile(card0, 18);
      int int0 = pile0.getNumber();
      assertEquals(18, int0);
      assertEquals(0, pile0.getEmbargo());
  }

  //Test case number: 4
  /*
   * 35 covered goals:
   * Goal 1. waitean.DominionMaven.Pile.getEmbargo()I: root-Branch
   * Goal 2. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch
   * Goal 3. waitean.DominionMaven.Pile.embargoPile()V: root-Branch
   * Goal 4. Branch waitean.DominionMaven.Pile.getEmbargo()I: root-Branch in context: waitean.DominionMaven.Pile:getEmbargo()I
   * Goal 5. Branch waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch in context: waitean.DominionMaven.Pile:<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 6. Branch waitean.DominionMaven.Pile.embargoPile()V: root-Branch in context: waitean.DominionMaven.Pile:embargoPile()V
   * Goal 7. [Output]: waitean.DominionMaven.Pile.getEmbargo()I:Positive
   * Goal 8. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 8
   * Goal 9. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 9
   * Goal 10. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 10
   * Goal 11. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 11
   * Goal 12. waitean.DominionMaven.Pile.embargoPile()V: Line 26
   * Goal 13. waitean.DominionMaven.Pile.embargoPile()V: Line 27
   * Goal 14. waitean.DominionMaven.Pile.getEmbargo()I: Line 22
   * Goal 15. [METHOD] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 16. [METHOD] waitean.DominionMaven.Pile.embargoPile()V
   * Goal 17. [METHOD] waitean.DominionMaven.Pile.getEmbargo()I
   * Goal 18. [METHODNOEX] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 19. [METHODNOEX] waitean.DominionMaven.Pile.embargoPile()V
   * Goal 20. [METHODNOEX] waitean.DominionMaven.Pile.getEmbargo()I
   * Goal 21. Weak Mutation 0: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp Negation of n
   * Goal 22. Weak Mutation 1: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC 1 n
   * Goal 23. Weak Mutation 2: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC -1 n
   * Goal 24. Weak Mutation 3: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:10 - ReplaceConstant - 0 -> 1
   * Goal 25. Weak Mutation 7: waitean.DominionMaven.Pile.getEmbargo()I:22 - InsertUnaryOp Negation
   * Goal 26. Weak Mutation 8: waitean.DominionMaven.Pile.getEmbargo()I:22 - InsertUnaryOp +1
   * Goal 27. Weak Mutation 9: waitean.DominionMaven.Pile.getEmbargo()I:22 - InsertUnaryOp -1
   * Goal 28. Weak Mutation 10: waitean.DominionMaven.Pile.embargoPile()V:26 - InsertUnaryOp Negation
   * Goal 29. Weak Mutation 11: waitean.DominionMaven.Pile.embargoPile()V:26 - InsertUnaryOp +1
   * Goal 30. Weak Mutation 12: waitean.DominionMaven.Pile.embargoPile()V:26 - InsertUnaryOp -1
   * Goal 31. Weak Mutation 13: waitean.DominionMaven.Pile.embargoPile()V:26 - ReplaceConstant - 1 -> 0
   * Goal 32. Weak Mutation 14: waitean.DominionMaven.Pile.embargoPile()V:26 - ReplaceArithmeticOperator + -> %
   * Goal 33. Weak Mutation 15: waitean.DominionMaven.Pile.embargoPile()V:26 - ReplaceArithmeticOperator + -> -
   * Goal 34. Weak Mutation 16: waitean.DominionMaven.Pile.embargoPile()V:26 - ReplaceArithmeticOperator + -> *
   * Goal 35. Weak Mutation 17: waitean.DominionMaven.Pile.embargoPile()V:26 - ReplaceArithmeticOperator + -> /
   */

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Curse;
      Card.CardType card_CardType0 = Card.CardType.TREASURE;
      Card card0 = new Card(card_CardName0, card_CardType0, (-2875));
      Pile pile0 = new Pile(card0, (-2875));
      pile0.embargoPile();
      int int0 = pile0.getEmbargo();
      assertEquals(1, int0);
  }

  //Test case number: 5
  /*
   * 18 covered goals:
   * Goal 1. waitean.DominionMaven.Pile.getCard()Lwaitean/DominionMaven/Card;: root-Branch
   * Goal 2. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch
   * Goal 3. Branch waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch in context: waitean.DominionMaven.Pile:<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 4. Branch waitean.DominionMaven.Pile.getCard()Lwaitean/DominionMaven/Card;: root-Branch in context: waitean.DominionMaven.Pile:getCard()Lwaitean/DominionMaven/Card;
   * Goal 5. [Output]: waitean.DominionMaven.Pile.getCard()Lwaitean/DominionMaven/Card;:Null
   * Goal 6. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 8
   * Goal 7. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 9
   * Goal 8. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 10
   * Goal 9. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 11
   * Goal 10. waitean.DominionMaven.Pile.getCard()Lwaitean/DominionMaven/Card;: Line 14
   * Goal 11. [METHOD] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 12. [METHOD] waitean.DominionMaven.Pile.getCard()Lwaitean/DominionMaven/Card;
   * Goal 13. [METHODNOEX] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 14. [METHODNOEX] waitean.DominionMaven.Pile.getCard()Lwaitean/DominionMaven/Card;
   * Goal 15. Weak Mutation 0: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp Negation of n
   * Goal 16. Weak Mutation 1: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC 1 n
   * Goal 17. Weak Mutation 2: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC -1 n
   * Goal 18. Weak Mutation 3: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:10 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Pile pile0 = new Pile((Card) null, 407);
      pile0.getCard();
      assertEquals(0, pile0.getEmbargo());
      assertEquals(407, pile0.getNumber());
  }

  //Test case number: 6
  /*
   * 18 covered goals:
   * Goal 1. waitean.DominionMaven.Pile.getCard()Lwaitean/DominionMaven/Card;: root-Branch
   * Goal 2. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch
   * Goal 3. Branch waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch in context: waitean.DominionMaven.Pile:<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 4. Branch waitean.DominionMaven.Pile.getCard()Lwaitean/DominionMaven/Card;: root-Branch in context: waitean.DominionMaven.Pile:getCard()Lwaitean/DominionMaven/Card;
   * Goal 5. [Output]: waitean.DominionMaven.Pile.getCard()Lwaitean/DominionMaven/Card;:NonNull:waitean.DominionMaven.Card:getCost()I:Zero
   * Goal 6. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 8
   * Goal 7. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 9
   * Goal 8. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 10
   * Goal 9. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 11
   * Goal 10. waitean.DominionMaven.Pile.getCard()Lwaitean/DominionMaven/Card;: Line 14
   * Goal 11. [METHOD] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 12. [METHOD] waitean.DominionMaven.Pile.getCard()Lwaitean/DominionMaven/Card;
   * Goal 13. [METHODNOEX] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 14. [METHODNOEX] waitean.DominionMaven.Pile.getCard()Lwaitean/DominionMaven/Card;
   * Goal 15. Weak Mutation 0: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp Negation of n
   * Goal 16. Weak Mutation 1: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC 1 n
   * Goal 17. Weak Mutation 2: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC -1 n
   * Goal 18. Weak Mutation 3: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:10 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Great_Hall;
      Card.CardType card_CardType0 = Card.CardType.TREASURE;
      Card card0 = new Card(card_CardName0, card_CardType0, 0);
      Pile pile0 = new Pile(card0, 0);
      pile0.getCard();
      assertEquals(0, pile0.getEmbargo());
      assertEquals(0, pile0.getNumber());
  }

  //Test case number: 7
  /*
   * 18 covered goals:
   * Goal 1. waitean.DominionMaven.Pile.getCard()Lwaitean/DominionMaven/Card;: root-Branch
   * Goal 2. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch
   * Goal 3. Branch waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch in context: waitean.DominionMaven.Pile:<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 4. Branch waitean.DominionMaven.Pile.getCard()Lwaitean/DominionMaven/Card;: root-Branch in context: waitean.DominionMaven.Pile:getCard()Lwaitean/DominionMaven/Card;
   * Goal 5. [Output]: waitean.DominionMaven.Pile.getCard()Lwaitean/DominionMaven/Card;:NonNull:waitean.DominionMaven.Card:getCost()I:Positive
   * Goal 6. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 8
   * Goal 7. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 9
   * Goal 8. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 10
   * Goal 9. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 11
   * Goal 10. waitean.DominionMaven.Pile.getCard()Lwaitean/DominionMaven/Card;: Line 14
   * Goal 11. [METHOD] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 12. [METHOD] waitean.DominionMaven.Pile.getCard()Lwaitean/DominionMaven/Card;
   * Goal 13. [METHODNOEX] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 14. [METHODNOEX] waitean.DominionMaven.Pile.getCard()Lwaitean/DominionMaven/Card;
   * Goal 15. Weak Mutation 0: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp Negation of n
   * Goal 16. Weak Mutation 1: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC 1 n
   * Goal 17. Weak Mutation 2: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC -1 n
   * Goal 18. Weak Mutation 3: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:10 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Gold;
      Card.CardType card_CardType0 = Card.CardType.TREASURE;
      Card card0 = new Card(card_CardName0, card_CardType0, 41);
      Pile pile0 = new Pile(card0, 41);
      pile0.getCard();
      assertEquals(0, pile0.getEmbargo());
      assertEquals(41, pile0.getNumber());
  }

  //Test case number: 8
  /*
   * 31 covered goals:
   * Goal 1. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch
   * Goal 2. waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;: I4 Branch 1 IFLE L30 - false
   * Goal 3. Branch waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch in context: waitean.DominionMaven.Pile:<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 4. Branch waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;: I4 Branch 1 IFLE L30 - false in context: waitean.DominionMaven.Pile:aquireCard()Lwaitean/DominionMaven/Card;
   * Goal 5. [Output]: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:NonNull:waitean.DominionMaven.Card:getCost()I:Positive
   * Goal 6. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 8
   * Goal 7. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 9
   * Goal 8. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 10
   * Goal 9. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 11
   * Goal 10. waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;: Line 30
   * Goal 11. waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;: Line 31
   * Goal 12. waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;: Line 32
   * Goal 13. [METHOD] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 14. [METHOD] waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;
   * Goal 15. [METHODNOEX] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 16. [METHODNOEX] waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;
   * Goal 17. Weak Mutation 0: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp Negation of n
   * Goal 18. Weak Mutation 1: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC 1 n
   * Goal 19. Weak Mutation 2: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC -1 n
   * Goal 20. Weak Mutation 3: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:10 - ReplaceConstant - 0 -> 1
   * Goal 21. Weak Mutation 18: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:30 - InsertUnaryOp Negation
   * Goal 22. Weak Mutation 19: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:30 - InsertUnaryOp +1
   * Goal 23. Weak Mutation 20: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:30 - InsertUnaryOp -1
   * Goal 24. Weak Mutation 21: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:30 - ReplaceComparisonOperator <= -> -1
   * Goal 25. Weak Mutation 24: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:31 - InsertUnaryOp Negation
   * Goal 26. Weak Mutation 25: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:31 - InsertUnaryOp +1
   * Goal 27. Weak Mutation 26: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:31 - InsertUnaryOp -1
   * Goal 28. Weak Mutation 27: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:31 - ReplaceConstant - 1 -> 0
   * Goal 29. Weak Mutation 28: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:31 - ReplaceArithmeticOperator - -> +
   * Goal 30. Weak Mutation 30: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:31 - ReplaceArithmeticOperator - -> *
   * Goal 31. Weak Mutation 31: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:31 - ReplaceArithmeticOperator - -> /
   */

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player("!lRZcHy^J");
      Card card0 = player0.drawToAdventurer();
      Pile pile0 = new Pile(card0, 1);
      Card card1 = pile0.aquireCard();
      assertEquals(0, pile0.getNumber());
      assertNotNull(card1);
  }

  //Test case number: 9
  /*
   * 25 covered goals:
   * Goal 1. waitean.DominionMaven.Pile.toString()Ljava/lang/String;: root-Branch
   * Goal 2. waitean.DominionMaven.Pile.getCard()Lwaitean/DominionMaven/Card;: root-Branch
   * Goal 3. waitean.DominionMaven.Pile.getNumber()I: root-Branch
   * Goal 4. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch
   * Goal 5. Branch waitean.DominionMaven.Pile.toString()Ljava/lang/String;: root-Branch in context: waitean.DominionMaven.Pile:toString()Ljava/lang/String;
   * Goal 6. Branch waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch in context: waitean.DominionMaven.Pile:<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 7. toString()Ljava/lang/String;_java.lang.NullPointerException_IMPLICIT
   * Goal 8. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 8
   * Goal 9. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 9
   * Goal 10. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 10
   * Goal 11. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 11
   * Goal 12. waitean.DominionMaven.Pile.getCard()Lwaitean/DominionMaven/Card;: Line 14
   * Goal 13. waitean.DominionMaven.Pile.getNumber()I: Line 18
   * Goal 14. waitean.DominionMaven.Pile.toString()Ljava/lang/String;: Line 51
   * Goal 15. [METHOD] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 16. [METHOD] waitean.DominionMaven.Pile.toString()Ljava/lang/String;
   * Goal 17. [METHODNOEX] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 18. Weak Mutation 0: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp Negation of n
   * Goal 19. Weak Mutation 1: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC 1 n
   * Goal 20. Weak Mutation 2: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC -1 n
   * Goal 21. Weak Mutation 3: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:10 - ReplaceConstant - 0 -> 1
   * Goal 22. Weak Mutation 4: waitean.DominionMaven.Pile.getNumber()I:18 - InsertUnaryOp Negation
   * Goal 23. Weak Mutation 5: waitean.DominionMaven.Pile.getNumber()I:18 - InsertUnaryOp +1
   * Goal 24. Weak Mutation 6: waitean.DominionMaven.Pile.getNumber()I:18 - InsertUnaryOp -1
   * Goal 25. Weak Mutation 69: waitean.DominionMaven.Pile.toString()Ljava/lang/String;:51 - ReplaceConstant -  of  -> 
   */

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Pile pile0 = new Pile((Card) null, 0);
      // Undeclared exception!
      try { 
        pile0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("waitean.DominionMaven.Pile", e);
      }
  }

  //Test case number: 10
  /*
   * 18 covered goals:
   * Goal 1. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch
   * Goal 2. Branch waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch in context: waitean.DominionMaven.Pile:<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 3. buyCard(I)I_java.lang.NullPointerException_IMPLICIT
   * Goal 4. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 8
   * Goal 5. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 9
   * Goal 6. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 10
   * Goal 7. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 11
   * Goal 8. waitean.DominionMaven.Pile.buyCard(I)I: Line 39
   * Goal 9. [METHOD] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 10. [METHOD] waitean.DominionMaven.Pile.buyCard(I)I
   * Goal 11. [METHODNOEX] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 12. Weak Mutation 0: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp Negation of n
   * Goal 13. Weak Mutation 1: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC 1 n
   * Goal 14. Weak Mutation 2: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC -1 n
   * Goal 15. Weak Mutation 3: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:10 - ReplaceConstant - 0 -> 1
   * Goal 16. Weak Mutation 32: waitean.DominionMaven.Pile.buyCard(I)I:39 - InsertUnaryOp Negation of money
   * Goal 17. Weak Mutation 33: waitean.DominionMaven.Pile.buyCard(I)I:39 - InsertUnaryOp IINC 1 money
   * Goal 18. Weak Mutation 34: waitean.DominionMaven.Pile.buyCard(I)I:39 - InsertUnaryOp IINC -1 money
   */

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Pile pile0 = new Pile((Card) null, 407);
      // Undeclared exception!
      try { 
        pile0.buyCard(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("waitean.DominionMaven.Pile", e);
      }
  }

  //Test case number: 11
  /*
   * 31 covered goals:
   * Goal 1. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch
   * Goal 2. waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;: I4 Branch 1 IFLE L30 - false
   * Goal 3. Branch waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch in context: waitean.DominionMaven.Pile:<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 4. Branch waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;: I4 Branch 1 IFLE L30 - false in context: waitean.DominionMaven.Pile:aquireCard()Lwaitean/DominionMaven/Card;
   * Goal 5. aquireCard()Lwaitean/DominionMaven/Card;_java.lang.NullPointerException_IMPLICIT
   * Goal 6. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 8
   * Goal 7. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 9
   * Goal 8. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 10
   * Goal 9. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 11
   * Goal 10. waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;: Line 30
   * Goal 11. waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;: Line 31
   * Goal 12. waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;: Line 32
   * Goal 13. [METHOD] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 14. [METHOD] waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;
   * Goal 15. [METHODNOEX] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 16. Weak Mutation 0: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp Negation of n
   * Goal 17. Weak Mutation 1: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC 1 n
   * Goal 18. Weak Mutation 2: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC -1 n
   * Goal 19. Weak Mutation 3: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:10 - ReplaceConstant - 0 -> 1
   * Goal 20. Weak Mutation 18: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:30 - InsertUnaryOp Negation
   * Goal 21. Weak Mutation 19: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:30 - InsertUnaryOp +1
   * Goal 22. Weak Mutation 20: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:30 - InsertUnaryOp -1
   * Goal 23. Weak Mutation 21: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:30 - ReplaceComparisonOperator <= -> -1
   * Goal 24. Weak Mutation 24: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:31 - InsertUnaryOp Negation
   * Goal 25. Weak Mutation 25: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:31 - InsertUnaryOp +1
   * Goal 26. Weak Mutation 26: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:31 - InsertUnaryOp -1
   * Goal 27. Weak Mutation 27: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:31 - ReplaceConstant - 1 -> 0
   * Goal 28. Weak Mutation 28: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:31 - ReplaceArithmeticOperator - -> +
   * Goal 29. Weak Mutation 29: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:31 - ReplaceArithmeticOperator - -> %
   * Goal 30. Weak Mutation 30: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:31 - ReplaceArithmeticOperator - -> *
   * Goal 31. Weak Mutation 31: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:31 - ReplaceArithmeticOperator - -> /
   */

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Pile pile0 = new Pile((Card) null, 13);
      // Undeclared exception!
      try { 
        pile0.aquireCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("waitean.DominionMaven.Pile", e);
      }
  }

  //Test case number: 12
  /*
   * 21 covered goals:
   * Goal 1. waitean.DominionMaven.Pile.getNumber()I: root-Branch
   * Goal 2. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch
   * Goal 3. Branch waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch in context: waitean.DominionMaven.Pile:<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 4. Branch waitean.DominionMaven.Pile.getNumber()I: root-Branch in context: waitean.DominionMaven.Pile:getNumber()I
   * Goal 5. [Output]: waitean.DominionMaven.Pile.getNumber()I:Negative
   * Goal 6. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 8
   * Goal 7. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 9
   * Goal 8. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 10
   * Goal 9. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 11
   * Goal 10. waitean.DominionMaven.Pile.getNumber()I: Line 18
   * Goal 11. [METHOD] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 12. [METHOD] waitean.DominionMaven.Pile.getNumber()I
   * Goal 13. [METHODNOEX] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 14. [METHODNOEX] waitean.DominionMaven.Pile.getNumber()I
   * Goal 15. Weak Mutation 0: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp Negation of n
   * Goal 16. Weak Mutation 1: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC 1 n
   * Goal 17. Weak Mutation 2: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC -1 n
   * Goal 18. Weak Mutation 3: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:10 - ReplaceConstant - 0 -> 1
   * Goal 19. Weak Mutation 4: waitean.DominionMaven.Pile.getNumber()I:18 - InsertUnaryOp Negation
   * Goal 20. Weak Mutation 5: waitean.DominionMaven.Pile.getNumber()I:18 - InsertUnaryOp +1
   * Goal 21. Weak Mutation 6: waitean.DominionMaven.Pile.getNumber()I:18 - InsertUnaryOp -1
   */

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Pile pile0 = new Pile((Card) null, (-1));
      int int0 = pile0.getNumber();
      assertEquals((-1), int0);
      assertEquals(0, pile0.getEmbargo());
  }

  //Test case number: 13
  /*
   * 18 covered goals:
   * Goal 1. waitean.DominionMaven.Pile.getCard()Lwaitean/DominionMaven/Card;: root-Branch
   * Goal 2. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch
   * Goal 3. Branch waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch in context: waitean.DominionMaven.Pile:<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 4. Branch waitean.DominionMaven.Pile.getCard()Lwaitean/DominionMaven/Card;: root-Branch in context: waitean.DominionMaven.Pile:getCard()Lwaitean/DominionMaven/Card;
   * Goal 5. [Output]: waitean.DominionMaven.Pile.getCard()Lwaitean/DominionMaven/Card;:NonNull:waitean.DominionMaven.Card:getCost()I:Negative
   * Goal 6. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 8
   * Goal 7. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 9
   * Goal 8. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 10
   * Goal 9. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 11
   * Goal 10. waitean.DominionMaven.Pile.getCard()Lwaitean/DominionMaven/Card;: Line 14
   * Goal 11. [METHOD] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 12. [METHOD] waitean.DominionMaven.Pile.getCard()Lwaitean/DominionMaven/Card;
   * Goal 13. [METHODNOEX] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 14. [METHODNOEX] waitean.DominionMaven.Pile.getCard()Lwaitean/DominionMaven/Card;
   * Goal 15. Weak Mutation 0: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp Negation of n
   * Goal 16. Weak Mutation 1: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC 1 n
   * Goal 17. Weak Mutation 2: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC -1 n
   * Goal 18. Weak Mutation 3: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:10 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Curse;
      Card.CardType card_CardType0 = Card.CardType.TREASURE;
      Card card0 = new Card(card_CardName0, card_CardType0, (-2875));
      Pile pile0 = new Pile(card0, (-2875));
      pile0.getCard();
      assertEquals(0, pile0.getEmbargo());
      assertEquals(-2875, pile0.getNumber());
  }

  //Test case number: 14
  /*
   * 30 covered goals:
   * Goal 1. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch
   * Goal 2. waitean.DominionMaven.Pile.buyCard(I)I: I6 Branch 2 IF_ICMPLT L39 - false
   * Goal 3. waitean.DominionMaven.Pile.buyCard(I)I: I9 Branch 3 IFLE L39 - true
   * Goal 4. Branch waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch in context: waitean.DominionMaven.Pile:<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 5. Branch waitean.DominionMaven.Pile.buyCard(I)I: I9 Branch 3 IFLE L39 - true in context: waitean.DominionMaven.Pile:buyCard(I)I
   * Goal 6. Branch waitean.DominionMaven.Pile.buyCard(I)I: I6 Branch 2 IF_ICMPLT L39 - false in context: waitean.DominionMaven.Pile:buyCard(I)I
   * Goal 7. [Output]: waitean.DominionMaven.Pile.buyCard(I)I:Zero
   * Goal 8. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 8
   * Goal 9. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 9
   * Goal 10. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 10
   * Goal 11. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 11
   * Goal 12. waitean.DominionMaven.Pile.buyCard(I)I: Line 39
   * Goal 13. waitean.DominionMaven.Pile.buyCard(I)I: Line 43
   * Goal 14. [METHOD] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 15. [METHOD] waitean.DominionMaven.Pile.buyCard(I)I
   * Goal 16. [METHODNOEX] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 17. [METHODNOEX] waitean.DominionMaven.Pile.buyCard(I)I
   * Goal 18. Weak Mutation 0: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp Negation of n
   * Goal 19. Weak Mutation 1: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC 1 n
   * Goal 20. Weak Mutation 2: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC -1 n
   * Goal 21. Weak Mutation 3: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:10 - ReplaceConstant - 0 -> 1
   * Goal 22. Weak Mutation 32: waitean.DominionMaven.Pile.buyCard(I)I:39 - InsertUnaryOp Negation of money
   * Goal 23. Weak Mutation 33: waitean.DominionMaven.Pile.buyCard(I)I:39 - InsertUnaryOp IINC 1 money
   * Goal 24. Weak Mutation 34: waitean.DominionMaven.Pile.buyCard(I)I:39 - InsertUnaryOp IINC -1 money
   * Goal 25. Weak Mutation 37: waitean.DominionMaven.Pile.buyCard(I)I:39 - ReplaceComparisonOperator < -> <=
   * Goal 26. Weak Mutation 38: waitean.DominionMaven.Pile.buyCard(I)I:39 - InsertUnaryOp Negation
   * Goal 27. Weak Mutation 39: waitean.DominionMaven.Pile.buyCard(I)I:39 - InsertUnaryOp +1
   * Goal 28. Weak Mutation 40: waitean.DominionMaven.Pile.buyCard(I)I:39 - InsertUnaryOp -1
   * Goal 29. Weak Mutation 42: waitean.DominionMaven.Pile.buyCard(I)I:39 - ReplaceComparisonOperator <= -> ==
   * Goal 30. Weak Mutation 60: waitean.DominionMaven.Pile.buyCard(I)I:43 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Gold;
      Card.CardType card_CardType0 = Card.CardType.ACTION;
      Card card0 = new Card(card_CardName0, card_CardType0, (-1));
      Pile pile0 = new Pile(card0, (-1));
      int int0 = pile0.buyCard((-1));
      assertEquals(0, pile0.getEmbargo());
      assertEquals(0, int0);
      assertEquals(-1, pile0.getNumber());
  }

  //Test case number: 15
  /*
   * 44 covered goals:
   * Goal 1. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch
   * Goal 2. waitean.DominionMaven.Pile.buyCard(I)I: I6 Branch 2 IF_ICMPLT L39 - false
   * Goal 3. waitean.DominionMaven.Pile.buyCard(I)I: I9 Branch 3 IFLE L39 - false
   * Goal 4. Branch waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch in context: waitean.DominionMaven.Pile:<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 5. Branch waitean.DominionMaven.Pile.buyCard(I)I: I9 Branch 3 IFLE L39 - false in context: waitean.DominionMaven.Pile:buyCard(I)I
   * Goal 6. Branch waitean.DominionMaven.Pile.buyCard(I)I: I6 Branch 2 IF_ICMPLT L39 - false in context: waitean.DominionMaven.Pile:buyCard(I)I
   * Goal 7. [Output]: waitean.DominionMaven.Pile.buyCard(I)I:Positive
   * Goal 8. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 8
   * Goal 9. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 9
   * Goal 10. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 10
   * Goal 11. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 11
   * Goal 12. waitean.DominionMaven.Pile.buyCard(I)I: Line 39
   * Goal 13. waitean.DominionMaven.Pile.buyCard(I)I: Line 40
   * Goal 14. waitean.DominionMaven.Pile.buyCard(I)I: Line 41
   * Goal 15. [METHOD] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 16. [METHOD] waitean.DominionMaven.Pile.buyCard(I)I
   * Goal 17. [METHODNOEX] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 18. [METHODNOEX] waitean.DominionMaven.Pile.buyCard(I)I
   * Goal 19. Weak Mutation 0: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp Negation of n
   * Goal 20. Weak Mutation 1: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC 1 n
   * Goal 21. Weak Mutation 2: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC -1 n
   * Goal 22. Weak Mutation 3: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:10 - ReplaceConstant - 0 -> 1
   * Goal 23. Weak Mutation 32: waitean.DominionMaven.Pile.buyCard(I)I:39 - InsertUnaryOp Negation of money
   * Goal 24. Weak Mutation 33: waitean.DominionMaven.Pile.buyCard(I)I:39 - InsertUnaryOp IINC 1 money
   * Goal 25. Weak Mutation 34: waitean.DominionMaven.Pile.buyCard(I)I:39 - InsertUnaryOp IINC -1 money
   * Goal 26. Weak Mutation 37: waitean.DominionMaven.Pile.buyCard(I)I:39 - ReplaceComparisonOperator < -> <=
   * Goal 27. Weak Mutation 38: waitean.DominionMaven.Pile.buyCard(I)I:39 - InsertUnaryOp Negation
   * Goal 28. Weak Mutation 39: waitean.DominionMaven.Pile.buyCard(I)I:39 - InsertUnaryOp +1
   * Goal 29. Weak Mutation 40: waitean.DominionMaven.Pile.buyCard(I)I:39 - InsertUnaryOp -1
   * Goal 30. Weak Mutation 41: waitean.DominionMaven.Pile.buyCard(I)I:39 - ReplaceComparisonOperator <= -> -1
   * Goal 31. Weak Mutation 44: waitean.DominionMaven.Pile.buyCard(I)I:40 - InsertUnaryOp Negation
   * Goal 32. Weak Mutation 45: waitean.DominionMaven.Pile.buyCard(I)I:40 - InsertUnaryOp +1
   * Goal 33. Weak Mutation 46: waitean.DominionMaven.Pile.buyCard(I)I:40 - InsertUnaryOp -1
   * Goal 34. Weak Mutation 47: waitean.DominionMaven.Pile.buyCard(I)I:40 - ReplaceConstant - 1 -> 0
   * Goal 35. Weak Mutation 48: waitean.DominionMaven.Pile.buyCard(I)I:40 - ReplaceArithmeticOperator - -> +
   * Goal 36. Weak Mutation 49: waitean.DominionMaven.Pile.buyCard(I)I:40 - ReplaceArithmeticOperator - -> %
   * Goal 37. Weak Mutation 50: waitean.DominionMaven.Pile.buyCard(I)I:40 - ReplaceArithmeticOperator - -> *
   * Goal 38. Weak Mutation 51: waitean.DominionMaven.Pile.buyCard(I)I:40 - ReplaceArithmeticOperator - -> /
   * Goal 39. Weak Mutation 52: waitean.DominionMaven.Pile.buyCard(I)I:41 - ReplaceConstant - 1 -> 0
   * Goal 40. Weak Mutation 53: waitean.DominionMaven.Pile.buyCard(I)I:41 - InsertUnaryOp Negation
   * Goal 41. Weak Mutation 54: waitean.DominionMaven.Pile.buyCard(I)I:41 - InsertUnaryOp +1
   * Goal 42. Weak Mutation 55: waitean.DominionMaven.Pile.buyCard(I)I:41 - InsertUnaryOp -1
   * Goal 43. Weak Mutation 56: waitean.DominionMaven.Pile.buyCard(I)I:41 - ReplaceArithmeticOperator + -> %
   * Goal 44. Weak Mutation 59: waitean.DominionMaven.Pile.buyCard(I)I:41 - ReplaceArithmeticOperator + -> /
   */

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.CardType card_CardType0 = Card.CardType.VICTORY;
      Card card0 = new Card(card_CardName0, card_CardType0, 0);
      Pile pile0 = new Pile(card0, 359);
      int int0 = pile0.buyCard(0);
      assertEquals(358, pile0.getNumber());
      assertEquals(1, int0);
  }

  //Test case number: 16
  /*
   * 24 covered goals:
   * Goal 1. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch
   * Goal 2. waitean.DominionMaven.Pile.buyCard(I)I: I6 Branch 2 IF_ICMPLT L39 - true
   * Goal 3. Branch waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch in context: waitean.DominionMaven.Pile:<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 4. Branch waitean.DominionMaven.Pile.buyCard(I)I: I6 Branch 2 IF_ICMPLT L39 - true in context: waitean.DominionMaven.Pile:buyCard(I)I
   * Goal 5. [Output]: waitean.DominionMaven.Pile.buyCard(I)I:Zero
   * Goal 6. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 8
   * Goal 7. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 9
   * Goal 8. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 10
   * Goal 9. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 11
   * Goal 10. waitean.DominionMaven.Pile.buyCard(I)I: Line 39
   * Goal 11. waitean.DominionMaven.Pile.buyCard(I)I: Line 43
   * Goal 12. [METHOD] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 13. [METHOD] waitean.DominionMaven.Pile.buyCard(I)I
   * Goal 14. [METHODNOEX] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 15. [METHODNOEX] waitean.DominionMaven.Pile.buyCard(I)I
   * Goal 16. Weak Mutation 0: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp Negation of n
   * Goal 17. Weak Mutation 1: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC 1 n
   * Goal 18. Weak Mutation 2: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC -1 n
   * Goal 19. Weak Mutation 3: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:10 - ReplaceConstant - 0 -> 1
   * Goal 20. Weak Mutation 32: waitean.DominionMaven.Pile.buyCard(I)I:39 - InsertUnaryOp Negation of money
   * Goal 21. Weak Mutation 33: waitean.DominionMaven.Pile.buyCard(I)I:39 - InsertUnaryOp IINC 1 money
   * Goal 22. Weak Mutation 34: waitean.DominionMaven.Pile.buyCard(I)I:39 - InsertUnaryOp IINC -1 money
   * Goal 23. Weak Mutation 36: waitean.DominionMaven.Pile.buyCard(I)I:39 - ReplaceComparisonOperator < -> -2
   * Goal 24. Weak Mutation 60: waitean.DominionMaven.Pile.buyCard(I)I:43 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player("!lRZcHy^J");
      Card card0 = player0.drawToAdventurer();
      Pile pile0 = new Pile(card0, 1);
      int int0 = pile0.buyCard(1);
      assertEquals(0, int0);
      assertEquals(1, pile0.getNumber());
      assertEquals(0, pile0.getEmbargo());
  }

  //Test case number: 17
  /*
   * 32 covered goals:
   * Goal 1. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch
   * Goal 2. waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;: I4 Branch 1 IFLE L30 - false
   * Goal 3. Branch waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch in context: waitean.DominionMaven.Pile:<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 4. Branch waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;: I4 Branch 1 IFLE L30 - false in context: waitean.DominionMaven.Pile:aquireCard()Lwaitean/DominionMaven/Card;
   * Goal 5. [Output]: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:NonNull:waitean.DominionMaven.Card:getCost()I:Zero
   * Goal 6. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 8
   * Goal 7. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 9
   * Goal 8. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 10
   * Goal 9. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 11
   * Goal 10. waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;: Line 30
   * Goal 11. waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;: Line 31
   * Goal 12. waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;: Line 32
   * Goal 13. [METHOD] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 14. [METHOD] waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;
   * Goal 15. [METHODNOEX] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 16. [METHODNOEX] waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;
   * Goal 17. Weak Mutation 0: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp Negation of n
   * Goal 18. Weak Mutation 1: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC 1 n
   * Goal 19. Weak Mutation 2: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC -1 n
   * Goal 20. Weak Mutation 3: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:10 - ReplaceConstant - 0 -> 1
   * Goal 21. Weak Mutation 18: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:30 - InsertUnaryOp Negation
   * Goal 22. Weak Mutation 19: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:30 - InsertUnaryOp +1
   * Goal 23. Weak Mutation 20: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:30 - InsertUnaryOp -1
   * Goal 24. Weak Mutation 21: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:30 - ReplaceComparisonOperator <= -> -1
   * Goal 25. Weak Mutation 24: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:31 - InsertUnaryOp Negation
   * Goal 26. Weak Mutation 25: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:31 - InsertUnaryOp +1
   * Goal 27. Weak Mutation 26: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:31 - InsertUnaryOp -1
   * Goal 28. Weak Mutation 27: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:31 - ReplaceConstant - 1 -> 0
   * Goal 29. Weak Mutation 28: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:31 - ReplaceArithmeticOperator - -> +
   * Goal 30. Weak Mutation 29: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:31 - ReplaceArithmeticOperator - -> %
   * Goal 31. Weak Mutation 30: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:31 - ReplaceArithmeticOperator - -> *
   * Goal 32. Weak Mutation 31: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:31 - ReplaceArithmeticOperator - -> /
   */

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.CardType card_CardType0 = Card.CardType.VICTORY;
      Card card0 = new Card(card_CardName0, card_CardType0, 0);
      Pile pile0 = new Pile(card0, 359);
      pile0.aquireCard();
      assertEquals(358, pile0.getNumber());
  }

  //Test case number: 18
  /*
   * 23 covered goals:
   * Goal 1. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch
   * Goal 2. waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;: I4 Branch 1 IFLE L30 - true
   * Goal 3. Branch waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch in context: waitean.DominionMaven.Pile:<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 4. Branch waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;: I4 Branch 1 IFLE L30 - true in context: waitean.DominionMaven.Pile:aquireCard()Lwaitean/DominionMaven/Card;
   * Goal 5. [Output]: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:Null
   * Goal 6. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 8
   * Goal 7. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 9
   * Goal 8. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 10
   * Goal 9. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 11
   * Goal 10. waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;: Line 30
   * Goal 11. waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;: Line 34
   * Goal 12. [METHOD] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 13. [METHOD] waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;
   * Goal 14. [METHODNOEX] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 15. [METHODNOEX] waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;
   * Goal 16. Weak Mutation 0: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp Negation of n
   * Goal 17. Weak Mutation 1: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC 1 n
   * Goal 18. Weak Mutation 2: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC -1 n
   * Goal 19. Weak Mutation 3: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:10 - ReplaceConstant - 0 -> 1
   * Goal 20. Weak Mutation 18: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:30 - InsertUnaryOp Negation
   * Goal 21. Weak Mutation 19: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:30 - InsertUnaryOp +1
   * Goal 22. Weak Mutation 20: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:30 - InsertUnaryOp -1
   * Goal 23. Weak Mutation 22: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:30 - ReplaceComparisonOperator <= -> ==
   */

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Curse;
      Card.CardType card_CardType0 = Card.CardType.TREASURE;
      Card card0 = new Card(card_CardName0, card_CardType0, (-2875));
      Pile pile0 = new Pile(card0, (-2875));
      pile0.aquireCard();
      assertEquals(-2875, pile0.getNumber());
      assertEquals(0, pile0.getEmbargo());
  }

  //Test case number: 19
  /*
   * 60 covered goals:
   * Goal 1. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch
   * Goal 2. waitean.DominionMaven.Pile.embargoPile()V: root-Branch
   * Goal 3. waitean.DominionMaven.Pile.buyCard(I)I: I6 Branch 2 IF_ICMPLT L39 - false
   * Goal 4. waitean.DominionMaven.Pile.buyCard(I)I: I9 Branch 3 IFLE L39 - false
   * Goal 5. Branch waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch in context: waitean.DominionMaven.Pile:<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 6. Branch waitean.DominionMaven.Pile.embargoPile()V: root-Branch in context: waitean.DominionMaven.Pile:embargoPile()V
   * Goal 7. Branch waitean.DominionMaven.Pile.buyCard(I)I: I9 Branch 3 IFLE L39 - false in context: waitean.DominionMaven.Pile:buyCard(I)I
   * Goal 8. Branch waitean.DominionMaven.Pile.buyCard(I)I: I6 Branch 2 IF_ICMPLT L39 - false in context: waitean.DominionMaven.Pile:buyCard(I)I
   * Goal 9. [Output]: waitean.DominionMaven.Pile.buyCard(I)I:Positive
   * Goal 10. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 8
   * Goal 11. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 9
   * Goal 12. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 10
   * Goal 13. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 11
   * Goal 14. waitean.DominionMaven.Pile.buyCard(I)I: Line 39
   * Goal 15. waitean.DominionMaven.Pile.buyCard(I)I: Line 40
   * Goal 16. waitean.DominionMaven.Pile.buyCard(I)I: Line 41
   * Goal 17. waitean.DominionMaven.Pile.embargoPile()V: Line 26
   * Goal 18. waitean.DominionMaven.Pile.embargoPile()V: Line 27
   * Goal 19. [METHOD] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 20. [METHOD] waitean.DominionMaven.Pile.buyCard(I)I
   * Goal 21. [METHOD] waitean.DominionMaven.Pile.embargoPile()V
   * Goal 22. [METHODNOEX] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 23. [METHODNOEX] waitean.DominionMaven.Pile.buyCard(I)I
   * Goal 24. [METHODNOEX] waitean.DominionMaven.Pile.embargoPile()V
   * Goal 25. Weak Mutation 0: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp Negation of n
   * Goal 26. Weak Mutation 1: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC 1 n
   * Goal 27. Weak Mutation 2: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC -1 n
   * Goal 28. Weak Mutation 3: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:10 - ReplaceConstant - 0 -> 1
   * Goal 29. Weak Mutation 10: waitean.DominionMaven.Pile.embargoPile()V:26 - InsertUnaryOp Negation
   * Goal 30. Weak Mutation 11: waitean.DominionMaven.Pile.embargoPile()V:26 - InsertUnaryOp +1
   * Goal 31. Weak Mutation 12: waitean.DominionMaven.Pile.embargoPile()V:26 - InsertUnaryOp -1
   * Goal 32. Weak Mutation 13: waitean.DominionMaven.Pile.embargoPile()V:26 - ReplaceConstant - 1 -> 0
   * Goal 33. Weak Mutation 14: waitean.DominionMaven.Pile.embargoPile()V:26 - ReplaceArithmeticOperator + -> %
   * Goal 34. Weak Mutation 15: waitean.DominionMaven.Pile.embargoPile()V:26 - ReplaceArithmeticOperator + -> -
   * Goal 35. Weak Mutation 16: waitean.DominionMaven.Pile.embargoPile()V:26 - ReplaceArithmeticOperator + -> *
   * Goal 36. Weak Mutation 17: waitean.DominionMaven.Pile.embargoPile()V:26 - ReplaceArithmeticOperator + -> /
   * Goal 37. Weak Mutation 32: waitean.DominionMaven.Pile.buyCard(I)I:39 - InsertUnaryOp Negation of money
   * Goal 38. Weak Mutation 33: waitean.DominionMaven.Pile.buyCard(I)I:39 - InsertUnaryOp IINC 1 money
   * Goal 39. Weak Mutation 34: waitean.DominionMaven.Pile.buyCard(I)I:39 - InsertUnaryOp IINC -1 money
   * Goal 40. Weak Mutation 37: waitean.DominionMaven.Pile.buyCard(I)I:39 - ReplaceComparisonOperator < -> <=
   * Goal 41. Weak Mutation 38: waitean.DominionMaven.Pile.buyCard(I)I:39 - InsertUnaryOp Negation
   * Goal 42. Weak Mutation 39: waitean.DominionMaven.Pile.buyCard(I)I:39 - InsertUnaryOp +1
   * Goal 43. Weak Mutation 40: waitean.DominionMaven.Pile.buyCard(I)I:39 - InsertUnaryOp -1
   * Goal 44. Weak Mutation 41: waitean.DominionMaven.Pile.buyCard(I)I:39 - ReplaceComparisonOperator <= -> -1
   * Goal 45. Weak Mutation 44: waitean.DominionMaven.Pile.buyCard(I)I:40 - InsertUnaryOp Negation
   * Goal 46. Weak Mutation 45: waitean.DominionMaven.Pile.buyCard(I)I:40 - InsertUnaryOp +1
   * Goal 47. Weak Mutation 46: waitean.DominionMaven.Pile.buyCard(I)I:40 - InsertUnaryOp -1
   * Goal 48. Weak Mutation 47: waitean.DominionMaven.Pile.buyCard(I)I:40 - ReplaceConstant - 1 -> 0
   * Goal 49. Weak Mutation 48: waitean.DominionMaven.Pile.buyCard(I)I:40 - ReplaceArithmeticOperator - -> +
   * Goal 50. Weak Mutation 49: waitean.DominionMaven.Pile.buyCard(I)I:40 - ReplaceArithmeticOperator - -> %
   * Goal 51. Weak Mutation 50: waitean.DominionMaven.Pile.buyCard(I)I:40 - ReplaceArithmeticOperator - -> *
   * Goal 52. Weak Mutation 51: waitean.DominionMaven.Pile.buyCard(I)I:40 - ReplaceArithmeticOperator - -> /
   * Goal 53. Weak Mutation 52: waitean.DominionMaven.Pile.buyCard(I)I:41 - ReplaceConstant - 1 -> 0
   * Goal 54. Weak Mutation 53: waitean.DominionMaven.Pile.buyCard(I)I:41 - InsertUnaryOp Negation
   * Goal 55. Weak Mutation 54: waitean.DominionMaven.Pile.buyCard(I)I:41 - InsertUnaryOp +1
   * Goal 56. Weak Mutation 55: waitean.DominionMaven.Pile.buyCard(I)I:41 - InsertUnaryOp -1
   * Goal 57. Weak Mutation 56: waitean.DominionMaven.Pile.buyCard(I)I:41 - ReplaceArithmeticOperator + -> %
   * Goal 58. Weak Mutation 57: waitean.DominionMaven.Pile.buyCard(I)I:41 - ReplaceArithmeticOperator + -> -
   * Goal 59. Weak Mutation 58: waitean.DominionMaven.Pile.buyCard(I)I:41 - ReplaceArithmeticOperator + -> *
   * Goal 60. Weak Mutation 59: waitean.DominionMaven.Pile.buyCard(I)I:41 - ReplaceArithmeticOperator + -> /
   */

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.CardType card_CardType0 = Card.CardType.VICTORY;
      Card card0 = new Card(card_CardName0, card_CardType0, 0);
      Pile pile0 = new Pile(card0, 359);
      pile0.embargoPile();
      int int0 = pile0.buyCard(0);
      assertEquals(1, pile0.getEmbargo());
      assertEquals(2, int0);
  }

  //Test case number: 20
  /*
   * 45 covered goals:
   * Goal 1. waitean.DominionMaven.Pile.addCardToPile()V: root-Branch
   * Goal 2. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch
   * Goal 3. waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;: I4 Branch 1 IFLE L30 - false
   * Goal 4. Branch waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch in context: waitean.DominionMaven.Pile:<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 5. Branch waitean.DominionMaven.Pile.addCardToPile()V: root-Branch in context: waitean.DominionMaven.Pile:addCardToPile()V
   * Goal 6. Branch waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;: I4 Branch 1 IFLE L30 - false in context: waitean.DominionMaven.Pile:aquireCard()Lwaitean/DominionMaven/Card;
   * Goal 7. [Output]: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:NonNull:waitean.DominionMaven.Card:getCost()I:Negative
   * Goal 8. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 8
   * Goal 9. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 9
   * Goal 10. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 10
   * Goal 11. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 11
   * Goal 12. waitean.DominionMaven.Pile.addCardToPile()V: Line 47
   * Goal 13. waitean.DominionMaven.Pile.addCardToPile()V: Line 48
   * Goal 14. waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;: Line 30
   * Goal 15. waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;: Line 31
   * Goal 16. waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;: Line 32
   * Goal 17. [METHOD] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 18. [METHOD] waitean.DominionMaven.Pile.addCardToPile()V
   * Goal 19. [METHOD] waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;
   * Goal 20. [METHODNOEX] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 21. [METHODNOEX] waitean.DominionMaven.Pile.addCardToPile()V
   * Goal 22. [METHODNOEX] waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;
   * Goal 23. Weak Mutation 0: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp Negation of n
   * Goal 24. Weak Mutation 1: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC 1 n
   * Goal 25. Weak Mutation 2: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC -1 n
   * Goal 26. Weak Mutation 3: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:10 - ReplaceConstant - 0 -> 1
   * Goal 27. Weak Mutation 18: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:30 - InsertUnaryOp Negation
   * Goal 28. Weak Mutation 19: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:30 - InsertUnaryOp +1
   * Goal 29. Weak Mutation 20: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:30 - InsertUnaryOp -1
   * Goal 30. Weak Mutation 21: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:30 - ReplaceComparisonOperator <= -> -1
   * Goal 31. Weak Mutation 24: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:31 - InsertUnaryOp Negation
   * Goal 32. Weak Mutation 25: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:31 - InsertUnaryOp +1
   * Goal 33. Weak Mutation 26: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:31 - InsertUnaryOp -1
   * Goal 34. Weak Mutation 27: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:31 - ReplaceConstant - 1 -> 0
   * Goal 35. Weak Mutation 28: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:31 - ReplaceArithmeticOperator - -> +
   * Goal 36. Weak Mutation 30: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:31 - ReplaceArithmeticOperator - -> *
   * Goal 37. Weak Mutation 31: waitean.DominionMaven.Pile.aquireCard()Lwaitean/DominionMaven/Card;:31 - ReplaceArithmeticOperator - -> /
   * Goal 38. Weak Mutation 61: waitean.DominionMaven.Pile.addCardToPile()V:47 - InsertUnaryOp Negation
   * Goal 39. Weak Mutation 62: waitean.DominionMaven.Pile.addCardToPile()V:47 - InsertUnaryOp +1
   * Goal 40. Weak Mutation 63: waitean.DominionMaven.Pile.addCardToPile()V:47 - InsertUnaryOp -1
   * Goal 41. Weak Mutation 64: waitean.DominionMaven.Pile.addCardToPile()V:47 - ReplaceConstant - 1 -> 0
   * Goal 42. Weak Mutation 65: waitean.DominionMaven.Pile.addCardToPile()V:47 - ReplaceArithmeticOperator + -> %
   * Goal 43. Weak Mutation 66: waitean.DominionMaven.Pile.addCardToPile()V:47 - ReplaceArithmeticOperator + -> -
   * Goal 44. Weak Mutation 67: waitean.DominionMaven.Pile.addCardToPile()V:47 - ReplaceArithmeticOperator + -> *
   * Goal 45. Weak Mutation 68: waitean.DominionMaven.Pile.addCardToPile()V:47 - ReplaceArithmeticOperator + -> /
   */

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Silver;
      Card.CardType card_CardType0 = Card.CardType.ACTION;
      Card card0 = new Card(card_CardName0, card_CardType0, (-106));
      Pile pile0 = new Pile(card0, 0);
      pile0.addCardToPile();
      assertEquals(1, pile0.getNumber());
      
      pile0.aquireCard();
      assertEquals(0, pile0.getNumber());
  }

  //Test case number: 21
  /*
   * 21 covered goals:
   * Goal 1. waitean.DominionMaven.Pile.getEmbargo()I: root-Branch
   * Goal 2. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch
   * Goal 3. Branch waitean.DominionMaven.Pile.getEmbargo()I: root-Branch in context: waitean.DominionMaven.Pile:getEmbargo()I
   * Goal 4. Branch waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch in context: waitean.DominionMaven.Pile:<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 5. [Output]: waitean.DominionMaven.Pile.getEmbargo()I:Zero
   * Goal 6. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 8
   * Goal 7. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 9
   * Goal 8. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 10
   * Goal 9. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 11
   * Goal 10. waitean.DominionMaven.Pile.getEmbargo()I: Line 22
   * Goal 11. [METHOD] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 12. [METHOD] waitean.DominionMaven.Pile.getEmbargo()I
   * Goal 13. [METHODNOEX] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 14. [METHODNOEX] waitean.DominionMaven.Pile.getEmbargo()I
   * Goal 15. Weak Mutation 0: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp Negation of n
   * Goal 16. Weak Mutation 1: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC 1 n
   * Goal 17. Weak Mutation 2: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC -1 n
   * Goal 18. Weak Mutation 3: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:10 - ReplaceConstant - 0 -> 1
   * Goal 19. Weak Mutation 7: waitean.DominionMaven.Pile.getEmbargo()I:22 - InsertUnaryOp Negation
   * Goal 20. Weak Mutation 8: waitean.DominionMaven.Pile.getEmbargo()I:22 - InsertUnaryOp +1
   * Goal 21. Weak Mutation 9: waitean.DominionMaven.Pile.getEmbargo()I:22 - InsertUnaryOp -1
   */

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Silver;
      Card.CardType card_CardType0 = Card.CardType.ACTION;
      Card card0 = new Card(card_CardName0, card_CardType0, (-106));
      Pile pile0 = new Pile(card0, 0);
      int int0 = pile0.getEmbargo();
      assertEquals(0, int0);
      assertEquals(0, pile0.getNumber());
  }

  //Test case number: 22
  /*
   * 27 covered goals:
   * Goal 1. waitean.DominionMaven.Pile.toString()Ljava/lang/String;: root-Branch
   * Goal 2. waitean.DominionMaven.Pile.getCard()Lwaitean/DominionMaven/Card;: root-Branch
   * Goal 3. waitean.DominionMaven.Pile.getNumber()I: root-Branch
   * Goal 4. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch
   * Goal 5. Branch waitean.DominionMaven.Pile.toString()Ljava/lang/String;: root-Branch in context: waitean.DominionMaven.Pile:toString()Ljava/lang/String;
   * Goal 6. Branch waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: root-Branch in context: waitean.DominionMaven.Pile:<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 7. [Output]: waitean.DominionMaven.Pile.toString()Ljava/lang/String;:NonEmptyString
   * Goal 8. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 8
   * Goal 9. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 9
   * Goal 10. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 10
   * Goal 11. waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V: Line 11
   * Goal 12. waitean.DominionMaven.Pile.getCard()Lwaitean/DominionMaven/Card;: Line 14
   * Goal 13. waitean.DominionMaven.Pile.getNumber()I: Line 18
   * Goal 14. waitean.DominionMaven.Pile.toString()Ljava/lang/String;: Line 51
   * Goal 15. [METHOD] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 16. [METHOD] waitean.DominionMaven.Pile.toString()Ljava/lang/String;
   * Goal 17. [METHODNOEX] waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V
   * Goal 18. [METHODNOEX] waitean.DominionMaven.Pile.toString()Ljava/lang/String;
   * Goal 19. Weak Mutation 0: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp Negation of n
   * Goal 20. Weak Mutation 1: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC 1 n
   * Goal 21. Weak Mutation 2: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:9 - InsertUnaryOp IINC -1 n
   * Goal 22. Weak Mutation 3: waitean.DominionMaven.Pile.<init>(Lwaitean/DominionMaven/Card;I)V:10 - ReplaceConstant - 0 -> 1
   * Goal 23. Weak Mutation 4: waitean.DominionMaven.Pile.getNumber()I:18 - InsertUnaryOp Negation
   * Goal 24. Weak Mutation 5: waitean.DominionMaven.Pile.getNumber()I:18 - InsertUnaryOp +1
   * Goal 25. Weak Mutation 6: waitean.DominionMaven.Pile.getNumber()I:18 - InsertUnaryOp -1
   * Goal 26. Weak Mutation 69: waitean.DominionMaven.Pile.toString()Ljava/lang/String;:51 - ReplaceConstant -  of  -> 
   * Goal 27. Weak Mutation 70: waitean.DominionMaven.Pile.toString()Ljava/lang/String;:51 - ReplaceConstant -  costs:  -> 
   */

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card.CardType card_CardType0 = Card.CardType.VICTORY;
      Card card0 = new Card(card_CardName0, card_CardType0, 0);
      Pile pile0 = new Pile(card0, 359);
      String string0 = pile0.toString();
      assertEquals(0, pile0.getEmbargo());
      assertEquals("359 of Adventurer-VICTORY  costs: 0", string0);
  }
}
