package cs362.dominion.Randoop;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest6 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test001"); }

    cs362.dominion.Cards.Adventurer adventurer0 = new cs362.dominion.Cards.Adventurer();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = adventurer0.getType();
    int i3 = adventurer0.getInitialSupply((int)(short)0);
    int i4 = adventurer0.getCoins();
    java.lang.String str5 = adventurer0.getDefinition();
    int i6 = adventurer0.getCost();
    int i8 = adventurer0.getInitialSupply(101);
    java.lang.String str9 = adventurer0.getDefinition();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str5.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str9.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test002"); }

    cs362.dominion.Cards.Adventurer adventurer0 = new cs362.dominion.Cards.Adventurer();
    java.lang.String str1 = adventurer0.getDefinition();
    int i2 = adventurer0.getCost();
    int i4 = adventurer0.getInitialSupply(10);
    int i6 = adventurer0.getInitialSupply((-1));
    int i8 = adventurer0.getInitialSupply((int)'4');
    int i10 = adventurer0.getInitialSupply(7);
    java.lang.String str11 = adventurer0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str1.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str11.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test003"); }

    cs362.dominion.Cards.Mine mine0 = new cs362.dominion.Cards.Mine();
    java.lang.String str1 = mine0.getDefinition();
    int i2 = mine0.getCost();
    int i3 = mine0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = mine0.getType();
    int i6 = mine0.getInitialSupply(7);
    cs362.dominion.Resources.Game game7 = null;
    cs362.dominion.Cards.Cutpurse cutpurse8 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str9 = cutpurse8.getDefinition();
    int i11 = cutpurse8.getInitialSupply(5);
    int i12 = cutpurse8.getCost();
    int i13 = cutpurse8.getCoins();
    cs362.dominion.Resources.Game game14 = null;
    cs362.dominion.Resources.Player[] player_array15 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player16 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player16, player_array15);
    cs362.dominion.Resources.Supply supply18 = null;
    cs362.dominion.Resources.Option option19 = cutpurse8.playCard(game14, arraylist_player16, supply18);
    cs362.dominion.Resources.Game game20 = null;
    cs362.dominion.Cards.Cutpurse cutpurse21 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str22 = cutpurse21.getDefinition();
    int i24 = cutpurse21.getInitialSupply(5);
    int i25 = cutpurse21.getCost();
    int i26 = cutpurse21.getCoins();
    cs362.dominion.Resources.Game game27 = null;
    cs362.dominion.Cards.Cutpurse cutpurse28 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str29 = cutpurse28.getDefinition();
    int i31 = cutpurse28.getInitialSupply(5);
    int i33 = cutpurse28.getInitialSupply(8);
    cs362.dominion.Resources.Game game34 = null;
    cs362.dominion.Cards.Gold gold35 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance36 = gold35.getType();
    cs362.dominion.Resources.Game game37 = null;
    cs362.dominion.Resources.Player[] player_array38 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player39 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player39, player_array38);
    cs362.dominion.Resources.Supply supply41 = null;
    cs362.dominion.Resources.Option option42 = gold35.playCard(game37, arraylist_player39, supply41);
    cs362.dominion.Resources.Supply supply43 = null;
    cs362.dominion.Resources.Option option44 = cutpurse28.playCard(game34, arraylist_player39, supply43);
    cs362.dominion.Resources.Supply supply45 = null;
    cs362.dominion.Resources.Option option46 = cutpurse21.playCard(game27, arraylist_player39, supply45);
    cs362.dominion.Resources.Supply supply47 = null;
    cs362.dominion.Resources.Option option48 = cutpurse8.playCard(game20, arraylist_player39, supply47);
    cs362.dominion.Resources.Game game49 = null;
    cs362.dominion.Cards.Silver silver50 = new cs362.dominion.Cards.Silver();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance51 = silver50.getType();
    int i53 = silver50.getInitialSupply((int)'4');
    java.lang.String str54 = silver50.getDefinition();
    java.lang.String str55 = silver50.getDefinition();
    java.lang.String str56 = silver50.getDefinition();
    cs362.dominion.Resources.Game game57 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom58 = new cs362.dominion.Cards.CouncilRoom();
    int i59 = councilRoom58.getCards();
    int i60 = councilRoom58.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance61 = councilRoom58.getType();
    java.lang.String str62 = councilRoom58.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance63 = councilRoom58.getType();
    int i64 = councilRoom58.getCost();
    int i65 = councilRoom58.getCards();
    cs362.dominion.Resources.Game game66 = null;
    cs362.dominion.Cards.Cutpurse cutpurse67 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str68 = cutpurse67.getDefinition();
    int i70 = cutpurse67.getInitialSupply(5);
    int i71 = cutpurse67.getCost();
    int i72 = cutpurse67.getCoins();
    cs362.dominion.Resources.Game game73 = null;
    cs362.dominion.Resources.Player[] player_array74 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player75 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b76 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player75, player_array74);
    cs362.dominion.Resources.Supply supply77 = null;
    cs362.dominion.Resources.Option option78 = cutpurse67.playCard(game73, arraylist_player75, supply77);
    cs362.dominion.Resources.Supply supply79 = null;
    cs362.dominion.Resources.Option option80 = councilRoom58.playCard(game66, arraylist_player75, supply79);
    cs362.dominion.Resources.Supply supply81 = null;
    cs362.dominion.Resources.Option option82 = silver50.playCard(game57, arraylist_player75, supply81);
    cs362.dominion.Resources.Supply supply83 = null;
    cs362.dominion.Resources.Option option84 = cutpurse8.playCard(game49, arraylist_player75, supply83);
    cs362.dominion.Resources.Supply supply85 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option86 = mine0.playCard(game7, arraylist_player75, supply85);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."+ "'", str1.equals("Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str9.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str22.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str29.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance36 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance36.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option48);
    org.junit.Assert.assertTrue("'" + cardTypes_instance51 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance51.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "A silver resource, worth $2"+ "'", str54.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "A silver resource, worth $2"+ "'", str55.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "A silver resource, worth $2"+ "'", str56.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance61 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance61.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str62.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance63 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance63.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str68.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option84);

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test004"); }

    cs362.dominion.Cards.Copper copper0 = new cs362.dominion.Cards.Copper();
    int i2 = copper0.getInitialSupply((int)' ');
    int i3 = copper0.getCost();
    java.lang.String str4 = copper0.getDefinition();
    int i5 = copper0.getCoins();
    int i7 = copper0.getInitialSupply((-1));
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = copper0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "A copper resource, worth $1"+ "'", str4.equals("A copper resource, worth $1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 60);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test005"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    int i3 = cutpurse0.getInitialSupply(5);
    int i5 = cutpurse0.getInitialSupply(8);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = cutpurse0.getType();
    java.lang.String str7 = cutpurse0.getDefinition();
    java.lang.String str8 = cutpurse0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance9 = cutpurse0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str7.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str8.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance9 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance9.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test006"); }

    cs362.dominion.Cards.Baron baron0 = new cs362.dominion.Cards.Baron();
    int i2 = baron0.getInitialSupply(1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = baron0.getType();
    int i5 = baron0.getInitialSupply(5);
    int i7 = baron0.getInitialSupply(6);
    int i8 = baron0.getBuys();
    java.lang.String str9 = baron0.getDefinition();
    int i11 = baron0.getInitialSupply((int)(byte)0);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance12 = baron0.getType();
    int i14 = baron0.getInitialSupply((int)(byte)1);
    int i16 = baron0.getInitialSupply(9);
    int i18 = baron0.getInitialSupply((int)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."+ "'", str9.equals("+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance12 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance12.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 10);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test007"); }

    cs362.dominion.Cards.CouncilRoom councilRoom0 = new cs362.dominion.Cards.CouncilRoom();
    int i1 = councilRoom0.getCards();
    int i2 = councilRoom0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = councilRoom0.getType();
    java.lang.String str4 = councilRoom0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = councilRoom0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = councilRoom0.getType();
    java.lang.String str7 = councilRoom0.getDefinition();
    java.lang.String str8 = councilRoom0.getDefinition();
    int i10 = councilRoom0.getInitialSupply(2);
    int i11 = councilRoom0.getCards();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str4.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str7.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str8.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 4);

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test008"); }

    cs362.dominion.Cards.Mine mine0 = new cs362.dominion.Cards.Mine();
    java.lang.String str1 = mine0.getDefinition();
    java.lang.String str2 = mine0.getDefinition();
    int i4 = mine0.getInitialSupply((int)'4');
    java.lang.String str5 = mine0.getDefinition();
    int i6 = mine0.getCost();
    int i7 = mine0.getCost();
    int i9 = mine0.getInitialSupply((int)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."+ "'", str1.equals("Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."+ "'", str2.equals("Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."+ "'", str5.equals("Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test009"); }

    cs362.dominion.Cards.Adventurer adventurer0 = new cs362.dominion.Cards.Adventurer();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = adventurer0.getType();
    int i2 = adventurer0.getCost();
    java.lang.String str3 = adventurer0.getDefinition();
    int i5 = adventurer0.getInitialSupply((int)'a');
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = adventurer0.getType();
    int i7 = adventurer0.getCost();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str3.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test010"); }

    cs362.dominion.Cards.Baron baron0 = new cs362.dominion.Cards.Baron();
    int i2 = baron0.getInitialSupply(1);
    int i4 = baron0.getInitialSupply(10);
    java.lang.String str5 = baron0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = baron0.getType();
    int i8 = baron0.getInitialSupply((int)(short)-1);
    int i10 = baron0.getInitialSupply((int)(byte)10);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance11 = baron0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance12 = baron0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."+ "'", str5.equals("+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance11 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance11.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance12 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance12.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test011"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = embargo8.getCost();
    int i13 = embargo8.getCoins();
    int i14 = embargo8.getCoins();
    cs362.dominion.Resources.Game game15 = null;
    cs362.dominion.Cards.Copper copper16 = new cs362.dominion.Cards.Copper();
    int i18 = copper16.getInitialSupply((int)' ');
    int i19 = copper16.getCoins();
    int i20 = copper16.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance21 = copper16.getType();
    cs362.dominion.Resources.Game game22 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom23 = new cs362.dominion.Cards.CouncilRoom();
    int i24 = councilRoom23.getCards();
    int i26 = councilRoom23.getInitialSupply(3);
    int i27 = councilRoom23.getCards();
    int i28 = councilRoom23.getBuys();
    int i29 = councilRoom23.getBuys();
    java.lang.String str30 = councilRoom23.getDefinition();
    int i32 = councilRoom23.getInitialSupply((-1));
    cs362.dominion.Resources.Game game33 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom34 = new cs362.dominion.Cards.CouncilRoom();
    int i35 = councilRoom34.getCards();
    int i36 = councilRoom34.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance37 = councilRoom34.getType();
    int i38 = councilRoom34.getBuys();
    int i39 = councilRoom34.getCards();
    int i40 = councilRoom34.getCost();
    int i42 = councilRoom34.getInitialSupply(5);
    java.lang.String str43 = councilRoom34.getName();
    cs362.dominion.Resources.Game game44 = null;
    cs362.dominion.Cards.Cutpurse cutpurse45 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str46 = cutpurse45.getDefinition();
    int i48 = cutpurse45.getInitialSupply(5);
    int i50 = cutpurse45.getInitialSupply((int)(byte)10);
    java.lang.String str51 = cutpurse45.getDefinition();
    cs362.dominion.Resources.Game game52 = null;
    cs362.dominion.Cards.Cutpurse cutpurse53 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str54 = cutpurse53.getDefinition();
    int i56 = cutpurse53.getInitialSupply(5);
    int i58 = cutpurse53.getInitialSupply(8);
    cs362.dominion.Resources.Game game59 = null;
    cs362.dominion.Cards.Gold gold60 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance61 = gold60.getType();
    cs362.dominion.Resources.Game game62 = null;
    cs362.dominion.Resources.Player[] player_array63 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player64 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b65 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player64, player_array63);
    cs362.dominion.Resources.Supply supply66 = null;
    cs362.dominion.Resources.Option option67 = gold60.playCard(game62, arraylist_player64, supply66);
    cs362.dominion.Resources.Supply supply68 = null;
    cs362.dominion.Resources.Option option69 = cutpurse53.playCard(game59, arraylist_player64, supply68);
    cs362.dominion.Resources.Supply supply70 = null;
    cs362.dominion.Resources.Option option71 = cutpurse45.playCard(game52, arraylist_player64, supply70);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance72 = cutpurse45.getType();
    cs362.dominion.Resources.Game game73 = null;
    cs362.dominion.Cards.Cutpurse cutpurse74 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str75 = cutpurse74.getDefinition();
    int i77 = cutpurse74.getInitialSupply(5);
    int i79 = cutpurse74.getInitialSupply((int)(byte)10);
    java.lang.String str80 = cutpurse74.getDefinition();
    int i81 = cutpurse74.getCost();
    int i83 = cutpurse74.getInitialSupply(6);
    cs362.dominion.Resources.Game game84 = null;
    cs362.dominion.Resources.Player[] player_array85 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player86 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b87 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player86, player_array85);
    cs362.dominion.Resources.Supply supply88 = null;
    cs362.dominion.Resources.Option option89 = cutpurse74.playCard(game84, arraylist_player86, supply88);
    cs362.dominion.Resources.Supply supply90 = null;
    cs362.dominion.Resources.Option option91 = cutpurse45.playCard(game73, arraylist_player86, supply90);
    cs362.dominion.Resources.Supply supply92 = null;
    cs362.dominion.Resources.Option option93 = councilRoom34.playCard(game44, arraylist_player86, supply92);
    cs362.dominion.Resources.Supply supply94 = null;
    cs362.dominion.Resources.Option option95 = councilRoom23.playCard(game33, arraylist_player86, supply94);
    cs362.dominion.Resources.Supply supply96 = null;
    cs362.dominion.Resources.Option option97 = copper16.playCard(game22, arraylist_player86, supply96);
    cs362.dominion.Resources.Supply supply98 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option99 = embargo8.playCard(game15, arraylist_player86, supply98);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance21 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance21.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str30.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance37 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance37.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "CouncilRoom"+ "'", str43.equals("CouncilRoom"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str46.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str51.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str54.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance61 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance61.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option71);
    org.junit.Assert.assertTrue("'" + cardTypes_instance72 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance72.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str75.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str80.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option97);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test012"); }

    cs362.dominion.Cards.Province province0 = new cs362.dominion.Cards.Province();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = province0.getType();
    int i2 = province0.getCost();
    int i3 = province0.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = province0.getType();
    int i6 = province0.getInitialSupply((int)(short)100);
    java.lang.String str7 = province0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = province0.getType();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 6);
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Victory card, worth 6 victory points"+ "'", str7.equals("Victory card, worth 6 victory points"));
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test013"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    java.lang.String str3 = embargo0.getName();
    int i5 = embargo0.getInitialSupply((int)(short)1);
    int i6 = embargo0.getCoins();
    int i7 = embargo0.getCost();
    java.lang.String str8 = embargo0.getDefinition();
    int i9 = embargo0.getActions();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Embargo"+ "'", str3.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."+ "'", str8.equals("+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test014"); }

    cs362.dominion.Cards.GreatHall greatHall0 = new cs362.dominion.Cards.GreatHall();
    int i1 = greatHall0.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = greatHall0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = greatHall0.getType();
    int i5 = greatHall0.getInitialSupply((int)(byte)-1);
    int i7 = greatHall0.getInitialSupply((int)'a');
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = greatHall0.getType();
    int i9 = greatHall0.getActions();
    int i10 = greatHall0.getVictoryPoints();
    int i12 = greatHall0.getInitialSupply((int)'a');
    int i13 = greatHall0.getActions();
    java.lang.String str14 = greatHall0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1 Victory Point +1 Card; +1 Action."+ "'", str14.equals("1 Victory Point +1 Card; +1 Action."));

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test015"); }

    cs362.dominion.Cards.CouncilRoom councilRoom0 = new cs362.dominion.Cards.CouncilRoom();
    int i1 = councilRoom0.getCards();
    int i2 = councilRoom0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = councilRoom0.getType();
    java.lang.String str4 = councilRoom0.getDefinition();
    int i5 = councilRoom0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = councilRoom0.getType();
    int i7 = councilRoom0.getCards();
    cs362.dominion.Resources.Game game8 = null;
    cs362.dominion.Cards.Bazaar bazaar9 = new cs362.dominion.Cards.Bazaar();
    int i10 = bazaar9.getCards();
    int i11 = bazaar9.getActions();
    int i12 = bazaar9.getCoins();
    int i13 = bazaar9.getActions();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance14 = bazaar9.getType();
    int i15 = bazaar9.getCoins();
    int i16 = bazaar9.getActions();
    int i18 = bazaar9.getInitialSupply(0);
    cs362.dominion.Resources.Game game19 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom20 = new cs362.dominion.Cards.CouncilRoom();
    int i21 = councilRoom20.getCost();
    cs362.dominion.Resources.Game game22 = null;
    cs362.dominion.Cards.Cutpurse cutpurse23 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str24 = cutpurse23.getDefinition();
    int i26 = cutpurse23.getInitialSupply(5);
    int i28 = cutpurse23.getInitialSupply((int)(byte)10);
    java.lang.String str29 = cutpurse23.getDefinition();
    int i30 = cutpurse23.getCost();
    int i32 = cutpurse23.getInitialSupply(6);
    cs362.dominion.Resources.Game game33 = null;
    cs362.dominion.Resources.Player[] player_array34 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player35 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player35, player_array34);
    cs362.dominion.Resources.Supply supply37 = null;
    cs362.dominion.Resources.Option option38 = cutpurse23.playCard(game33, arraylist_player35, supply37);
    cs362.dominion.Resources.Supply supply39 = null;
    cs362.dominion.Resources.Option option40 = councilRoom20.playCard(game22, arraylist_player35, supply39);
    cs362.dominion.Resources.Game game41 = null;
    cs362.dominion.Cards.Cutpurse cutpurse42 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str43 = cutpurse42.getDefinition();
    int i45 = cutpurse42.getInitialSupply(5);
    int i47 = cutpurse42.getInitialSupply((int)(byte)10);
    java.lang.String str48 = cutpurse42.getDefinition();
    cs362.dominion.Resources.Game game49 = null;
    cs362.dominion.Cards.Cutpurse cutpurse50 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str51 = cutpurse50.getDefinition();
    int i53 = cutpurse50.getInitialSupply(5);
    int i55 = cutpurse50.getInitialSupply(8);
    cs362.dominion.Resources.Game game56 = null;
    cs362.dominion.Cards.Gold gold57 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance58 = gold57.getType();
    cs362.dominion.Resources.Game game59 = null;
    cs362.dominion.Resources.Player[] player_array60 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player61 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b62 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player61, player_array60);
    cs362.dominion.Resources.Supply supply63 = null;
    cs362.dominion.Resources.Option option64 = gold57.playCard(game59, arraylist_player61, supply63);
    cs362.dominion.Resources.Supply supply65 = null;
    cs362.dominion.Resources.Option option66 = cutpurse50.playCard(game56, arraylist_player61, supply65);
    cs362.dominion.Resources.Supply supply67 = null;
    cs362.dominion.Resources.Option option68 = cutpurse42.playCard(game49, arraylist_player61, supply67);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance69 = cutpurse42.getType();
    cs362.dominion.Resources.Game game70 = null;
    cs362.dominion.Cards.Cutpurse cutpurse71 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str72 = cutpurse71.getDefinition();
    int i74 = cutpurse71.getInitialSupply(5);
    int i76 = cutpurse71.getInitialSupply((int)(byte)10);
    java.lang.String str77 = cutpurse71.getDefinition();
    int i78 = cutpurse71.getCost();
    int i80 = cutpurse71.getInitialSupply(6);
    cs362.dominion.Resources.Game game81 = null;
    cs362.dominion.Resources.Player[] player_array82 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player83 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b84 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player83, player_array82);
    cs362.dominion.Resources.Supply supply85 = null;
    cs362.dominion.Resources.Option option86 = cutpurse71.playCard(game81, arraylist_player83, supply85);
    cs362.dominion.Resources.Supply supply87 = null;
    cs362.dominion.Resources.Option option88 = cutpurse42.playCard(game70, arraylist_player83, supply87);
    cs362.dominion.Resources.Supply supply89 = null;
    cs362.dominion.Resources.Option option90 = councilRoom20.playCard(game41, arraylist_player83, supply89);
    cs362.dominion.Resources.Supply supply91 = null;
    cs362.dominion.Resources.Option option92 = bazaar9.playCard(game19, arraylist_player83, supply91);
    cs362.dominion.Resources.Supply supply93 = null;
    cs362.dominion.Resources.Option option94 = councilRoom0.playCard(game8, arraylist_player83, supply93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str4.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance14 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance14.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str24.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str29.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str43.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str48.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str51.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance58 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance58.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option68);
    org.junit.Assert.assertTrue("'" + cardTypes_instance69 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance69.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str72.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str77.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option94);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test016"); }

    cs362.dominion.Cards.Bazaar bazaar0 = new cs362.dominion.Cards.Bazaar();
    int i1 = bazaar0.getCards();
    int i2 = bazaar0.getCoins();
    int i3 = bazaar0.getCards();
    int i4 = bazaar0.getActions();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = bazaar0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test017"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = embargo8.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance13 = embargo8.getType();
    int i15 = embargo8.getInitialSupply((int)(short)100);
    java.lang.String str16 = embargo8.getDefinition();
    int i17 = embargo8.getCoins();
    java.lang.String str18 = embargo8.getDefinition();
    int i19 = embargo8.getCoins();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance13 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance13.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."+ "'", str16.equals("+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."+ "'", str18.equals("+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 2);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test018"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    int i2 = cutpurse0.getInitialSupply(0);
    int i4 = cutpurse0.getInitialSupply((int)(short)10);
    java.lang.String str5 = cutpurse0.getDefinition();
    int i7 = cutpurse0.getInitialSupply(7);
    int i8 = cutpurse0.getCoins();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str5.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test019"); }

    cs362.dominion.Cards.Ambassador ambassador0 = new cs362.dominion.Cards.Ambassador();
    int i1 = ambassador0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = ambassador0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = ambassador0.getType();
    java.lang.String str4 = ambassador0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = ambassador0.getType();
    int i7 = ambassador0.getInitialSupply(3);
    java.lang.String str8 = ambassador0.getDefinition();
    java.lang.String str9 = ambassador0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance10 = ambassador0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str4.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str8.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str9.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance10 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance10.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test020"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card12 = hand7.allCards();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls13 = hand7.cardTypesInHand();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card14 = hand7.removeAllCards();
    cs362.dominion.Resources.Deck deck15 = null;
    cs362.dominion.Resources.Hand hand16 = new cs362.dominion.Resources.Hand(arraylist_card14, deck15);
    cs362.dominion.Cards.Gold gold17 = new cs362.dominion.Cards.Gold();
    java.lang.String str18 = gold17.getDefinition();
    int i19 = gold17.getCost();
    int i20 = gold17.getCoins();
    java.lang.String str21 = gold17.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance22 = gold17.getType();
    int i23 = gold17.getCost();
    int i24 = gold17.getCoins();
    cs362.dominion.Resources.Game game25 = null;
    cs362.dominion.Cards.Cutpurse cutpurse26 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str27 = cutpurse26.getDefinition();
    int i29 = cutpurse26.getInitialSupply((int)'4');
    cs362.dominion.Resources.Game game30 = null;
    cs362.dominion.Cards.Cutpurse cutpurse31 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str32 = cutpurse31.getDefinition();
    int i34 = cutpurse31.getInitialSupply(5);
    int i35 = cutpurse31.getCost();
    int i36 = cutpurse31.getCoins();
    cs362.dominion.Resources.Game game37 = null;
    cs362.dominion.Resources.Player[] player_array38 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player39 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player39, player_array38);
    cs362.dominion.Resources.Supply supply41 = null;
    cs362.dominion.Resources.Option option42 = cutpurse31.playCard(game37, arraylist_player39, supply41);
    cs362.dominion.Resources.Supply supply43 = null;
    cs362.dominion.Resources.Option option44 = cutpurse26.playCard(game30, arraylist_player39, supply43);
    cs362.dominion.Resources.Supply supply45 = null;
    cs362.dominion.Resources.Option option46 = gold17.playCard(game25, arraylist_player39, supply45);
    hand16.addCard((cs362.dominion.Cards.Card)gold17);
    int i48 = hand16.getActions();
    int i49 = hand16.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "A gold resource, worth $3"+ "'", str18.equals("A gold resource, worth $3"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "A gold resource, worth $3"+ "'", str21.equals("A gold resource, worth $3"));
    org.junit.Assert.assertTrue("'" + cardTypes_instance22 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance22.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str27.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str32.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 3);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test021"); }

    cs362.dominion.Cards.Baron baron0 = new cs362.dominion.Cards.Baron();
    int i2 = baron0.getInitialSupply(1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = baron0.getType();
    int i5 = baron0.getInitialSupply(5);
    int i7 = baron0.getInitialSupply(6);
    int i8 = baron0.getBuys();
    int i9 = baron0.getCost();
    java.lang.String str10 = baron0.getDefinition();
    int i12 = baron0.getInitialSupply(6);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance13 = baron0.getType();
    int i14 = baron0.getActions();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."+ "'", str10.equals("+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance13 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance13.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test022"); }

    cs362.dominion.Cards.GreatHall greatHall0 = new cs362.dominion.Cards.GreatHall();
    int i1 = greatHall0.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = greatHall0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = greatHall0.getType();
    int i5 = greatHall0.getInitialSupply((int)(byte)-1);
    int i7 = greatHall0.getInitialSupply((int)'a');
    int i8 = greatHall0.getActions();
    int i9 = greatHall0.getVictoryPoints();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test023"); }

    cs362.dominion.Cards.Gold gold0 = new cs362.dominion.Cards.Gold();
    java.lang.String str1 = gold0.getDefinition();
    int i3 = gold0.getInitialSupply((int)'#');
    int i4 = gold0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = gold0.getType();
    int i6 = gold0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "A gold resource, worth $3"+ "'", str1.equals("A gold resource, worth $3"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 6);
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 6);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test024"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    int i8 = hand7.getActions();
    cs362.dominion.Cards.Copper copper9 = new cs362.dominion.Cards.Copper();
    int i11 = copper9.getInitialSupply((int)' ');
    int i13 = copper9.getInitialSupply(0);
    int i14 = copper9.getCost();
    int i15 = copper9.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)copper9);
    int i17 = copper9.getCost();
    int i18 = copper9.getCoins();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test025"); }

    cs362.dominion.Cards.Adventurer adventurer0 = new cs362.dominion.Cards.Adventurer();
    java.lang.String str1 = adventurer0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = adventurer0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = adventurer0.getType();
    java.lang.String str4 = adventurer0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str1.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str4.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test026"); }

    cs362.dominion.Cards.Gardens gardens0 = new cs362.dominion.Cards.Gardens();
    java.lang.String str1 = gardens0.getName();
    java.lang.String str2 = gardens0.getName();
    int i3 = gardens0.getCost();
    java.lang.String str4 = gardens0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = gardens0.getType();
    java.lang.String str6 = gardens0.getDefinition();
    java.lang.String str7 = gardens0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Gardens"+ "'", str1.equals("Gardens"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Gardens"+ "'", str2.equals("Gardens"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Worth 1 Victory for every 10 cards in your deck (rounded down)."+ "'", str4.equals("Worth 1 Victory for every 10 cards in your deck (rounded down)."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Worth 1 Victory for every 10 cards in your deck (rounded down)."+ "'", str6.equals("Worth 1 Victory for every 10 cards in your deck (rounded down)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Worth 1 Victory for every 10 cards in your deck (rounded down)."+ "'", str7.equals("Worth 1 Victory for every 10 cards in your deck (rounded down)."));

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test027"); }

    cs362.dominion.Cards.Copper copper0 = new cs362.dominion.Cards.Copper();
    int i2 = copper0.getInitialSupply((int)' ');
    int i3 = copper0.getCoins();
    int i4 = copper0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = copper0.getType();
    int i7 = copper0.getInitialSupply((int)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 60);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test028"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    int i3 = cutpurse0.getInitialSupply(5);
    int i4 = cutpurse0.getCost();
    int i5 = cutpurse0.getCoins();
    java.lang.String str6 = cutpurse0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = cutpurse0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str6.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test029"); }

    cs362.dominion.Cards.Gardens gardens0 = new cs362.dominion.Cards.Gardens();
    int i1 = gardens0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = gardens0.getType();
    int i3 = gardens0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = gardens0.getType();
    int i5 = gardens0.getCost();
    java.lang.String str6 = gardens0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Worth 1 Victory for every 10 cards in your deck (rounded down)."+ "'", str6.equals("Worth 1 Victory for every 10 cards in your deck (rounded down)."));

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test030"); }

    cs362.dominion.Cards.Copper copper0 = new cs362.dominion.Cards.Copper();
    int i2 = copper0.getInitialSupply((int)' ');
    int i3 = copper0.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = copper0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = copper0.getType();
    int i6 = copper0.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = copper0.getType();
    java.lang.String str8 = copper0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "A copper resource, worth $1"+ "'", str8.equals("A copper resource, worth $1"));

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test031"); }

    cs362.dominion.Cards.Copper copper0 = new cs362.dominion.Cards.Copper();
    int i2 = copper0.getInitialSupply((int)' ');
    int i3 = copper0.getCoins();
    int i4 = copper0.getCoins();
    int i5 = copper0.getCoins();
    int i7 = copper0.getInitialSupply(40);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = copper0.getType();
    int i10 = copper0.getInitialSupply(4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 60);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 60);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test032"); }

    cs362.dominion.Cards.Copper copper0 = new cs362.dominion.Cards.Copper();
    int i2 = copper0.getInitialSupply((int)' ');
    int i3 = copper0.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = copper0.getType();
    int i6 = copper0.getInitialSupply(0);
    int i8 = copper0.getInitialSupply(10);
    int i9 = copper0.getCoins();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test033"); }

    cs362.dominion.Cards.CouncilRoom councilRoom0 = new cs362.dominion.Cards.CouncilRoom();
    int i1 = councilRoom0.getCards();
    int i2 = councilRoom0.getCards();
    java.lang.String str3 = councilRoom0.getDefinition();
    int i4 = councilRoom0.getBuys();
    int i6 = councilRoom0.getInitialSupply((int)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str3.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test034"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    java.lang.String str3 = embargo0.getName();
    java.lang.String str4 = embargo0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = embargo0.getType();
    int i7 = embargo0.getInitialSupply((-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Embargo"+ "'", str3.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."+ "'", str4.equals("+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test035"); }

    cs362.dominion.Cards.Baron baron0 = new cs362.dominion.Cards.Baron();
    int i2 = baron0.getInitialSupply(1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = baron0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = baron0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = baron0.getType();
    int i7 = baron0.getInitialSupply((int)(byte)0);
    int i8 = baron0.getBuys();
    int i10 = baron0.getInitialSupply(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test036"); }

    cs362.dominion.Cards.Province province0 = new cs362.dominion.Cards.Province();
    int i1 = province0.getVictoryPoints();
    int i3 = province0.getInitialSupply(5);
    int i5 = province0.getInitialSupply((int)(byte)100);
    int i7 = province0.getInitialSupply(0);
    int i8 = province0.getCost();
    int i9 = province0.getVictoryPoints();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test037"); }

    cs362.dominion.Cards.Silver silver0 = new cs362.dominion.Cards.Silver();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = silver0.getType();
    int i2 = silver0.getCoins();
    int i3 = silver0.getCoins();
    int i4 = silver0.getCost();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 3);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test038"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getBuys();
    int i4 = embargo0.getInitialSupply(3);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = embargo0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test039"); }

    cs362.dominion.Cards.Ambassador ambassador0 = new cs362.dominion.Cards.Ambassador();
    java.lang.String str1 = ambassador0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = ambassador0.getType();
    int i4 = ambassador0.getInitialSupply((int)(byte)100);
    int i5 = ambassador0.getCost();
    int i7 = ambassador0.getInitialSupply(4);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = ambassador0.getType();
    cs362.dominion.Resources.Game game9 = null;
    cs362.dominion.Cards.Gold gold10 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance11 = gold10.getType();
    cs362.dominion.Resources.Game game12 = null;
    cs362.dominion.Resources.Player[] player_array13 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player14 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player14, player_array13);
    cs362.dominion.Resources.Supply supply16 = null;
    cs362.dominion.Resources.Option option17 = gold10.playCard(game12, arraylist_player14, supply16);
    cs362.dominion.Resources.Supply supply18 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option19 = ambassador0.playCard(game9, arraylist_player14, supply18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str1.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance11 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance11.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option17);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test040"); }

    cs362.dominion.Cards.Smithy smithy0 = new cs362.dominion.Cards.Smithy();
    int i1 = smithy0.getCards();
    int i3 = smithy0.getInitialSupply((int)(byte)-1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = smithy0.getType();
    int i6 = smithy0.getInitialSupply((int)(byte)100);
    int i7 = smithy0.getCost();
    java.lang.String str8 = smithy0.getDefinition();
    int i9 = smithy0.getCost();
    int i10 = smithy0.getCards();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "+3 Cards"+ "'", str8.equals("+3 Cards"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test041"); }

    cs362.dominion.Cards.Duchy duchy0 = new cs362.dominion.Cards.Duchy();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = duchy0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = duchy0.getType();
    int i3 = duchy0.getCost();
    int i5 = duchy0.getInitialSupply((int)(byte)0);
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 8);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test042"); }

    cs362.dominion.Cards.GreatHall greatHall0 = new cs362.dominion.Cards.GreatHall();
    int i1 = greatHall0.getVictoryPoints();
    int i2 = greatHall0.getCards();
    int i4 = greatHall0.getInitialSupply((int)(byte)10);
    int i6 = greatHall0.getInitialSupply((int)(byte)0);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = greatHall0.getType();
    int i9 = greatHall0.getInitialSupply(52);
    java.lang.String str10 = greatHall0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "GreatHall"+ "'", str10.equals("GreatHall"));

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test043"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    int i8 = hand7.size();
    hand7.printHand();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card10 = hand7.allCards();
    cs362.dominion.Resources.Deck deck11 = null;
    cs362.dominion.Resources.Hand hand12 = new cs362.dominion.Resources.Hand(arraylist_card10, deck11);
    cs362.dominion.Resources.Deck deck13 = null;
    cs362.dominion.Resources.Hand hand14 = new cs362.dominion.Resources.Hand(arraylist_card10, deck13);
    int i15 = hand14.size();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card16 = hand14.removeAllCards();
    cs362.dominion.Resources.Deck deck17 = null;
    cs362.dominion.Resources.Hand hand18 = new cs362.dominion.Resources.Hand(arraylist_card16, deck17);
    cs362.dominion.Resources.Deck deck19 = null;
    cs362.dominion.Resources.Hand hand20 = new cs362.dominion.Resources.Hand(arraylist_card16, deck19);
    int i21 = hand20.size();
    hand20.addActionPoints(8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test044"); }

    cs362.dominion.Cards.Baron baron0 = new cs362.dominion.Cards.Baron();
    int i2 = baron0.getInitialSupply(1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = baron0.getType();
    int i4 = baron0.getCoins();
    int i6 = baron0.getInitialSupply((int)(byte)100);
    java.lang.String str7 = baron0.getDefinition();
    int i8 = baron0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."+ "'", str7.equals("+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test045"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    java.lang.String str3 = embargo0.getName();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = embargo0.getType();
    int i6 = embargo0.getInitialSupply(10);
    int i8 = embargo0.getInitialSupply((int)(byte)10);
    int i9 = embargo0.getCoins();
    java.lang.String str10 = embargo0.getDefinition();
    cs362.dominion.Resources.Game game11 = null;
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player12 = null;
    cs362.dominion.Resources.Supply supply13 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option14 = embargo0.playCard(game11, arraylist_player12, supply13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Embargo"+ "'", str3.equals("Embargo"));
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."+ "'", str10.equals("+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."));

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test046"); }

    cs362.dominion.Exceptions.InvalidSelectionException invalidSelectionException1 = new cs362.dominion.Exceptions.InvalidSelectionException("+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card.");

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test047"); }

    cs362.dominion.Cards.Village village0 = new cs362.dominion.Cards.Village();
    int i2 = village0.getInitialSupply(40);
    java.lang.String str3 = village0.getDefinition();
    int i4 = village0.getCards();
    int i6 = village0.getInitialSupply((int)(byte)10);
    java.lang.String str7 = village0.getDefinition();
    int i8 = village0.getCards();
    java.lang.String str9 = village0.getDefinition();
    int i10 = village0.getActions();
    int i11 = village0.getActions();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "+1 Card; +2 Actions."+ "'", str3.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "+1 Card; +2 Actions."+ "'", str7.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "+1 Card; +2 Actions."+ "'", str9.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 2);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test048"); }

    cs362.dominion.Cards.Feast feast0 = new cs362.dominion.Cards.Feast();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = feast0.getType();
    int i3 = feast0.getInitialSupply((int)'#');
    int i4 = feast0.getCost();
    int i6 = feast0.getInitialSupply(5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test049"); }

    cs362.dominion.Cards.Smithy smithy0 = new cs362.dominion.Cards.Smithy();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = smithy0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = smithy0.getType();
    java.lang.String str3 = smithy0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = smithy0.getType();
    int i5 = smithy0.getCost();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "+3 Cards"+ "'", str3.equals("+3 Cards"));
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test050"); }

    cs362.dominion.Cards.Feast feast0 = new cs362.dominion.Cards.Feast();
    int i2 = feast0.getInitialSupply(10);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = feast0.getType();
    java.lang.String str4 = feast0.getDefinition();
    int i6 = feast0.getInitialSupply((int)(byte)100);
    java.lang.String str7 = feast0.getDefinition();
    int i8 = feast0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance9 = feast0.getType();
    int i10 = feast0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Trash this card. Gain a card costing up to $5."+ "'", str4.equals("Trash this card. Gain a card costing up to $5."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Trash this card. Gain a card costing up to $5."+ "'", str7.equals("Trash this card. Gain a card costing up to $5."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance9 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance9.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test051"); }

    cs362.dominion.Cards.GreatHall greatHall0 = new cs362.dominion.Cards.GreatHall();
    int i1 = greatHall0.getVictoryPoints();
    int i3 = greatHall0.getInitialSupply((int)(short)0);
    int i5 = greatHall0.getInitialSupply((int)'#');
    int i7 = greatHall0.getInitialSupply(1);
    int i8 = greatHall0.getActions();
    int i9 = greatHall0.getActions();
    java.lang.String str10 = greatHall0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "1 Victory Point +1 Card; +1 Action."+ "'", str10.equals("1 Victory Point +1 Card; +1 Action."));

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test052"); }

    cs362.dominion.Cards.Bazaar bazaar0 = new cs362.dominion.Cards.Bazaar();
    int i1 = bazaar0.getCards();
    int i2 = bazaar0.getActions();
    int i3 = bazaar0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = bazaar0.getType();
    int i5 = bazaar0.getCards();
    int i6 = bazaar0.getActions();
    int i8 = bazaar0.getInitialSupply(60);
    java.lang.String str9 = bazaar0.getDefinition();
    int i11 = bazaar0.getInitialSupply(41);
    int i13 = bazaar0.getInitialSupply(8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "+1 Card; +2 Actions, +$1."+ "'", str9.equals("+1 Card; +2 Actions, +$1."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test053"); }

    cs362.dominion.Cards.Baron baron0 = new cs362.dominion.Cards.Baron();
    int i2 = baron0.getInitialSupply(1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = baron0.getType();
    int i5 = baron0.getInitialSupply(5);
    int i7 = baron0.getInitialSupply(6);
    java.lang.String str8 = baron0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance9 = baron0.getType();
    int i10 = baron0.getBuys();
    int i12 = baron0.getInitialSupply((int)(byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."+ "'", str8.equals("+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance9 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance9.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test054"); }

    cs362.dominion.Cards.Bazaar bazaar0 = new cs362.dominion.Cards.Bazaar();
    int i1 = bazaar0.getCards();
    int i2 = bazaar0.getActions();
    int i3 = bazaar0.getCost();
    int i4 = bazaar0.getCards();
    int i5 = bazaar0.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = bazaar0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test055"); }

    cs362.dominion.Exceptions.InvalidOptionException invalidOptionException1 = new cs362.dominion.Exceptions.InvalidOptionException("Province");
    java.lang.Throwable[] throwable_array2 = invalidOptionException1.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array2);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test056"); }

    cs362.dominion.Cards.Village village0 = new cs362.dominion.Cards.Village();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = village0.getType();
    java.lang.String str2 = village0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = village0.getType();
    java.lang.String str4 = village0.getDefinition();
    int i5 = village0.getCost();
    int i6 = village0.getCards();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "+1 Card; +2 Actions."+ "'", str2.equals("+1 Card; +2 Actions."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "+1 Card; +2 Actions."+ "'", str4.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test057"); }

    cs362.dominion.Cards.GreatHall greatHall0 = new cs362.dominion.Cards.GreatHall();
    int i1 = greatHall0.getVictoryPoints();
    int i3 = greatHall0.getInitialSupply((int)(short)0);
    int i5 = greatHall0.getInitialSupply((int)'#');
    int i7 = greatHall0.getInitialSupply(1);
    int i8 = greatHall0.getCards();
    int i9 = greatHall0.getCards();
    int i10 = greatHall0.getVictoryPoints();
    int i11 = greatHall0.getCost();
    int i12 = greatHall0.getVictoryPoints();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test058"); }

    cs362.dominion.Cards.Silver silver0 = new cs362.dominion.Cards.Silver();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = silver0.getType();
    int i2 = silver0.getCoins();
    int i3 = silver0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = silver0.getType();
    int i5 = silver0.getCoins();
    int i7 = silver0.getInitialSupply(200);
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 40);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test059"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card12 = hand7.allCards();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls13 = hand7.cardTypesInHand();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card14 = hand7.removeAllCards();
    cs362.dominion.Resources.Deck deck15 = null;
    cs362.dominion.Resources.Hand hand16 = new cs362.dominion.Resources.Hand(arraylist_card14, deck15);
    cs362.dominion.Cards.Ambassador ambassador17 = new cs362.dominion.Cards.Ambassador();
    int i18 = ambassador17.getBuys();
    java.lang.String str19 = ambassador17.getDefinition();
    hand16.addCard((cs362.dominion.Cards.Card)ambassador17);
    int i21 = ambassador17.getCost();
    int i22 = ambassador17.getVictoryPoints();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str19.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test060"); }

    cs362.dominion.Cards.Gardens gardens0 = new cs362.dominion.Cards.Gardens();
    java.lang.String str1 = gardens0.getName();
    java.lang.String str2 = gardens0.getName();
    int i3 = gardens0.getCost();
    int i4 = gardens0.getCoins();
    int i6 = gardens0.getInitialSupply((int)(short)1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = gardens0.getType();
    java.lang.String str8 = gardens0.getDefinition();
    java.lang.String str9 = gardens0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Gardens"+ "'", str1.equals("Gardens"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Gardens"+ "'", str2.equals("Gardens"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Worth 1 Victory for every 10 cards in your deck (rounded down)."+ "'", str8.equals("Worth 1 Victory for every 10 cards in your deck (rounded down)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Worth 1 Victory for every 10 cards in your deck (rounded down)."+ "'", str9.equals("Worth 1 Victory for every 10 cards in your deck (rounded down)."));

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test061"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    int i2 = cutpurse0.getCost();
    java.lang.String str3 = cutpurse0.getDefinition();
    java.lang.String str4 = cutpurse0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = cutpurse0.getType();
    int i7 = cutpurse0.getInitialSupply(60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str3.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str4.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test062"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    int i8 = hand7.getActions();
    int i9 = hand7.getCoins();
    hand7.addActionPoints((int)(short)100);
    cs362.dominion.Cards.Gold gold12 = new cs362.dominion.Cards.Gold();
    java.lang.String str13 = gold12.getDefinition();
    int i14 = gold12.getCost();
    int i15 = gold12.getCoins();
    hand7.addCard((cs362.dominion.Cards.Card)gold12);
    int i18 = gold12.getInitialSupply(8);
    int i19 = gold12.getCoins();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "A gold resource, worth $3"+ "'", str13.equals("A gold resource, worth $3"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 3);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test063"); }

    cs362.dominion.Exceptions.ConfiguationException configuationException1 = new cs362.dominion.Exceptions.ConfiguationException("Feast");
    java.lang.String str2 = configuationException1.toString();
    java.lang.String str3 = configuationException1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "cs362.dominion.Exceptions.ConfiguationException: Feast"+ "'", str2.equals("cs362.dominion.Exceptions.ConfiguationException: Feast"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "cs362.dominion.Exceptions.ConfiguationException: Feast"+ "'", str3.equals("cs362.dominion.Exceptions.ConfiguationException: Feast"));

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test064"); }

    cs362.dominion.Cards.GreatHall greatHall0 = new cs362.dominion.Cards.GreatHall();
    int i1 = greatHall0.getVictoryPoints();
    int i3 = greatHall0.getInitialSupply((int)(short)0);
    java.lang.String str4 = greatHall0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = greatHall0.getType();
    int i6 = greatHall0.getCost();
    int i7 = greatHall0.getCards();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1 Victory Point +1 Card; +1 Action."+ "'", str4.equals("1 Victory Point +1 Card; +1 Action."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test065"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    int i3 = cutpurse0.getInitialSupply(5);
    int i4 = cutpurse0.getCoins();
    java.lang.String str5 = cutpurse0.getDefinition();
    cs362.dominion.Resources.Game game6 = null;
    cs362.dominion.Cards.Cutpurse cutpurse7 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str8 = cutpurse7.getDefinition();
    int i10 = cutpurse7.getInitialSupply(5);
    int i11 = cutpurse7.getCost();
    int i12 = cutpurse7.getCoins();
    cs362.dominion.Resources.Game game13 = null;
    cs362.dominion.Resources.Player[] player_array14 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player15 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player15, player_array14);
    cs362.dominion.Resources.Supply supply17 = null;
    cs362.dominion.Resources.Option option18 = cutpurse7.playCard(game13, arraylist_player15, supply17);
    cs362.dominion.Resources.Supply supply19 = null;
    cs362.dominion.Resources.Option option20 = cutpurse0.playCard(game6, arraylist_player15, supply19);
    java.lang.String str21 = cutpurse0.getDefinition();
    int i22 = cutpurse0.getCoins();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str5.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str8.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str21.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 2);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test066"); }

    cs362.dominion.Cards.Village village0 = new cs362.dominion.Cards.Village();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = village0.getType();
    java.lang.String str2 = village0.getDefinition();
    int i3 = village0.getActions();
    int i4 = village0.getCards();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = village0.getType();
    int i7 = village0.getInitialSupply((int)(byte)1);
    int i8 = village0.getCards();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance9 = village0.getType();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "+1 Card; +2 Actions."+ "'", str2.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance9 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance9.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test067"); }

    cs362.dominion.Cards.Copper copper0 = new cs362.dominion.Cards.Copper();
    int i2 = copper0.getInitialSupply((int)' ');
    int i3 = copper0.getCoins();
    int i4 = copper0.getCost();
    java.lang.String str5 = copper0.getDefinition();
    int i7 = copper0.getInitialSupply((int)(byte)-1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = copper0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "A copper resource, worth $1"+ "'", str5.equals("A copper resource, worth $1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 60);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test068"); }

    cs362.dominion.Cards.Gold gold0 = new cs362.dominion.Cards.Gold();
    java.lang.String str1 = gold0.getDefinition();
    int i3 = gold0.getInitialSupply((int)(short)0);
    java.lang.String str4 = gold0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "A gold resource, worth $3"+ "'", str1.equals("A gold resource, worth $3"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "A gold resource, worth $3"+ "'", str4.equals("A gold resource, worth $3"));

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test069"); }

    cs362.dominion.Cards.Smithy smithy0 = new cs362.dominion.Cards.Smithy();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = smithy0.getType();
    java.lang.String str2 = smithy0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = smithy0.getType();
    int i4 = smithy0.getCards();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = smithy0.getType();
    java.lang.String str6 = smithy0.getDefinition();
    int i8 = smithy0.getInitialSupply(6);
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "+3 Cards"+ "'", str2.equals("+3 Cards"));
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 3);
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "+3 Cards"+ "'", str6.equals("+3 Cards"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test070"); }

    cs362.dominion.Cards.Smithy smithy0 = new cs362.dominion.Cards.Smithy();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = smithy0.getType();
    int i2 = smithy0.getBuys();
    java.lang.String str3 = smithy0.getDefinition();
    int i4 = smithy0.getVictoryPoints();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "+3 Cards"+ "'", str3.equals("+3 Cards"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test071"); }

    cs362.dominion.Cards.Gold gold0 = new cs362.dominion.Cards.Gold();
    java.lang.String str1 = gold0.getDefinition();
    int i2 = gold0.getCost();
    int i4 = gold0.getInitialSupply(0);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = gold0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "A gold resource, worth $3"+ "'", str1.equals("A gold resource, worth $3"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 40);
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test072"); }

    cs362.dominion.Cards.Bazaar bazaar0 = new cs362.dominion.Cards.Bazaar();
    int i1 = bazaar0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = bazaar0.getType();
    int i3 = bazaar0.getBuys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test073"); }

    cs362.dominion.Cards.Adventurer adventurer0 = new cs362.dominion.Cards.Adventurer();
    java.lang.String str1 = adventurer0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = adventurer0.getType();
    int i4 = adventurer0.getInitialSupply(0);
    java.lang.String str5 = adventurer0.getDefinition();
    int i6 = adventurer0.getCost();
    int i8 = adventurer0.getInitialSupply((int)(short)100);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance9 = adventurer0.getType();
    java.lang.String str10 = adventurer0.getDefinition();
    int i11 = adventurer0.getCost();
    java.lang.String str12 = adventurer0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str1.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str5.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance9 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance9.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str10.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str12.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test074"); }

    cs362.dominion.Cards.Province province0 = new cs362.dominion.Cards.Province();
    int i1 = province0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = province0.getType();
    int i3 = province0.getCost();
    int i4 = province0.getCost();
    java.lang.String str5 = province0.getDefinition();
    int i6 = province0.getCost();
    int i7 = province0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 8);
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Victory card, worth 6 victory points"+ "'", str5.equals("Victory card, worth 6 victory points"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 8);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test075"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    int i8 = hand7.getActions();
    int i9 = hand7.getCoins();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls10 = hand7.cardTypesInHand();
    int i11 = hand7.getBuys();
    cs362.dominion.Resources.Game.gamePhase gamePhase_instance12 = cs362.dominion.Resources.Game.gamePhase.BUY;
    cs362.dominion.Resources.Supply supply13 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls14 = hand7.buyOptions(gamePhase_instance12, supply13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    org.junit.Assert.assertTrue("'" + gamePhase_instance12 + "' != '" + cs362.dominion.Resources.Game.gamePhase.BUY + "'", gamePhase_instance12.equals(cs362.dominion.Resources.Game.gamePhase.BUY));

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test076"); }

    cs362.dominion.Cards.Smithy smithy0 = new cs362.dominion.Cards.Smithy();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = smithy0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = smithy0.getType();
    int i4 = smithy0.getInitialSupply(0);
    int i5 = smithy0.getCost();
    int i6 = smithy0.getCost();
    int i8 = smithy0.getInitialSupply(6);
    int i9 = smithy0.getCost();
    int i10 = smithy0.getCost();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test077"); }

    cs362.dominion.Cards.Village village0 = new cs362.dominion.Cards.Village();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = village0.getType();
    int i2 = village0.getCards();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = village0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = village0.getType();
    int i5 = village0.getCost();
    int i6 = village0.getCost();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test078"); }

    cs362.dominion.Cards.Adventurer adventurer0 = new cs362.dominion.Cards.Adventurer();
    java.lang.String str1 = adventurer0.getDefinition();
    int i2 = adventurer0.getCost();
    int i4 = adventurer0.getInitialSupply(10);
    int i6 = adventurer0.getInitialSupply((-1));
    java.lang.String str7 = adventurer0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str1.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str7.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test079"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.size();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card13 = hand7.allCards();
    hand7.addActionPoints(3);
    hand7.addActionPoints((int)(byte)10);
    int i18 = hand7.getCoins();
    hand7.addActionPoints(2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 13);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test080"); }

    cs362.dominion.Cards.GreatHall greatHall0 = new cs362.dominion.Cards.GreatHall();
    int i1 = greatHall0.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = greatHall0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = greatHall0.getType();
    int i5 = greatHall0.getInitialSupply((int)(byte)-1);
    int i7 = greatHall0.getInitialSupply((int)'a');
    java.lang.String str8 = greatHall0.getDefinition();
    int i9 = greatHall0.getCoins();
    int i10 = greatHall0.getCards();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1 Victory Point +1 Card; +1 Action."+ "'", str8.equals("1 Victory Point +1 Card; +1 Action."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test081"); }

    cs362.dominion.Cards.Gold gold0 = new cs362.dominion.Cards.Gold();
    java.lang.String str1 = gold0.getDefinition();
    int i3 = gold0.getInitialSupply((int)(short)0);
    int i4 = gold0.getCost();
    int i5 = gold0.getCoins();
    java.lang.String str6 = gold0.getDefinition();
    int i7 = gold0.getCoins();
    int i8 = gold0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "A gold resource, worth $3"+ "'", str1.equals("A gold resource, worth $3"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "A gold resource, worth $3"+ "'", str6.equals("A gold resource, worth $3"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test082"); }

    cs362.dominion.Cards.Duchy duchy0 = new cs362.dominion.Cards.Duchy();
    int i1 = duchy0.getVictoryPoints();
    int i2 = duchy0.getCoins();
    int i3 = duchy0.getVictoryPoints();
    int i5 = duchy0.getInitialSupply((int)(byte)10);
    int i7 = duchy0.getInitialSupply((-1));
    int i8 = duchy0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance9 = duchy0.getType();
    int i10 = duchy0.getVictoryPoints();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance9 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance9.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test083"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    int i8 = hand7.getActions();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card9 = hand7.allCards();
    int i10 = hand7.size();
    hand7.printHand();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card12 = hand7.allCards();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls13 = hand7.cardTypesInHand();
    int i14 = hand7.getActions();
    int i15 = hand7.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test084"); }

    cs362.dominion.Cards.Baron baron0 = new cs362.dominion.Cards.Baron();
    int i2 = baron0.getInitialSupply((int)(short)-1);
    int i4 = baron0.getInitialSupply((int)(short)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test085"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.size();
    int i13 = hand7.size();
    cs362.dominion.Cards.GreatHall greatHall14 = new cs362.dominion.Cards.GreatHall();
    int i15 = greatHall14.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance16 = greatHall14.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance17 = greatHall14.getType();
    hand7.addCard((cs362.dominion.Cards.Card)greatHall14);
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card19 = hand7.allCards();
    cs362.dominion.Cards.Feast feast20 = new cs362.dominion.Cards.Feast();
    int i21 = feast20.getCost();
    int i23 = feast20.getInitialSupply((int)(short)-1);
    hand7.addCard((cs362.dominion.Cards.Card)feast20);
    int i25 = hand7.getBuys();
    cs362.dominion.Cards.Village village26 = new cs362.dominion.Cards.Village();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance27 = village26.getType();
    java.lang.String str28 = village26.getDefinition();
    int i30 = village26.getInitialSupply((int)(byte)1);
    int i31 = village26.getActions();
    int i32 = village26.getCost();
    int i33 = village26.getActions();
    hand7.addCard((cs362.dominion.Cards.Card)village26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance16 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance16.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance17 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance17.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance27 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance27.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "+1 Card; +2 Actions."+ "'", str28.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 2);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test086"); }

    cs362.dominion.Cards.Feast feast0 = new cs362.dominion.Cards.Feast();
    int i2 = feast0.getInitialSupply(10);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = feast0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = feast0.getType();
    java.lang.String str5 = feast0.getDefinition();
    java.lang.String str6 = feast0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Trash this card. Gain a card costing up to $5."+ "'", str5.equals("Trash this card. Gain a card costing up to $5."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Trash this card. Gain a card costing up to $5."+ "'", str6.equals("Trash this card. Gain a card costing up to $5."));

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test087"); }

    cs362.dominion.Cards.Village village0 = new cs362.dominion.Cards.Village();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = village0.getType();
    java.lang.String str2 = village0.getDefinition();
    int i4 = village0.getInitialSupply((int)(byte)1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = village0.getType();
    int i6 = village0.getActions();
    int i8 = village0.getInitialSupply((int)'4');
    java.lang.String str9 = village0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance10 = village0.getType();
    int i11 = village0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance12 = village0.getType();
    java.lang.String str13 = village0.getDefinition();
    java.lang.String str14 = village0.getDefinition();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "+1 Card; +2 Actions."+ "'", str2.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "+1 Card; +2 Actions."+ "'", str9.equals("+1 Card; +2 Actions."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance10 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance10.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);
    org.junit.Assert.assertTrue("'" + cardTypes_instance12 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance12.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "+1 Card; +2 Actions."+ "'", str13.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "+1 Card; +2 Actions."+ "'", str14.equals("+1 Card; +2 Actions."));

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test088"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    int i3 = cutpurse0.getInitialSupply(5);
    int i4 = cutpurse0.getCost();
    int i5 = cutpurse0.getCoins();
    cs362.dominion.Resources.Game game6 = null;
    cs362.dominion.Resources.Player[] player_array7 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player8 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player8, player_array7);
    cs362.dominion.Resources.Supply supply10 = null;
    cs362.dominion.Resources.Option option11 = cutpurse0.playCard(game6, arraylist_player8, supply10);
    int i12 = cutpurse0.getCost();
    int i13 = cutpurse0.getVictoryPoints();
    int i15 = cutpurse0.getInitialSupply(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 10);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test089"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = embargo8.getActions();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance13 = embargo8.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    org.junit.Assert.assertTrue("'" + cardTypes_instance13 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance13.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test090"); }

    cs362.dominion.Cards.Duchy duchy0 = new cs362.dominion.Cards.Duchy();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = duchy0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = duchy0.getType();
    int i3 = duchy0.getCost();
    int i4 = duchy0.getCost();
    int i6 = duchy0.getInitialSupply((int)(short)1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 8);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test091"); }

    cs362.dominion.Cards.Mine mine0 = new cs362.dominion.Cards.Mine();
    int i1 = mine0.getActions();
    int i2 = mine0.getActions();
    int i4 = mine0.getInitialSupply(40);
    int i5 = mine0.getCoins();
    java.lang.String str6 = mine0.getDefinition();
    int i8 = mine0.getInitialSupply(0);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance9 = mine0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."+ "'", str6.equals("Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance9 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance9.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test092"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    int i3 = cutpurse0.getInitialSupply(5);
    int i5 = cutpurse0.getInitialSupply((int)(byte)10);
    java.lang.String str6 = cutpurse0.getDefinition();
    cs362.dominion.Resources.Game game7 = null;
    cs362.dominion.Cards.Cutpurse cutpurse8 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str9 = cutpurse8.getDefinition();
    int i11 = cutpurse8.getInitialSupply(5);
    int i13 = cutpurse8.getInitialSupply(8);
    cs362.dominion.Resources.Game game14 = null;
    cs362.dominion.Cards.Gold gold15 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance16 = gold15.getType();
    cs362.dominion.Resources.Game game17 = null;
    cs362.dominion.Resources.Player[] player_array18 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player19 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player19, player_array18);
    cs362.dominion.Resources.Supply supply21 = null;
    cs362.dominion.Resources.Option option22 = gold15.playCard(game17, arraylist_player19, supply21);
    cs362.dominion.Resources.Supply supply23 = null;
    cs362.dominion.Resources.Option option24 = cutpurse8.playCard(game14, arraylist_player19, supply23);
    cs362.dominion.Resources.Supply supply25 = null;
    cs362.dominion.Resources.Option option26 = cutpurse0.playCard(game7, arraylist_player19, supply25);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance27 = cutpurse0.getType();
    cs362.dominion.Resources.Game game28 = null;
    cs362.dominion.Cards.Cutpurse cutpurse29 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str30 = cutpurse29.getDefinition();
    int i32 = cutpurse29.getInitialSupply(5);
    int i34 = cutpurse29.getInitialSupply((int)(byte)10);
    java.lang.String str35 = cutpurse29.getDefinition();
    int i36 = cutpurse29.getCost();
    int i38 = cutpurse29.getInitialSupply(6);
    cs362.dominion.Resources.Game game39 = null;
    cs362.dominion.Resources.Player[] player_array40 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player41 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player41, player_array40);
    cs362.dominion.Resources.Supply supply43 = null;
    cs362.dominion.Resources.Option option44 = cutpurse29.playCard(game39, arraylist_player41, supply43);
    cs362.dominion.Resources.Supply supply45 = null;
    cs362.dominion.Resources.Option option46 = cutpurse0.playCard(game28, arraylist_player41, supply45);
    int i47 = cutpurse0.getCost();
    java.lang.String str48 = cutpurse0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str6.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str9.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance16 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance16.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option26);
    org.junit.Assert.assertTrue("'" + cardTypes_instance27 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance27.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str30.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str35.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str48.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test093"); }

    cs362.dominion.Cards.CouncilRoom councilRoom0 = new cs362.dominion.Cards.CouncilRoom();
    int i1 = councilRoom0.getCards();
    int i2 = councilRoom0.getCost();
    java.lang.String str3 = councilRoom0.getDefinition();
    int i4 = councilRoom0.getCards();
    java.lang.String str5 = councilRoom0.getDefinition();
    int i6 = councilRoom0.getBuys();
    int i7 = councilRoom0.getCards();
    java.lang.String str8 = councilRoom0.getDefinition();
    int i9 = councilRoom0.getBuys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str3.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str5.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str8.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test094"); }

    cs362.dominion.Cards.Silver silver0 = new cs362.dominion.Cards.Silver();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = silver0.getType();
    int i3 = silver0.getInitialSupply((int)(byte)-1);
    java.lang.String str4 = silver0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = silver0.getType();
    java.lang.String str6 = silver0.getDefinition();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "A silver resource, worth $2"+ "'", str4.equals("A silver resource, worth $2"));
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "A silver resource, worth $2"+ "'", str6.equals("A silver resource, worth $2"));

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test095"); }

    cs362.dominion.Cards.Gardens gardens0 = new cs362.dominion.Cards.Gardens();
    java.lang.String str1 = gardens0.getName();
    java.lang.String str2 = gardens0.getName();
    int i3 = gardens0.getVictoryPoints();
    int i5 = gardens0.getInitialSupply(101);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = gardens0.getType();
    java.lang.String str7 = gardens0.getDefinition();
    int i8 = gardens0.getCost();
    int i9 = gardens0.getCost();
    java.lang.String str10 = gardens0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Gardens"+ "'", str1.equals("Gardens"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Gardens"+ "'", str2.equals("Gardens"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Worth 1 Victory for every 10 cards in your deck (rounded down)."+ "'", str7.equals("Worth 1 Victory for every 10 cards in your deck (rounded down)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Worth 1 Victory for every 10 cards in your deck (rounded down)."+ "'", str10.equals("Worth 1 Victory for every 10 cards in your deck (rounded down)."));

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test096"); }

    cs362.dominion.Cards.Copper copper0 = new cs362.dominion.Cards.Copper();
    int i2 = copper0.getInitialSupply((int)' ');
    int i4 = copper0.getInitialSupply(0);
    int i5 = copper0.getCost();
    int i7 = copper0.getInitialSupply((-1));
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = copper0.getType();
    int i9 = copper0.getCoins();
    java.lang.String str10 = copper0.getDefinition();
    java.lang.String str11 = copper0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 60);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "A copper resource, worth $1"+ "'", str10.equals("A copper resource, worth $1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "A copper resource, worth $1"+ "'", str11.equals("A copper resource, worth $1"));

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test097"); }

    cs362.dominion.Cards.Adventurer adventurer0 = new cs362.dominion.Cards.Adventurer();
    int i2 = adventurer0.getInitialSupply(40);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = adventurer0.getType();
    int i4 = adventurer0.getVictoryPoints();
    int i5 = adventurer0.getBuys();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = adventurer0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test098"); }

    cs362.dominion.Cards.Feast feast0 = new cs362.dominion.Cards.Feast();
    int i1 = feast0.getCost();
    int i2 = feast0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = feast0.getType();
    int i4 = feast0.getCost();
    java.lang.String str5 = feast0.getDefinition();
    java.lang.String str6 = feast0.getDefinition();
    int i8 = feast0.getInitialSupply(7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Trash this card. Gain a card costing up to $5."+ "'", str5.equals("Trash this card. Gain a card costing up to $5."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Trash this card. Gain a card costing up to $5."+ "'", str6.equals("Trash this card. Gain a card costing up to $5."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test099"); }

    cs362.dominion.Cards.Gardens gardens0 = new cs362.dominion.Cards.Gardens();
    java.lang.String str1 = gardens0.getName();
    java.lang.String str2 = gardens0.getName();
    int i3 = gardens0.getCost();
    int i4 = gardens0.getCoins();
    int i6 = gardens0.getInitialSupply((int)(short)1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = gardens0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = gardens0.getType();
    java.lang.String str9 = gardens0.getDefinition();
    int i11 = gardens0.getInitialSupply((int)(byte)1);
    java.lang.String str12 = gardens0.getDefinition();
    int i13 = gardens0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance14 = gardens0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Gardens"+ "'", str1.equals("Gardens"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Gardens"+ "'", str2.equals("Gardens"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Worth 1 Victory for every 10 cards in your deck (rounded down)."+ "'", str9.equals("Worth 1 Victory for every 10 cards in your deck (rounded down)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Worth 1 Victory for every 10 cards in your deck (rounded down)."+ "'", str12.equals("Worth 1 Victory for every 10 cards in your deck (rounded down)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance14 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance14.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test100"); }

    cs362.dominion.Cards.Smithy smithy0 = new cs362.dominion.Cards.Smithy();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = smithy0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = smithy0.getType();
    java.lang.String str3 = smithy0.getDefinition();
    java.lang.String str4 = smithy0.getDefinition();
    int i5 = smithy0.getCards();
    int i7 = smithy0.getInitialSupply((int)'#');
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "+3 Cards"+ "'", str3.equals("+3 Cards"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "+3 Cards"+ "'", str4.equals("+3 Cards"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test101"); }

    cs362.dominion.Cards.Copper copper0 = new cs362.dominion.Cards.Copper();
    int i2 = copper0.getInitialSupply((int)' ');
    int i4 = copper0.getInitialSupply(0);
    int i5 = copper0.getCost();
    int i6 = copper0.getCost();
    int i7 = copper0.getCost();
    int i8 = copper0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test102"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    int i3 = cutpurse0.getInitialSupply(5);
    int i4 = cutpurse0.getCost();
    int i5 = cutpurse0.getCoins();
    cs362.dominion.Resources.Game game6 = null;
    cs362.dominion.Resources.Player[] player_array7 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player8 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player8, player_array7);
    cs362.dominion.Resources.Supply supply10 = null;
    cs362.dominion.Resources.Option option11 = cutpurse0.playCard(game6, arraylist_player8, supply10);
    java.lang.String str12 = cutpurse0.getName();
    java.lang.String str13 = cutpurse0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Cutpurse"+ "'", str12.equals("Cutpurse"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str13.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test103"); }

    cs362.dominion.Cards.Mine mine0 = new cs362.dominion.Cards.Mine();
    int i2 = mine0.getInitialSupply((int)'a');
    int i3 = mine0.getCost();
    int i4 = mine0.getCost();
    int i6 = mine0.getInitialSupply((int)(byte)0);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = mine0.getType();
    int i9 = mine0.getInitialSupply(0);
    int i11 = mine0.getInitialSupply(2);
    int i12 = mine0.getCost();
    java.lang.String str13 = mine0.getDefinition();
    int i14 = mine0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."+ "'", str13.equals("Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 5);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test104"); }

    cs362.dominion.Cards.Ambassador ambassador0 = new cs362.dominion.Cards.Ambassador();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = ambassador0.getType();
    int i2 = ambassador0.getCost();
    java.lang.String str3 = ambassador0.getDefinition();
    java.lang.String str4 = ambassador0.getDefinition();
    java.lang.String str5 = ambassador0.getDefinition();
    java.lang.String str6 = ambassador0.getDefinition();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str3.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str4.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str5.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str6.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test105"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = embargo8.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance13 = embargo8.getType();
    int i15 = embargo8.getInitialSupply((int)(short)100);
    int i16 = embargo8.getBuys();
    int i17 = embargo8.getCoins();
    int i18 = embargo8.getCoins();
    java.lang.String str19 = embargo8.getName();
    java.lang.String str20 = embargo8.getDefinition();
    int i21 = embargo8.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance13 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance13.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Embargo"+ "'", str19.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."+ "'", str20.equals("+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 2);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test106"); }

    cs362.dominion.Cards.Ambassador ambassador0 = new cs362.dominion.Cards.Ambassador();
    int i1 = ambassador0.getBuys();
    cs362.dominion.Resources.Game game2 = null;
    cs362.dominion.Cards.Cutpurse cutpurse3 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str4 = cutpurse3.getDefinition();
    int i6 = cutpurse3.getInitialSupply(5);
    int i8 = cutpurse3.getInitialSupply(8);
    cs362.dominion.Resources.Game game9 = null;
    cs362.dominion.Cards.Gold gold10 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance11 = gold10.getType();
    cs362.dominion.Resources.Game game12 = null;
    cs362.dominion.Resources.Player[] player_array13 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player14 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player14, player_array13);
    cs362.dominion.Resources.Supply supply16 = null;
    cs362.dominion.Resources.Option option17 = gold10.playCard(game12, arraylist_player14, supply16);
    cs362.dominion.Resources.Supply supply18 = null;
    cs362.dominion.Resources.Option option19 = cutpurse3.playCard(game9, arraylist_player14, supply18);
    int i20 = cutpurse3.getCoins();
    int i21 = cutpurse3.getCost();
    int i23 = cutpurse3.getInitialSupply((int)(byte)100);
    cs362.dominion.Resources.Game game24 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom25 = new cs362.dominion.Cards.CouncilRoom();
    int i26 = councilRoom25.getCards();
    int i27 = councilRoom25.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance28 = councilRoom25.getType();
    int i29 = councilRoom25.getBuys();
    java.lang.String str30 = councilRoom25.getDefinition();
    int i32 = councilRoom25.getInitialSupply((int)'a');
    cs362.dominion.Resources.Game game33 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom34 = new cs362.dominion.Cards.CouncilRoom();
    int i35 = councilRoom34.getCards();
    int i37 = councilRoom34.getInitialSupply(3);
    int i38 = councilRoom34.getCards();
    int i39 = councilRoom34.getBuys();
    int i41 = councilRoom34.getInitialSupply((int)'#');
    int i42 = councilRoom34.getCards();
    cs362.dominion.Resources.Game game43 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom44 = new cs362.dominion.Cards.CouncilRoom();
    int i45 = councilRoom44.getCards();
    int i46 = councilRoom44.getCost();
    java.lang.String str47 = councilRoom44.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance48 = councilRoom44.getType();
    int i50 = councilRoom44.getInitialSupply(3);
    int i51 = councilRoom44.getCost();
    int i52 = councilRoom44.getCost();
    int i53 = councilRoom44.getBuys();
    cs362.dominion.Resources.Game game54 = null;
    cs362.dominion.Cards.Gold gold55 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance56 = gold55.getType();
    cs362.dominion.Resources.Game game57 = null;
    cs362.dominion.Resources.Player[] player_array58 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player59 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b60 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player59, player_array58);
    cs362.dominion.Resources.Supply supply61 = null;
    cs362.dominion.Resources.Option option62 = gold55.playCard(game57, arraylist_player59, supply61);
    cs362.dominion.Resources.Supply supply63 = null;
    cs362.dominion.Resources.Option option64 = councilRoom44.playCard(game54, arraylist_player59, supply63);
    cs362.dominion.Resources.Supply supply65 = null;
    cs362.dominion.Resources.Option option66 = councilRoom34.playCard(game43, arraylist_player59, supply65);
    cs362.dominion.Resources.Supply supply67 = null;
    cs362.dominion.Resources.Option option68 = councilRoom25.playCard(game33, arraylist_player59, supply67);
    cs362.dominion.Resources.Supply supply69 = null;
    cs362.dominion.Resources.Option option70 = cutpurse3.playCard(game24, arraylist_player59, supply69);
    cs362.dominion.Resources.Supply supply71 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option72 = ambassador0.playCard(game2, arraylist_player59, supply71);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str4.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance11 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance11.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance28 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance28.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str30.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str47.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance48 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance48.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance56 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance56.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option70);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test107"); }

    cs362.dominion.Cards.Province province0 = new cs362.dominion.Cards.Province();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = province0.getType();
    int i2 = province0.getCost();
    int i3 = province0.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = province0.getType();
    int i6 = province0.getInitialSupply((int)(short)100);
    int i8 = province0.getInitialSupply(6);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance9 = province0.getType();
    int i10 = province0.getCost();
    int i11 = province0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance12 = province0.getType();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 6);
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    org.junit.Assert.assertTrue("'" + cardTypes_instance9 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance9.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 8);
    org.junit.Assert.assertTrue("'" + cardTypes_instance12 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance12.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test108"); }

    cs362.dominion.Cards.Bazaar bazaar0 = new cs362.dominion.Cards.Bazaar();
    int i1 = bazaar0.getCards();
    int i2 = bazaar0.getActions();
    int i3 = bazaar0.getCards();
    int i4 = bazaar0.getActions();
    int i5 = bazaar0.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = bazaar0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test109"); }

    cs362.dominion.Exceptions.ConfiguationException configuationException1 = new cs362.dominion.Exceptions.ConfiguationException("+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile.");
    cs362.dominion.Exceptions.InvalidOptionException invalidOptionException3 = new cs362.dominion.Exceptions.InvalidOptionException("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it.");
    java.lang.Throwable[] throwable_array4 = invalidOptionException3.getSuppressed();
    configuationException1.addSuppressed((java.lang.Throwable)invalidOptionException3);
    java.lang.String str6 = configuationException1.toString();
    java.lang.Throwable[] throwable_array7 = configuationException1.getSuppressed();
    java.lang.String str8 = configuationException1.toString();
    java.lang.Throwable[] throwable_array9 = configuationException1.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "cs362.dominion.Exceptions.ConfiguationException: +$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."+ "'", str6.equals("cs362.dominion.Exceptions.ConfiguationException: +$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "cs362.dominion.Exceptions.ConfiguationException: +$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."+ "'", str8.equals("cs362.dominion.Exceptions.ConfiguationException: +$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array9);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test110"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    java.lang.String str3 = embargo0.getName();
    int i5 = embargo0.getInitialSupply((int)(short)1);
    int i6 = embargo0.getCost();
    int i7 = embargo0.getCoins();
    int i8 = embargo0.getCost();
    int i9 = embargo0.getCoins();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Embargo"+ "'", str3.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test111"); }

    cs362.dominion.Cards.Feast feast0 = new cs362.dominion.Cards.Feast();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = feast0.getType();
    int i2 = feast0.getVictoryPoints();
    int i4 = feast0.getInitialSupply((-1));
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = feast0.getType();
    java.lang.String str6 = feast0.getDefinition();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Trash this card. Gain a card costing up to $5."+ "'", str6.equals("Trash this card. Gain a card costing up to $5."));

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test112"); }

    cs362.dominion.Cards.Province province0 = new cs362.dominion.Cards.Province();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = province0.getType();
    int i2 = province0.getCost();
    int i3 = province0.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = province0.getType();
    int i6 = province0.getInitialSupply((int)(short)100);
    int i7 = province0.getVictoryPoints();
    int i8 = province0.getVictoryPoints();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 6);
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test113"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    java.lang.String str3 = embargo0.getName();
    int i5 = embargo0.getInitialSupply((int)(short)1);
    int i6 = embargo0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = embargo0.getType();
    cs362.dominion.Resources.Game game8 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom9 = new cs362.dominion.Cards.CouncilRoom();
    int i10 = councilRoom9.getCards();
    int i11 = councilRoom9.getCards();
    java.lang.String str12 = councilRoom9.getDefinition();
    int i13 = councilRoom9.getBuys();
    int i14 = councilRoom9.getCards();
    int i16 = councilRoom9.getInitialSupply(1);
    int i17 = councilRoom9.getCost();
    int i18 = councilRoom9.getCost();
    cs362.dominion.Resources.Game game19 = null;
    cs362.dominion.Cards.Cutpurse cutpurse20 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str21 = cutpurse20.getDefinition();
    int i23 = cutpurse20.getInitialSupply(5);
    int i25 = cutpurse20.getInitialSupply((int)(byte)10);
    java.lang.String str26 = cutpurse20.getDefinition();
    cs362.dominion.Resources.Game game27 = null;
    cs362.dominion.Cards.Cutpurse cutpurse28 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str29 = cutpurse28.getDefinition();
    int i31 = cutpurse28.getInitialSupply(5);
    int i33 = cutpurse28.getInitialSupply(8);
    cs362.dominion.Resources.Game game34 = null;
    cs362.dominion.Cards.Gold gold35 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance36 = gold35.getType();
    cs362.dominion.Resources.Game game37 = null;
    cs362.dominion.Resources.Player[] player_array38 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player39 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player39, player_array38);
    cs362.dominion.Resources.Supply supply41 = null;
    cs362.dominion.Resources.Option option42 = gold35.playCard(game37, arraylist_player39, supply41);
    cs362.dominion.Resources.Supply supply43 = null;
    cs362.dominion.Resources.Option option44 = cutpurse28.playCard(game34, arraylist_player39, supply43);
    cs362.dominion.Resources.Supply supply45 = null;
    cs362.dominion.Resources.Option option46 = cutpurse20.playCard(game27, arraylist_player39, supply45);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance47 = cutpurse20.getType();
    cs362.dominion.Resources.Game game48 = null;
    cs362.dominion.Cards.Cutpurse cutpurse49 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str50 = cutpurse49.getDefinition();
    int i52 = cutpurse49.getInitialSupply(5);
    int i54 = cutpurse49.getInitialSupply((int)(byte)10);
    java.lang.String str55 = cutpurse49.getDefinition();
    int i56 = cutpurse49.getCost();
    int i58 = cutpurse49.getInitialSupply(6);
    cs362.dominion.Resources.Game game59 = null;
    cs362.dominion.Resources.Player[] player_array60 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player61 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b62 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player61, player_array60);
    cs362.dominion.Resources.Supply supply63 = null;
    cs362.dominion.Resources.Option option64 = cutpurse49.playCard(game59, arraylist_player61, supply63);
    cs362.dominion.Resources.Supply supply65 = null;
    cs362.dominion.Resources.Option option66 = cutpurse20.playCard(game48, arraylist_player61, supply65);
    cs362.dominion.Resources.Supply supply67 = null;
    cs362.dominion.Resources.Option option68 = councilRoom9.playCard(game19, arraylist_player61, supply67);
    cs362.dominion.Resources.Game game69 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom70 = new cs362.dominion.Cards.CouncilRoom();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance71 = councilRoom70.getType();
    cs362.dominion.Resources.Game game72 = null;
    cs362.dominion.Cards.Cutpurse cutpurse73 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str74 = cutpurse73.getDefinition();
    int i76 = cutpurse73.getInitialSupply(5);
    int i78 = cutpurse73.getInitialSupply(8);
    cs362.dominion.Resources.Game game79 = null;
    cs362.dominion.Cards.Gold gold80 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance81 = gold80.getType();
    cs362.dominion.Resources.Game game82 = null;
    cs362.dominion.Resources.Player[] player_array83 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player84 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b85 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player84, player_array83);
    cs362.dominion.Resources.Supply supply86 = null;
    cs362.dominion.Resources.Option option87 = gold80.playCard(game82, arraylist_player84, supply86);
    cs362.dominion.Resources.Supply supply88 = null;
    cs362.dominion.Resources.Option option89 = cutpurse73.playCard(game79, arraylist_player84, supply88);
    cs362.dominion.Resources.Supply supply90 = null;
    cs362.dominion.Resources.Option option91 = councilRoom70.playCard(game72, arraylist_player84, supply90);
    cs362.dominion.Resources.Supply supply92 = null;
    cs362.dominion.Resources.Option option93 = councilRoom9.playCard(game69, arraylist_player84, supply92);
    cs362.dominion.Resources.Supply supply94 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option95 = embargo0.playCard(game8, arraylist_player84, supply94);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Embargo"+ "'", str3.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str12.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str21.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str26.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str29.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance36 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance36.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option46);
    org.junit.Assert.assertTrue("'" + cardTypes_instance47 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance47.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str50.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str55.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option68);
    org.junit.Assert.assertTrue("'" + cardTypes_instance71 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance71.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str74.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance81 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance81.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option93);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test114"); }

    cs362.dominion.Cards.Gold gold0 = new cs362.dominion.Cards.Gold();
    java.lang.String str1 = gold0.getDefinition();
    java.lang.String str2 = gold0.getDefinition();
    java.lang.String str3 = gold0.getDefinition();
    int i4 = gold0.getCost();
    int i5 = gold0.getCost();
    int i6 = gold0.getActions();
    int i7 = gold0.getCost();
    java.lang.String str8 = gold0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "A gold resource, worth $3"+ "'", str1.equals("A gold resource, worth $3"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "A gold resource, worth $3"+ "'", str2.equals("A gold resource, worth $3"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "A gold resource, worth $3"+ "'", str3.equals("A gold resource, worth $3"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "A gold resource, worth $3"+ "'", str8.equals("A gold resource, worth $3"));

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test115"); }

    cs362.dominion.Cards.Adventurer adventurer0 = new cs362.dominion.Cards.Adventurer();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = adventurer0.getType();
    int i3 = adventurer0.getInitialSupply((int)(short)0);
    int i4 = adventurer0.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = adventurer0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = adventurer0.getType();
    java.lang.String str7 = adventurer0.getDefinition();
    int i9 = adventurer0.getInitialSupply(200);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance10 = adventurer0.getType();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str7.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance10 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance10.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test116"); }

    cs362.dominion.Cards.CouncilRoom councilRoom0 = new cs362.dominion.Cards.CouncilRoom();
    int i1 = councilRoom0.getCards();
    int i2 = councilRoom0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = councilRoom0.getType();
    int i4 = councilRoom0.getBuys();
    cs362.dominion.Resources.Game game5 = null;
    cs362.dominion.Resources.Player[] player_array6 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player7 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player7, player_array6);
    cs362.dominion.Resources.Supply supply9 = null;
    cs362.dominion.Resources.Option option10 = councilRoom0.playCard(game5, arraylist_player7, supply9);
    int i11 = councilRoom0.getCost();
    int i13 = councilRoom0.getInitialSupply((int)' ');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test117"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    hand7.printHand();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card13 = hand7.allCards();
    cs362.dominion.Resources.Deck deck14 = null;
    cs362.dominion.Resources.Hand hand15 = new cs362.dominion.Resources.Hand(arraylist_card13, deck14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card13);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test118"); }

    cs362.dominion.Exceptions.ConfiguationException configuationException1 = new cs362.dominion.Exceptions.ConfiguationException("");
    cs362.dominion.Exceptions.ConfiguationException configuationException3 = new cs362.dominion.Exceptions.ConfiguationException("A copper resource, worth $1");
    configuationException1.addSuppressed((java.lang.Throwable)configuationException3);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test119"); }

    cs362.dominion.Cards.GreatHall greatHall0 = new cs362.dominion.Cards.GreatHall();
    int i1 = greatHall0.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = greatHall0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = greatHall0.getType();
    int i5 = greatHall0.getInitialSupply((int)(byte)-1);
    int i7 = greatHall0.getInitialSupply((int)'a');
    int i8 = greatHall0.getCards();
    int i10 = greatHall0.getInitialSupply(9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test120"); }

    cs362.dominion.Cards.Copper copper0 = new cs362.dominion.Cards.Copper();
    int i2 = copper0.getInitialSupply((int)' ');
    int i3 = copper0.getCost();
    int i5 = copper0.getInitialSupply(3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 60);

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test121"); }

    cs362.dominion.Cards.GreatHall greatHall0 = new cs362.dominion.Cards.GreatHall();
    int i1 = greatHall0.getVictoryPoints();
    int i3 = greatHall0.getInitialSupply((int)(short)0);
    int i5 = greatHall0.getInitialSupply((int)'#');
    java.lang.String str6 = greatHall0.getDefinition();
    int i7 = greatHall0.getCards();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "1 Victory Point +1 Card; +1 Action."+ "'", str6.equals("1 Victory Point +1 Card; +1 Action."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test122"); }

    cs362.dominion.Cards.Feast feast0 = new cs362.dominion.Cards.Feast();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = feast0.getType();
    int i3 = feast0.getInitialSupply(7);
    java.lang.String str4 = feast0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = feast0.getType();
    java.lang.String str6 = feast0.getDefinition();
    int i7 = feast0.getCost();
    int i8 = feast0.getCost();
    java.lang.String str9 = feast0.getDefinition();
    int i10 = feast0.getCost();
    java.lang.String str11 = feast0.getDefinition();
    java.lang.String str12 = feast0.getDefinition();
    int i14 = feast0.getInitialSupply((int)(byte)0);
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Trash this card. Gain a card costing up to $5."+ "'", str4.equals("Trash this card. Gain a card costing up to $5."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Trash this card. Gain a card costing up to $5."+ "'", str6.equals("Trash this card. Gain a card costing up to $5."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Trash this card. Gain a card costing up to $5."+ "'", str9.equals("Trash this card. Gain a card costing up to $5."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Trash this card. Gain a card costing up to $5."+ "'", str11.equals("Trash this card. Gain a card costing up to $5."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Trash this card. Gain a card costing up to $5."+ "'", str12.equals("Trash this card. Gain a card costing up to $5."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 10);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test123"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card12 = hand7.allCards();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls13 = hand7.cardTypesInHand();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card14 = hand7.removeAllCards();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card15 = hand7.removeAllCards();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls16 = hand7.cardTypesInHand();
    int i17 = hand7.getCoins();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card18 = hand7.removeAllCards();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls19 = hand7.cardTypesInHand();
    int i20 = hand7.getCoins();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test124"); }

    cs362.dominion.Cards.Adventurer adventurer0 = new cs362.dominion.Cards.Adventurer();
    java.lang.String str1 = adventurer0.getDefinition();
    int i2 = adventurer0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = adventurer0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = adventurer0.getType();
    java.lang.String str5 = adventurer0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str1.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 6);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str5.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test125"); }

    cs362.dominion.Cards.Adventurer adventurer0 = new cs362.dominion.Cards.Adventurer();
    java.lang.String str1 = adventurer0.getDefinition();
    int i2 = adventurer0.getCost();
    int i4 = adventurer0.getInitialSupply(10);
    int i6 = adventurer0.getInitialSupply((-1));
    int i8 = adventurer0.getInitialSupply((int)'4');
    int i10 = adventurer0.getInitialSupply((int)(byte)-1);
    java.lang.String str11 = adventurer0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str1.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str11.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test126"); }

    cs362.dominion.Cards.Baron baron0 = new cs362.dominion.Cards.Baron();
    int i2 = baron0.getInitialSupply(1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = baron0.getType();
    int i4 = baron0.getCoins();
    int i6 = baron0.getInitialSupply((int)(byte)10);
    int i7 = baron0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = baron0.getType();
    int i9 = baron0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test127"); }

    cs362.dominion.Cards.Smithy smithy0 = new cs362.dominion.Cards.Smithy();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = smithy0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = smithy0.getType();
    java.lang.String str3 = smithy0.getDefinition();
    int i4 = smithy0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = smithy0.getType();
    int i7 = smithy0.getInitialSupply((int)(byte)-1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "+3 Cards"+ "'", str3.equals("+3 Cards"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test128"); }

    cs362.dominion.Cards.GreatHall greatHall0 = new cs362.dominion.Cards.GreatHall();
    int i1 = greatHall0.getVictoryPoints();
    int i3 = greatHall0.getInitialSupply((int)(short)0);
    java.lang.String str4 = greatHall0.getDefinition();
    java.lang.String str5 = greatHall0.getDefinition();
    int i6 = greatHall0.getVictoryPoints();
    int i8 = greatHall0.getInitialSupply(0);
    int i9 = greatHall0.getCost();
    int i10 = greatHall0.getCards();
    int i11 = greatHall0.getVictoryPoints();
    int i13 = greatHall0.getInitialSupply(0);
    int i14 = greatHall0.getActions();
    int i15 = greatHall0.getCost();
    int i16 = greatHall0.getActions();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1 Victory Point +1 Card; +1 Action."+ "'", str4.equals("1 Victory Point +1 Card; +1 Action."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1 Victory Point +1 Card; +1 Action."+ "'", str5.equals("1 Victory Point +1 Card; +1 Action."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test129"); }

    cs362.dominion.Cards.Gold gold0 = new cs362.dominion.Cards.Gold();
    int i1 = gold0.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = gold0.getType();
    int i4 = gold0.getInitialSupply(4);
    int i5 = gold0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 6);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test130"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    int i3 = cutpurse0.getInitialSupply((int)'4');
    int i4 = cutpurse0.getCoins();
    int i5 = cutpurse0.getCoins();
    int i6 = cutpurse0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test131"); }

    cs362.dominion.Cards.Adventurer adventurer0 = new cs362.dominion.Cards.Adventurer();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = adventurer0.getType();
    int i3 = adventurer0.getInitialSupply((int)(short)0);
    int i4 = adventurer0.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = adventurer0.getType();
    int i6 = adventurer0.getCost();
    int i8 = adventurer0.getInitialSupply(6);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance9 = adventurer0.getType();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance9 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance9.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test132"); }

    cs362.dominion.Cards.Mine mine0 = new cs362.dominion.Cards.Mine();
    java.lang.String str1 = mine0.getDefinition();
    int i2 = mine0.getCost();
    int i3 = mine0.getCost();
    int i4 = mine0.getCost();
    java.lang.String str5 = mine0.getDefinition();
    int i6 = mine0.getCost();
    java.lang.String str7 = mine0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = mine0.getType();
    java.lang.String str9 = mine0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."+ "'", str1.equals("Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."+ "'", str5.equals("Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."+ "'", str7.equals("Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."+ "'", str9.equals("Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."));

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test133"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card12 = hand7.allCards();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls13 = hand7.cardTypesInHand();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card14 = hand7.removeAllCards();
    hand7.addActionPoints((int)(byte)100);
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card17 = hand7.allCards();
    cs362.dominion.Resources.Deck deck18 = null;
    cs362.dominion.Resources.Hand hand19 = new cs362.dominion.Resources.Hand(arraylist_card17, deck18);
    int i20 = hand19.getCoins();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card21 = hand19.removeAllCards();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card21);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test134"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.size();
    int i13 = hand7.getActions();
    int i14 = hand7.size();
    int i15 = hand7.getCoins();
    int i16 = hand7.getActions();
    cs362.dominion.Resources.Game.gamePhase gamePhase_instance17 = cs362.dominion.Resources.Game.gamePhase.ACTION;
    cs362.dominion.Resources.Supply supply18 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls19 = hand7.buyOptions(gamePhase_instance17, supply18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    org.junit.Assert.assertTrue("'" + gamePhase_instance17 + "' != '" + cs362.dominion.Resources.Game.gamePhase.ACTION + "'", gamePhase_instance17.equals(cs362.dominion.Resources.Game.gamePhase.ACTION));

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test135"); }

    cs362.dominion.Cards.Duchy duchy0 = new cs362.dominion.Cards.Duchy();
    int i1 = duchy0.getVictoryPoints();
    int i2 = duchy0.getCoins();
    int i3 = duchy0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = duchy0.getType();
    int i5 = duchy0.getCoins();
    int i6 = duchy0.getCoins();
    int i7 = duchy0.getVictoryPoints();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test136"); }

    cs362.dominion.Cards.Ambassador ambassador0 = new cs362.dominion.Cards.Ambassador();
    int i1 = ambassador0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = ambassador0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = ambassador0.getType();
    java.lang.String str4 = ambassador0.getDefinition();
    int i5 = ambassador0.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = ambassador0.getType();
    cs362.dominion.Resources.Game game7 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom8 = new cs362.dominion.Cards.CouncilRoom();
    int i9 = councilRoom8.getCards();
    int i10 = councilRoom8.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance11 = councilRoom8.getType();
    java.lang.String str12 = councilRoom8.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance13 = councilRoom8.getType();
    int i14 = councilRoom8.getCost();
    int i15 = councilRoom8.getCards();
    cs362.dominion.Resources.Game game16 = null;
    cs362.dominion.Cards.Cutpurse cutpurse17 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str18 = cutpurse17.getDefinition();
    int i20 = cutpurse17.getInitialSupply(5);
    int i21 = cutpurse17.getCost();
    int i22 = cutpurse17.getCoins();
    cs362.dominion.Resources.Game game23 = null;
    cs362.dominion.Resources.Player[] player_array24 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player25 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player25, player_array24);
    cs362.dominion.Resources.Supply supply27 = null;
    cs362.dominion.Resources.Option option28 = cutpurse17.playCard(game23, arraylist_player25, supply27);
    cs362.dominion.Resources.Supply supply29 = null;
    cs362.dominion.Resources.Option option30 = councilRoom8.playCard(game16, arraylist_player25, supply29);
    cs362.dominion.Resources.Supply supply31 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option32 = ambassador0.playCard(game7, arraylist_player25, supply31);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str4.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance11 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance11.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str12.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance13 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance13.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str18.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option30);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test137"); }

    cs362.dominion.Cards.Village village0 = new cs362.dominion.Cards.Village();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = village0.getType();
    java.lang.String str2 = village0.getDefinition();
    int i3 = village0.getActions();
    int i5 = village0.getInitialSupply((int)(byte)-1);
    int i6 = village0.getActions();
    int i8 = village0.getInitialSupply((int)(byte)10);
    java.lang.String str9 = village0.getDefinition();
    int i11 = village0.getInitialSupply(100);
    java.lang.String str12 = village0.getDefinition();
    int i13 = village0.getCost();
    int i14 = village0.getCoins();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "+1 Card; +2 Actions."+ "'", str2.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "+1 Card; +2 Actions."+ "'", str9.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "+1 Card; +2 Actions."+ "'", str12.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test138"); }

    cs362.dominion.Cards.Feast feast0 = new cs362.dominion.Cards.Feast();
    int i2 = feast0.getInitialSupply(10);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = feast0.getType();
    java.lang.String str4 = feast0.getDefinition();
    int i6 = feast0.getInitialSupply((int)(byte)100);
    java.lang.String str7 = feast0.getDefinition();
    java.lang.String str8 = feast0.getDefinition();
    int i10 = feast0.getInitialSupply(6);
    java.lang.String str11 = feast0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Trash this card. Gain a card costing up to $5."+ "'", str4.equals("Trash this card. Gain a card costing up to $5."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Trash this card. Gain a card costing up to $5."+ "'", str7.equals("Trash this card. Gain a card costing up to $5."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Trash this card. Gain a card costing up to $5."+ "'", str8.equals("Trash this card. Gain a card costing up to $5."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Trash this card. Gain a card costing up to $5."+ "'", str11.equals("Trash this card. Gain a card costing up to $5."));

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test139"); }

    cs362.dominion.Cards.Bazaar bazaar0 = new cs362.dominion.Cards.Bazaar();
    int i1 = bazaar0.getCards();
    int i2 = bazaar0.getActions();
    int i3 = bazaar0.getCost();
    int i4 = bazaar0.getCards();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = bazaar0.getType();
    int i7 = bazaar0.getInitialSupply((int)(short)0);
    java.lang.String str8 = bazaar0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "+1 Card; +2 Actions, +$1."+ "'", str8.equals("+1 Card; +2 Actions, +$1."));

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test140"); }

    cs362.dominion.Cards.Bazaar bazaar0 = new cs362.dominion.Cards.Bazaar();
    int i1 = bazaar0.getCards();
    int i2 = bazaar0.getActions();
    int i3 = bazaar0.getCost();
    int i4 = bazaar0.getCards();
    int i5 = bazaar0.getVictoryPoints();
    int i6 = bazaar0.getActions();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test141"); }

    cs362.dominion.Cards.Ambassador ambassador0 = new cs362.dominion.Cards.Ambassador();
    int i1 = ambassador0.getCost();
    int i3 = ambassador0.getInitialSupply(5);
    int i5 = ambassador0.getInitialSupply(1);
    int i6 = ambassador0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = ambassador0.getType();
    int i8 = ambassador0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test142"); }

    cs362.dominion.Cards.Adventurer adventurer0 = new cs362.dominion.Cards.Adventurer();
    int i2 = adventurer0.getInitialSupply(40);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = adventurer0.getType();
    int i4 = adventurer0.getVictoryPoints();
    int i5 = adventurer0.getCost();
    java.lang.String str6 = adventurer0.getDefinition();
    int i8 = adventurer0.getInitialSupply(52);
    int i10 = adventurer0.getInitialSupply(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str6.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test143"); }

    cs362.dominion.Cards.Estate estate0 = new cs362.dominion.Cards.Estate();
    java.lang.String str1 = estate0.getDefinition();
    int i2 = estate0.getCoins();
    int i4 = estate0.getInitialSupply((int)(byte)1);
    int i5 = estate0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = estate0.getType();
    java.lang.String str7 = estate0.getName();
    java.lang.String str8 = estate0.getDefinition();
    int i10 = estate0.getInitialSupply(52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Victory card, worth 1 victory point"+ "'", str1.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Estate"+ "'", str7.equals("Estate"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Victory card, worth 1 victory point"+ "'", str8.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 8);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test144"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    cs362.dominion.Resources.Game game2 = null;
    cs362.dominion.Cards.Cutpurse cutpurse3 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str4 = cutpurse3.getDefinition();
    int i6 = cutpurse3.getInitialSupply(5);
    int i8 = cutpurse3.getInitialSupply((int)(byte)10);
    java.lang.String str9 = cutpurse3.getDefinition();
    int i10 = cutpurse3.getCost();
    int i12 = cutpurse3.getInitialSupply(6);
    cs362.dominion.Resources.Game game13 = null;
    cs362.dominion.Resources.Player[] player_array14 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player15 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player15, player_array14);
    cs362.dominion.Resources.Supply supply17 = null;
    cs362.dominion.Resources.Option option18 = cutpurse3.playCard(game13, arraylist_player15, supply17);
    java.lang.String str19 = cutpurse3.getDefinition();
    cs362.dominion.Resources.Game game20 = null;
    cs362.dominion.Cards.Village village21 = new cs362.dominion.Cards.Village();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance22 = village21.getType();
    java.lang.String str23 = village21.getDefinition();
    int i24 = village21.getActions();
    int i26 = village21.getInitialSupply((int)(byte)-1);
    int i27 = village21.getActions();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance28 = village21.getType();
    java.lang.String str29 = village21.getDefinition();
    cs362.dominion.Resources.Game game30 = null;
    cs362.dominion.Cards.Cutpurse cutpurse31 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str32 = cutpurse31.getDefinition();
    int i34 = cutpurse31.getInitialSupply((int)'4');
    cs362.dominion.Resources.Game game35 = null;
    cs362.dominion.Cards.Cutpurse cutpurse36 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str37 = cutpurse36.getDefinition();
    int i39 = cutpurse36.getInitialSupply(5);
    int i40 = cutpurse36.getCost();
    int i41 = cutpurse36.getCoins();
    cs362.dominion.Resources.Game game42 = null;
    cs362.dominion.Resources.Player[] player_array43 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player44 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player44, player_array43);
    cs362.dominion.Resources.Supply supply46 = null;
    cs362.dominion.Resources.Option option47 = cutpurse36.playCard(game42, arraylist_player44, supply46);
    cs362.dominion.Resources.Supply supply48 = null;
    cs362.dominion.Resources.Option option49 = cutpurse31.playCard(game35, arraylist_player44, supply48);
    cs362.dominion.Resources.Supply supply50 = null;
    cs362.dominion.Resources.Option option51 = village21.playCard(game30, arraylist_player44, supply50);
    cs362.dominion.Resources.Supply supply52 = null;
    cs362.dominion.Resources.Option option53 = cutpurse3.playCard(game20, arraylist_player44, supply52);
    cs362.dominion.Resources.Supply supply54 = null;
    cs362.dominion.Resources.Option option55 = cutpurse0.playCard(game2, arraylist_player44, supply54);
    int i56 = cutpurse0.getCost();
    int i57 = cutpurse0.getCost();
    int i59 = cutpurse0.getInitialSupply((int)' ');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str4.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str9.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str19.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance22 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance22.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "+1 Card; +2 Actions."+ "'", str23.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance28 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance28.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "+1 Card; +2 Actions."+ "'", str29.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str32.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str37.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 10);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test145"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.getCoins();
    cs362.dominion.Cards.Copper copper13 = new cs362.dominion.Cards.Copper();
    int i15 = copper13.getInitialSupply((int)' ');
    hand7.addCard((cs362.dominion.Cards.Card)copper13);
    int i17 = hand7.getCoins();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls18 = hand7.cardTypesInHand();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card19 = hand7.allCards();
    int i20 = hand7.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 3);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test146"); }

    cs362.dominion.Cards.CouncilRoom councilRoom0 = new cs362.dominion.Cards.CouncilRoom();
    int i1 = councilRoom0.getCost();
    cs362.dominion.Resources.Game game2 = null;
    cs362.dominion.Cards.Cutpurse cutpurse3 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str4 = cutpurse3.getDefinition();
    int i6 = cutpurse3.getInitialSupply(5);
    int i8 = cutpurse3.getInitialSupply((int)(byte)10);
    java.lang.String str9 = cutpurse3.getDefinition();
    int i10 = cutpurse3.getCost();
    int i12 = cutpurse3.getInitialSupply(6);
    cs362.dominion.Resources.Game game13 = null;
    cs362.dominion.Resources.Player[] player_array14 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player15 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player15, player_array14);
    cs362.dominion.Resources.Supply supply17 = null;
    cs362.dominion.Resources.Option option18 = cutpurse3.playCard(game13, arraylist_player15, supply17);
    cs362.dominion.Resources.Supply supply19 = null;
    cs362.dominion.Resources.Option option20 = councilRoom0.playCard(game2, arraylist_player15, supply19);
    cs362.dominion.Resources.Game game21 = null;
    cs362.dominion.Cards.Cutpurse cutpurse22 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str23 = cutpurse22.getDefinition();
    int i25 = cutpurse22.getInitialSupply(5);
    int i27 = cutpurse22.getInitialSupply((int)(byte)10);
    java.lang.String str28 = cutpurse22.getDefinition();
    cs362.dominion.Resources.Game game29 = null;
    cs362.dominion.Cards.Cutpurse cutpurse30 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str31 = cutpurse30.getDefinition();
    int i33 = cutpurse30.getInitialSupply(5);
    int i35 = cutpurse30.getInitialSupply(8);
    cs362.dominion.Resources.Game game36 = null;
    cs362.dominion.Cards.Gold gold37 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance38 = gold37.getType();
    cs362.dominion.Resources.Game game39 = null;
    cs362.dominion.Resources.Player[] player_array40 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player41 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player41, player_array40);
    cs362.dominion.Resources.Supply supply43 = null;
    cs362.dominion.Resources.Option option44 = gold37.playCard(game39, arraylist_player41, supply43);
    cs362.dominion.Resources.Supply supply45 = null;
    cs362.dominion.Resources.Option option46 = cutpurse30.playCard(game36, arraylist_player41, supply45);
    cs362.dominion.Resources.Supply supply47 = null;
    cs362.dominion.Resources.Option option48 = cutpurse22.playCard(game29, arraylist_player41, supply47);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance49 = cutpurse22.getType();
    cs362.dominion.Resources.Game game50 = null;
    cs362.dominion.Cards.Cutpurse cutpurse51 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str52 = cutpurse51.getDefinition();
    int i54 = cutpurse51.getInitialSupply(5);
    int i56 = cutpurse51.getInitialSupply((int)(byte)10);
    java.lang.String str57 = cutpurse51.getDefinition();
    int i58 = cutpurse51.getCost();
    int i60 = cutpurse51.getInitialSupply(6);
    cs362.dominion.Resources.Game game61 = null;
    cs362.dominion.Resources.Player[] player_array62 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player63 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b64 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player63, player_array62);
    cs362.dominion.Resources.Supply supply65 = null;
    cs362.dominion.Resources.Option option66 = cutpurse51.playCard(game61, arraylist_player63, supply65);
    cs362.dominion.Resources.Supply supply67 = null;
    cs362.dominion.Resources.Option option68 = cutpurse22.playCard(game50, arraylist_player63, supply67);
    cs362.dominion.Resources.Supply supply69 = null;
    cs362.dominion.Resources.Option option70 = councilRoom0.playCard(game21, arraylist_player63, supply69);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance71 = councilRoom0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance72 = councilRoom0.getType();
    java.lang.String str73 = councilRoom0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str4.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str9.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str23.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str28.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str31.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance38 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance38.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option48);
    org.junit.Assert.assertTrue("'" + cardTypes_instance49 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance49.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str52.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str57.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option70);
    org.junit.Assert.assertTrue("'" + cardTypes_instance71 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance71.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance72 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance72.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str73.equals("+4 Cards; +1 Buy. Each other player draws a card."));

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test147"); }

    cs362.dominion.Cards.Mine mine0 = new cs362.dominion.Cards.Mine();
    java.lang.String str1 = mine0.getDefinition();
    int i2 = mine0.getCost();
    int i3 = mine0.getCost();
    int i4 = mine0.getCost();
    java.lang.String str5 = mine0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = mine0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."+ "'", str1.equals("Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."+ "'", str5.equals("Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test148"); }

    cs362.dominion.Cards.Smithy smithy0 = new cs362.dominion.Cards.Smithy();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = smithy0.getType();
    int i3 = smithy0.getInitialSupply(100);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = smithy0.getType();
    int i5 = smithy0.getCards();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = smithy0.getType();
    int i7 = smithy0.getCards();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = smithy0.getType();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test149"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    int i3 = cutpurse0.getInitialSupply(5);
    int i4 = cutpurse0.getCost();
    int i5 = cutpurse0.getCoins();
    cs362.dominion.Resources.Game game6 = null;
    cs362.dominion.Resources.Player[] player_array7 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player8 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player8, player_array7);
    cs362.dominion.Resources.Supply supply10 = null;
    cs362.dominion.Resources.Option option11 = cutpurse0.playCard(game6, arraylist_player8, supply10);
    cs362.dominion.Resources.Game game12 = null;
    cs362.dominion.Cards.Cutpurse cutpurse13 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str14 = cutpurse13.getDefinition();
    int i16 = cutpurse13.getInitialSupply(5);
    int i17 = cutpurse13.getCost();
    int i18 = cutpurse13.getCoins();
    cs362.dominion.Resources.Game game19 = null;
    cs362.dominion.Cards.Cutpurse cutpurse20 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str21 = cutpurse20.getDefinition();
    int i23 = cutpurse20.getInitialSupply(5);
    int i25 = cutpurse20.getInitialSupply(8);
    cs362.dominion.Resources.Game game26 = null;
    cs362.dominion.Cards.Gold gold27 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance28 = gold27.getType();
    cs362.dominion.Resources.Game game29 = null;
    cs362.dominion.Resources.Player[] player_array30 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player31 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player31, player_array30);
    cs362.dominion.Resources.Supply supply33 = null;
    cs362.dominion.Resources.Option option34 = gold27.playCard(game29, arraylist_player31, supply33);
    cs362.dominion.Resources.Supply supply35 = null;
    cs362.dominion.Resources.Option option36 = cutpurse20.playCard(game26, arraylist_player31, supply35);
    cs362.dominion.Resources.Supply supply37 = null;
    cs362.dominion.Resources.Option option38 = cutpurse13.playCard(game19, arraylist_player31, supply37);
    cs362.dominion.Resources.Supply supply39 = null;
    cs362.dominion.Resources.Option option40 = cutpurse0.playCard(game12, arraylist_player31, supply39);
    int i41 = cutpurse0.getActions();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str14.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str21.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance28 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance28.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test150"); }

    cs362.dominion.Cards.GreatHall greatHall0 = new cs362.dominion.Cards.GreatHall();
    int i1 = greatHall0.getVictoryPoints();
    int i3 = greatHall0.getInitialSupply((int)(short)0);
    java.lang.String str4 = greatHall0.getDefinition();
    int i5 = greatHall0.getCoins();
    int i7 = greatHall0.getInitialSupply(4);
    int i8 = greatHall0.getCards();
    java.lang.String str9 = greatHall0.getDefinition();
    int i11 = greatHall0.getInitialSupply((int)'#');
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance12 = greatHall0.getType();
    int i13 = greatHall0.getVictoryPoints();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1 Victory Point +1 Card; +1 Action."+ "'", str4.equals("1 Victory Point +1 Card; +1 Action."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1 Victory Point +1 Card; +1 Action."+ "'", str9.equals("1 Victory Point +1 Card; +1 Action."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance12 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance12.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test151"); }

    cs362.dominion.Cards.Bazaar bazaar0 = new cs362.dominion.Cards.Bazaar();
    int i1 = bazaar0.getCards();
    int i2 = bazaar0.getCoins();
    int i4 = bazaar0.getInitialSupply(7);
    int i5 = bazaar0.getActions();
    int i7 = bazaar0.getInitialSupply(9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test152"); }

    cs362.dominion.Cards.Smithy smithy0 = new cs362.dominion.Cards.Smithy();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = smithy0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = smithy0.getType();
    int i4 = smithy0.getInitialSupply(2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test153"); }

    cs362.dominion.Cards.Bazaar bazaar0 = new cs362.dominion.Cards.Bazaar();
    int i1 = bazaar0.getCards();
    int i2 = bazaar0.getActions();
    int i3 = bazaar0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = bazaar0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = bazaar0.getType();
    int i6 = bazaar0.getCoins();
    int i7 = bazaar0.getActions();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test154"); }

    cs362.dominion.Cards.Adventurer adventurer0 = new cs362.dominion.Cards.Adventurer();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = adventurer0.getType();
    int i3 = adventurer0.getInitialSupply((int)(short)0);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = adventurer0.getType();
    java.lang.String str5 = adventurer0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = adventurer0.getType();
    int i7 = adventurer0.getCost();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str5.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test155"); }

    cs362.dominion.Cards.Mine mine0 = new cs362.dominion.Cards.Mine();
    java.lang.String str1 = mine0.getDefinition();
    int i2 = mine0.getCost();
    int i3 = mine0.getCost();
    int i4 = mine0.getCost();
    java.lang.String str5 = mine0.getDefinition();
    int i6 = mine0.getCost();
    java.lang.String str7 = mine0.getDefinition();
    int i9 = mine0.getInitialSupply((int)'4');
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance10 = mine0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."+ "'", str1.equals("Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."+ "'", str5.equals("Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."+ "'", str7.equals("Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance10 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance10.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test156"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Resources.Deck deck8 = null;
    cs362.dominion.Resources.Hand hand9 = new cs362.dominion.Resources.Hand(arraylist_card4, deck8);
    cs362.dominion.Resources.Deck deck10 = null;
    cs362.dominion.Resources.Hand hand11 = new cs362.dominion.Resources.Hand(arraylist_card4, deck10);
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls12 = hand11.cardTypesInHand();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls12);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test157"); }

    cs362.dominion.Cards.Feast feast0 = new cs362.dominion.Cards.Feast();
    int i2 = feast0.getInitialSupply(10);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = feast0.getType();
    java.lang.String str4 = feast0.getDefinition();
    int i6 = feast0.getInitialSupply(3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Trash this card. Gain a card costing up to $5."+ "'", str4.equals("Trash this card. Gain a card costing up to $5."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test158"); }

    cs362.dominion.Cards.Feast feast0 = new cs362.dominion.Cards.Feast();
    int i2 = feast0.getInitialSupply(10);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = feast0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = feast0.getType();
    java.lang.String str5 = feast0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = feast0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = feast0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Trash this card. Gain a card costing up to $5."+ "'", str5.equals("Trash this card. Gain a card costing up to $5."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test159"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    java.lang.String str3 = embargo0.getName();
    java.lang.String str4 = embargo0.getDefinition();
    int i5 = embargo0.getCost();
    cs362.dominion.Resources.Game game6 = null;
    cs362.dominion.Cards.Cutpurse cutpurse7 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str8 = cutpurse7.getDefinition();
    int i10 = cutpurse7.getInitialSupply(5);
    int i12 = cutpurse7.getInitialSupply((int)(byte)10);
    java.lang.String str13 = cutpurse7.getDefinition();
    cs362.dominion.Resources.Game game14 = null;
    cs362.dominion.Cards.Cutpurse cutpurse15 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str16 = cutpurse15.getDefinition();
    int i18 = cutpurse15.getInitialSupply(5);
    int i20 = cutpurse15.getInitialSupply(8);
    cs362.dominion.Resources.Game game21 = null;
    cs362.dominion.Cards.Gold gold22 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance23 = gold22.getType();
    cs362.dominion.Resources.Game game24 = null;
    cs362.dominion.Resources.Player[] player_array25 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player26 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player26, player_array25);
    cs362.dominion.Resources.Supply supply28 = null;
    cs362.dominion.Resources.Option option29 = gold22.playCard(game24, arraylist_player26, supply28);
    cs362.dominion.Resources.Supply supply30 = null;
    cs362.dominion.Resources.Option option31 = cutpurse15.playCard(game21, arraylist_player26, supply30);
    cs362.dominion.Resources.Supply supply32 = null;
    cs362.dominion.Resources.Option option33 = cutpurse7.playCard(game14, arraylist_player26, supply32);
    cs362.dominion.Resources.Game game34 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom35 = new cs362.dominion.Cards.CouncilRoom();
    int i36 = councilRoom35.getCards();
    int i37 = councilRoom35.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance38 = councilRoom35.getType();
    int i39 = councilRoom35.getBuys();
    cs362.dominion.Resources.Game game40 = null;
    cs362.dominion.Resources.Player[] player_array41 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player42 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player42, player_array41);
    cs362.dominion.Resources.Supply supply44 = null;
    cs362.dominion.Resources.Option option45 = councilRoom35.playCard(game40, arraylist_player42, supply44);
    cs362.dominion.Resources.Supply supply46 = null;
    cs362.dominion.Resources.Option option47 = cutpurse7.playCard(game34, arraylist_player42, supply46);
    cs362.dominion.Resources.Game game48 = null;
    cs362.dominion.Cards.Cutpurse cutpurse49 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str50 = cutpurse49.getDefinition();
    int i52 = cutpurse49.getInitialSupply(5);
    int i54 = cutpurse49.getInitialSupply(8);
    cs362.dominion.Resources.Game game55 = null;
    cs362.dominion.Cards.Gold gold56 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance57 = gold56.getType();
    cs362.dominion.Resources.Game game58 = null;
    cs362.dominion.Resources.Player[] player_array59 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player60 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b61 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player60, player_array59);
    cs362.dominion.Resources.Supply supply62 = null;
    cs362.dominion.Resources.Option option63 = gold56.playCard(game58, arraylist_player60, supply62);
    cs362.dominion.Resources.Supply supply64 = null;
    cs362.dominion.Resources.Option option65 = cutpurse49.playCard(game55, arraylist_player60, supply64);
    cs362.dominion.Resources.Game game66 = null;
    cs362.dominion.Cards.Cutpurse cutpurse67 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str68 = cutpurse67.getDefinition();
    int i70 = cutpurse67.getInitialSupply(5);
    int i72 = cutpurse67.getInitialSupply((int)(byte)10);
    java.lang.String str73 = cutpurse67.getDefinition();
    cs362.dominion.Resources.Game game74 = null;
    cs362.dominion.Cards.Cutpurse cutpurse75 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str76 = cutpurse75.getDefinition();
    int i78 = cutpurse75.getInitialSupply(5);
    int i80 = cutpurse75.getInitialSupply(8);
    cs362.dominion.Resources.Game game81 = null;
    cs362.dominion.Cards.Gold gold82 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance83 = gold82.getType();
    cs362.dominion.Resources.Game game84 = null;
    cs362.dominion.Resources.Player[] player_array85 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player86 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b87 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player86, player_array85);
    cs362.dominion.Resources.Supply supply88 = null;
    cs362.dominion.Resources.Option option89 = gold82.playCard(game84, arraylist_player86, supply88);
    cs362.dominion.Resources.Supply supply90 = null;
    cs362.dominion.Resources.Option option91 = cutpurse75.playCard(game81, arraylist_player86, supply90);
    cs362.dominion.Resources.Supply supply92 = null;
    cs362.dominion.Resources.Option option93 = cutpurse67.playCard(game74, arraylist_player86, supply92);
    cs362.dominion.Resources.Supply supply94 = null;
    cs362.dominion.Resources.Option option95 = cutpurse49.playCard(game66, arraylist_player86, supply94);
    cs362.dominion.Resources.Supply supply96 = null;
    cs362.dominion.Resources.Option option97 = cutpurse7.playCard(game48, arraylist_player86, supply96);
    cs362.dominion.Resources.Supply supply98 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option99 = embargo0.playCard(game6, arraylist_player86, supply98);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Embargo"+ "'", str3.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."+ "'", str4.equals("+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str8.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str13.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str16.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance23 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance23.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance38 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance38.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str50.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance57 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance57.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str68.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str73.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str76.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance83 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance83.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option97);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test160"); }

    cs362.dominion.Cards.Duchy duchy0 = new cs362.dominion.Cards.Duchy();
    int i1 = duchy0.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = duchy0.getType();
    int i4 = duchy0.getInitialSupply((int)(byte)1);
    int i5 = duchy0.getVictoryPoints();
    int i6 = duchy0.getVictoryPoints();
    int i8 = duchy0.getInitialSupply((int)(short)100);
    int i9 = duchy0.getCost();
    int i10 = duchy0.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance11 = duchy0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance12 = duchy0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 3);
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    org.junit.Assert.assertTrue("'" + cardTypes_instance11 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance11.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    org.junit.Assert.assertTrue("'" + cardTypes_instance12 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance12.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test161"); }

    cs362.dominion.Cards.Bazaar bazaar0 = new cs362.dominion.Cards.Bazaar();
    int i1 = bazaar0.getCards();
    int i2 = bazaar0.getActions();
    int i3 = bazaar0.getCost();
    int i4 = bazaar0.getCards();
    int i5 = bazaar0.getVictoryPoints();
    java.lang.String str6 = bazaar0.getDefinition();
    java.lang.String str7 = bazaar0.getDefinition();
    int i8 = bazaar0.getCoins();
    int i9 = bazaar0.getActions();
    int i10 = bazaar0.getCards();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "+1 Card; +2 Actions, +$1."+ "'", str6.equals("+1 Card; +2 Actions, +$1."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "+1 Card; +2 Actions, +$1."+ "'", str7.equals("+1 Card; +2 Actions, +$1."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test162"); }

    cs362.dominion.Cards.Estate estate0 = new cs362.dominion.Cards.Estate();
    java.lang.String str1 = estate0.getDefinition();
    int i2 = estate0.getCoins();
    int i3 = estate0.getCost();
    java.lang.String str4 = estate0.getName();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = estate0.getType();
    int i7 = estate0.getInitialSupply(0);
    int i8 = estate0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance9 = estate0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Victory card, worth 1 victory point"+ "'", str1.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Estate"+ "'", str4.equals("Estate"));
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance9 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance9.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test163"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.size();
    int i13 = hand7.getBuys();
    hand7.printHand();
    int i15 = hand7.size();
    int i16 = hand7.getCoins();
    hand7.addActionPoints((int)(short)1);
    cs362.dominion.Resources.Game.gamePhase gamePhase_instance19 = cs362.dominion.Resources.Game.gamePhase.BUY;
    cs362.dominion.Resources.Supply supply20 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls21 = hand7.buyOptions(gamePhase_instance19, supply20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + gamePhase_instance19 + "' != '" + cs362.dominion.Resources.Game.gamePhase.BUY + "'", gamePhase_instance19.equals(cs362.dominion.Resources.Game.gamePhase.BUY));

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test164"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.size();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card13 = hand7.allCards();
    hand7.addActionPoints(3);
    cs362.dominion.Resources.Game.gamePhase gamePhase_instance16 = cs362.dominion.Resources.Game.gamePhase.CLEANUP;
    cs362.dominion.Resources.Supply supply17 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls18 = hand7.actionOptions(gamePhase_instance16, supply17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card13);
    org.junit.Assert.assertTrue("'" + gamePhase_instance16 + "' != '" + cs362.dominion.Resources.Game.gamePhase.CLEANUP + "'", gamePhase_instance16.equals(cs362.dominion.Resources.Game.gamePhase.CLEANUP));

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test165"); }

    cs362.dominion.Cards.Baron baron0 = new cs362.dominion.Cards.Baron();
    int i2 = baron0.getInitialSupply(1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = baron0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = baron0.getType();
    int i5 = baron0.getBuys();
    int i6 = baron0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = baron0.getType();
    int i8 = baron0.getBuys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test166"); }

    cs362.dominion.Cards.Estate estate0 = new cs362.dominion.Cards.Estate();
    java.lang.String str1 = estate0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = estate0.getType();
    java.lang.String str3 = estate0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Victory card, worth 1 victory point"+ "'", str1.equals("Victory card, worth 1 victory point"));
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Victory card, worth 1 victory point"+ "'", str3.equals("Victory card, worth 1 victory point"));

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test167"); }

    cs362.dominion.Cards.GreatHall greatHall0 = new cs362.dominion.Cards.GreatHall();
    int i1 = greatHall0.getVictoryPoints();
    int i3 = greatHall0.getInitialSupply((int)(short)0);
    int i4 = greatHall0.getCost();
    int i5 = greatHall0.getActions();
    int i6 = greatHall0.getActions();
    int i7 = greatHall0.getVictoryPoints();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test168"); }

    cs362.dominion.Cards.Province province0 = new cs362.dominion.Cards.Province();
    int i2 = province0.getInitialSupply(0);
    java.lang.String str3 = province0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = province0.getType();
    java.lang.String str5 = province0.getDefinition();
    int i6 = province0.getCost();
    int i7 = province0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Victory card, worth 6 victory points"+ "'", str3.equals("Victory card, worth 6 victory points"));
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Victory card, worth 6 victory points"+ "'", str5.equals("Victory card, worth 6 victory points"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 8);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test169"); }

    cs362.dominion.Cards.GreatHall greatHall0 = new cs362.dominion.Cards.GreatHall();
    int i1 = greatHall0.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = greatHall0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = greatHall0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = greatHall0.getType();
    int i5 = greatHall0.getVictoryPoints();
    int i6 = greatHall0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test170"); }

    cs362.dominion.Cards.Adventurer adventurer0 = new cs362.dominion.Cards.Adventurer();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = adventurer0.getType();
    int i3 = adventurer0.getInitialSupply((int)(short)0);
    int i4 = adventurer0.getCoins();
    java.lang.String str5 = adventurer0.getDefinition();
    int i6 = adventurer0.getCost();
    int i7 = adventurer0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = adventurer0.getType();
    java.lang.String str9 = adventurer0.getDefinition();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str5.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str9.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test171"); }

    cs362.dominion.Exceptions.InvalidOptionException invalidOptionException1 = new cs362.dominion.Exceptions.InvalidOptionException("A gold resource, worth $3");
    cs362.dominion.Exceptions.ConfiguationException configuationException3 = new cs362.dominion.Exceptions.ConfiguationException("+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile.");
    cs362.dominion.Exceptions.InvalidOptionException invalidOptionException5 = new cs362.dominion.Exceptions.InvalidOptionException("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it.");
    java.lang.Throwable[] throwable_array6 = invalidOptionException5.getSuppressed();
    configuationException3.addSuppressed((java.lang.Throwable)invalidOptionException5);
    cs362.dominion.Exceptions.ConfiguationException configuationException9 = new cs362.dominion.Exceptions.ConfiguationException("1 Victory Point +1 Card; +1 Action.");
    configuationException3.addSuppressed((java.lang.Throwable)configuationException9);
    invalidOptionException1.addSuppressed((java.lang.Throwable)configuationException9);
    java.lang.String str12 = invalidOptionException1.toString();
    java.lang.Throwable[] throwable_array13 = invalidOptionException1.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "cs362.dominion.Exceptions.InvalidOptionException: A gold resource, worth $3"+ "'", str12.equals("cs362.dominion.Exceptions.InvalidOptionException: A gold resource, worth $3"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array13);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test172"); }

    cs362.dominion.Cards.Bazaar bazaar0 = new cs362.dominion.Cards.Bazaar();
    int i1 = bazaar0.getCards();
    int i2 = bazaar0.getActions();
    int i3 = bazaar0.getCoins();
    int i4 = bazaar0.getActions();
    int i6 = bazaar0.getInitialSupply(1);
    int i7 = bazaar0.getActions();
    int i8 = bazaar0.getCost();
    int i9 = bazaar0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 5);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test173"); }

    cs362.dominion.Cards.Province province0 = new cs362.dominion.Cards.Province();
    int i2 = province0.getInitialSupply(0);
    java.lang.String str3 = province0.getDefinition();
    int i5 = province0.getInitialSupply((int)'#');
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = province0.getType();
    int i8 = province0.getInitialSupply(0);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance9 = province0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance10 = province0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Victory card, worth 6 victory points"+ "'", str3.equals("Victory card, worth 6 victory points"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 8);
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    org.junit.Assert.assertTrue("'" + cardTypes_instance9 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance9.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    org.junit.Assert.assertTrue("'" + cardTypes_instance10 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance10.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test174"); }

    cs362.dominion.Cards.Gardens gardens0 = new cs362.dominion.Cards.Gardens();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = gardens0.getType();
    int i3 = gardens0.getInitialSupply(10);
    int i4 = gardens0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = gardens0.getType();
    int i7 = gardens0.getInitialSupply(13);
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test175"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Resources.Deck deck8 = null;
    cs362.dominion.Resources.Hand hand9 = new cs362.dominion.Resources.Hand(arraylist_card4, deck8);
    cs362.dominion.Cards.Estate estate10 = new cs362.dominion.Cards.Estate();
    java.lang.String str11 = estate10.getName();
    java.lang.String str12 = estate10.getDefinition();
    java.lang.String str13 = estate10.getDefinition();
    java.lang.String str14 = estate10.getDefinition();
    java.lang.String str15 = estate10.getDefinition();
    int i17 = estate10.getInitialSupply((int)'a');
    int i18 = estate10.getVictoryPoints();
    hand9.addCard((cs362.dominion.Cards.Card)estate10);
    int i20 = estate10.getCost();
    int i22 = estate10.getInitialSupply(52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Estate"+ "'", str11.equals("Estate"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Victory card, worth 1 victory point"+ "'", str12.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Victory card, worth 1 victory point"+ "'", str13.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Victory card, worth 1 victory point"+ "'", str14.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Victory card, worth 1 victory point"+ "'", str15.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 8);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test176"); }

    cs362.dominion.Cards.Gold gold0 = new cs362.dominion.Cards.Gold();
    java.lang.String str1 = gold0.getDefinition();
    int i2 = gold0.getCoins();
    int i4 = gold0.getInitialSupply((int)' ');
    java.lang.String str5 = gold0.getDefinition();
    int i6 = gold0.getCoins();
    int i8 = gold0.getInitialSupply(0);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance9 = gold0.getType();
    java.lang.String str10 = gold0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "A gold resource, worth $3"+ "'", str1.equals("A gold resource, worth $3"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "A gold resource, worth $3"+ "'", str5.equals("A gold resource, worth $3"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 40);
    org.junit.Assert.assertTrue("'" + cardTypes_instance9 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance9.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "A gold resource, worth $3"+ "'", str10.equals("A gold resource, worth $3"));

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test177"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    int i8 = hand7.getActions();
    int i9 = hand7.getCoins();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls10 = hand7.cardTypesInHand();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card11 = hand7.removeAllCards();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls12 = hand7.cardTypesInHand();
    cs362.dominion.Cards.Cutpurse cutpurse13 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str14 = cutpurse13.getDefinition();
    int i16 = cutpurse13.getInitialSupply(5);
    int i18 = cutpurse13.getInitialSupply(8);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance19 = cutpurse13.getType();
    int i21 = cutpurse13.getInitialSupply(0);
    int i22 = cutpurse13.getCoins();
    hand7.addCard((cs362.dominion.Cards.Card)cutpurse13);
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card24 = hand7.allCards();
    hand7.addActionPoints(13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str14.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance19 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance19.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card24);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test178"); }

    cs362.dominion.Cards.Gardens gardens0 = new cs362.dominion.Cards.Gardens();
    java.lang.String str1 = gardens0.getDefinition();
    int i3 = gardens0.getInitialSupply(5);
    int i5 = gardens0.getInitialSupply(10);
    int i7 = gardens0.getInitialSupply(0);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = gardens0.getType();
    java.lang.String str9 = gardens0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance10 = gardens0.getType();
    int i12 = gardens0.getInitialSupply(101);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Worth 1 Victory for every 10 cards in your deck (rounded down)."+ "'", str1.equals("Worth 1 Victory for every 10 cards in your deck (rounded down)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Worth 1 Victory for every 10 cards in your deck (rounded down)."+ "'", str9.equals("Worth 1 Victory for every 10 cards in your deck (rounded down)."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance10 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance10.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test179"); }

    cs362.dominion.Cards.Gardens gardens0 = new cs362.dominion.Cards.Gardens();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = gardens0.getType();
    int i3 = gardens0.getInitialSupply(10);
    int i4 = gardens0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = gardens0.getType();
    cs362.dominion.Resources.Game game6 = null;
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player7 = null;
    cs362.dominion.Resources.Supply supply8 = null;
    cs362.dominion.Resources.Option option9 = gardens0.playCard(game6, arraylist_player7, supply8);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance10 = gardens0.getType();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option9);
    org.junit.Assert.assertTrue("'" + cardTypes_instance10 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance10.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test180"); }

    cs362.dominion.Cards.Adventurer adventurer0 = new cs362.dominion.Cards.Adventurer();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = adventurer0.getType();
    int i3 = adventurer0.getInitialSupply((int)(short)0);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = adventurer0.getType();
    int i5 = adventurer0.getCost();
    int i7 = adventurer0.getInitialSupply(41);
    int i9 = adventurer0.getInitialSupply((int)(byte)100);
    int i11 = adventurer0.getInitialSupply(101);
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test181"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    hand7.printHand();
    cs362.dominion.Resources.Game.gamePhase gamePhase_instance13 = cs362.dominion.Resources.Game.gamePhase.ACTION;
    cs362.dominion.Resources.Supply supply14 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls15 = hand7.actionOptions(gamePhase_instance13, supply14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    org.junit.Assert.assertTrue("'" + gamePhase_instance13 + "' != '" + cs362.dominion.Resources.Game.gamePhase.ACTION + "'", gamePhase_instance13.equals(cs362.dominion.Resources.Game.gamePhase.ACTION));

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test182"); }

    cs362.dominion.Cards.Copper copper0 = new cs362.dominion.Cards.Copper();
    int i2 = copper0.getInitialSupply((int)' ');
    int i3 = copper0.getCoins();
    int i4 = copper0.getCoins();
    int i6 = copper0.getInitialSupply((int)(short)1);
    cs362.dominion.Resources.Game game7 = null;
    cs362.dominion.Cards.Cutpurse cutpurse8 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str9 = cutpurse8.getDefinition();
    int i11 = cutpurse8.getInitialSupply((int)'4');
    cs362.dominion.Resources.Game game12 = null;
    cs362.dominion.Cards.Cutpurse cutpurse13 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str14 = cutpurse13.getDefinition();
    int i16 = cutpurse13.getInitialSupply(5);
    int i17 = cutpurse13.getCost();
    int i18 = cutpurse13.getCoins();
    cs362.dominion.Resources.Game game19 = null;
    cs362.dominion.Resources.Player[] player_array20 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player21 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player21, player_array20);
    cs362.dominion.Resources.Supply supply23 = null;
    cs362.dominion.Resources.Option option24 = cutpurse13.playCard(game19, arraylist_player21, supply23);
    cs362.dominion.Resources.Supply supply25 = null;
    cs362.dominion.Resources.Option option26 = cutpurse8.playCard(game12, arraylist_player21, supply25);
    cs362.dominion.Resources.Supply supply27 = null;
    cs362.dominion.Resources.Option option28 = copper0.playCard(game7, arraylist_player21, supply27);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance29 = copper0.getType();
    int i30 = copper0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str9.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str14.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option28);
    org.junit.Assert.assertTrue("'" + cardTypes_instance29 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance29.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test183"); }

    cs362.dominion.Cards.GreatHall greatHall0 = new cs362.dominion.Cards.GreatHall();
    int i1 = greatHall0.getVictoryPoints();
    int i3 = greatHall0.getInitialSupply((int)(short)0);
    int i4 = greatHall0.getCost();
    int i5 = greatHall0.getActions();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = greatHall0.getType();
    int i7 = greatHall0.getCoins();
    int i9 = greatHall0.getInitialSupply(8);
    int i10 = greatHall0.getVictoryPoints();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test184"); }

    cs362.dominion.Cards.Baron baron0 = new cs362.dominion.Cards.Baron();
    int i2 = baron0.getInitialSupply(1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = baron0.getType();
    int i5 = baron0.getInitialSupply(5);
    int i7 = baron0.getInitialSupply(6);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = baron0.getType();
    int i9 = baron0.getCost();
    int i10 = baron0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test185"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    int i3 = cutpurse0.getInitialSupply(5);
    int i5 = cutpurse0.getInitialSupply((int)(byte)10);
    java.lang.String str6 = cutpurse0.getDefinition();
    cs362.dominion.Resources.Game game7 = null;
    cs362.dominion.Cards.Cutpurse cutpurse8 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str9 = cutpurse8.getDefinition();
    int i11 = cutpurse8.getInitialSupply(5);
    int i13 = cutpurse8.getInitialSupply(8);
    cs362.dominion.Resources.Game game14 = null;
    cs362.dominion.Cards.Gold gold15 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance16 = gold15.getType();
    cs362.dominion.Resources.Game game17 = null;
    cs362.dominion.Resources.Player[] player_array18 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player19 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player19, player_array18);
    cs362.dominion.Resources.Supply supply21 = null;
    cs362.dominion.Resources.Option option22 = gold15.playCard(game17, arraylist_player19, supply21);
    cs362.dominion.Resources.Supply supply23 = null;
    cs362.dominion.Resources.Option option24 = cutpurse8.playCard(game14, arraylist_player19, supply23);
    cs362.dominion.Resources.Supply supply25 = null;
    cs362.dominion.Resources.Option option26 = cutpurse0.playCard(game7, arraylist_player19, supply25);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance27 = cutpurse0.getType();
    cs362.dominion.Resources.Game game28 = null;
    cs362.dominion.Cards.Cutpurse cutpurse29 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str30 = cutpurse29.getDefinition();
    int i32 = cutpurse29.getInitialSupply(5);
    int i34 = cutpurse29.getInitialSupply((int)(byte)10);
    java.lang.String str35 = cutpurse29.getDefinition();
    int i36 = cutpurse29.getCost();
    int i38 = cutpurse29.getInitialSupply(6);
    cs362.dominion.Resources.Game game39 = null;
    cs362.dominion.Resources.Player[] player_array40 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player41 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player41, player_array40);
    cs362.dominion.Resources.Supply supply43 = null;
    cs362.dominion.Resources.Option option44 = cutpurse29.playCard(game39, arraylist_player41, supply43);
    cs362.dominion.Resources.Supply supply45 = null;
    cs362.dominion.Resources.Option option46 = cutpurse0.playCard(game28, arraylist_player41, supply45);
    cs362.dominion.Resources.Game game47 = null;
    cs362.dominion.Cards.Cutpurse cutpurse48 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str49 = cutpurse48.getDefinition();
    int i51 = cutpurse48.getInitialSupply(5);
    int i53 = cutpurse48.getInitialSupply((int)(byte)10);
    java.lang.String str54 = cutpurse48.getDefinition();
    cs362.dominion.Resources.Game game55 = null;
    cs362.dominion.Cards.Cutpurse cutpurse56 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str57 = cutpurse56.getDefinition();
    int i59 = cutpurse56.getInitialSupply(5);
    int i61 = cutpurse56.getInitialSupply(8);
    cs362.dominion.Resources.Game game62 = null;
    cs362.dominion.Cards.Gold gold63 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance64 = gold63.getType();
    cs362.dominion.Resources.Game game65 = null;
    cs362.dominion.Resources.Player[] player_array66 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player67 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b68 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player67, player_array66);
    cs362.dominion.Resources.Supply supply69 = null;
    cs362.dominion.Resources.Option option70 = gold63.playCard(game65, arraylist_player67, supply69);
    cs362.dominion.Resources.Supply supply71 = null;
    cs362.dominion.Resources.Option option72 = cutpurse56.playCard(game62, arraylist_player67, supply71);
    cs362.dominion.Resources.Supply supply73 = null;
    cs362.dominion.Resources.Option option74 = cutpurse48.playCard(game55, arraylist_player67, supply73);
    cs362.dominion.Resources.Supply supply75 = null;
    cs362.dominion.Resources.Option option76 = cutpurse0.playCard(game47, arraylist_player67, supply75);
    int i77 = cutpurse0.getCoins();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str6.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str9.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance16 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance16.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option26);
    org.junit.Assert.assertTrue("'" + cardTypes_instance27 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance27.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str30.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str35.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str49.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str54.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str57.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance64 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance64.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 2);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test186"); }

    cs362.dominion.Cards.Gardens gardens0 = new cs362.dominion.Cards.Gardens();
    java.lang.String str1 = gardens0.getName();
    java.lang.String str2 = gardens0.getName();
    int i3 = gardens0.getVictoryPoints();
    int i5 = gardens0.getInitialSupply(101);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = gardens0.getType();
    int i8 = gardens0.getInitialSupply((int)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Gardens"+ "'", str1.equals("Gardens"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Gardens"+ "'", str2.equals("Gardens"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test187"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    int i3 = cutpurse0.getInitialSupply(5);
    int i4 = cutpurse0.getCost();
    int i5 = cutpurse0.getCoins();
    int i6 = cutpurse0.getCost();
    cs362.dominion.Resources.Game game7 = null;
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player8 = null;
    cs362.dominion.Resources.Supply supply9 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option10 = cutpurse0.playCard(game7, arraylist_player8, supply9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test188"); }

    cs362.dominion.Cards.Gold gold0 = new cs362.dominion.Cards.Gold();
    int i1 = gold0.getCost();
    java.lang.String str2 = gold0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = gold0.getType();
    int i4 = gold0.getCost();
    int i6 = gold0.getInitialSupply((int)(byte)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "A gold resource, worth $3"+ "'", str2.equals("A gold resource, worth $3"));
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 40);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test189"); }

    cs362.dominion.Cards.Province province0 = new cs362.dominion.Cards.Province();
    int i2 = province0.getInitialSupply(0);
    java.lang.String str3 = province0.getDefinition();
    java.lang.String str4 = province0.getName();
    int i6 = province0.getInitialSupply((int)(byte)100);
    int i7 = province0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = province0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Victory card, worth 6 victory points"+ "'", str3.equals("Victory card, worth 6 victory points"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Province"+ "'", str4.equals("Province"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 8);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test190"); }

    cs362.dominion.Cards.Adventurer adventurer0 = new cs362.dominion.Cards.Adventurer();
    java.lang.String str1 = adventurer0.getDefinition();
    int i2 = adventurer0.getCost();
    int i4 = adventurer0.getInitialSupply(10);
    int i6 = adventurer0.getInitialSupply(8);
    cs362.dominion.Resources.Game game7 = null;
    cs362.dominion.Cards.Cutpurse cutpurse8 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str9 = cutpurse8.getDefinition();
    int i11 = cutpurse8.getInitialSupply(5);
    int i13 = cutpurse8.getInitialSupply(8);
    cs362.dominion.Resources.Game game14 = null;
    cs362.dominion.Cards.Gold gold15 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance16 = gold15.getType();
    cs362.dominion.Resources.Game game17 = null;
    cs362.dominion.Resources.Player[] player_array18 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player19 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player19, player_array18);
    cs362.dominion.Resources.Supply supply21 = null;
    cs362.dominion.Resources.Option option22 = gold15.playCard(game17, arraylist_player19, supply21);
    cs362.dominion.Resources.Supply supply23 = null;
    cs362.dominion.Resources.Option option24 = cutpurse8.playCard(game14, arraylist_player19, supply23);
    cs362.dominion.Resources.Supply supply25 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option26 = adventurer0.playCard(game7, arraylist_player19, supply25);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str1.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str9.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance16 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance16.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option24);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test191"); }

    cs362.dominion.Cards.Estate estate0 = new cs362.dominion.Cards.Estate();
    java.lang.String str1 = estate0.getDefinition();
    int i2 = estate0.getCoins();
    int i3 = estate0.getCost();
    int i4 = estate0.getCost();
    java.lang.String str5 = estate0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = estate0.getType();
    java.lang.String str7 = estate0.getDefinition();
    int i9 = estate0.getInitialSupply(40);
    int i10 = estate0.getCost();
    int i11 = estate0.getVictoryPoints();
    int i12 = estate0.getVictoryPoints();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Victory card, worth 1 victory point"+ "'", str1.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Victory card, worth 1 victory point"+ "'", str5.equals("Victory card, worth 1 victory point"));
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Victory card, worth 1 victory point"+ "'", str7.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test192"); }

    cs362.dominion.Cards.Baron baron0 = new cs362.dominion.Cards.Baron();
    int i2 = baron0.getInitialSupply(1);
    int i3 = baron0.getBuys();
    int i4 = baron0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = baron0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test193"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.size();
    int i13 = hand7.size();
    cs362.dominion.Cards.GreatHall greatHall14 = new cs362.dominion.Cards.GreatHall();
    int i15 = greatHall14.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance16 = greatHall14.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance17 = greatHall14.getType();
    hand7.addCard((cs362.dominion.Cards.Card)greatHall14);
    int i19 = greatHall14.getCost();
    int i20 = greatHall14.getVictoryPoints();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance16 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance16.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance17 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance17.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test194"); }

    cs362.dominion.Cards.Gardens gardens0 = new cs362.dominion.Cards.Gardens();
    int i1 = gardens0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = gardens0.getType();
    int i3 = gardens0.getCost();
    int i4 = gardens0.getCost();
    java.lang.String str5 = gardens0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = gardens0.getType();
    int i7 = gardens0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Worth 1 Victory for every 10 cards in your deck (rounded down)."+ "'", str5.equals("Worth 1 Victory for every 10 cards in your deck (rounded down)."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test195"); }

    cs362.dominion.Cards.GreatHall greatHall0 = new cs362.dominion.Cards.GreatHall();
    int i1 = greatHall0.getVictoryPoints();
    int i2 = greatHall0.getCards();
    int i3 = greatHall0.getCost();
    java.lang.String str4 = greatHall0.getDefinition();
    int i6 = greatHall0.getInitialSupply(100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1 Victory Point +1 Card; +1 Action."+ "'", str4.equals("1 Victory Point +1 Card; +1 Action."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test196"); }

    cs362.dominion.Cards.Baron baron0 = new cs362.dominion.Cards.Baron();
    int i2 = baron0.getInitialSupply(1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = baron0.getType();
    int i5 = baron0.getInitialSupply(5);
    int i7 = baron0.getInitialSupply(6);
    java.lang.String str8 = baron0.getDefinition();
    java.lang.String str9 = baron0.getDefinition();
    int i10 = baron0.getCost();
    cs362.dominion.Resources.Game game11 = null;
    cs362.dominion.Cards.Cutpurse cutpurse12 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str13 = cutpurse12.getDefinition();
    int i15 = cutpurse12.getInitialSupply(5);
    int i16 = cutpurse12.getCost();
    int i17 = cutpurse12.getCoins();
    int i19 = cutpurse12.getInitialSupply((int)(byte)100);
    cs362.dominion.Resources.Game game20 = null;
    cs362.dominion.Cards.Cutpurse cutpurse21 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str22 = cutpurse21.getDefinition();
    int i24 = cutpurse21.getInitialSupply(5);
    int i26 = cutpurse21.getInitialSupply((int)(byte)10);
    java.lang.String str27 = cutpurse21.getDefinition();
    cs362.dominion.Resources.Game game28 = null;
    cs362.dominion.Cards.Cutpurse cutpurse29 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str30 = cutpurse29.getDefinition();
    int i32 = cutpurse29.getInitialSupply(5);
    int i34 = cutpurse29.getInitialSupply(8);
    cs362.dominion.Resources.Game game35 = null;
    cs362.dominion.Cards.Gold gold36 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance37 = gold36.getType();
    cs362.dominion.Resources.Game game38 = null;
    cs362.dominion.Resources.Player[] player_array39 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player40 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player40, player_array39);
    cs362.dominion.Resources.Supply supply42 = null;
    cs362.dominion.Resources.Option option43 = gold36.playCard(game38, arraylist_player40, supply42);
    cs362.dominion.Resources.Supply supply44 = null;
    cs362.dominion.Resources.Option option45 = cutpurse29.playCard(game35, arraylist_player40, supply44);
    cs362.dominion.Resources.Supply supply46 = null;
    cs362.dominion.Resources.Option option47 = cutpurse21.playCard(game28, arraylist_player40, supply46);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance48 = cutpurse21.getType();
    cs362.dominion.Resources.Game game49 = null;
    cs362.dominion.Cards.Cutpurse cutpurse50 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str51 = cutpurse50.getDefinition();
    int i53 = cutpurse50.getInitialSupply(5);
    int i55 = cutpurse50.getInitialSupply((int)(byte)10);
    java.lang.String str56 = cutpurse50.getDefinition();
    int i57 = cutpurse50.getCost();
    int i59 = cutpurse50.getInitialSupply(6);
    cs362.dominion.Resources.Game game60 = null;
    cs362.dominion.Resources.Player[] player_array61 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player62 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b63 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player62, player_array61);
    cs362.dominion.Resources.Supply supply64 = null;
    cs362.dominion.Resources.Option option65 = cutpurse50.playCard(game60, arraylist_player62, supply64);
    cs362.dominion.Resources.Supply supply66 = null;
    cs362.dominion.Resources.Option option67 = cutpurse21.playCard(game49, arraylist_player62, supply66);
    cs362.dominion.Resources.Supply supply68 = null;
    cs362.dominion.Resources.Option option69 = cutpurse12.playCard(game20, arraylist_player62, supply68);
    cs362.dominion.Resources.Supply supply70 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option71 = baron0.playCard(game11, arraylist_player62, supply70);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."+ "'", str8.equals("+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."+ "'", str9.equals("+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str13.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str22.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str27.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str30.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance37 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance37.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option47);
    org.junit.Assert.assertTrue("'" + cardTypes_instance48 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance48.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str51.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str56.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option69);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test197"); }

    cs362.dominion.Exceptions.InvalidSelectionException invalidSelectionException1 = new cs362.dominion.Exceptions.InvalidSelectionException("Cutpurse");

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test198"); }

    cs362.dominion.Cards.CouncilRoom councilRoom0 = new cs362.dominion.Cards.CouncilRoom();
    int i1 = councilRoom0.getCards();
    int i2 = councilRoom0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = councilRoom0.getType();
    java.lang.String str4 = councilRoom0.getDefinition();
    int i5 = councilRoom0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = councilRoom0.getType();
    int i7 = councilRoom0.getCards();
    int i8 = councilRoom0.getBuys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str4.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test199"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    int i8 = hand7.size();
    hand7.printHand();
    cs362.dominion.Cards.Gold gold10 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance11 = gold10.getType();
    cs362.dominion.Resources.Game game12 = null;
    cs362.dominion.Resources.Player[] player_array13 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player14 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player14, player_array13);
    cs362.dominion.Resources.Supply supply16 = null;
    cs362.dominion.Resources.Option option17 = gold10.playCard(game12, arraylist_player14, supply16);
    int i19 = gold10.getInitialSupply(7);
    int i20 = gold10.getCoins();
    int i21 = gold10.getBuys();
    int i22 = gold10.getVictoryPoints();
    int i24 = gold10.getInitialSupply((int)(short)10);
    int i25 = gold10.getCoins();
    hand7.addCard((cs362.dominion.Cards.Card)gold10);
    int i27 = hand7.getActions();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance11 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance11.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test200"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    int i3 = cutpurse0.getInitialSupply(5);
    int i5 = cutpurse0.getInitialSupply(8);
    cs362.dominion.Resources.Game game6 = null;
    cs362.dominion.Cards.Gold gold7 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = gold7.getType();
    cs362.dominion.Resources.Game game9 = null;
    cs362.dominion.Resources.Player[] player_array10 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player11 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player11, player_array10);
    cs362.dominion.Resources.Supply supply13 = null;
    cs362.dominion.Resources.Option option14 = gold7.playCard(game9, arraylist_player11, supply13);
    cs362.dominion.Resources.Supply supply15 = null;
    cs362.dominion.Resources.Option option16 = cutpurse0.playCard(game6, arraylist_player11, supply15);
    int i17 = cutpurse0.getCoins();
    int i18 = cutpurse0.getCost();
    int i20 = cutpurse0.getInitialSupply(6);
    int i22 = cutpurse0.getInitialSupply(100);
    int i23 = cutpurse0.getCoins();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 2);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test201"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.size();
    int i13 = hand7.size();
    int i14 = hand7.getCoins();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls15 = hand7.cardTypesInHand();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card16 = hand7.allCards();
    cs362.dominion.Cards.Ambassador ambassador17 = new cs362.dominion.Cards.Ambassador();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance18 = ambassador17.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance19 = ambassador17.getType();
    int i21 = ambassador17.getInitialSupply((int)'a');
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance22 = ambassador17.getType();
    java.lang.String str23 = ambassador17.getDefinition();
    hand7.addCard((cs362.dominion.Cards.Card)ambassador17);
    cs362.dominion.Cards.Estate estate25 = new cs362.dominion.Cards.Estate();
    java.lang.String str26 = estate25.getName();
    java.lang.String str27 = estate25.getDefinition();
    java.lang.String str28 = estate25.getDefinition();
    int i30 = estate25.getInitialSupply((int)(byte)10);
    hand7.addCard((cs362.dominion.Cards.Card)estate25);
    int i33 = estate25.getInitialSupply(101);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card16);
    org.junit.Assert.assertTrue("'" + cardTypes_instance18 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance18.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance19 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance19.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance22 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance22.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str23.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Estate"+ "'", str26.equals("Estate"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Victory card, worth 1 victory point"+ "'", str27.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Victory card, worth 1 victory point"+ "'", str28.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 8);

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test202"); }

    cs362.dominion.Cards.Feast feast0 = new cs362.dominion.Cards.Feast();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = feast0.getType();
    int i3 = feast0.getInitialSupply(7);
    java.lang.String str4 = feast0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = feast0.getType();
    java.lang.String str6 = feast0.getDefinition();
    java.lang.String str7 = feast0.getDefinition();
    int i8 = feast0.getCost();
    int i10 = feast0.getInitialSupply((int)(byte)10);
    java.lang.String str11 = feast0.getDefinition();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Trash this card. Gain a card costing up to $5."+ "'", str4.equals("Trash this card. Gain a card costing up to $5."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Trash this card. Gain a card costing up to $5."+ "'", str6.equals("Trash this card. Gain a card costing up to $5."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Trash this card. Gain a card costing up to $5."+ "'", str7.equals("Trash this card. Gain a card costing up to $5."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Trash this card. Gain a card costing up to $5."+ "'", str11.equals("Trash this card. Gain a card costing up to $5."));

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test203"); }

    cs362.dominion.Cards.Estate estate0 = new cs362.dominion.Cards.Estate();
    java.lang.String str1 = estate0.getDefinition();
    int i2 = estate0.getCoins();
    int i3 = estate0.getCost();
    java.lang.String str4 = estate0.getDefinition();
    int i5 = estate0.getVictoryPoints();
    int i7 = estate0.getInitialSupply((int)(byte)100);
    int i9 = estate0.getInitialSupply((int)' ');
    int i10 = estate0.getVictoryPoints();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Victory card, worth 1 victory point"+ "'", str1.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Victory card, worth 1 victory point"+ "'", str4.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test204"); }

    cs362.dominion.Cards.GreatHall greatHall0 = new cs362.dominion.Cards.GreatHall();
    int i1 = greatHall0.getVictoryPoints();
    int i3 = greatHall0.getInitialSupply((int)(short)0);
    int i5 = greatHall0.getInitialSupply((int)'#');
    int i7 = greatHall0.getInitialSupply(1);
    int i8 = greatHall0.getVictoryPoints();
    java.lang.String str9 = greatHall0.getDefinition();
    int i11 = greatHall0.getInitialSupply((int)' ');
    java.lang.String str12 = greatHall0.getName();
    int i13 = greatHall0.getVictoryPoints();
    int i15 = greatHall0.getInitialSupply(52);
    int i17 = greatHall0.getInitialSupply(100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1 Victory Point +1 Card; +1 Action."+ "'", str9.equals("1 Victory Point +1 Card; +1 Action."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "GreatHall"+ "'", str12.equals("GreatHall"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 10);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test205"); }

    cs362.dominion.Cards.Village village0 = new cs362.dominion.Cards.Village();
    int i2 = village0.getInitialSupply(40);
    java.lang.String str3 = village0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = village0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = village0.getType();
    int i6 = village0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "+1 Card; +2 Actions."+ "'", str3.equals("+1 Card; +2 Actions."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test206"); }

    cs362.dominion.Cards.Feast feast0 = new cs362.dominion.Cards.Feast();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = feast0.getType();
    java.lang.String str2 = feast0.getName();
    int i3 = feast0.getCards();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Feast"+ "'", str2.equals("Feast"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test207"); }

    cs362.dominion.Cards.GreatHall greatHall0 = new cs362.dominion.Cards.GreatHall();
    int i1 = greatHall0.getVictoryPoints();
    int i3 = greatHall0.getInitialSupply((int)(short)0);
    java.lang.String str4 = greatHall0.getDefinition();
    java.lang.String str5 = greatHall0.getDefinition();
    int i6 = greatHall0.getCost();
    int i8 = greatHall0.getInitialSupply((int)'#');
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance9 = greatHall0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1 Victory Point +1 Card; +1 Action."+ "'", str4.equals("1 Victory Point +1 Card; +1 Action."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1 Victory Point +1 Card; +1 Action."+ "'", str5.equals("1 Victory Point +1 Card; +1 Action."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance9 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance9.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test208"); }

    cs362.dominion.Cards.CouncilRoom councilRoom0 = new cs362.dominion.Cards.CouncilRoom();
    int i1 = councilRoom0.getCards();
    int i2 = councilRoom0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = councilRoom0.getType();
    int i4 = councilRoom0.getBuys();
    int i5 = councilRoom0.getCards();
    int i6 = councilRoom0.getCost();
    int i8 = councilRoom0.getInitialSupply(5);
    java.lang.String str9 = councilRoom0.getName();
    cs362.dominion.Resources.Game game10 = null;
    cs362.dominion.Cards.Cutpurse cutpurse11 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str12 = cutpurse11.getDefinition();
    int i14 = cutpurse11.getInitialSupply(5);
    int i16 = cutpurse11.getInitialSupply((int)(byte)10);
    java.lang.String str17 = cutpurse11.getDefinition();
    cs362.dominion.Resources.Game game18 = null;
    cs362.dominion.Cards.Cutpurse cutpurse19 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str20 = cutpurse19.getDefinition();
    int i22 = cutpurse19.getInitialSupply(5);
    int i24 = cutpurse19.getInitialSupply(8);
    cs362.dominion.Resources.Game game25 = null;
    cs362.dominion.Cards.Gold gold26 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance27 = gold26.getType();
    cs362.dominion.Resources.Game game28 = null;
    cs362.dominion.Resources.Player[] player_array29 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player30 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player30, player_array29);
    cs362.dominion.Resources.Supply supply32 = null;
    cs362.dominion.Resources.Option option33 = gold26.playCard(game28, arraylist_player30, supply32);
    cs362.dominion.Resources.Supply supply34 = null;
    cs362.dominion.Resources.Option option35 = cutpurse19.playCard(game25, arraylist_player30, supply34);
    cs362.dominion.Resources.Supply supply36 = null;
    cs362.dominion.Resources.Option option37 = cutpurse11.playCard(game18, arraylist_player30, supply36);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance38 = cutpurse11.getType();
    cs362.dominion.Resources.Game game39 = null;
    cs362.dominion.Cards.Cutpurse cutpurse40 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str41 = cutpurse40.getDefinition();
    int i43 = cutpurse40.getInitialSupply(5);
    int i45 = cutpurse40.getInitialSupply((int)(byte)10);
    java.lang.String str46 = cutpurse40.getDefinition();
    int i47 = cutpurse40.getCost();
    int i49 = cutpurse40.getInitialSupply(6);
    cs362.dominion.Resources.Game game50 = null;
    cs362.dominion.Resources.Player[] player_array51 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player52 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player52, player_array51);
    cs362.dominion.Resources.Supply supply54 = null;
    cs362.dominion.Resources.Option option55 = cutpurse40.playCard(game50, arraylist_player52, supply54);
    cs362.dominion.Resources.Supply supply56 = null;
    cs362.dominion.Resources.Option option57 = cutpurse11.playCard(game39, arraylist_player52, supply56);
    cs362.dominion.Resources.Supply supply58 = null;
    cs362.dominion.Resources.Option option59 = councilRoom0.playCard(game10, arraylist_player52, supply58);
    int i60 = councilRoom0.getCards();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "CouncilRoom"+ "'", str9.equals("CouncilRoom"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str12.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str17.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str20.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance27 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance27.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option37);
    org.junit.Assert.assertTrue("'" + cardTypes_instance38 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance38.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str41.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str46.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 4);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test209"); }

    cs362.dominion.Cards.Ambassador ambassador0 = new cs362.dominion.Cards.Ambassador();
    java.lang.String str1 = ambassador0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = ambassador0.getType();
    int i4 = ambassador0.getInitialSupply((int)(byte)0);
    java.lang.String str5 = ambassador0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str1.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str5.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test210"); }

    cs362.dominion.Cards.Copper copper0 = new cs362.dominion.Cards.Copper();
    int i2 = copper0.getInitialSupply((int)' ');
    int i4 = copper0.getInitialSupply(0);
    int i5 = copper0.getCost();
    int i7 = copper0.getInitialSupply((-1));
    int i8 = copper0.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance9 = copper0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance9 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance9.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test211"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    int i3 = cutpurse0.getInitialSupply(5);
    int i5 = cutpurse0.getInitialSupply((int)(byte)10);
    java.lang.String str6 = cutpurse0.getDefinition();
    int i7 = cutpurse0.getCost();
    int i9 = cutpurse0.getInitialSupply(6);
    int i10 = cutpurse0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str6.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test212"); }

    cs362.dominion.Cards.Estate estate0 = new cs362.dominion.Cards.Estate();
    java.lang.String str1 = estate0.getDefinition();
    int i2 = estate0.getCoins();
    int i3 = estate0.getCost();
    int i4 = estate0.getCost();
    int i6 = estate0.getInitialSupply((int)'4');
    int i8 = estate0.getInitialSupply((int)(short)0);
    java.lang.String str9 = estate0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance10 = estate0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Victory card, worth 1 victory point"+ "'", str1.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Victory card, worth 1 victory point"+ "'", str9.equals("Victory card, worth 1 victory point"));
    org.junit.Assert.assertTrue("'" + cardTypes_instance10 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance10.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test213"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = embargo8.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance13 = embargo8.getType();
    int i15 = embargo8.getInitialSupply((int)(short)100);
    int i16 = embargo8.getBuys();
    int i17 = embargo8.getCoins();
    int i18 = embargo8.getCoins();
    int i20 = embargo8.getInitialSupply((int)'4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance13 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance13.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 10);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test214"); }

    cs362.dominion.Cards.Feast feast0 = new cs362.dominion.Cards.Feast();
    int i1 = feast0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = feast0.getType();
    int i4 = feast0.getInitialSupply((-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test215"); }

    cs362.dominion.Cards.Baron baron0 = new cs362.dominion.Cards.Baron();
    int i2 = baron0.getInitialSupply(1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = baron0.getType();
    java.lang.String str4 = baron0.getDefinition();
    java.lang.String str5 = baron0.getDefinition();
    int i7 = baron0.getInitialSupply((int)(byte)10);
    java.lang.String str8 = baron0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."+ "'", str4.equals("+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."+ "'", str5.equals("+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."+ "'", str8.equals("+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."));

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test216"); }

    cs362.dominion.Cards.Estate estate0 = new cs362.dominion.Cards.Estate();
    java.lang.String str1 = estate0.getDefinition();
    int i2 = estate0.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = estate0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = estate0.getType();
    int i5 = estate0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = estate0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = estate0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Victory card, worth 1 victory point"+ "'", str1.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test217"); }

    cs362.dominion.Cards.Estate estate0 = new cs362.dominion.Cards.Estate();
    java.lang.String str1 = estate0.getDefinition();
    int i2 = estate0.getCoins();
    int i3 = estate0.getCost();
    int i4 = estate0.getCost();
    int i6 = estate0.getInitialSupply((int)'4');
    int i7 = estate0.getVictoryPoints();
    int i9 = estate0.getInitialSupply((int)'a');
    int i10 = estate0.getCost();
    java.lang.String str11 = estate0.getDefinition();
    int i13 = estate0.getInitialSupply((int)(byte)10);
    int i14 = estate0.getCards();
    java.lang.String str15 = estate0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Victory card, worth 1 victory point"+ "'", str1.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Victory card, worth 1 victory point"+ "'", str11.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Victory card, worth 1 victory point"+ "'", str15.equals("Victory card, worth 1 victory point"));

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test218"); }

    cs362.dominion.Cards.Province province0 = new cs362.dominion.Cards.Province();
    int i2 = province0.getInitialSupply(0);
    java.lang.String str3 = province0.getDefinition();
    int i5 = province0.getInitialSupply((int)'#');
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = province0.getType();
    int i8 = province0.getInitialSupply(0);
    java.lang.String str9 = province0.getDefinition();
    java.lang.String str10 = province0.getDefinition();
    java.lang.String str11 = province0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Victory card, worth 6 victory points"+ "'", str3.equals("Victory card, worth 6 victory points"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 8);
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Victory card, worth 6 victory points"+ "'", str9.equals("Victory card, worth 6 victory points"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Victory card, worth 6 victory points"+ "'", str10.equals("Victory card, worth 6 victory points"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Victory card, worth 6 victory points"+ "'", str11.equals("Victory card, worth 6 victory points"));

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test219"); }

    cs362.dominion.Cards.Gardens gardens0 = new cs362.dominion.Cards.Gardens();
    java.lang.String str1 = gardens0.getName();
    java.lang.String str2 = gardens0.getName();
    int i3 = gardens0.getCost();
    int i4 = gardens0.getCoins();
    int i6 = gardens0.getInitialSupply((int)(short)1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = gardens0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = gardens0.getType();
    java.lang.String str9 = gardens0.getDefinition();
    int i11 = gardens0.getInitialSupply((int)(byte)1);
    int i12 = gardens0.getCards();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Gardens"+ "'", str1.equals("Gardens"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Gardens"+ "'", str2.equals("Gardens"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Worth 1 Victory for every 10 cards in your deck (rounded down)."+ "'", str9.equals("Worth 1 Victory for every 10 cards in your deck (rounded down)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test220"); }

    cs362.dominion.Cards.Estate estate0 = new cs362.dominion.Cards.Estate();
    java.lang.String str1 = estate0.getDefinition();
    int i2 = estate0.getCoins();
    int i3 = estate0.getCost();
    java.lang.String str4 = estate0.getName();
    int i6 = estate0.getInitialSupply(4);
    int i8 = estate0.getInitialSupply(5);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance9 = estate0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Victory card, worth 1 victory point"+ "'", str1.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Estate"+ "'", str4.equals("Estate"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    org.junit.Assert.assertTrue("'" + cardTypes_instance9 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance9.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test221"); }

    cs362.dominion.Cards.Baron baron0 = new cs362.dominion.Cards.Baron();
    int i1 = baron0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test222"); }

    cs362.dominion.Cards.Bazaar bazaar0 = new cs362.dominion.Cards.Bazaar();
    int i1 = bazaar0.getActions();
    int i3 = bazaar0.getInitialSupply((int)(byte)1);
    int i4 = bazaar0.getActions();
    int i5 = bazaar0.getActions();
    int i6 = bazaar0.getCards();
    int i7 = bazaar0.getCoins();
    int i8 = bazaar0.getActions();
    int i10 = bazaar0.getInitialSupply((int)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test223"); }

    cs362.dominion.Cards.Province province0 = new cs362.dominion.Cards.Province();
    int i2 = province0.getInitialSupply(0);
    int i3 = province0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = province0.getType();
    java.lang.String str5 = province0.getDefinition();
    int i7 = province0.getInitialSupply(1);
    int i8 = province0.getVictoryPoints();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 8);
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Victory card, worth 6 victory points"+ "'", str5.equals("Victory card, worth 6 victory points"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test224"); }

    cs362.dominion.Cards.Ambassador ambassador0 = new cs362.dominion.Cards.Ambassador();
    int i1 = ambassador0.getCost();
    int i3 = ambassador0.getInitialSupply(5);
    int i5 = ambassador0.getInitialSupply(1);
    int i7 = ambassador0.getInitialSupply(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test225"); }

    cs362.dominion.Cards.Feast feast0 = new cs362.dominion.Cards.Feast();
    int i1 = feast0.getCost();
    int i2 = feast0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = feast0.getType();
    int i4 = feast0.getCost();
    int i5 = feast0.getActions();
    int i7 = feast0.getInitialSupply(101);
    int i9 = feast0.getInitialSupply((int)(short)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test226"); }

    cs362.dominion.Cards.Mine mine0 = new cs362.dominion.Cards.Mine();
    int i2 = mine0.getInitialSupply((int)'a');
    int i3 = mine0.getCost();
    int i4 = mine0.getCost();
    int i6 = mine0.getInitialSupply((int)(byte)0);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = mine0.getType();
    int i8 = mine0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance9 = mine0.getType();
    int i10 = mine0.getCost();
    int i12 = mine0.getInitialSupply(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance9 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance9.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test227"); }

    cs362.dominion.Cards.Bazaar bazaar0 = new cs362.dominion.Cards.Bazaar();
    int i1 = bazaar0.getCards();
    int i2 = bazaar0.getActions();
    int i3 = bazaar0.getCards();
    int i4 = bazaar0.getCost();
    java.lang.String str5 = bazaar0.getDefinition();
    int i6 = bazaar0.getActions();
    int i8 = bazaar0.getInitialSupply((-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "+1 Card; +2 Actions, +$1."+ "'", str5.equals("+1 Card; +2 Actions, +$1."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test228"); }

    cs362.dominion.Cards.Bazaar bazaar0 = new cs362.dominion.Cards.Bazaar();
    int i1 = bazaar0.getCards();
    int i2 = bazaar0.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = bazaar0.getType();
    int i4 = bazaar0.getActions();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test229"); }

    cs362.dominion.Cards.Baron baron0 = new cs362.dominion.Cards.Baron();
    int i2 = baron0.getInitialSupply(1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = baron0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = baron0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = baron0.getType();
    int i6 = baron0.getBuys();
    int i7 = baron0.getBuys();
    java.lang.String str8 = baron0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."+ "'", str8.equals("+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."));

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test230"); }

    cs362.dominion.Cards.Gold gold0 = new cs362.dominion.Cards.Gold();
    java.lang.String str1 = gold0.getDefinition();
    int i2 = gold0.getCost();
    int i3 = gold0.getCoins();
    java.lang.String str4 = gold0.getDefinition();
    int i6 = gold0.getInitialSupply((int)'#');
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = gold0.getType();
    int i8 = gold0.getCoins();
    int i9 = gold0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "A gold resource, worth $3"+ "'", str1.equals("A gold resource, worth $3"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "A gold resource, worth $3"+ "'", str4.equals("A gold resource, worth $3"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 40);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 6);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test231"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    int i8 = hand7.getActions();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls9 = hand7.cardTypesInHand();
    int i10 = hand7.getCoins();
    int i11 = hand7.getBuys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test232"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    java.lang.String str3 = embargo0.getName();
    int i4 = embargo0.getBuys();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = embargo0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = embargo0.getType();
    int i8 = embargo0.getInitialSupply((int)(byte)1);
    int i10 = embargo0.getInitialSupply(101);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Embargo"+ "'", str3.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test233"); }

    cs362.dominion.Cards.Silver silver0 = new cs362.dominion.Cards.Silver();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = silver0.getType();
    int i2 = silver0.getCoins();
    java.lang.String str3 = silver0.getDefinition();
    java.lang.String str4 = silver0.getDefinition();
    int i5 = silver0.getCoins();
    int i6 = silver0.getVictoryPoints();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "A silver resource, worth $2"+ "'", str3.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "A silver resource, worth $2"+ "'", str4.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test234"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.getCoins();
    int i13 = hand7.size();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls14 = hand7.cardTypesInHand();
    int i15 = hand7.getCoins();
    int i16 = hand7.getActions();
    cs362.dominion.Resources.Game.gamePhase gamePhase_instance17 = cs362.dominion.Resources.Game.gamePhase.BUY;
    cs362.dominion.Resources.Supply supply18 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls19 = hand7.actionOptions(gamePhase_instance17, supply18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    org.junit.Assert.assertTrue("'" + gamePhase_instance17 + "' != '" + cs362.dominion.Resources.Game.gamePhase.BUY + "'", gamePhase_instance17.equals(cs362.dominion.Resources.Game.gamePhase.BUY));

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test235"); }

    cs362.dominion.Cards.GreatHall greatHall0 = new cs362.dominion.Cards.GreatHall();
    int i1 = greatHall0.getVictoryPoints();
    int i3 = greatHall0.getInitialSupply((int)(short)0);
    int i4 = greatHall0.getCost();
    int i5 = greatHall0.getActions();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = greatHall0.getType();
    int i8 = greatHall0.getInitialSupply((int)' ');
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance9 = greatHall0.getType();
    int i10 = greatHall0.getActions();
    int i11 = greatHall0.getVictoryPoints();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance9 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance9.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test236"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.getCoins();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card13 = hand7.removeAllCards();
    hand7.addActionPoints((int)(short)100);
    int i16 = hand7.getBuys();
    int i17 = hand7.getCoins();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 100);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test237"); }

    cs362.dominion.Cards.Mine mine0 = new cs362.dominion.Cards.Mine();
    int i2 = mine0.getInitialSupply((int)'a');
    java.lang.String str3 = mine0.getDefinition();
    int i4 = mine0.getCost();
    java.lang.String str5 = mine0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = mine0.getType();
    java.lang.String str7 = mine0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = mine0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."+ "'", str3.equals("Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."+ "'", str5.equals("Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."+ "'", str7.equals("Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test238"); }

    cs362.dominion.Cards.Bazaar bazaar0 = new cs362.dominion.Cards.Bazaar();
    int i1 = bazaar0.getCards();
    int i2 = bazaar0.getActions();
    int i3 = bazaar0.getCost();
    int i4 = bazaar0.getCards();
    int i5 = bazaar0.getVictoryPoints();
    int i6 = bazaar0.getCards();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = bazaar0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test239"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    int i3 = cutpurse0.getInitialSupply(5);
    int i5 = cutpurse0.getInitialSupply(8);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = cutpurse0.getType();
    int i8 = cutpurse0.getInitialSupply(0);
    int i9 = cutpurse0.getCoins();
    cs362.dominion.Resources.Game game10 = null;
    cs362.dominion.Cards.Cutpurse cutpurse11 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str12 = cutpurse11.getDefinition();
    int i14 = cutpurse11.getInitialSupply(5);
    int i16 = cutpurse11.getInitialSupply(8);
    cs362.dominion.Resources.Game game17 = null;
    cs362.dominion.Cards.Gold gold18 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance19 = gold18.getType();
    cs362.dominion.Resources.Game game20 = null;
    cs362.dominion.Resources.Player[] player_array21 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player22 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player22, player_array21);
    cs362.dominion.Resources.Supply supply24 = null;
    cs362.dominion.Resources.Option option25 = gold18.playCard(game20, arraylist_player22, supply24);
    cs362.dominion.Resources.Supply supply26 = null;
    cs362.dominion.Resources.Option option27 = cutpurse11.playCard(game17, arraylist_player22, supply26);
    int i28 = cutpurse11.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance29 = cutpurse11.getType();
    int i31 = cutpurse11.getInitialSupply((int)(byte)0);
    cs362.dominion.Resources.Game game32 = null;
    cs362.dominion.Cards.Cutpurse cutpurse33 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str34 = cutpurse33.getDefinition();
    int i36 = cutpurse33.getInitialSupply(5);
    int i38 = cutpurse33.getInitialSupply((int)(byte)10);
    java.lang.String str39 = cutpurse33.getDefinition();
    int i40 = cutpurse33.getCost();
    int i42 = cutpurse33.getInitialSupply(6);
    cs362.dominion.Resources.Game game43 = null;
    cs362.dominion.Resources.Player[] player_array44 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player45 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player45, player_array44);
    cs362.dominion.Resources.Supply supply47 = null;
    cs362.dominion.Resources.Option option48 = cutpurse33.playCard(game43, arraylist_player45, supply47);
    java.lang.String str49 = cutpurse33.getDefinition();
    cs362.dominion.Resources.Game game50 = null;
    cs362.dominion.Cards.Village village51 = new cs362.dominion.Cards.Village();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance52 = village51.getType();
    java.lang.String str53 = village51.getDefinition();
    int i54 = village51.getActions();
    int i56 = village51.getInitialSupply((int)(byte)-1);
    int i57 = village51.getActions();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance58 = village51.getType();
    java.lang.String str59 = village51.getDefinition();
    cs362.dominion.Resources.Game game60 = null;
    cs362.dominion.Cards.Cutpurse cutpurse61 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str62 = cutpurse61.getDefinition();
    int i64 = cutpurse61.getInitialSupply((int)'4');
    cs362.dominion.Resources.Game game65 = null;
    cs362.dominion.Cards.Cutpurse cutpurse66 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str67 = cutpurse66.getDefinition();
    int i69 = cutpurse66.getInitialSupply(5);
    int i70 = cutpurse66.getCost();
    int i71 = cutpurse66.getCoins();
    cs362.dominion.Resources.Game game72 = null;
    cs362.dominion.Resources.Player[] player_array73 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player74 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b75 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player74, player_array73);
    cs362.dominion.Resources.Supply supply76 = null;
    cs362.dominion.Resources.Option option77 = cutpurse66.playCard(game72, arraylist_player74, supply76);
    cs362.dominion.Resources.Supply supply78 = null;
    cs362.dominion.Resources.Option option79 = cutpurse61.playCard(game65, arraylist_player74, supply78);
    cs362.dominion.Resources.Supply supply80 = null;
    cs362.dominion.Resources.Option option81 = village51.playCard(game60, arraylist_player74, supply80);
    cs362.dominion.Resources.Supply supply82 = null;
    cs362.dominion.Resources.Option option83 = cutpurse33.playCard(game50, arraylist_player74, supply82);
    cs362.dominion.Resources.Supply supply84 = null;
    cs362.dominion.Resources.Option option85 = cutpurse11.playCard(game32, arraylist_player74, supply84);
    cs362.dominion.Resources.Supply supply86 = null;
    cs362.dominion.Resources.Option option87 = cutpurse0.playCard(game10, arraylist_player74, supply86);
    int i89 = cutpurse0.getInitialSupply(9);
    java.lang.String str90 = cutpurse0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str12.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance19 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance19.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance29 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance29.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str34.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str39.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str49.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance52 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance52.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "+1 Card; +2 Actions."+ "'", str53.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance58 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance58.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "+1 Card; +2 Actions."+ "'", str59.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str62.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str67.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i89 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str90.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test240"); }

    cs362.dominion.Resources.Game game0 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Player player2 = new cs362.dominion.Resources.Player(game0, "Gardens");
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test241"); }

    cs362.dominion.Cards.Adventurer adventurer0 = new cs362.dominion.Cards.Adventurer();
    java.lang.String str1 = adventurer0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = adventurer0.getType();
    int i4 = adventurer0.getInitialSupply(0);
    java.lang.String str5 = adventurer0.getDefinition();
    int i6 = adventurer0.getCost();
    int i8 = adventurer0.getInitialSupply((int)(short)100);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance9 = adventurer0.getType();
    cs362.dominion.Resources.Game game10 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom11 = new cs362.dominion.Cards.CouncilRoom();
    int i12 = councilRoom11.getCards();
    int i14 = councilRoom11.getInitialSupply(3);
    int i15 = councilRoom11.getCards();
    int i16 = councilRoom11.getBuys();
    int i17 = councilRoom11.getBuys();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance18 = councilRoom11.getType();
    cs362.dominion.Resources.Game game19 = null;
    cs362.dominion.Cards.Cutpurse cutpurse20 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str21 = cutpurse20.getDefinition();
    cs362.dominion.Resources.Game game22 = null;
    cs362.dominion.Cards.Cutpurse cutpurse23 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str24 = cutpurse23.getDefinition();
    int i26 = cutpurse23.getInitialSupply(5);
    int i28 = cutpurse23.getInitialSupply((int)(byte)10);
    java.lang.String str29 = cutpurse23.getDefinition();
    int i30 = cutpurse23.getCost();
    int i32 = cutpurse23.getInitialSupply(6);
    cs362.dominion.Resources.Game game33 = null;
    cs362.dominion.Resources.Player[] player_array34 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player35 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player35, player_array34);
    cs362.dominion.Resources.Supply supply37 = null;
    cs362.dominion.Resources.Option option38 = cutpurse23.playCard(game33, arraylist_player35, supply37);
    java.lang.String str39 = cutpurse23.getDefinition();
    cs362.dominion.Resources.Game game40 = null;
    cs362.dominion.Cards.Village village41 = new cs362.dominion.Cards.Village();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance42 = village41.getType();
    java.lang.String str43 = village41.getDefinition();
    int i44 = village41.getActions();
    int i46 = village41.getInitialSupply((int)(byte)-1);
    int i47 = village41.getActions();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance48 = village41.getType();
    java.lang.String str49 = village41.getDefinition();
    cs362.dominion.Resources.Game game50 = null;
    cs362.dominion.Cards.Cutpurse cutpurse51 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str52 = cutpurse51.getDefinition();
    int i54 = cutpurse51.getInitialSupply((int)'4');
    cs362.dominion.Resources.Game game55 = null;
    cs362.dominion.Cards.Cutpurse cutpurse56 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str57 = cutpurse56.getDefinition();
    int i59 = cutpurse56.getInitialSupply(5);
    int i60 = cutpurse56.getCost();
    int i61 = cutpurse56.getCoins();
    cs362.dominion.Resources.Game game62 = null;
    cs362.dominion.Resources.Player[] player_array63 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player64 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b65 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player64, player_array63);
    cs362.dominion.Resources.Supply supply66 = null;
    cs362.dominion.Resources.Option option67 = cutpurse56.playCard(game62, arraylist_player64, supply66);
    cs362.dominion.Resources.Supply supply68 = null;
    cs362.dominion.Resources.Option option69 = cutpurse51.playCard(game55, arraylist_player64, supply68);
    cs362.dominion.Resources.Supply supply70 = null;
    cs362.dominion.Resources.Option option71 = village41.playCard(game50, arraylist_player64, supply70);
    cs362.dominion.Resources.Supply supply72 = null;
    cs362.dominion.Resources.Option option73 = cutpurse23.playCard(game40, arraylist_player64, supply72);
    cs362.dominion.Resources.Supply supply74 = null;
    cs362.dominion.Resources.Option option75 = cutpurse20.playCard(game22, arraylist_player64, supply74);
    cs362.dominion.Resources.Supply supply76 = null;
    cs362.dominion.Resources.Option option77 = councilRoom11.playCard(game19, arraylist_player64, supply76);
    cs362.dominion.Resources.Supply supply78 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option79 = adventurer0.playCard(game10, arraylist_player64, supply78);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str1.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str5.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance9 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance9.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance18 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance18.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str21.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str24.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str29.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str39.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance42 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance42.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "+1 Card; +2 Actions."+ "'", str43.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance48 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance48.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "+1 Card; +2 Actions."+ "'", str49.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str52.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str57.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option77);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test242"); }

    cs362.dominion.Cards.Silver silver0 = new cs362.dominion.Cards.Silver();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = silver0.getType();
    int i3 = silver0.getInitialSupply((int)'4');
    java.lang.String str4 = silver0.getDefinition();
    java.lang.String str5 = silver0.getDefinition();
    int i6 = silver0.getCoins();
    int i7 = silver0.getCards();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = silver0.getType();
    int i9 = silver0.getCoins();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "A silver resource, worth $2"+ "'", str4.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "A silver resource, worth $2"+ "'", str5.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test243"); }

    cs362.dominion.Cards.Silver silver0 = new cs362.dominion.Cards.Silver();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = silver0.getType();
    int i2 = silver0.getCoins();
    java.lang.String str3 = silver0.getDefinition();
    int i4 = silver0.getCoins();
    int i5 = silver0.getCoins();
    int i6 = silver0.getCoins();
    int i7 = silver0.getCoins();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "A silver resource, worth $2"+ "'", str3.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test244"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.size();
    int i13 = hand7.size();
    int i14 = hand7.getCoins();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls15 = hand7.cardTypesInHand();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card16 = hand7.allCards();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card17 = hand7.allCards();
    hand7.printHand();
    cs362.dominion.Cards.Baron baron19 = new cs362.dominion.Cards.Baron();
    int i21 = baron19.getInitialSupply(1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance22 = baron19.getType();
    int i24 = baron19.getInitialSupply(5);
    int i26 = baron19.getInitialSupply(6);
    hand7.addCard((cs362.dominion.Cards.Card)baron19);
    int i29 = baron19.getInitialSupply((int)'4');
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance30 = baron19.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance31 = baron19.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance22 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance22.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance30 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance30.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance31 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance31.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test245"); }

    cs362.dominion.Cards.Gold gold0 = new cs362.dominion.Cards.Gold();
    int i1 = gold0.getCost();
    java.lang.String str2 = gold0.getDefinition();
    int i3 = gold0.getCoins();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "A gold resource, worth $3"+ "'", str2.equals("A gold resource, worth $3"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test246"); }

    cs362.dominion.Cards.Adventurer adventurer0 = new cs362.dominion.Cards.Adventurer();
    java.lang.String str1 = adventurer0.getDefinition();
    int i2 = adventurer0.getCost();
    int i4 = adventurer0.getInitialSupply(10);
    int i6 = adventurer0.getInitialSupply((-1));
    int i8 = adventurer0.getInitialSupply((int)'4');
    java.lang.String str9 = adventurer0.getDefinition();
    int i10 = adventurer0.getCost();
    java.lang.String str11 = adventurer0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str1.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str9.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str11.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test247"); }

    cs362.dominion.Exceptions.InvalidOptionException invalidOptionException1 = new cs362.dominion.Exceptions.InvalidOptionException("cs362.dominion.Exceptions.ConfiguationException: cs362.dominion.Exceptions.InvalidSelectionException: cs362.dominion.Exceptions.InvalidOptionException: A gold resource, worth $3");

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test248"); }

    cs362.dominion.Cards.CouncilRoom councilRoom0 = new cs362.dominion.Cards.CouncilRoom();
    java.lang.String str1 = councilRoom0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = councilRoom0.getType();
    int i4 = councilRoom0.getInitialSupply(8);
    java.lang.String str5 = councilRoom0.getDefinition();
    int i7 = councilRoom0.getInitialSupply(6);
    int i8 = councilRoom0.getCards();
    int i9 = councilRoom0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str1.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str5.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 5);

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test249"); }

    cs362.dominion.Cards.Estate estate0 = new cs362.dominion.Cards.Estate();
    java.lang.String str1 = estate0.getDefinition();
    int i2 = estate0.getCoins();
    int i3 = estate0.getCost();
    int i4 = estate0.getCost();
    java.lang.String str5 = estate0.getDefinition();
    java.lang.String str6 = estate0.getDefinition();
    int i8 = estate0.getInitialSupply((int)(byte)0);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance9 = estate0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Victory card, worth 1 victory point"+ "'", str1.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Victory card, worth 1 victory point"+ "'", str5.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Victory card, worth 1 victory point"+ "'", str6.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    org.junit.Assert.assertTrue("'" + cardTypes_instance9 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance9.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test250"); }

    cs362.dominion.Cards.Mine mine0 = new cs362.dominion.Cards.Mine();
    int i2 = mine0.getInitialSupply((int)'a');
    java.lang.String str3 = mine0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = mine0.getType();
    java.lang.String str5 = mine0.getDefinition();
    int i7 = mine0.getInitialSupply(52);
    int i9 = mine0.getInitialSupply(6);
    int i10 = mine0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."+ "'", str3.equals("Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."+ "'", str5.equals("Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test251"); }

    cs362.dominion.Cards.Silver silver0 = new cs362.dominion.Cards.Silver();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = silver0.getType();
    int i3 = silver0.getInitialSupply((int)'4');
    java.lang.String str4 = silver0.getDefinition();
    java.lang.String str5 = silver0.getDefinition();
    int i6 = silver0.getCoins();
    int i7 = silver0.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = silver0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance9 = silver0.getType();
    java.lang.String str10 = silver0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance11 = silver0.getType();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "A silver resource, worth $2"+ "'", str4.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "A silver resource, worth $2"+ "'", str5.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    org.junit.Assert.assertTrue("'" + cardTypes_instance9 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance9.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "A silver resource, worth $2"+ "'", str10.equals("A silver resource, worth $2"));
    org.junit.Assert.assertTrue("'" + cardTypes_instance11 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance11.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test252"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    int i3 = cutpurse0.getInitialSupply(5);
    cs362.dominion.Resources.Game game4 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom5 = new cs362.dominion.Cards.CouncilRoom();
    int i6 = councilRoom5.getCards();
    int i7 = councilRoom5.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = councilRoom5.getType();
    int i9 = councilRoom5.getBuys();
    java.lang.String str10 = councilRoom5.getDefinition();
    int i12 = councilRoom5.getInitialSupply((int)'a');
    cs362.dominion.Resources.Game game13 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom14 = new cs362.dominion.Cards.CouncilRoom();
    int i15 = councilRoom14.getCards();
    int i16 = councilRoom14.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance17 = councilRoom14.getType();
    int i18 = councilRoom14.getBuys();
    cs362.dominion.Resources.Game game19 = null;
    cs362.dominion.Resources.Player[] player_array20 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player21 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player21, player_array20);
    cs362.dominion.Resources.Supply supply23 = null;
    cs362.dominion.Resources.Option option24 = councilRoom14.playCard(game19, arraylist_player21, supply23);
    cs362.dominion.Resources.Supply supply25 = null;
    cs362.dominion.Resources.Option option26 = councilRoom5.playCard(game13, arraylist_player21, supply25);
    cs362.dominion.Resources.Supply supply27 = null;
    cs362.dominion.Resources.Option option28 = cutpurse0.playCard(game4, arraylist_player21, supply27);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance29 = cutpurse0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str10.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance17 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance17.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option28);
    org.junit.Assert.assertTrue("'" + cardTypes_instance29 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance29.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test253"); }

    cs362.dominion.Cards.Adventurer adventurer0 = new cs362.dominion.Cards.Adventurer();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = adventurer0.getType();
    int i2 = adventurer0.getCost();
    java.lang.String str3 = adventurer0.getDefinition();
    java.lang.String str4 = adventurer0.getDefinition();
    java.lang.String str5 = adventurer0.getDefinition();
    int i6 = adventurer0.getCost();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str3.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str4.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str5.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 6);

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test254"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    int i8 = hand7.getActions();
    int i9 = hand7.getCoins();
    hand7.addActionPoints((int)(short)100);
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls12 = hand7.cardTypesInHand();
    int i13 = hand7.getActions();
    int i14 = hand7.getBuys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test255"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.size();
    int i13 = hand7.size();
    cs362.dominion.Cards.GreatHall greatHall14 = new cs362.dominion.Cards.GreatHall();
    int i15 = greatHall14.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance16 = greatHall14.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance17 = greatHall14.getType();
    hand7.addCard((cs362.dominion.Cards.Card)greatHall14);
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card19 = hand7.allCards();
    cs362.dominion.Resources.Deck deck20 = null;
    cs362.dominion.Resources.Hand hand21 = new cs362.dominion.Resources.Hand(arraylist_card19, deck20);
    int i22 = hand21.size();
    hand21.addActionPoints(8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance16 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance16.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance17 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance17.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 3);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test256"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.getActions();
    cs362.dominion.Resources.Game.gamePhase gamePhase_instance13 = cs362.dominion.Resources.Game.gamePhase.CLEANUP;
    cs362.dominion.Resources.Supply supply14 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls15 = hand7.buyOptions(gamePhase_instance13, supply14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    org.junit.Assert.assertTrue("'" + gamePhase_instance13 + "' != '" + cs362.dominion.Resources.Game.gamePhase.CLEANUP + "'", gamePhase_instance13.equals(cs362.dominion.Resources.Game.gamePhase.CLEANUP));

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test257"); }

    cs362.dominion.Cards.Adventurer adventurer0 = new cs362.dominion.Cards.Adventurer();
    java.lang.String str1 = adventurer0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = adventurer0.getType();
    int i4 = adventurer0.getInitialSupply(0);
    int i5 = adventurer0.getCost();
    java.lang.String str6 = adventurer0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = adventurer0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str1.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str6.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test258"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    java.lang.String str3 = embargo0.getName();
    java.lang.String str4 = embargo0.getDefinition();
    int i5 = embargo0.getCards();
    int i7 = embargo0.getInitialSupply(5);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = embargo0.getType();
    int i9 = embargo0.getBuys();
    int i11 = embargo0.getInitialSupply((-1));
    int i13 = embargo0.getInitialSupply((int)(short)-1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance14 = embargo0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Embargo"+ "'", str3.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."+ "'", str4.equals("+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance14 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance14.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test259"); }

    cs362.dominion.Cards.Smithy smithy0 = new cs362.dominion.Cards.Smithy();
    int i1 = smithy0.getCards();
    java.lang.String str2 = smithy0.getDefinition();
    java.lang.String str3 = smithy0.getDefinition();
    java.lang.String str4 = smithy0.getDefinition();
    int i5 = smithy0.getCards();
    int i7 = smithy0.getInitialSupply((int)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "+3 Cards"+ "'", str2.equals("+3 Cards"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "+3 Cards"+ "'", str3.equals("+3 Cards"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "+3 Cards"+ "'", str4.equals("+3 Cards"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test260"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    int i3 = cutpurse0.getInitialSupply(5);
    int i5 = cutpurse0.getInitialSupply((int)(byte)10);
    java.lang.String str6 = cutpurse0.getDefinition();
    cs362.dominion.Resources.Game game7 = null;
    cs362.dominion.Cards.Cutpurse cutpurse8 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str9 = cutpurse8.getDefinition();
    int i11 = cutpurse8.getInitialSupply(5);
    int i13 = cutpurse8.getInitialSupply(8);
    cs362.dominion.Resources.Game game14 = null;
    cs362.dominion.Cards.Gold gold15 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance16 = gold15.getType();
    cs362.dominion.Resources.Game game17 = null;
    cs362.dominion.Resources.Player[] player_array18 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player19 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player19, player_array18);
    cs362.dominion.Resources.Supply supply21 = null;
    cs362.dominion.Resources.Option option22 = gold15.playCard(game17, arraylist_player19, supply21);
    cs362.dominion.Resources.Supply supply23 = null;
    cs362.dominion.Resources.Option option24 = cutpurse8.playCard(game14, arraylist_player19, supply23);
    cs362.dominion.Resources.Supply supply25 = null;
    cs362.dominion.Resources.Option option26 = cutpurse0.playCard(game7, arraylist_player19, supply25);
    cs362.dominion.Resources.Game game27 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom28 = new cs362.dominion.Cards.CouncilRoom();
    int i29 = councilRoom28.getCards();
    int i30 = councilRoom28.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance31 = councilRoom28.getType();
    int i32 = councilRoom28.getBuys();
    cs362.dominion.Resources.Game game33 = null;
    cs362.dominion.Resources.Player[] player_array34 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player35 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player35, player_array34);
    cs362.dominion.Resources.Supply supply37 = null;
    cs362.dominion.Resources.Option option38 = councilRoom28.playCard(game33, arraylist_player35, supply37);
    cs362.dominion.Resources.Supply supply39 = null;
    cs362.dominion.Resources.Option option40 = cutpurse0.playCard(game27, arraylist_player35, supply39);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance41 = cutpurse0.getType();
    int i43 = cutpurse0.getInitialSupply((int)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str6.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str9.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance16 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance16.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance31 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance31.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option40);
    org.junit.Assert.assertTrue("'" + cardTypes_instance41 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance41.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 10);

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test261"); }

    cs362.dominion.Cards.Smithy smithy0 = new cs362.dominion.Cards.Smithy();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = smithy0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = smithy0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = smithy0.getType();
    int i5 = smithy0.getInitialSupply((int)(short)-1);
    int i6 = smithy0.getCost();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test262"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    int i8 = hand7.size();
    hand7.printHand();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card10 = hand7.allCards();
    cs362.dominion.Resources.Deck deck11 = null;
    cs362.dominion.Resources.Hand hand12 = new cs362.dominion.Resources.Hand(arraylist_card10, deck11);
    int i13 = hand12.getCoins();
    int i14 = hand12.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test263"); }

    cs362.dominion.Cards.Bazaar bazaar0 = new cs362.dominion.Cards.Bazaar();
    int i2 = bazaar0.getInitialSupply((int)(short)0);
    int i3 = bazaar0.getCost();
    int i4 = bazaar0.getCost();
    int i5 = bazaar0.getCoins();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test264"); }

    cs362.dominion.Cards.Gold gold0 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = gold0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = gold0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = gold0.getType();
    int i4 = gold0.getCost();
    int i6 = gold0.getInitialSupply(8);
    int i7 = gold0.getCoins();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test265"); }

    cs362.dominion.Exceptions.ConfiguationException configuationException1 = new cs362.dominion.Exceptions.ConfiguationException("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it.");
    java.lang.Throwable[] throwable_array2 = configuationException1.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array2);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test266"); }

    cs362.dominion.Cards.Adventurer adventurer0 = new cs362.dominion.Cards.Adventurer();
    java.lang.String str1 = adventurer0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = adventurer0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = adventurer0.getType();
    int i4 = adventurer0.getCost();
    int i6 = adventurer0.getInitialSupply(6);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = adventurer0.getType();
    int i8 = adventurer0.getCost();
    java.lang.String str9 = adventurer0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str1.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str9.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test267"); }

    cs362.dominion.Cards.GreatHall greatHall0 = new cs362.dominion.Cards.GreatHall();
    int i1 = greatHall0.getVictoryPoints();
    int i3 = greatHall0.getInitialSupply((int)(short)0);
    java.lang.String str4 = greatHall0.getDefinition();
    java.lang.String str5 = greatHall0.getDefinition();
    int i6 = greatHall0.getVictoryPoints();
    int i8 = greatHall0.getInitialSupply(0);
    java.lang.String str9 = greatHall0.getName();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance10 = greatHall0.getType();
    int i11 = greatHall0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1 Victory Point +1 Card; +1 Action."+ "'", str4.equals("1 Victory Point +1 Card; +1 Action."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1 Victory Point +1 Card; +1 Action."+ "'", str5.equals("1 Victory Point +1 Card; +1 Action."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "GreatHall"+ "'", str9.equals("GreatHall"));
    org.junit.Assert.assertTrue("'" + cardTypes_instance10 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance10.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test268"); }

    cs362.dominion.Cards.Adventurer adventurer0 = new cs362.dominion.Cards.Adventurer();
    int i1 = adventurer0.getCost();
    int i3 = adventurer0.getInitialSupply((int)(byte)-1);
    java.lang.String str4 = adventurer0.getDefinition();
    java.lang.String str5 = adventurer0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str4.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str5.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test269"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card12 = hand7.allCards();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls13 = hand7.cardTypesInHand();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card14 = hand7.removeAllCards();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card15 = hand7.removeAllCards();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls16 = hand7.cardTypesInHand();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card17 = hand7.removeAllCards();
    hand7.addActionPoints((int)(byte)10);
    cs362.dominion.Resources.Game.gamePhase gamePhase_instance20 = cs362.dominion.Resources.Game.gamePhase.BUY;
    cs362.dominion.Resources.Supply supply21 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls22 = hand7.actionOptions(gamePhase_instance20, supply21);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card17);
    org.junit.Assert.assertTrue("'" + gamePhase_instance20 + "' != '" + cs362.dominion.Resources.Game.gamePhase.BUY + "'", gamePhase_instance20.equals(cs362.dominion.Resources.Game.gamePhase.BUY));

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test270"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    int i3 = cutpurse0.getInitialSupply((int)'4');
    cs362.dominion.Resources.Game game4 = null;
    cs362.dominion.Cards.Cutpurse cutpurse5 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str6 = cutpurse5.getDefinition();
    int i8 = cutpurse5.getInitialSupply(5);
    int i9 = cutpurse5.getCost();
    int i10 = cutpurse5.getCoins();
    cs362.dominion.Resources.Game game11 = null;
    cs362.dominion.Resources.Player[] player_array12 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player13 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player13, player_array12);
    cs362.dominion.Resources.Supply supply15 = null;
    cs362.dominion.Resources.Option option16 = cutpurse5.playCard(game11, arraylist_player13, supply15);
    cs362.dominion.Resources.Supply supply17 = null;
    cs362.dominion.Resources.Option option18 = cutpurse0.playCard(game4, arraylist_player13, supply17);
    java.lang.String str19 = cutpurse0.getDefinition();
    int i20 = cutpurse0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str6.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str19.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 4);

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test271"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    int i8 = hand7.getActions();
    int i9 = hand7.getActions();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls10 = hand7.cardTypesInHand();
    hand7.printHand();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card12 = hand7.removeAllCards();
    cs362.dominion.Resources.Deck deck13 = null;
    cs362.dominion.Resources.Hand hand14 = new cs362.dominion.Resources.Hand(arraylist_card12, deck13);
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls15 = hand14.cardTypesInHand();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls15);

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test272"); }

    cs362.dominion.Cards.GreatHall greatHall0 = new cs362.dominion.Cards.GreatHall();
    int i1 = greatHall0.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = greatHall0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = greatHall0.getType();
    int i5 = greatHall0.getInitialSupply((int)(byte)-1);
    int i7 = greatHall0.getInitialSupply((int)'a');
    int i8 = greatHall0.getActions();
    int i9 = greatHall0.getActions();
    int i11 = greatHall0.getInitialSupply((int)'#');
    int i12 = greatHall0.getVictoryPoints();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test273"); }

    cs362.dominion.Cards.CouncilRoom councilRoom0 = new cs362.dominion.Cards.CouncilRoom();
    int i1 = councilRoom0.getCards();
    int i2 = councilRoom0.getCards();
    java.lang.String str3 = councilRoom0.getDefinition();
    int i4 = councilRoom0.getBuys();
    int i5 = councilRoom0.getCards();
    int i7 = councilRoom0.getInitialSupply(1);
    cs362.dominion.Resources.Game game8 = null;
    cs362.dominion.Cards.Cutpurse cutpurse9 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str10 = cutpurse9.getDefinition();
    java.lang.String str11 = cutpurse9.getDefinition();
    cs362.dominion.Resources.Game game12 = null;
    cs362.dominion.Cards.Cutpurse cutpurse13 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str14 = cutpurse13.getDefinition();
    int i16 = cutpurse13.getInitialSupply((int)'4');
    cs362.dominion.Resources.Game game17 = null;
    cs362.dominion.Cards.Cutpurse cutpurse18 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str19 = cutpurse18.getDefinition();
    int i21 = cutpurse18.getInitialSupply(5);
    int i23 = cutpurse18.getInitialSupply((int)(byte)10);
    java.lang.String str24 = cutpurse18.getDefinition();
    int i25 = cutpurse18.getCost();
    int i27 = cutpurse18.getInitialSupply(6);
    cs362.dominion.Resources.Game game28 = null;
    cs362.dominion.Resources.Player[] player_array29 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player30 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player30, player_array29);
    cs362.dominion.Resources.Supply supply32 = null;
    cs362.dominion.Resources.Option option33 = cutpurse18.playCard(game28, arraylist_player30, supply32);
    cs362.dominion.Resources.Supply supply34 = null;
    cs362.dominion.Resources.Option option35 = cutpurse13.playCard(game17, arraylist_player30, supply34);
    cs362.dominion.Resources.Supply supply36 = null;
    cs362.dominion.Resources.Option option37 = cutpurse9.playCard(game12, arraylist_player30, supply36);
    cs362.dominion.Resources.Supply supply38 = null;
    cs362.dominion.Resources.Option option39 = councilRoom0.playCard(game8, arraylist_player30, supply38);
    int i40 = councilRoom0.getCost();
    int i41 = councilRoom0.getBuys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str3.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str10.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str11.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str14.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str19.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str24.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test274"); }

    cs362.dominion.Cards.Silver silver0 = new cs362.dominion.Cards.Silver();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = silver0.getType();
    int i2 = silver0.getCoins();
    java.lang.String str3 = silver0.getDefinition();
    int i4 = silver0.getCoins();
    int i5 = silver0.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = silver0.getType();
    java.lang.String str7 = silver0.getDefinition();
    int i8 = silver0.getCost();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "A silver resource, worth $2"+ "'", str3.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "A silver resource, worth $2"+ "'", str7.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test275"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.getCoins();
    int i13 = hand7.size();
    int i14 = hand7.getCoins();
    int i15 = hand7.getBuys();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls16 = hand7.cardTypesInHand();
    int i17 = hand7.getActions();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card18 = hand7.removeAllCards();
    cs362.dominion.Resources.Game.gamePhase gamePhase_instance19 = cs362.dominion.Resources.Game.gamePhase.BUY;
    cs362.dominion.Resources.Supply supply20 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls21 = hand7.buyOptions(gamePhase_instance19, supply20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card18);
    org.junit.Assert.assertTrue("'" + gamePhase_instance19 + "' != '" + cs362.dominion.Resources.Game.gamePhase.BUY + "'", gamePhase_instance19.equals(cs362.dominion.Resources.Game.gamePhase.BUY));

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test276"); }

    cs362.dominion.Cards.Adventurer adventurer0 = new cs362.dominion.Cards.Adventurer();
    java.lang.String str1 = adventurer0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = adventurer0.getType();
    int i4 = adventurer0.getInitialSupply(0);
    java.lang.String str5 = adventurer0.getDefinition();
    int i6 = adventurer0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = adventurer0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = adventurer0.getType();
    int i10 = adventurer0.getInitialSupply((int)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str1.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str5.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 6);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test277"); }

    cs362.dominion.Cards.GreatHall greatHall0 = new cs362.dominion.Cards.GreatHall();
    int i1 = greatHall0.getVictoryPoints();
    int i3 = greatHall0.getInitialSupply((int)(short)0);
    int i4 = greatHall0.getCost();
    java.lang.String str5 = greatHall0.getDefinition();
    int i6 = greatHall0.getVictoryPoints();
    int i7 = greatHall0.getActions();
    int i8 = greatHall0.getCoins();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1 Victory Point +1 Card; +1 Action."+ "'", str5.equals("1 Victory Point +1 Card; +1 Action."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test278"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    int i8 = hand7.getActions();
    int i9 = hand7.getCoins();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls10 = hand7.cardTypesInHand();
    int i11 = hand7.getBuys();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls12 = hand7.cardTypesInHand();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls12);

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test279"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Resources.Deck deck8 = null;
    cs362.dominion.Resources.Hand hand9 = new cs362.dominion.Resources.Hand(arraylist_card4, deck8);
    cs362.dominion.Cards.Estate estate10 = new cs362.dominion.Cards.Estate();
    java.lang.String str11 = estate10.getName();
    java.lang.String str12 = estate10.getDefinition();
    java.lang.String str13 = estate10.getDefinition();
    java.lang.String str14 = estate10.getDefinition();
    java.lang.String str15 = estate10.getDefinition();
    int i17 = estate10.getInitialSupply((int)'a');
    int i18 = estate10.getVictoryPoints();
    hand9.addCard((cs362.dominion.Cards.Card)estate10);
    hand9.printHand();
    cs362.dominion.Resources.Game.gamePhase gamePhase_instance21 = cs362.dominion.Resources.Game.gamePhase.ACTION;
    cs362.dominion.Resources.Supply supply22 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls23 = hand9.actionOptions(gamePhase_instance21, supply22);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Estate"+ "'", str11.equals("Estate"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Victory card, worth 1 victory point"+ "'", str12.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Victory card, worth 1 victory point"+ "'", str13.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Victory card, worth 1 victory point"+ "'", str14.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Victory card, worth 1 victory point"+ "'", str15.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    org.junit.Assert.assertTrue("'" + gamePhase_instance21 + "' != '" + cs362.dominion.Resources.Game.gamePhase.ACTION + "'", gamePhase_instance21.equals(cs362.dominion.Resources.Game.gamePhase.ACTION));

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test280"); }

    cs362.dominion.Cards.Village village0 = new cs362.dominion.Cards.Village();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = village0.getType();
    java.lang.String str2 = village0.getDefinition();
    int i4 = village0.getInitialSupply((int)(byte)1);
    int i6 = village0.getInitialSupply(6);
    int i7 = village0.getActions();
    int i9 = village0.getInitialSupply((int)(short)10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "+1 Card; +2 Actions."+ "'", str2.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test281"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.getCoins();
    cs362.dominion.Cards.Copper copper13 = new cs362.dominion.Cards.Copper();
    int i15 = copper13.getInitialSupply((int)' ');
    hand7.addCard((cs362.dominion.Cards.Card)copper13);
    int i17 = hand7.size();
    hand7.addActionPoints(40);
    cs362.dominion.Cards.Gold gold20 = new cs362.dominion.Cards.Gold();
    int i21 = gold20.getCost();
    java.lang.String str22 = gold20.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance23 = gold20.getType();
    hand7.addCard((cs362.dominion.Cards.Card)gold20);
    cs362.dominion.Cards.Gardens gardens25 = new cs362.dominion.Cards.Gardens();
    int i26 = gardens25.getCost();
    int i28 = gardens25.getInitialSupply((int)(byte)0);
    hand7.addCard((cs362.dominion.Cards.Card)gardens25);
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card30 = hand7.allCards();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "A gold resource, worth $3"+ "'", str22.equals("A gold resource, worth $3"));
    org.junit.Assert.assertTrue("'" + cardTypes_instance23 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance23.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card30);

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test282"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    java.lang.String str3 = embargo0.getName();
    java.lang.String str4 = embargo0.getDefinition();
    int i5 = embargo0.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = embargo0.getType();
    int i7 = embargo0.getCoins();
    int i9 = embargo0.getInitialSupply(101);
    cs362.dominion.Resources.Game game10 = null;
    cs362.dominion.Cards.Village village11 = new cs362.dominion.Cards.Village();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance12 = village11.getType();
    java.lang.String str13 = village11.getDefinition();
    int i14 = village11.getActions();
    int i16 = village11.getInitialSupply((int)(byte)-1);
    int i17 = village11.getActions();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance18 = village11.getType();
    java.lang.String str19 = village11.getDefinition();
    cs362.dominion.Resources.Game game20 = null;
    cs362.dominion.Cards.Cutpurse cutpurse21 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str22 = cutpurse21.getDefinition();
    int i24 = cutpurse21.getInitialSupply((int)'4');
    cs362.dominion.Resources.Game game25 = null;
    cs362.dominion.Cards.Cutpurse cutpurse26 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str27 = cutpurse26.getDefinition();
    int i29 = cutpurse26.getInitialSupply(5);
    int i30 = cutpurse26.getCost();
    int i31 = cutpurse26.getCoins();
    cs362.dominion.Resources.Game game32 = null;
    cs362.dominion.Resources.Player[] player_array33 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player34 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player34, player_array33);
    cs362.dominion.Resources.Supply supply36 = null;
    cs362.dominion.Resources.Option option37 = cutpurse26.playCard(game32, arraylist_player34, supply36);
    cs362.dominion.Resources.Supply supply38 = null;
    cs362.dominion.Resources.Option option39 = cutpurse21.playCard(game25, arraylist_player34, supply38);
    cs362.dominion.Resources.Supply supply40 = null;
    cs362.dominion.Resources.Option option41 = village11.playCard(game20, arraylist_player34, supply40);
    cs362.dominion.Resources.Supply supply42 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option43 = embargo0.playCard(game10, arraylist_player34, supply42);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Embargo"+ "'", str3.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."+ "'", str4.equals("+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance12 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance12.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "+1 Card; +2 Actions."+ "'", str13.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance18 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance18.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "+1 Card; +2 Actions."+ "'", str19.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str22.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str27.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option41);

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test283"); }

    cs362.dominion.Cards.Adventurer adventurer0 = new cs362.dominion.Cards.Adventurer();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = adventurer0.getType();
    int i3 = adventurer0.getInitialSupply((int)(short)0);
    int i4 = adventurer0.getCoins();
    cs362.dominion.Resources.Game game5 = null;
    cs362.dominion.Cards.Cutpurse cutpurse6 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str7 = cutpurse6.getDefinition();
    int i9 = cutpurse6.getInitialSupply(5);
    int i11 = cutpurse6.getInitialSupply(8);
    cs362.dominion.Resources.Game game12 = null;
    cs362.dominion.Cards.Gold gold13 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance14 = gold13.getType();
    cs362.dominion.Resources.Game game15 = null;
    cs362.dominion.Resources.Player[] player_array16 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player17 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player17, player_array16);
    cs362.dominion.Resources.Supply supply19 = null;
    cs362.dominion.Resources.Option option20 = gold13.playCard(game15, arraylist_player17, supply19);
    cs362.dominion.Resources.Supply supply21 = null;
    cs362.dominion.Resources.Option option22 = cutpurse6.playCard(game12, arraylist_player17, supply21);
    int i23 = cutpurse6.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance24 = cutpurse6.getType();
    int i26 = cutpurse6.getInitialSupply((int)(byte)0);
    cs362.dominion.Resources.Game game27 = null;
    cs362.dominion.Cards.Cutpurse cutpurse28 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str29 = cutpurse28.getDefinition();
    int i31 = cutpurse28.getInitialSupply(5);
    int i33 = cutpurse28.getInitialSupply((int)(byte)10);
    java.lang.String str34 = cutpurse28.getDefinition();
    int i35 = cutpurse28.getCost();
    int i37 = cutpurse28.getInitialSupply(6);
    cs362.dominion.Resources.Game game38 = null;
    cs362.dominion.Resources.Player[] player_array39 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player40 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player40, player_array39);
    cs362.dominion.Resources.Supply supply42 = null;
    cs362.dominion.Resources.Option option43 = cutpurse28.playCard(game38, arraylist_player40, supply42);
    java.lang.String str44 = cutpurse28.getDefinition();
    cs362.dominion.Resources.Game game45 = null;
    cs362.dominion.Cards.Village village46 = new cs362.dominion.Cards.Village();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance47 = village46.getType();
    java.lang.String str48 = village46.getDefinition();
    int i49 = village46.getActions();
    int i51 = village46.getInitialSupply((int)(byte)-1);
    int i52 = village46.getActions();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance53 = village46.getType();
    java.lang.String str54 = village46.getDefinition();
    cs362.dominion.Resources.Game game55 = null;
    cs362.dominion.Cards.Cutpurse cutpurse56 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str57 = cutpurse56.getDefinition();
    int i59 = cutpurse56.getInitialSupply((int)'4');
    cs362.dominion.Resources.Game game60 = null;
    cs362.dominion.Cards.Cutpurse cutpurse61 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str62 = cutpurse61.getDefinition();
    int i64 = cutpurse61.getInitialSupply(5);
    int i65 = cutpurse61.getCost();
    int i66 = cutpurse61.getCoins();
    cs362.dominion.Resources.Game game67 = null;
    cs362.dominion.Resources.Player[] player_array68 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player69 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b70 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player69, player_array68);
    cs362.dominion.Resources.Supply supply71 = null;
    cs362.dominion.Resources.Option option72 = cutpurse61.playCard(game67, arraylist_player69, supply71);
    cs362.dominion.Resources.Supply supply73 = null;
    cs362.dominion.Resources.Option option74 = cutpurse56.playCard(game60, arraylist_player69, supply73);
    cs362.dominion.Resources.Supply supply75 = null;
    cs362.dominion.Resources.Option option76 = village46.playCard(game55, arraylist_player69, supply75);
    cs362.dominion.Resources.Supply supply77 = null;
    cs362.dominion.Resources.Option option78 = cutpurse28.playCard(game45, arraylist_player69, supply77);
    cs362.dominion.Resources.Supply supply79 = null;
    cs362.dominion.Resources.Option option80 = cutpurse6.playCard(game27, arraylist_player69, supply79);
    cs362.dominion.Resources.Supply supply81 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option82 = adventurer0.playCard(game5, arraylist_player69, supply81);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str7.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance14 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance14.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance24 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance24.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str29.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str34.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str44.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance47 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance47.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "+1 Card; +2 Actions."+ "'", str48.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance53 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance53.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "+1 Card; +2 Actions."+ "'", str54.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str57.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str62.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option80);

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test284"); }

    cs362.dominion.Cards.GreatHall greatHall0 = new cs362.dominion.Cards.GreatHall();
    int i1 = greatHall0.getVictoryPoints();
    int i3 = greatHall0.getInitialSupply((int)(short)0);
    int i5 = greatHall0.getInitialSupply((int)'#');
    int i7 = greatHall0.getInitialSupply(1);
    int i8 = greatHall0.getVictoryPoints();
    java.lang.String str9 = greatHall0.getDefinition();
    int i11 = greatHall0.getInitialSupply((int)' ');
    int i12 = greatHall0.getCards();
    int i13 = greatHall0.getCards();
    int i15 = greatHall0.getInitialSupply((int)' ');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1 Victory Point +1 Card; +1 Action."+ "'", str9.equals("1 Victory Point +1 Card; +1 Action."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 10);

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test285"); }

    cs362.dominion.Cards.Adventurer adventurer0 = new cs362.dominion.Cards.Adventurer();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = adventurer0.getType();
    int i3 = adventurer0.getInitialSupply((int)(short)0);
    int i4 = adventurer0.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = adventurer0.getType();
    java.lang.String str6 = adventurer0.getDefinition();
    int i7 = adventurer0.getCost();
    java.lang.String str8 = adventurer0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance9 = adventurer0.getType();
    cs362.dominion.Resources.Game game10 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom11 = new cs362.dominion.Cards.CouncilRoom();
    int i12 = councilRoom11.getCards();
    int i13 = councilRoom11.getCost();
    java.lang.String str14 = councilRoom11.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance15 = councilRoom11.getType();
    int i17 = councilRoom11.getInitialSupply(3);
    int i18 = councilRoom11.getCost();
    int i19 = councilRoom11.getCards();
    cs362.dominion.Resources.Game game20 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom21 = new cs362.dominion.Cards.CouncilRoom();
    int i22 = councilRoom21.getCards();
    int i23 = councilRoom21.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance24 = councilRoom21.getType();
    int i25 = councilRoom21.getBuys();
    int i26 = councilRoom21.getCards();
    int i27 = councilRoom21.getCost();
    cs362.dominion.Resources.Game game28 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom29 = new cs362.dominion.Cards.CouncilRoom();
    int i30 = councilRoom29.getCards();
    int i32 = councilRoom29.getInitialSupply((int)'#');
    int i33 = councilRoom29.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance34 = councilRoom29.getType();
    cs362.dominion.Resources.Game game35 = null;
    cs362.dominion.Cards.Village village36 = new cs362.dominion.Cards.Village();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance37 = village36.getType();
    java.lang.String str38 = village36.getDefinition();
    int i39 = village36.getActions();
    int i41 = village36.getInitialSupply((int)(byte)-1);
    int i42 = village36.getActions();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance43 = village36.getType();
    java.lang.String str44 = village36.getDefinition();
    cs362.dominion.Resources.Game game45 = null;
    cs362.dominion.Cards.Cutpurse cutpurse46 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str47 = cutpurse46.getDefinition();
    int i49 = cutpurse46.getInitialSupply((int)'4');
    cs362.dominion.Resources.Game game50 = null;
    cs362.dominion.Cards.Cutpurse cutpurse51 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str52 = cutpurse51.getDefinition();
    int i54 = cutpurse51.getInitialSupply(5);
    int i55 = cutpurse51.getCost();
    int i56 = cutpurse51.getCoins();
    cs362.dominion.Resources.Game game57 = null;
    cs362.dominion.Resources.Player[] player_array58 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player59 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b60 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player59, player_array58);
    cs362.dominion.Resources.Supply supply61 = null;
    cs362.dominion.Resources.Option option62 = cutpurse51.playCard(game57, arraylist_player59, supply61);
    cs362.dominion.Resources.Supply supply63 = null;
    cs362.dominion.Resources.Option option64 = cutpurse46.playCard(game50, arraylist_player59, supply63);
    cs362.dominion.Resources.Supply supply65 = null;
    cs362.dominion.Resources.Option option66 = village36.playCard(game45, arraylist_player59, supply65);
    cs362.dominion.Resources.Supply supply67 = null;
    cs362.dominion.Resources.Option option68 = councilRoom29.playCard(game35, arraylist_player59, supply67);
    cs362.dominion.Resources.Supply supply69 = null;
    cs362.dominion.Resources.Option option70 = councilRoom21.playCard(game28, arraylist_player59, supply69);
    cs362.dominion.Resources.Supply supply71 = null;
    cs362.dominion.Resources.Option option72 = councilRoom11.playCard(game20, arraylist_player59, supply71);
    cs362.dominion.Resources.Supply supply73 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option74 = adventurer0.playCard(game10, arraylist_player59, supply73);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str6.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str8.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance9 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance9.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str14.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance15 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance15.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance24 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance24.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance34 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance34.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance37 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance37.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "+1 Card; +2 Actions."+ "'", str38.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance43 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance43.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "+1 Card; +2 Actions."+ "'", str44.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str47.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str52.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option72);

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test286"); }

    cs362.dominion.Cards.CouncilRoom councilRoom0 = new cs362.dominion.Cards.CouncilRoom();
    int i1 = councilRoom0.getCards();
    int i2 = councilRoom0.getCards();
    int i4 = councilRoom0.getInitialSupply(200);
    int i5 = councilRoom0.getBuys();
    int i6 = councilRoom0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 5);

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test287"); }

    cs362.dominion.Cards.Province province0 = new cs362.dominion.Cards.Province();
    int i2 = province0.getInitialSupply(0);
    java.lang.String str3 = province0.getDefinition();
    int i5 = province0.getInitialSupply((int)' ');
    java.lang.String str6 = province0.getDefinition();
    java.lang.String str7 = province0.getDefinition();
    int i8 = province0.getCost();
    java.lang.String str9 = province0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance10 = province0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Victory card, worth 6 victory points"+ "'", str3.equals("Victory card, worth 6 victory points"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Victory card, worth 6 victory points"+ "'", str6.equals("Victory card, worth 6 victory points"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Victory card, worth 6 victory points"+ "'", str7.equals("Victory card, worth 6 victory points"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Victory card, worth 6 victory points"+ "'", str9.equals("Victory card, worth 6 victory points"));
    org.junit.Assert.assertTrue("'" + cardTypes_instance10 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance10.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test288"); }

    cs362.dominion.Cards.Baron baron0 = new cs362.dominion.Cards.Baron();
    int i2 = baron0.getInitialSupply(1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = baron0.getType();
    int i5 = baron0.getInitialSupply(5);
    int i7 = baron0.getInitialSupply(6);
    int i8 = baron0.getBuys();
    java.lang.String str9 = baron0.getDefinition();
    int i11 = baron0.getInitialSupply((int)(byte)0);
    int i12 = baron0.getCost();
    java.lang.String str13 = baron0.getDefinition();
    java.lang.String str14 = baron0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."+ "'", str9.equals("+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."+ "'", str13.equals("+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."+ "'", str14.equals("+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."));

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test289"); }

    cs362.dominion.Cards.Silver silver0 = new cs362.dominion.Cards.Silver();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = silver0.getType();
    int i3 = silver0.getInitialSupply((int)'4');
    int i4 = silver0.getCost();
    int i6 = silver0.getInitialSupply(8);
    java.lang.String str7 = silver0.getDefinition();
    int i8 = silver0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance9 = silver0.getType();
    java.lang.String str10 = silver0.getDefinition();
    int i11 = silver0.getCoins();
    java.lang.String str12 = silver0.getDefinition();
    int i13 = silver0.getCoins();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "A silver resource, worth $2"+ "'", str7.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    org.junit.Assert.assertTrue("'" + cardTypes_instance9 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance9.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "A silver resource, worth $2"+ "'", str10.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "A silver resource, worth $2"+ "'", str12.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test290"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.getCoins();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card13 = hand7.removeAllCards();
    hand7.printHand();
    int i15 = hand7.getCoins();
    int i16 = hand7.getCoins();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls17 = hand7.cardTypesInHand();
    int i18 = hand7.getBuys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test291"); }

    cs362.dominion.Cards.Feast feast0 = new cs362.dominion.Cards.Feast();
    int i2 = feast0.getInitialSupply(10);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = feast0.getType();
    java.lang.String str4 = feast0.getDefinition();
    int i6 = feast0.getInitialSupply((int)(byte)100);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = feast0.getType();
    cs362.dominion.Resources.Game game8 = null;
    cs362.dominion.Cards.Silver silver9 = new cs362.dominion.Cards.Silver();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance10 = silver9.getType();
    int i12 = silver9.getInitialSupply((int)'4');
    java.lang.String str13 = silver9.getDefinition();
    java.lang.String str14 = silver9.getDefinition();
    int i15 = silver9.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance16 = silver9.getType();
    cs362.dominion.Resources.Game game17 = null;
    cs362.dominion.Cards.Cutpurse cutpurse18 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str19 = cutpurse18.getDefinition();
    int i21 = cutpurse18.getInitialSupply(5);
    int i23 = cutpurse18.getInitialSupply((int)(byte)10);
    java.lang.String str24 = cutpurse18.getDefinition();
    cs362.dominion.Resources.Game game25 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom26 = new cs362.dominion.Cards.CouncilRoom();
    int i27 = councilRoom26.getCards();
    int i28 = councilRoom26.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance29 = councilRoom26.getType();
    int i30 = councilRoom26.getBuys();
    cs362.dominion.Resources.Game game31 = null;
    cs362.dominion.Resources.Player[] player_array32 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player33 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player33, player_array32);
    cs362.dominion.Resources.Supply supply35 = null;
    cs362.dominion.Resources.Option option36 = councilRoom26.playCard(game31, arraylist_player33, supply35);
    cs362.dominion.Resources.Supply supply37 = null;
    cs362.dominion.Resources.Option option38 = cutpurse18.playCard(game25, arraylist_player33, supply37);
    cs362.dominion.Resources.Supply supply39 = null;
    cs362.dominion.Resources.Option option40 = silver9.playCard(game17, arraylist_player33, supply39);
    cs362.dominion.Resources.Supply supply41 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option42 = feast0.playCard(game8, arraylist_player33, supply41);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Trash this card. Gain a card costing up to $5."+ "'", str4.equals("Trash this card. Gain a card costing up to $5."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance10 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance10.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "A silver resource, worth $2"+ "'", str13.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "A silver resource, worth $2"+ "'", str14.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 3);
    org.junit.Assert.assertTrue("'" + cardTypes_instance16 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance16.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str19.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str24.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance29 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance29.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option40);

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test292"); }

    cs362.dominion.Cards.Feast feast0 = new cs362.dominion.Cards.Feast();
    int i1 = feast0.getCost();
    int i2 = feast0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = feast0.getType();
    int i4 = feast0.getCost();
    int i5 = feast0.getActions();
    java.lang.String str6 = feast0.getDefinition();
    int i7 = feast0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Trash this card. Gain a card costing up to $5."+ "'", str6.equals("Trash this card. Gain a card costing up to $5."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test293"); }

    cs362.dominion.Cards.Mine mine0 = new cs362.dominion.Cards.Mine();
    int i2 = mine0.getInitialSupply((int)'a');
    int i3 = mine0.getCost();
    int i4 = mine0.getCost();
    int i6 = mine0.getInitialSupply((int)(byte)0);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = mine0.getType();
    int i9 = mine0.getInitialSupply(0);
    int i11 = mine0.getInitialSupply(2);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance12 = mine0.getType();
    java.lang.String str13 = mine0.getDefinition();
    int i15 = mine0.getInitialSupply((int)(short)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance12 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance12.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."+ "'", str13.equals("Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 10);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test294"); }

    cs362.dominion.Cards.Adventurer adventurer0 = new cs362.dominion.Cards.Adventurer();
    java.lang.String str1 = adventurer0.getDefinition();
    int i2 = adventurer0.getCost();
    int i4 = adventurer0.getInitialSupply(10);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = adventurer0.getType();
    int i6 = adventurer0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = adventurer0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str1.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 6);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test295"); }

    cs362.dominion.Cards.Ambassador ambassador0 = new cs362.dominion.Cards.Ambassador();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = ambassador0.getType();
    int i2 = ambassador0.getCost();
    java.lang.String str3 = ambassador0.getDefinition();
    int i5 = ambassador0.getInitialSupply((int)'#');
    int i6 = ambassador0.getCost();
    cs362.dominion.Resources.Game game7 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom8 = new cs362.dominion.Cards.CouncilRoom();
    int i9 = councilRoom8.getCards();
    int i10 = councilRoom8.getCost();
    java.lang.String str11 = councilRoom8.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance12 = councilRoom8.getType();
    int i14 = councilRoom8.getInitialSupply(3);
    int i15 = councilRoom8.getCost();
    int i16 = councilRoom8.getCards();
    int i18 = councilRoom8.getInitialSupply((int)(short)1);
    cs362.dominion.Resources.Game game19 = null;
    cs362.dominion.Cards.GreatHall greatHall20 = new cs362.dominion.Cards.GreatHall();
    int i21 = greatHall20.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance22 = greatHall20.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance23 = greatHall20.getType();
    int i25 = greatHall20.getInitialSupply((int)(byte)-1);
    int i27 = greatHall20.getInitialSupply((int)'a');
    int i28 = greatHall20.getCards();
    cs362.dominion.Resources.Game game29 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom30 = new cs362.dominion.Cards.CouncilRoom();
    int i31 = councilRoom30.getCards();
    int i33 = councilRoom30.getInitialSupply((int)'#');
    int i34 = councilRoom30.getCost();
    java.lang.String str35 = councilRoom30.getDefinition();
    cs362.dominion.Resources.Game game36 = null;
    cs362.dominion.Cards.Cutpurse cutpurse37 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str38 = cutpurse37.getDefinition();
    int i40 = cutpurse37.getInitialSupply((int)'4');
    cs362.dominion.Resources.Game game41 = null;
    cs362.dominion.Cards.Cutpurse cutpurse42 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str43 = cutpurse42.getDefinition();
    int i45 = cutpurse42.getInitialSupply(5);
    int i46 = cutpurse42.getCost();
    int i47 = cutpurse42.getCoins();
    cs362.dominion.Resources.Game game48 = null;
    cs362.dominion.Resources.Player[] player_array49 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player50 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player50, player_array49);
    cs362.dominion.Resources.Supply supply52 = null;
    cs362.dominion.Resources.Option option53 = cutpurse42.playCard(game48, arraylist_player50, supply52);
    cs362.dominion.Resources.Supply supply54 = null;
    cs362.dominion.Resources.Option option55 = cutpurse37.playCard(game41, arraylist_player50, supply54);
    cs362.dominion.Resources.Supply supply56 = null;
    cs362.dominion.Resources.Option option57 = councilRoom30.playCard(game36, arraylist_player50, supply56);
    cs362.dominion.Resources.Supply supply58 = null;
    cs362.dominion.Resources.Option option59 = greatHall20.playCard(game29, arraylist_player50, supply58);
    cs362.dominion.Resources.Supply supply60 = null;
    cs362.dominion.Resources.Option option61 = councilRoom8.playCard(game19, arraylist_player50, supply60);
    cs362.dominion.Resources.Supply supply62 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option63 = ambassador0.playCard(game7, arraylist_player50, supply62);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str3.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str11.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance12 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance12.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance22 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance22.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance23 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance23.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str35.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str38.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str43.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option61);

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test296"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    int i8 = hand7.size();
    hand7.printHand();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card10 = hand7.allCards();
    cs362.dominion.Resources.Deck deck11 = null;
    cs362.dominion.Resources.Hand hand12 = new cs362.dominion.Resources.Hand(arraylist_card10, deck11);
    cs362.dominion.Resources.Deck deck13 = null;
    cs362.dominion.Resources.Hand hand14 = new cs362.dominion.Resources.Hand(arraylist_card10, deck13);
    int i15 = hand14.size();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card16 = hand14.removeAllCards();
    cs362.dominion.Resources.Deck deck17 = null;
    cs362.dominion.Resources.Hand hand18 = new cs362.dominion.Resources.Hand(arraylist_card16, deck17);
    cs362.dominion.Resources.Deck deck19 = null;
    cs362.dominion.Resources.Hand hand20 = new cs362.dominion.Resources.Hand(arraylist_card16, deck19);
    int i21 = hand20.size();
    int i22 = hand20.getActions();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test297"); }

    cs362.dominion.Cards.Bazaar bazaar0 = new cs362.dominion.Cards.Bazaar();
    int i1 = bazaar0.getCards();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = bazaar0.getType();
    int i3 = bazaar0.getCoins();
    int i4 = bazaar0.getCoins();
    int i5 = bazaar0.getActions();
    int i6 = bazaar0.getActions();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test298"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    int i3 = cutpurse0.getInitialSupply(5);
    int i5 = cutpurse0.getInitialSupply(8);
    cs362.dominion.Resources.Game game6 = null;
    cs362.dominion.Cards.Gold gold7 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = gold7.getType();
    cs362.dominion.Resources.Game game9 = null;
    cs362.dominion.Resources.Player[] player_array10 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player11 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player11, player_array10);
    cs362.dominion.Resources.Supply supply13 = null;
    cs362.dominion.Resources.Option option14 = gold7.playCard(game9, arraylist_player11, supply13);
    cs362.dominion.Resources.Supply supply15 = null;
    cs362.dominion.Resources.Option option16 = cutpurse0.playCard(game6, arraylist_player11, supply15);
    int i17 = cutpurse0.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance18 = cutpurse0.getType();
    int i20 = cutpurse0.getInitialSupply(100);
    int i21 = cutpurse0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance18 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance18.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 4);

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test299"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    int i8 = hand7.getActions();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card9 = hand7.allCards();
    int i10 = hand7.size();
    hand7.printHand();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card12 = hand7.allCards();
    cs362.dominion.Resources.Deck deck13 = null;
    cs362.dominion.Resources.Hand hand14 = new cs362.dominion.Resources.Hand(arraylist_card12, deck13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card12);

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test300"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card12 = hand7.allCards();
    hand7.addActionPoints((int)(byte)0);
    int i15 = hand7.size();
    hand7.addActionPoints((int)(byte)0);
    cs362.dominion.Resources.Game.gamePhase gamePhase_instance18 = cs362.dominion.Resources.Game.gamePhase.BUY;
    cs362.dominion.Resources.Supply supply19 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls20 = hand7.buyOptions(gamePhase_instance18, supply19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 2);
    org.junit.Assert.assertTrue("'" + gamePhase_instance18 + "' != '" + cs362.dominion.Resources.Game.gamePhase.BUY + "'", gamePhase_instance18.equals(cs362.dominion.Resources.Game.gamePhase.BUY));

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test301"); }

    cs362.dominion.Cards.Copper copper0 = new cs362.dominion.Cards.Copper();
    int i2 = copper0.getInitialSupply((int)' ');
    int i4 = copper0.getInitialSupply(0);
    int i5 = copper0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = copper0.getType();
    int i8 = copper0.getInitialSupply(2);
    int i9 = copper0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test302"); }

    cs362.dominion.Cards.Baron baron0 = new cs362.dominion.Cards.Baron();
    java.lang.String str1 = baron0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."+ "'", str1.equals("+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."));

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test303"); }

    cs362.dominion.Cards.Bazaar bazaar0 = new cs362.dominion.Cards.Bazaar();
    int i1 = bazaar0.getCards();
    int i2 = bazaar0.getActions();
    int i3 = bazaar0.getCoins();
    int i4 = bazaar0.getActions();
    int i5 = bazaar0.getCoins();
    int i6 = bazaar0.getCards();
    int i7 = bazaar0.getActions();
    int i9 = bazaar0.getInitialSupply(60);
    int i10 = bazaar0.getVictoryPoints();
    int i11 = bazaar0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 5);

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test304"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    int i8 = hand7.getActions();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls9 = hand7.cardTypesInHand();
    int i10 = hand7.getBuys();
    int i11 = hand7.size();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card12 = hand7.removeAllCards();
    cs362.dominion.Resources.Game.gamePhase gamePhase_instance13 = cs362.dominion.Resources.Game.gamePhase.ACTION;
    cs362.dominion.Resources.Supply supply14 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls15 = hand7.actionOptions(gamePhase_instance13, supply14);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card12);
    org.junit.Assert.assertTrue("'" + gamePhase_instance13 + "' != '" + cs362.dominion.Resources.Game.gamePhase.ACTION + "'", gamePhase_instance13.equals(cs362.dominion.Resources.Game.gamePhase.ACTION));

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test305"); }

    cs362.dominion.Cards.Ambassador ambassador0 = new cs362.dominion.Cards.Ambassador();
    java.lang.String str1 = ambassador0.getDefinition();
    java.lang.String str2 = ambassador0.getDefinition();
    java.lang.String str3 = ambassador0.getDefinition();
    int i4 = ambassador0.getCost();
    java.lang.String str5 = ambassador0.getDefinition();
    java.lang.String str6 = ambassador0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str1.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str2.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str3.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str5.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str6.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test306"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    java.lang.String str2 = cutpurse0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = cutpurse0.getType();
    int i5 = cutpurse0.getInitialSupply(10);
    int i6 = cutpurse0.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = cutpurse0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = cutpurse0.getType();
    int i9 = cutpurse0.getCoins();
    java.lang.String str10 = cutpurse0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str2.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str10.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test307"); }

    cs362.dominion.Cards.GreatHall greatHall0 = new cs362.dominion.Cards.GreatHall();
    int i1 = greatHall0.getVictoryPoints();
    int i3 = greatHall0.getInitialSupply((int)(short)0);
    java.lang.String str4 = greatHall0.getDefinition();
    java.lang.String str5 = greatHall0.getDefinition();
    int i6 = greatHall0.getVictoryPoints();
    int i8 = greatHall0.getInitialSupply(0);
    int i9 = greatHall0.getCost();
    int i10 = greatHall0.getCards();
    int i11 = greatHall0.getVictoryPoints();
    int i13 = greatHall0.getInitialSupply((int)'a');
    int i14 = greatHall0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1 Victory Point +1 Card; +1 Action."+ "'", str4.equals("1 Victory Point +1 Card; +1 Action."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1 Victory Point +1 Card; +1 Action."+ "'", str5.equals("1 Victory Point +1 Card; +1 Action."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 3);

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test308"); }

    cs362.dominion.Cards.Duchy duchy0 = new cs362.dominion.Cards.Duchy();
    int i1 = duchy0.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = duchy0.getType();
    int i4 = duchy0.getInitialSupply((int)(byte)1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = duchy0.getType();
    int i6 = duchy0.getCost();
    int i8 = duchy0.getInitialSupply(10);
    int i10 = duchy0.getInitialSupply(8);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance11 = duchy0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 3);
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 8);
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 8);
    org.junit.Assert.assertTrue("'" + cardTypes_instance11 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance11.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test309"); }

    cs362.dominion.Cards.Baron baron0 = new cs362.dominion.Cards.Baron();
    int i2 = baron0.getInitialSupply(1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = baron0.getType();
    int i5 = baron0.getInitialSupply(5);
    int i7 = baron0.getInitialSupply(6);
    int i8 = baron0.getCost();
    cs362.dominion.Resources.Game game9 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom10 = new cs362.dominion.Cards.CouncilRoom();
    int i11 = councilRoom10.getCards();
    int i13 = councilRoom10.getInitialSupply((int)'#');
    java.lang.String str14 = councilRoom10.getDefinition();
    int i15 = councilRoom10.getCost();
    int i17 = councilRoom10.getInitialSupply(2);
    cs362.dominion.Resources.Game game18 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom19 = new cs362.dominion.Cards.CouncilRoom();
    int i20 = councilRoom19.getCards();
    int i21 = councilRoom19.getCost();
    java.lang.String str22 = councilRoom19.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance23 = councilRoom19.getType();
    int i25 = councilRoom19.getInitialSupply(3);
    int i26 = councilRoom19.getCost();
    int i27 = councilRoom19.getCost();
    int i28 = councilRoom19.getBuys();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance29 = councilRoom19.getType();
    int i30 = councilRoom19.getCost();
    cs362.dominion.Resources.Game game31 = null;
    cs362.dominion.Cards.Cutpurse cutpurse32 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str33 = cutpurse32.getDefinition();
    int i35 = cutpurse32.getInitialSupply(5);
    int i36 = cutpurse32.getCost();
    int i37 = cutpurse32.getCoins();
    cs362.dominion.Resources.Game game38 = null;
    cs362.dominion.Resources.Player[] player_array39 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player40 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player40, player_array39);
    cs362.dominion.Resources.Supply supply42 = null;
    cs362.dominion.Resources.Option option43 = cutpurse32.playCard(game38, arraylist_player40, supply42);
    cs362.dominion.Resources.Game game44 = null;
    cs362.dominion.Cards.Cutpurse cutpurse45 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str46 = cutpurse45.getDefinition();
    int i48 = cutpurse45.getInitialSupply(5);
    int i49 = cutpurse45.getCost();
    int i50 = cutpurse45.getCoins();
    cs362.dominion.Resources.Game game51 = null;
    cs362.dominion.Cards.Cutpurse cutpurse52 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str53 = cutpurse52.getDefinition();
    int i55 = cutpurse52.getInitialSupply(5);
    int i57 = cutpurse52.getInitialSupply(8);
    cs362.dominion.Resources.Game game58 = null;
    cs362.dominion.Cards.Gold gold59 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance60 = gold59.getType();
    cs362.dominion.Resources.Game game61 = null;
    cs362.dominion.Resources.Player[] player_array62 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player63 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b64 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player63, player_array62);
    cs362.dominion.Resources.Supply supply65 = null;
    cs362.dominion.Resources.Option option66 = gold59.playCard(game61, arraylist_player63, supply65);
    cs362.dominion.Resources.Supply supply67 = null;
    cs362.dominion.Resources.Option option68 = cutpurse52.playCard(game58, arraylist_player63, supply67);
    cs362.dominion.Resources.Supply supply69 = null;
    cs362.dominion.Resources.Option option70 = cutpurse45.playCard(game51, arraylist_player63, supply69);
    cs362.dominion.Resources.Supply supply71 = null;
    cs362.dominion.Resources.Option option72 = cutpurse32.playCard(game44, arraylist_player63, supply71);
    cs362.dominion.Resources.Supply supply73 = null;
    cs362.dominion.Resources.Option option74 = councilRoom19.playCard(game31, arraylist_player63, supply73);
    cs362.dominion.Resources.Supply supply75 = null;
    cs362.dominion.Resources.Option option76 = councilRoom10.playCard(game18, arraylist_player63, supply75);
    cs362.dominion.Resources.Supply supply77 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option78 = baron0.playCard(game9, arraylist_player63, supply77);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str14.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str22.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance23 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance23.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance29 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance29.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str33.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str46.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str53.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance60 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance60.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option76);

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test310"); }

    cs362.dominion.Cards.Gardens gardens0 = new cs362.dominion.Cards.Gardens();
    java.lang.String str1 = gardens0.getName();
    java.lang.String str2 = gardens0.getName();
    int i3 = gardens0.getCost();
    int i4 = gardens0.getCoins();
    int i6 = gardens0.getInitialSupply((int)(short)1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = gardens0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = gardens0.getType();
    java.lang.String str9 = gardens0.getDefinition();
    int i11 = gardens0.getInitialSupply((int)(byte)1);
    int i12 = gardens0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance13 = gardens0.getType();
    int i14 = gardens0.getCost();
    int i15 = gardens0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Gardens"+ "'", str1.equals("Gardens"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Gardens"+ "'", str2.equals("Gardens"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Worth 1 Victory for every 10 cards in your deck (rounded down)."+ "'", str9.equals("Worth 1 Victory for every 10 cards in your deck (rounded down)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance13 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance13.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 4);

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test311"); }

    cs362.dominion.Cards.Copper copper0 = new cs362.dominion.Cards.Copper();
    int i2 = copper0.getInitialSupply((int)' ');
    int i4 = copper0.getInitialSupply(0);
    int i5 = copper0.getCost();
    int i7 = copper0.getInitialSupply((int)(short)10);
    java.lang.String str8 = copper0.getDefinition();
    int i9 = copper0.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance10 = copper0.getType();
    int i11 = copper0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "A copper resource, worth $1"+ "'", str8.equals("A copper resource, worth $1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance10 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance10.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test312"); }

    cs362.dominion.Cards.Smithy smithy0 = new cs362.dominion.Cards.Smithy();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = smithy0.getType();
    int i2 = smithy0.getBuys();
    java.lang.String str3 = smithy0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = smithy0.getType();
    int i5 = smithy0.getCost();
    int i6 = smithy0.getCost();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "+3 Cards"+ "'", str3.equals("+3 Cards"));
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test313"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    int i2 = cutpurse0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = cutpurse0.getType();
    java.lang.String str4 = cutpurse0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str4.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test314"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    int i8 = hand7.getActions();
    int i9 = hand7.getCoins();
    hand7.addActionPoints((int)(short)100);
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls12 = hand7.cardTypesInHand();
    int i13 = hand7.getActions();
    hand7.addActionPoints(4);
    hand7.printHand();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card17 = hand7.allCards();
    cs362.dominion.Cards.Smithy smithy18 = new cs362.dominion.Cards.Smithy();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance19 = smithy18.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance20 = smithy18.getType();
    int i22 = smithy18.getInitialSupply((int)'#');
    int i23 = smithy18.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)smithy18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card17);
    org.junit.Assert.assertTrue("'" + cardTypes_instance19 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance19.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance20 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance20.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 4);

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test315"); }

    cs362.dominion.Cards.Ambassador ambassador0 = new cs362.dominion.Cards.Ambassador();
    int i1 = ambassador0.getCost();
    int i3 = ambassador0.getInitialSupply(5);
    int i5 = ambassador0.getInitialSupply(1);
    int i6 = ambassador0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = ambassador0.getType();
    cs362.dominion.Resources.Game game8 = null;
    cs362.dominion.Cards.Duchy duchy9 = new cs362.dominion.Cards.Duchy();
    int i10 = duchy9.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance11 = duchy9.getType();
    int i13 = duchy9.getInitialSupply((int)(byte)1);
    int i14 = duchy9.getVictoryPoints();
    int i15 = duchy9.getVictoryPoints();
    cs362.dominion.Resources.Game game16 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom17 = new cs362.dominion.Cards.CouncilRoom();
    int i18 = councilRoom17.getCards();
    int i19 = councilRoom17.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance20 = councilRoom17.getType();
    int i21 = councilRoom17.getBuys();
    java.lang.String str22 = councilRoom17.getDefinition();
    cs362.dominion.Resources.Game game23 = null;
    cs362.dominion.Cards.Silver silver24 = new cs362.dominion.Cards.Silver();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance25 = silver24.getType();
    int i27 = silver24.getInitialSupply((int)'4');
    java.lang.String str28 = silver24.getDefinition();
    java.lang.String str29 = silver24.getDefinition();
    java.lang.String str30 = silver24.getDefinition();
    cs362.dominion.Resources.Game game31 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom32 = new cs362.dominion.Cards.CouncilRoom();
    int i33 = councilRoom32.getCards();
    int i34 = councilRoom32.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance35 = councilRoom32.getType();
    java.lang.String str36 = councilRoom32.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance37 = councilRoom32.getType();
    int i38 = councilRoom32.getCost();
    int i39 = councilRoom32.getCards();
    cs362.dominion.Resources.Game game40 = null;
    cs362.dominion.Cards.Cutpurse cutpurse41 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str42 = cutpurse41.getDefinition();
    int i44 = cutpurse41.getInitialSupply(5);
    int i45 = cutpurse41.getCost();
    int i46 = cutpurse41.getCoins();
    cs362.dominion.Resources.Game game47 = null;
    cs362.dominion.Resources.Player[] player_array48 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player49 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player49, player_array48);
    cs362.dominion.Resources.Supply supply51 = null;
    cs362.dominion.Resources.Option option52 = cutpurse41.playCard(game47, arraylist_player49, supply51);
    cs362.dominion.Resources.Supply supply53 = null;
    cs362.dominion.Resources.Option option54 = councilRoom32.playCard(game40, arraylist_player49, supply53);
    cs362.dominion.Resources.Supply supply55 = null;
    cs362.dominion.Resources.Option option56 = silver24.playCard(game31, arraylist_player49, supply55);
    cs362.dominion.Resources.Supply supply57 = null;
    cs362.dominion.Resources.Option option58 = councilRoom17.playCard(game23, arraylist_player49, supply57);
    cs362.dominion.Resources.Supply supply59 = null;
    cs362.dominion.Resources.Option option60 = duchy9.playCard(game16, arraylist_player49, supply59);
    cs362.dominion.Resources.Supply supply61 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option62 = ambassador0.playCard(game8, arraylist_player49, supply61);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    org.junit.Assert.assertTrue("'" + cardTypes_instance11 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance11.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance20 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance20.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str22.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance25 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance25.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "A silver resource, worth $2"+ "'", str28.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "A silver resource, worth $2"+ "'", str29.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "A silver resource, worth $2"+ "'", str30.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance35 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance35.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str36.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance37 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance37.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str42.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option60);

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test316"); }

    cs362.dominion.Cards.Mine mine0 = new cs362.dominion.Cards.Mine();
    int i2 = mine0.getInitialSupply((int)'a');
    int i3 = mine0.getCost();
    int i4 = mine0.getCost();
    int i6 = mine0.getInitialSupply((int)(byte)0);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = mine0.getType();
    int i9 = mine0.getInitialSupply(3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test317"); }

    cs362.dominion.Cards.Baron baron0 = new cs362.dominion.Cards.Baron();
    int i2 = baron0.getInitialSupply(1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = baron0.getType();
    int i4 = baron0.getCoins();
    int i5 = baron0.getCost();
    int i6 = baron0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = baron0.getType();
    int i8 = baron0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test318"); }

    cs362.dominion.Cards.Estate estate0 = new cs362.dominion.Cards.Estate();
    java.lang.String str1 = estate0.getDefinition();
    int i2 = estate0.getCost();
    int i3 = estate0.getCost();
    int i4 = estate0.getCost();
    java.lang.String str5 = estate0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Victory card, worth 1 victory point"+ "'", str1.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Victory card, worth 1 victory point"+ "'", str5.equals("Victory card, worth 1 victory point"));

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test319"); }

    cs362.dominion.Exceptions.ConfiguationException configuationException1 = new cs362.dominion.Exceptions.ConfiguationException("Victory card, worth 6 victory points");

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test320"); }

    cs362.dominion.Cards.Adventurer adventurer0 = new cs362.dominion.Cards.Adventurer();
    int i2 = adventurer0.getInitialSupply(40);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = adventurer0.getType();
    java.lang.String str4 = adventurer0.getDefinition();
    cs362.dominion.Resources.Game game5 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom6 = new cs362.dominion.Cards.CouncilRoom();
    int i7 = councilRoom6.getCards();
    int i9 = councilRoom6.getInitialSupply(3);
    int i10 = councilRoom6.getCards();
    int i11 = councilRoom6.getBuys();
    int i13 = councilRoom6.getInitialSupply((int)'#');
    int i14 = councilRoom6.getCards();
    cs362.dominion.Resources.Game game15 = null;
    cs362.dominion.Cards.Bazaar bazaar16 = new cs362.dominion.Cards.Bazaar();
    int i17 = bazaar16.getCards();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance18 = bazaar16.getType();
    int i19 = bazaar16.getActions();
    int i21 = bazaar16.getInitialSupply((int)'a');
    int i22 = bazaar16.getCost();
    cs362.dominion.Resources.Game game23 = null;
    cs362.dominion.Cards.GreatHall greatHall24 = new cs362.dominion.Cards.GreatHall();
    int i25 = greatHall24.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance26 = greatHall24.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance27 = greatHall24.getType();
    int i29 = greatHall24.getInitialSupply((int)(byte)-1);
    int i31 = greatHall24.getInitialSupply((int)'a');
    int i32 = greatHall24.getCards();
    cs362.dominion.Resources.Game game33 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom34 = new cs362.dominion.Cards.CouncilRoom();
    int i35 = councilRoom34.getCards();
    int i37 = councilRoom34.getInitialSupply((int)'#');
    int i38 = councilRoom34.getCost();
    java.lang.String str39 = councilRoom34.getDefinition();
    cs362.dominion.Resources.Game game40 = null;
    cs362.dominion.Cards.Cutpurse cutpurse41 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str42 = cutpurse41.getDefinition();
    int i44 = cutpurse41.getInitialSupply((int)'4');
    cs362.dominion.Resources.Game game45 = null;
    cs362.dominion.Cards.Cutpurse cutpurse46 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str47 = cutpurse46.getDefinition();
    int i49 = cutpurse46.getInitialSupply(5);
    int i50 = cutpurse46.getCost();
    int i51 = cutpurse46.getCoins();
    cs362.dominion.Resources.Game game52 = null;
    cs362.dominion.Resources.Player[] player_array53 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player54 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player54, player_array53);
    cs362.dominion.Resources.Supply supply56 = null;
    cs362.dominion.Resources.Option option57 = cutpurse46.playCard(game52, arraylist_player54, supply56);
    cs362.dominion.Resources.Supply supply58 = null;
    cs362.dominion.Resources.Option option59 = cutpurse41.playCard(game45, arraylist_player54, supply58);
    cs362.dominion.Resources.Supply supply60 = null;
    cs362.dominion.Resources.Option option61 = councilRoom34.playCard(game40, arraylist_player54, supply60);
    cs362.dominion.Resources.Supply supply62 = null;
    cs362.dominion.Resources.Option option63 = greatHall24.playCard(game33, arraylist_player54, supply62);
    cs362.dominion.Resources.Supply supply64 = null;
    cs362.dominion.Resources.Option option65 = bazaar16.playCard(game23, arraylist_player54, supply64);
    cs362.dominion.Resources.Supply supply66 = null;
    cs362.dominion.Resources.Option option67 = councilRoom6.playCard(game15, arraylist_player54, supply66);
    cs362.dominion.Resources.Supply supply68 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option69 = adventurer0.playCard(game5, arraylist_player54, supply68);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str4.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance18 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance18.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance26 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance26.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance27 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance27.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str39.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str42.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str47.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option67);

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test321"); }

    cs362.dominion.Cards.Ambassador ambassador0 = new cs362.dominion.Cards.Ambassador();
    int i1 = ambassador0.getCost();
    java.lang.String str2 = ambassador0.getName();
    int i4 = ambassador0.getInitialSupply(4);
    java.lang.String str5 = ambassador0.getDefinition();
    int i7 = ambassador0.getInitialSupply((int)(short)0);
    int i9 = ambassador0.getInitialSupply((-1));
    int i11 = ambassador0.getInitialSupply((int)(byte)10);
    int i12 = ambassador0.getCost();
    int i14 = ambassador0.getInitialSupply((int)(byte)100);
    int i15 = ambassador0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Ambassador"+ "'", str2.equals("Ambassador"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str5.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 4);

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test322"); }

    cs362.dominion.Cards.Baron baron0 = new cs362.dominion.Cards.Baron();
    int i2 = baron0.getInitialSupply(1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = baron0.getType();
    int i4 = baron0.getCoins();
    int i6 = baron0.getInitialSupply((int)(byte)100);
    int i7 = baron0.getCoins();
    int i9 = baron0.getInitialSupply(0);
    java.lang.String str10 = baron0.getDefinition();
    int i11 = baron0.getActions();
    int i12 = baron0.getCards();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."+ "'", str10.equals("+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test323"); }

    cs362.dominion.Cards.Feast feast0 = new cs362.dominion.Cards.Feast();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = feast0.getType();
    int i3 = feast0.getInitialSupply((int)(short)100);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = feast0.getType();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test324"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.size();
    int i13 = hand7.size();
    cs362.dominion.Cards.GreatHall greatHall14 = new cs362.dominion.Cards.GreatHall();
    int i15 = greatHall14.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance16 = greatHall14.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance17 = greatHall14.getType();
    hand7.addCard((cs362.dominion.Cards.Card)greatHall14);
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card19 = hand7.allCards();
    cs362.dominion.Cards.Feast feast20 = new cs362.dominion.Cards.Feast();
    int i21 = feast20.getCost();
    int i23 = feast20.getInitialSupply((int)(short)-1);
    hand7.addCard((cs362.dominion.Cards.Card)feast20);
    hand7.addActionPoints((-1));
    int i27 = hand7.getCoins();
    hand7.addActionPoints(7);
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls30 = hand7.cardTypesInHand();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance16 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance16.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance17 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance17.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls30);

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test325"); }

    cs362.dominion.Cards.Province province0 = new cs362.dominion.Cards.Province();
    int i2 = province0.getInitialSupply(0);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = province0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = province0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = province0.getType();
    int i6 = province0.getCost();
    int i7 = province0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 8);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 8);

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test326"); }

    cs362.dominion.Cards.Adventurer adventurer0 = new cs362.dominion.Cards.Adventurer();
    java.lang.String str1 = adventurer0.getDefinition();
    int i2 = adventurer0.getCost();
    java.lang.String str3 = adventurer0.getDefinition();
    int i5 = adventurer0.getInitialSupply((int)(byte)0);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = adventurer0.getType();
    int i8 = adventurer0.getInitialSupply((int)(short)-1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance9 = adventurer0.getType();
    int i10 = adventurer0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str1.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str3.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance9 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance9.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 6);

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test327"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.getCoins();
    int i13 = hand7.size();
    int i14 = hand7.getCoins();
    int i15 = hand7.getBuys();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card16 = hand7.removeAllCards();
    hand7.addActionPoints((int)(short)0);
    int i19 = hand7.size();
    hand7.addActionPoints((int)(byte)0);
    hand7.addActionPoints((int)(byte)0);
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls24 = hand7.cardTypesInHand();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls24);

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test328"); }

    cs362.dominion.Cards.Adventurer adventurer0 = new cs362.dominion.Cards.Adventurer();
    int i2 = adventurer0.getInitialSupply(40);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = adventurer0.getType();
    int i4 = adventurer0.getVictoryPoints();
    int i5 = adventurer0.getBuys();
    int i7 = adventurer0.getInitialSupply((int)(byte)1);
    int i8 = adventurer0.getCost();
    cs362.dominion.Resources.Game game9 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom10 = new cs362.dominion.Cards.CouncilRoom();
    int i11 = councilRoom10.getCards();
    int i12 = councilRoom10.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance13 = councilRoom10.getType();
    int i14 = councilRoom10.getBuys();
    int i15 = councilRoom10.getCards();
    int i16 = councilRoom10.getCost();
    int i18 = councilRoom10.getInitialSupply(5);
    java.lang.String str19 = councilRoom10.getName();
    cs362.dominion.Resources.Game game20 = null;
    cs362.dominion.Cards.Cutpurse cutpurse21 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str22 = cutpurse21.getDefinition();
    int i24 = cutpurse21.getInitialSupply(5);
    int i26 = cutpurse21.getInitialSupply((int)(byte)10);
    java.lang.String str27 = cutpurse21.getDefinition();
    cs362.dominion.Resources.Game game28 = null;
    cs362.dominion.Cards.Cutpurse cutpurse29 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str30 = cutpurse29.getDefinition();
    int i32 = cutpurse29.getInitialSupply(5);
    int i34 = cutpurse29.getInitialSupply(8);
    cs362.dominion.Resources.Game game35 = null;
    cs362.dominion.Cards.Gold gold36 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance37 = gold36.getType();
    cs362.dominion.Resources.Game game38 = null;
    cs362.dominion.Resources.Player[] player_array39 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player40 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player40, player_array39);
    cs362.dominion.Resources.Supply supply42 = null;
    cs362.dominion.Resources.Option option43 = gold36.playCard(game38, arraylist_player40, supply42);
    cs362.dominion.Resources.Supply supply44 = null;
    cs362.dominion.Resources.Option option45 = cutpurse29.playCard(game35, arraylist_player40, supply44);
    cs362.dominion.Resources.Supply supply46 = null;
    cs362.dominion.Resources.Option option47 = cutpurse21.playCard(game28, arraylist_player40, supply46);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance48 = cutpurse21.getType();
    cs362.dominion.Resources.Game game49 = null;
    cs362.dominion.Cards.Cutpurse cutpurse50 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str51 = cutpurse50.getDefinition();
    int i53 = cutpurse50.getInitialSupply(5);
    int i55 = cutpurse50.getInitialSupply((int)(byte)10);
    java.lang.String str56 = cutpurse50.getDefinition();
    int i57 = cutpurse50.getCost();
    int i59 = cutpurse50.getInitialSupply(6);
    cs362.dominion.Resources.Game game60 = null;
    cs362.dominion.Resources.Player[] player_array61 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player62 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b63 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player62, player_array61);
    cs362.dominion.Resources.Supply supply64 = null;
    cs362.dominion.Resources.Option option65 = cutpurse50.playCard(game60, arraylist_player62, supply64);
    cs362.dominion.Resources.Supply supply66 = null;
    cs362.dominion.Resources.Option option67 = cutpurse21.playCard(game49, arraylist_player62, supply66);
    cs362.dominion.Resources.Supply supply68 = null;
    cs362.dominion.Resources.Option option69 = councilRoom10.playCard(game20, arraylist_player62, supply68);
    cs362.dominion.Resources.Supply supply70 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option71 = adventurer0.playCard(game9, arraylist_player62, supply70);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance13 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance13.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "CouncilRoom"+ "'", str19.equals("CouncilRoom"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str22.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str27.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str30.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance37 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance37.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option47);
    org.junit.Assert.assertTrue("'" + cardTypes_instance48 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance48.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str51.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str56.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option69);

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test329"); }

    cs362.dominion.Cards.Gold gold0 = new cs362.dominion.Cards.Gold();
    java.lang.String str1 = gold0.getDefinition();
    int i2 = gold0.getCoins();
    int i3 = gold0.getCoins();
    java.lang.String str4 = gold0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = gold0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "A gold resource, worth $3"+ "'", str1.equals("A gold resource, worth $3"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "A gold resource, worth $3"+ "'", str4.equals("A gold resource, worth $3"));
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test330"); }

    cs362.dominion.Cards.Ambassador ambassador0 = new cs362.dominion.Cards.Ambassador();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = ambassador0.getType();
    int i2 = ambassador0.getCost();
    java.lang.String str3 = ambassador0.getDefinition();
    java.lang.String str4 = ambassador0.getDefinition();
    java.lang.String str5 = ambassador0.getDefinition();
    int i7 = ambassador0.getInitialSupply(101);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = ambassador0.getType();
    int i10 = ambassador0.getInitialSupply((int)'a');
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str3.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str4.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str5.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test331"); }

    cs362.dominion.Exceptions.InvalidOptionException invalidOptionException1 = new cs362.dominion.Exceptions.InvalidOptionException("Victory card, worth 6 victory points");
    cs362.dominion.Exceptions.InvalidOptionException invalidOptionException3 = new cs362.dominion.Exceptions.InvalidOptionException("hi!");
    java.lang.String str4 = invalidOptionException3.toString();
    java.lang.String str5 = invalidOptionException3.toString();
    invalidOptionException1.addSuppressed((java.lang.Throwable)invalidOptionException3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "cs362.dominion.Exceptions.InvalidOptionException: hi!"+ "'", str4.equals("cs362.dominion.Exceptions.InvalidOptionException: hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "cs362.dominion.Exceptions.InvalidOptionException: hi!"+ "'", str5.equals("cs362.dominion.Exceptions.InvalidOptionException: hi!"));

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test332"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.size();
    int i13 = hand7.getBuys();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls14 = hand7.cardTypesInHand();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card15 = hand7.allCards();
    cs362.dominion.Resources.Game.gamePhase gamePhase_instance16 = cs362.dominion.Resources.Game.gamePhase.CLEANUP;
    cs362.dominion.Resources.Supply supply17 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls18 = hand7.actionOptions(gamePhase_instance16, supply17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card15);
    org.junit.Assert.assertTrue("'" + gamePhase_instance16 + "' != '" + cs362.dominion.Resources.Game.gamePhase.CLEANUP + "'", gamePhase_instance16.equals(cs362.dominion.Resources.Game.gamePhase.CLEANUP));

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test333"); }

    cs362.dominion.Cards.GreatHall greatHall0 = new cs362.dominion.Cards.GreatHall();
    int i1 = greatHall0.getVictoryPoints();
    int i3 = greatHall0.getInitialSupply((int)(short)0);
    int i4 = greatHall0.getCost();
    int i5 = greatHall0.getActions();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = greatHall0.getType();
    int i7 = greatHall0.getCoins();
    java.lang.String str8 = greatHall0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1 Victory Point +1 Card; +1 Action."+ "'", str8.equals("1 Victory Point +1 Card; +1 Action."));

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test334"); }

    cs362.dominion.Cards.Ambassador ambassador0 = new cs362.dominion.Cards.Ambassador();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = ambassador0.getType();
    int i2 = ambassador0.getCost();
    int i4 = ambassador0.getInitialSupply(2);
    int i5 = ambassador0.getCost();
    int i6 = ambassador0.getCost();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test335"); }

    cs362.dominion.Cards.Mine mine0 = new cs362.dominion.Cards.Mine();
    int i2 = mine0.getInitialSupply((int)'a');
    int i3 = mine0.getCost();
    int i4 = mine0.getCost();
    int i6 = mine0.getInitialSupply((int)(byte)0);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = mine0.getType();
    int i9 = mine0.getInitialSupply(0);
    int i11 = mine0.getInitialSupply(2);
    int i12 = mine0.getCost();
    cs362.dominion.Resources.Game game13 = null;
    cs362.dominion.Cards.Cutpurse cutpurse14 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str15 = cutpurse14.getDefinition();
    cs362.dominion.Resources.Game game16 = null;
    cs362.dominion.Cards.Cutpurse cutpurse17 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str18 = cutpurse17.getDefinition();
    int i20 = cutpurse17.getInitialSupply(5);
    int i22 = cutpurse17.getInitialSupply((int)(byte)10);
    java.lang.String str23 = cutpurse17.getDefinition();
    int i24 = cutpurse17.getCost();
    int i26 = cutpurse17.getInitialSupply(6);
    cs362.dominion.Resources.Game game27 = null;
    cs362.dominion.Resources.Player[] player_array28 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player29 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player29, player_array28);
    cs362.dominion.Resources.Supply supply31 = null;
    cs362.dominion.Resources.Option option32 = cutpurse17.playCard(game27, arraylist_player29, supply31);
    java.lang.String str33 = cutpurse17.getDefinition();
    cs362.dominion.Resources.Game game34 = null;
    cs362.dominion.Cards.Village village35 = new cs362.dominion.Cards.Village();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance36 = village35.getType();
    java.lang.String str37 = village35.getDefinition();
    int i38 = village35.getActions();
    int i40 = village35.getInitialSupply((int)(byte)-1);
    int i41 = village35.getActions();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance42 = village35.getType();
    java.lang.String str43 = village35.getDefinition();
    cs362.dominion.Resources.Game game44 = null;
    cs362.dominion.Cards.Cutpurse cutpurse45 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str46 = cutpurse45.getDefinition();
    int i48 = cutpurse45.getInitialSupply((int)'4');
    cs362.dominion.Resources.Game game49 = null;
    cs362.dominion.Cards.Cutpurse cutpurse50 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str51 = cutpurse50.getDefinition();
    int i53 = cutpurse50.getInitialSupply(5);
    int i54 = cutpurse50.getCost();
    int i55 = cutpurse50.getCoins();
    cs362.dominion.Resources.Game game56 = null;
    cs362.dominion.Resources.Player[] player_array57 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player58 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b59 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player58, player_array57);
    cs362.dominion.Resources.Supply supply60 = null;
    cs362.dominion.Resources.Option option61 = cutpurse50.playCard(game56, arraylist_player58, supply60);
    cs362.dominion.Resources.Supply supply62 = null;
    cs362.dominion.Resources.Option option63 = cutpurse45.playCard(game49, arraylist_player58, supply62);
    cs362.dominion.Resources.Supply supply64 = null;
    cs362.dominion.Resources.Option option65 = village35.playCard(game44, arraylist_player58, supply64);
    cs362.dominion.Resources.Supply supply66 = null;
    cs362.dominion.Resources.Option option67 = cutpurse17.playCard(game34, arraylist_player58, supply66);
    cs362.dominion.Resources.Supply supply68 = null;
    cs362.dominion.Resources.Option option69 = cutpurse14.playCard(game16, arraylist_player58, supply68);
    cs362.dominion.Resources.Supply supply70 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option71 = mine0.playCard(game13, arraylist_player58, supply70);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str15.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str18.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str23.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str33.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance36 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance36.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "+1 Card; +2 Actions."+ "'", str37.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance42 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance42.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "+1 Card; +2 Actions."+ "'", str43.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str46.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str51.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option69);

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test336"); }

    cs362.dominion.Cards.Village village0 = new cs362.dominion.Cards.Village();
    java.lang.String str1 = village0.getDefinition();
    int i2 = village0.getCards();
    int i3 = village0.getActions();
    int i4 = village0.getActions();
    int i5 = village0.getCards();
    int i7 = village0.getInitialSupply(6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+1 Card; +2 Actions."+ "'", str1.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test337"); }

    cs362.dominion.Cards.Mine mine0 = new cs362.dominion.Cards.Mine();
    java.lang.String str1 = mine0.getDefinition();
    int i2 = mine0.getCost();
    int i3 = mine0.getCost();
    int i4 = mine0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = mine0.getType();
    int i6 = mine0.getBuys();
    cs362.dominion.Resources.Game game7 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom8 = new cs362.dominion.Cards.CouncilRoom();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance9 = councilRoom8.getType();
    cs362.dominion.Resources.Game game10 = null;
    cs362.dominion.Cards.Cutpurse cutpurse11 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str12 = cutpurse11.getDefinition();
    int i14 = cutpurse11.getInitialSupply(5);
    int i16 = cutpurse11.getInitialSupply(8);
    cs362.dominion.Resources.Game game17 = null;
    cs362.dominion.Cards.Gold gold18 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance19 = gold18.getType();
    cs362.dominion.Resources.Game game20 = null;
    cs362.dominion.Resources.Player[] player_array21 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player22 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player22, player_array21);
    cs362.dominion.Resources.Supply supply24 = null;
    cs362.dominion.Resources.Option option25 = gold18.playCard(game20, arraylist_player22, supply24);
    cs362.dominion.Resources.Supply supply26 = null;
    cs362.dominion.Resources.Option option27 = cutpurse11.playCard(game17, arraylist_player22, supply26);
    cs362.dominion.Resources.Supply supply28 = null;
    cs362.dominion.Resources.Option option29 = councilRoom8.playCard(game10, arraylist_player22, supply28);
    cs362.dominion.Resources.Supply supply30 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option31 = mine0.playCard(game7, arraylist_player22, supply30);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."+ "'", str1.equals("Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    org.junit.Assert.assertTrue("'" + cardTypes_instance9 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance9.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str12.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance19 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance19.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option29);

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test338"); }

    cs362.dominion.Exceptions.InvalidOptionException invalidOptionException1 = new cs362.dominion.Exceptions.InvalidOptionException("cs362.dominion.Exceptions.ConfiguationException: +$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile.");
    cs362.dominion.Exceptions.InvalidSelectionException invalidSelectionException3 = new cs362.dominion.Exceptions.InvalidSelectionException("Worth 1 Victory for every 10 cards in your deck (rounded down).");
    cs362.dominion.Exceptions.ConfiguationException configuationException5 = new cs362.dominion.Exceptions.ConfiguationException("+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile.");
    cs362.dominion.Exceptions.InvalidOptionException invalidOptionException7 = new cs362.dominion.Exceptions.InvalidOptionException("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it.");
    java.lang.Throwable[] throwable_array8 = invalidOptionException7.getSuppressed();
    configuationException5.addSuppressed((java.lang.Throwable)invalidOptionException7);
    cs362.dominion.Exceptions.InvalidOptionException invalidOptionException11 = new cs362.dominion.Exceptions.InvalidOptionException("hi!");
    cs362.dominion.Exceptions.ConfiguationException configuationException13 = new cs362.dominion.Exceptions.ConfiguationException("+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile.");
    invalidOptionException11.addSuppressed((java.lang.Throwable)configuationException13);
    invalidOptionException7.addSuppressed((java.lang.Throwable)configuationException13);
    java.lang.String str16 = configuationException13.toString();
    invalidSelectionException3.addSuppressed((java.lang.Throwable)configuationException13);
    invalidOptionException1.addSuppressed((java.lang.Throwable)configuationException13);
    cs362.dominion.Exceptions.ConfiguationException configuationException20 = new cs362.dominion.Exceptions.ConfiguationException("+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile.");
    java.lang.String str21 = configuationException20.toString();
    java.lang.String str22 = configuationException20.toString();
    invalidOptionException1.addSuppressed((java.lang.Throwable)configuationException20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "cs362.dominion.Exceptions.ConfiguationException: +$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."+ "'", str16.equals("cs362.dominion.Exceptions.ConfiguationException: +$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "cs362.dominion.Exceptions.ConfiguationException: +$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."+ "'", str21.equals("cs362.dominion.Exceptions.ConfiguationException: +$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "cs362.dominion.Exceptions.ConfiguationException: +$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."+ "'", str22.equals("cs362.dominion.Exceptions.ConfiguationException: +$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."));

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test339"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    int i3 = cutpurse0.getInitialSupply(5);
    int i5 = cutpurse0.getInitialSupply((int)(byte)10);
    java.lang.String str6 = cutpurse0.getDefinition();
    int i7 = cutpurse0.getCost();
    int i9 = cutpurse0.getInitialSupply(6);
    cs362.dominion.Resources.Game game10 = null;
    cs362.dominion.Resources.Player[] player_array11 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player12 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player12, player_array11);
    cs362.dominion.Resources.Supply supply14 = null;
    cs362.dominion.Resources.Option option15 = cutpurse0.playCard(game10, arraylist_player12, supply14);
    java.lang.String str16 = cutpurse0.getDefinition();
    int i17 = cutpurse0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str6.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str16.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 4);

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test340"); }

    cs362.dominion.Cards.Province province0 = new cs362.dominion.Cards.Province();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = province0.getType();
    int i2 = province0.getCost();
    int i3 = province0.getVictoryPoints();
    java.lang.String str4 = province0.getDefinition();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Victory card, worth 6 victory points"+ "'", str4.equals("Victory card, worth 6 victory points"));

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test341"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.size();
    int i13 = hand7.size();
    int i14 = hand7.getCoins();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls15 = hand7.cardTypesInHand();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card16 = hand7.allCards();
    cs362.dominion.Cards.Estate estate17 = new cs362.dominion.Cards.Estate();
    java.lang.String str18 = estate17.getDefinition();
    int i19 = estate17.getCoins();
    int i20 = estate17.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)estate17);
    java.lang.String str22 = estate17.getDefinition();
    int i23 = estate17.getCoins();
    int i24 = estate17.getCost();
    int i25 = estate17.getVictoryPoints();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Victory card, worth 1 victory point"+ "'", str18.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Victory card, worth 1 victory point"+ "'", str22.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test342"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    int i3 = cutpurse0.getInitialSupply(5);
    int i5 = cutpurse0.getInitialSupply(8);
    cs362.dominion.Resources.Game game6 = null;
    cs362.dominion.Cards.Gold gold7 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = gold7.getType();
    cs362.dominion.Resources.Game game9 = null;
    cs362.dominion.Resources.Player[] player_array10 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player11 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player11, player_array10);
    cs362.dominion.Resources.Supply supply13 = null;
    cs362.dominion.Resources.Option option14 = gold7.playCard(game9, arraylist_player11, supply13);
    cs362.dominion.Resources.Supply supply15 = null;
    cs362.dominion.Resources.Option option16 = cutpurse0.playCard(game6, arraylist_player11, supply15);
    int i17 = cutpurse0.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance18 = cutpurse0.getType();
    int i20 = cutpurse0.getInitialSupply((int)(byte)0);
    java.lang.String str21 = cutpurse0.getDefinition();
    int i22 = cutpurse0.getCoins();
    java.lang.String str23 = cutpurse0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance18 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance18.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str21.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str23.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test343"); }

    cs362.dominion.Cards.Bazaar bazaar0 = new cs362.dominion.Cards.Bazaar();
    int i1 = bazaar0.getCards();
    int i2 = bazaar0.getActions();
    int i3 = bazaar0.getCards();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = bazaar0.getType();
    int i5 = bazaar0.getCards();
    int i6 = bazaar0.getCoins();
    int i7 = bazaar0.getCards();
    int i8 = bazaar0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 5);

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test344"); }

    cs362.dominion.Resources.Game game0 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Player player2 = new cs362.dominion.Resources.Player(game0, "cs362.dominion.Exceptions.InvalidSelectionException: +1 Card; +2 Actions.");
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test345"); }

    cs362.dominion.Cards.Duchy duchy0 = new cs362.dominion.Cards.Duchy();
    int i1 = duchy0.getVictoryPoints();
    int i2 = duchy0.getCoins();
    int i3 = duchy0.getVictoryPoints();
    int i5 = duchy0.getInitialSupply((int)(byte)10);
    int i6 = duchy0.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = duchy0.getType();
    int i8 = duchy0.getVictoryPoints();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test346"); }

    cs362.dominion.Cards.Estate estate0 = new cs362.dominion.Cards.Estate();
    java.lang.String str1 = estate0.getName();
    java.lang.String str2 = estate0.getDefinition();
    java.lang.String str3 = estate0.getDefinition();
    java.lang.String str4 = estate0.getDefinition();
    java.lang.String str5 = estate0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = estate0.getType();
    int i8 = estate0.getInitialSupply((int)'4');
    java.lang.String str9 = estate0.getDefinition();
    int i10 = estate0.getVictoryPoints();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Estate"+ "'", str1.equals("Estate"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Victory card, worth 1 victory point"+ "'", str2.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Victory card, worth 1 victory point"+ "'", str3.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Victory card, worth 1 victory point"+ "'", str4.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Victory card, worth 1 victory point"+ "'", str5.equals("Victory card, worth 1 victory point"));
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Victory card, worth 1 victory point"+ "'", str9.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test347"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    java.lang.String str3 = embargo0.getName();
    java.lang.String str4 = embargo0.getDefinition();
    java.lang.String str5 = embargo0.getDefinition();
    int i7 = embargo0.getInitialSupply(40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Embargo"+ "'", str3.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."+ "'", str4.equals("+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."+ "'", str5.equals("+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test348"); }

    cs362.dominion.Cards.Feast feast0 = new cs362.dominion.Cards.Feast();
    int i1 = feast0.getCost();
    int i2 = feast0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = feast0.getType();
    java.lang.String str4 = feast0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = feast0.getType();
    int i7 = feast0.getInitialSupply(1);
    java.lang.String str8 = feast0.getDefinition();
    cs362.dominion.Resources.Game game9 = null;
    cs362.dominion.Cards.Cutpurse cutpurse10 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str11 = cutpurse10.getDefinition();
    int i13 = cutpurse10.getInitialSupply(5);
    int i14 = cutpurse10.getCost();
    int i15 = cutpurse10.getCoins();
    cs362.dominion.Resources.Game game16 = null;
    cs362.dominion.Cards.Cutpurse cutpurse17 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str18 = cutpurse17.getDefinition();
    int i20 = cutpurse17.getInitialSupply(5);
    int i22 = cutpurse17.getInitialSupply(8);
    cs362.dominion.Resources.Game game23 = null;
    cs362.dominion.Cards.Gold gold24 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance25 = gold24.getType();
    cs362.dominion.Resources.Game game26 = null;
    cs362.dominion.Resources.Player[] player_array27 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player28 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player28, player_array27);
    cs362.dominion.Resources.Supply supply30 = null;
    cs362.dominion.Resources.Option option31 = gold24.playCard(game26, arraylist_player28, supply30);
    cs362.dominion.Resources.Supply supply32 = null;
    cs362.dominion.Resources.Option option33 = cutpurse17.playCard(game23, arraylist_player28, supply32);
    cs362.dominion.Resources.Supply supply34 = null;
    cs362.dominion.Resources.Option option35 = cutpurse10.playCard(game16, arraylist_player28, supply34);
    int i36 = cutpurse10.getCost();
    java.lang.String str37 = cutpurse10.getDefinition();
    cs362.dominion.Resources.Game game38 = null;
    cs362.dominion.Resources.Player[] player_array39 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player40 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player40, player_array39);
    cs362.dominion.Resources.Supply supply42 = null;
    cs362.dominion.Resources.Option option43 = cutpurse10.playCard(game38, arraylist_player40, supply42);
    cs362.dominion.Resources.Supply supply44 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option45 = feast0.playCard(game9, arraylist_player40, supply44);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Trash this card. Gain a card costing up to $5."+ "'", str4.equals("Trash this card. Gain a card costing up to $5."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Trash this card. Gain a card costing up to $5."+ "'", str8.equals("Trash this card. Gain a card costing up to $5."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str11.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str18.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance25 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance25.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str37.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option43);

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test349"); }

    cs362.dominion.Cards.Silver silver0 = new cs362.dominion.Cards.Silver();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = silver0.getType();
    int i2 = silver0.getCoins();
    int i3 = silver0.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = silver0.getType();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test350"); }

    cs362.dominion.Cards.Gold gold0 = new cs362.dominion.Cards.Gold();
    int i1 = gold0.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = gold0.getType();
    int i3 = gold0.getCost();
    java.lang.String str4 = gold0.getDefinition();
    int i5 = gold0.getCoins();
    int i7 = gold0.getInitialSupply(101);
    int i9 = gold0.getInitialSupply(1);
    int i10 = gold0.getCoins();
    int i11 = gold0.getVictoryPoints();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "A gold resource, worth $3"+ "'", str4.equals("A gold resource, worth $3"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test351"); }

    cs362.dominion.Cards.GreatHall greatHall0 = new cs362.dominion.Cards.GreatHall();
    int i1 = greatHall0.getVictoryPoints();
    int i3 = greatHall0.getInitialSupply((int)(short)0);
    int i4 = greatHall0.getCost();
    int i5 = greatHall0.getActions();
    int i6 = greatHall0.getActions();
    int i7 = greatHall0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test352"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.size();
    int i13 = hand7.size();
    int i14 = hand7.getCoins();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls15 = hand7.cardTypesInHand();
    int i16 = hand7.getCoins();
    int i17 = hand7.getActions();
    cs362.dominion.Resources.Game.gamePhase gamePhase_instance18 = null;
    cs362.dominion.Resources.Supply supply19 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls20 = hand7.actionOptions(gamePhase_instance18, supply19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);

  }

  @Test
  public void test353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test353"); }

    cs362.dominion.Cards.Village village0 = new cs362.dominion.Cards.Village();
    int i1 = village0.getActions();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = village0.getType();
    int i4 = village0.getInitialSupply((int)(short)0);
    java.lang.String str5 = village0.getDefinition();
    int i7 = village0.getInitialSupply((int)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "+1 Card; +2 Actions."+ "'", str5.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test354"); }

    cs362.dominion.Cards.Baron baron0 = new cs362.dominion.Cards.Baron();
    int i2 = baron0.getInitialSupply(1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = baron0.getType();
    int i5 = baron0.getInitialSupply(5);
    java.lang.String str6 = baron0.getDefinition();
    int i8 = baron0.getInitialSupply((int)(byte)0);
    java.lang.String str9 = baron0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."+ "'", str6.equals("+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."+ "'", str9.equals("+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."));

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test355"); }

    cs362.dominion.Cards.Bazaar bazaar0 = new cs362.dominion.Cards.Bazaar();
    int i1 = bazaar0.getActions();
    int i3 = bazaar0.getInitialSupply((int)(byte)1);
    int i4 = bazaar0.getCoins();
    int i6 = bazaar0.getInitialSupply((int)(short)10);
    int i7 = bazaar0.getBuys();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = bazaar0.getType();
    int i9 = bazaar0.getCards();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test356"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    int i3 = cutpurse0.getInitialSupply(5);
    int i5 = cutpurse0.getInitialSupply(8);
    cs362.dominion.Resources.Game game6 = null;
    cs362.dominion.Cards.Gold gold7 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = gold7.getType();
    cs362.dominion.Resources.Game game9 = null;
    cs362.dominion.Resources.Player[] player_array10 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player11 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player11, player_array10);
    cs362.dominion.Resources.Supply supply13 = null;
    cs362.dominion.Resources.Option option14 = gold7.playCard(game9, arraylist_player11, supply13);
    cs362.dominion.Resources.Supply supply15 = null;
    cs362.dominion.Resources.Option option16 = cutpurse0.playCard(game6, arraylist_player11, supply15);
    int i17 = cutpurse0.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance18 = cutpurse0.getType();
    int i20 = cutpurse0.getInitialSupply((int)(byte)0);
    int i21 = cutpurse0.getCoins();
    cs362.dominion.Resources.Game game22 = null;
    cs362.dominion.Cards.Bazaar bazaar23 = new cs362.dominion.Cards.Bazaar();
    int i24 = bazaar23.getCards();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance25 = bazaar23.getType();
    int i26 = bazaar23.getActions();
    int i28 = bazaar23.getInitialSupply((int)'a');
    int i29 = bazaar23.getCost();
    cs362.dominion.Resources.Game game30 = null;
    cs362.dominion.Cards.GreatHall greatHall31 = new cs362.dominion.Cards.GreatHall();
    int i32 = greatHall31.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance33 = greatHall31.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance34 = greatHall31.getType();
    int i36 = greatHall31.getInitialSupply((int)(byte)-1);
    int i38 = greatHall31.getInitialSupply((int)'a');
    int i39 = greatHall31.getCards();
    cs362.dominion.Resources.Game game40 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom41 = new cs362.dominion.Cards.CouncilRoom();
    int i42 = councilRoom41.getCards();
    int i44 = councilRoom41.getInitialSupply((int)'#');
    int i45 = councilRoom41.getCost();
    java.lang.String str46 = councilRoom41.getDefinition();
    cs362.dominion.Resources.Game game47 = null;
    cs362.dominion.Cards.Cutpurse cutpurse48 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str49 = cutpurse48.getDefinition();
    int i51 = cutpurse48.getInitialSupply((int)'4');
    cs362.dominion.Resources.Game game52 = null;
    cs362.dominion.Cards.Cutpurse cutpurse53 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str54 = cutpurse53.getDefinition();
    int i56 = cutpurse53.getInitialSupply(5);
    int i57 = cutpurse53.getCost();
    int i58 = cutpurse53.getCoins();
    cs362.dominion.Resources.Game game59 = null;
    cs362.dominion.Resources.Player[] player_array60 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player61 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b62 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player61, player_array60);
    cs362.dominion.Resources.Supply supply63 = null;
    cs362.dominion.Resources.Option option64 = cutpurse53.playCard(game59, arraylist_player61, supply63);
    cs362.dominion.Resources.Supply supply65 = null;
    cs362.dominion.Resources.Option option66 = cutpurse48.playCard(game52, arraylist_player61, supply65);
    cs362.dominion.Resources.Supply supply67 = null;
    cs362.dominion.Resources.Option option68 = councilRoom41.playCard(game47, arraylist_player61, supply67);
    cs362.dominion.Resources.Supply supply69 = null;
    cs362.dominion.Resources.Option option70 = greatHall31.playCard(game40, arraylist_player61, supply69);
    cs362.dominion.Resources.Supply supply71 = null;
    cs362.dominion.Resources.Option option72 = bazaar23.playCard(game30, arraylist_player61, supply71);
    cs362.dominion.Resources.Supply supply73 = null;
    cs362.dominion.Resources.Option option74 = cutpurse0.playCard(game22, arraylist_player61, supply73);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance75 = cutpurse0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance18 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance18.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance25 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance25.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance33 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance33.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance34 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance34.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str46.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str49.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str54.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option74);
    org.junit.Assert.assertTrue("'" + cardTypes_instance75 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance75.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test357"); }

    cs362.dominion.Cards.Estate estate0 = new cs362.dominion.Cards.Estate();
    int i1 = estate0.getCost();
    int i3 = estate0.getInitialSupply(40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 8);

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test358"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    int i3 = cutpurse0.getInitialSupply(5);
    int i5 = cutpurse0.getInitialSupply(8);
    cs362.dominion.Resources.Game game6 = null;
    cs362.dominion.Cards.Gold gold7 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = gold7.getType();
    cs362.dominion.Resources.Game game9 = null;
    cs362.dominion.Resources.Player[] player_array10 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player11 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player11, player_array10);
    cs362.dominion.Resources.Supply supply13 = null;
    cs362.dominion.Resources.Option option14 = gold7.playCard(game9, arraylist_player11, supply13);
    cs362.dominion.Resources.Supply supply15 = null;
    cs362.dominion.Resources.Option option16 = cutpurse0.playCard(game6, arraylist_player11, supply15);
    int i17 = cutpurse0.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance18 = cutpurse0.getType();
    int i20 = cutpurse0.getInitialSupply((int)(byte)-1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance21 = cutpurse0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance18 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance18.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance21 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance21.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test359"); }

    cs362.dominion.Cards.Bazaar bazaar0 = new cs362.dominion.Cards.Bazaar();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = bazaar0.getType();
    java.lang.String str2 = bazaar0.getDefinition();
    int i3 = bazaar0.getCoins();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "+1 Card; +2 Actions, +$1."+ "'", str2.equals("+1 Card; +2 Actions, +$1."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test360"); }

    cs362.dominion.Cards.Copper copper0 = new cs362.dominion.Cards.Copper();
    int i2 = copper0.getInitialSupply((int)' ');
    int i3 = copper0.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = copper0.getType();
    int i6 = copper0.getInitialSupply(0);
    int i7 = copper0.getCost();
    int i8 = copper0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test361"); }

    cs362.dominion.Cards.Duchy duchy0 = new cs362.dominion.Cards.Duchy();
    int i1 = duchy0.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = duchy0.getType();
    int i4 = duchy0.getInitialSupply((int)(byte)1);
    int i5 = duchy0.getVictoryPoints();
    int i7 = duchy0.getInitialSupply((int)'a');
    int i8 = duchy0.getCost();
    int i10 = duchy0.getInitialSupply(41);
    int i12 = duchy0.getInitialSupply(9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 3);
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 8);

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test362"); }

    cs362.dominion.Cards.Baron baron0 = new cs362.dominion.Cards.Baron();
    int i2 = baron0.getInitialSupply(1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = baron0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = baron0.getType();
    int i5 = baron0.getCost();
    java.lang.String str6 = baron0.getName();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = baron0.getType();
    int i8 = baron0.getBuys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Baron"+ "'", str6.equals("Baron"));
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test363"); }

    cs362.dominion.Cards.Adventurer adventurer0 = new cs362.dominion.Cards.Adventurer();
    int i1 = adventurer0.getCost();
    int i3 = adventurer0.getInitialSupply((int)' ');
    java.lang.String str4 = adventurer0.getDefinition();
    cs362.dominion.Resources.Game game5 = null;
    cs362.dominion.Cards.Cutpurse cutpurse6 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str7 = cutpurse6.getDefinition();
    int i9 = cutpurse6.getInitialSupply(5);
    int i11 = cutpurse6.getInitialSupply((int)(byte)10);
    java.lang.String str12 = cutpurse6.getDefinition();
    cs362.dominion.Resources.Game game13 = null;
    cs362.dominion.Cards.Cutpurse cutpurse14 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str15 = cutpurse14.getDefinition();
    int i17 = cutpurse14.getInitialSupply(5);
    int i19 = cutpurse14.getInitialSupply(8);
    cs362.dominion.Resources.Game game20 = null;
    cs362.dominion.Cards.Gold gold21 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance22 = gold21.getType();
    cs362.dominion.Resources.Game game23 = null;
    cs362.dominion.Resources.Player[] player_array24 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player25 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player25, player_array24);
    cs362.dominion.Resources.Supply supply27 = null;
    cs362.dominion.Resources.Option option28 = gold21.playCard(game23, arraylist_player25, supply27);
    cs362.dominion.Resources.Supply supply29 = null;
    cs362.dominion.Resources.Option option30 = cutpurse14.playCard(game20, arraylist_player25, supply29);
    cs362.dominion.Resources.Supply supply31 = null;
    cs362.dominion.Resources.Option option32 = cutpurse6.playCard(game13, arraylist_player25, supply31);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance33 = cutpurse6.getType();
    cs362.dominion.Resources.Game game34 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom35 = new cs362.dominion.Cards.CouncilRoom();
    int i36 = councilRoom35.getCards();
    int i37 = councilRoom35.getCost();
    java.lang.String str38 = councilRoom35.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance39 = councilRoom35.getType();
    int i41 = councilRoom35.getInitialSupply(3);
    int i42 = councilRoom35.getCost();
    int i43 = councilRoom35.getCost();
    int i44 = councilRoom35.getBuys();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance45 = councilRoom35.getType();
    int i46 = councilRoom35.getCost();
    cs362.dominion.Resources.Game game47 = null;
    cs362.dominion.Cards.Cutpurse cutpurse48 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str49 = cutpurse48.getDefinition();
    int i51 = cutpurse48.getInitialSupply(5);
    int i52 = cutpurse48.getCost();
    int i53 = cutpurse48.getCoins();
    cs362.dominion.Resources.Game game54 = null;
    cs362.dominion.Resources.Player[] player_array55 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player56 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player56, player_array55);
    cs362.dominion.Resources.Supply supply58 = null;
    cs362.dominion.Resources.Option option59 = cutpurse48.playCard(game54, arraylist_player56, supply58);
    cs362.dominion.Resources.Game game60 = null;
    cs362.dominion.Cards.Cutpurse cutpurse61 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str62 = cutpurse61.getDefinition();
    int i64 = cutpurse61.getInitialSupply(5);
    int i65 = cutpurse61.getCost();
    int i66 = cutpurse61.getCoins();
    cs362.dominion.Resources.Game game67 = null;
    cs362.dominion.Cards.Cutpurse cutpurse68 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str69 = cutpurse68.getDefinition();
    int i71 = cutpurse68.getInitialSupply(5);
    int i73 = cutpurse68.getInitialSupply(8);
    cs362.dominion.Resources.Game game74 = null;
    cs362.dominion.Cards.Gold gold75 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance76 = gold75.getType();
    cs362.dominion.Resources.Game game77 = null;
    cs362.dominion.Resources.Player[] player_array78 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player79 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b80 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player79, player_array78);
    cs362.dominion.Resources.Supply supply81 = null;
    cs362.dominion.Resources.Option option82 = gold75.playCard(game77, arraylist_player79, supply81);
    cs362.dominion.Resources.Supply supply83 = null;
    cs362.dominion.Resources.Option option84 = cutpurse68.playCard(game74, arraylist_player79, supply83);
    cs362.dominion.Resources.Supply supply85 = null;
    cs362.dominion.Resources.Option option86 = cutpurse61.playCard(game67, arraylist_player79, supply85);
    cs362.dominion.Resources.Supply supply87 = null;
    cs362.dominion.Resources.Option option88 = cutpurse48.playCard(game60, arraylist_player79, supply87);
    cs362.dominion.Resources.Supply supply89 = null;
    cs362.dominion.Resources.Option option90 = councilRoom35.playCard(game47, arraylist_player79, supply89);
    cs362.dominion.Resources.Supply supply91 = null;
    cs362.dominion.Resources.Option option92 = cutpurse6.playCard(game34, arraylist_player79, supply91);
    cs362.dominion.Resources.Supply supply93 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option94 = adventurer0.playCard(game5, arraylist_player79, supply93);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str4.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str7.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str12.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str15.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance22 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance22.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option32);
    org.junit.Assert.assertTrue("'" + cardTypes_instance33 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance33.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str38.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance39 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance39.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance45 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance45.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str49.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str62.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str69.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance76 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance76.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option92);

  }

  @Test
  public void test364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test364"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = embargo8.getCost();
    int i14 = embargo8.getInitialSupply(5);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance15 = embargo8.getType();
    cs362.dominion.Resources.Game game16 = null;
    cs362.dominion.Cards.Cutpurse cutpurse17 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str18 = cutpurse17.getDefinition();
    int i20 = cutpurse17.getInitialSupply(5);
    int i21 = cutpurse17.getCost();
    cs362.dominion.Resources.Game game22 = null;
    cs362.dominion.Cards.Cutpurse cutpurse23 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str24 = cutpurse23.getDefinition();
    int i26 = cutpurse23.getInitialSupply(5);
    int i28 = cutpurse23.getInitialSupply((int)(byte)10);
    java.lang.String str29 = cutpurse23.getDefinition();
    cs362.dominion.Resources.Game game30 = null;
    cs362.dominion.Cards.Cutpurse cutpurse31 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str32 = cutpurse31.getDefinition();
    int i34 = cutpurse31.getInitialSupply(5);
    int i36 = cutpurse31.getInitialSupply(8);
    cs362.dominion.Resources.Game game37 = null;
    cs362.dominion.Cards.Gold gold38 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance39 = gold38.getType();
    cs362.dominion.Resources.Game game40 = null;
    cs362.dominion.Resources.Player[] player_array41 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player42 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player42, player_array41);
    cs362.dominion.Resources.Supply supply44 = null;
    cs362.dominion.Resources.Option option45 = gold38.playCard(game40, arraylist_player42, supply44);
    cs362.dominion.Resources.Supply supply46 = null;
    cs362.dominion.Resources.Option option47 = cutpurse31.playCard(game37, arraylist_player42, supply46);
    cs362.dominion.Resources.Supply supply48 = null;
    cs362.dominion.Resources.Option option49 = cutpurse23.playCard(game30, arraylist_player42, supply48);
    cs362.dominion.Resources.Supply supply50 = null;
    cs362.dominion.Resources.Option option51 = cutpurse17.playCard(game22, arraylist_player42, supply50);
    cs362.dominion.Resources.Game game52 = null;
    cs362.dominion.Cards.Cutpurse cutpurse53 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str54 = cutpurse53.getDefinition();
    int i56 = cutpurse53.getInitialSupply(5);
    int i58 = cutpurse53.getInitialSupply((int)(byte)10);
    java.lang.String str59 = cutpurse53.getDefinition();
    int i60 = cutpurse53.getCost();
    int i62 = cutpurse53.getInitialSupply(6);
    cs362.dominion.Resources.Game game63 = null;
    cs362.dominion.Resources.Player[] player_array64 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player65 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b66 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player65, player_array64);
    cs362.dominion.Resources.Supply supply67 = null;
    cs362.dominion.Resources.Option option68 = cutpurse53.playCard(game63, arraylist_player65, supply67);
    cs362.dominion.Resources.Supply supply69 = null;
    cs362.dominion.Resources.Option option70 = cutpurse17.playCard(game52, arraylist_player65, supply69);
    cs362.dominion.Resources.Supply supply71 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option72 = embargo8.playCard(game16, arraylist_player65, supply71);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance15 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance15.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str18.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str24.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str29.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str32.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance39 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance39.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str54.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str59.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option70);

  }

  @Test
  public void test365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test365"); }

    cs362.dominion.Cards.Gold gold0 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = gold0.getType();
    cs362.dominion.Resources.Game game2 = null;
    cs362.dominion.Resources.Player[] player_array3 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player4 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player4, player_array3);
    cs362.dominion.Resources.Supply supply6 = null;
    cs362.dominion.Resources.Option option7 = gold0.playCard(game2, arraylist_player4, supply6);
    int i9 = gold0.getInitialSupply(7);
    int i10 = gold0.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance11 = gold0.getType();
    int i12 = gold0.getCoins();
    int i14 = gold0.getInitialSupply((int)'a');
    int i15 = gold0.getCoins();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    org.junit.Assert.assertTrue("'" + cardTypes_instance11 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance11.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 3);

  }

  @Test
  public void test366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test366"); }

    cs362.dominion.Cards.Estate estate0 = new cs362.dominion.Cards.Estate();
    java.lang.String str1 = estate0.getDefinition();
    int i2 = estate0.getCoins();
    int i3 = estate0.getCost();
    int i4 = estate0.getCost();
    int i6 = estate0.getInitialSupply((int)'4');
    int i7 = estate0.getVictoryPoints();
    int i8 = estate0.getVictoryPoints();
    int i10 = estate0.getInitialSupply((int)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Victory card, worth 1 victory point"+ "'", str1.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 8);

  }

  @Test
  public void test367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test367"); }

    cs362.dominion.Cards.Village village0 = new cs362.dominion.Cards.Village();
    java.lang.String str1 = village0.getDefinition();
    int i2 = village0.getCards();
    int i3 = village0.getActions();
    int i4 = village0.getCost();
    int i5 = village0.getActions();
    int i7 = village0.getInitialSupply(60);
    int i8 = village0.getCost();
    java.lang.String str9 = village0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+1 Card; +2 Actions."+ "'", str1.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Village"+ "'", str9.equals("Village"));

  }

  @Test
  public void test368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test368"); }

    cs362.dominion.Cards.Smithy smithy0 = new cs362.dominion.Cards.Smithy();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = smithy0.getType();
    java.lang.String str2 = smithy0.getDefinition();
    int i3 = smithy0.getCards();
    java.lang.String str4 = smithy0.getDefinition();
    java.lang.String str5 = smithy0.getDefinition();
    int i6 = smithy0.getCost();
    java.lang.String str7 = smithy0.getDefinition();
    int i8 = smithy0.getCards();
    int i9 = smithy0.getCards();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "+3 Cards"+ "'", str2.equals("+3 Cards"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "+3 Cards"+ "'", str4.equals("+3 Cards"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "+3 Cards"+ "'", str5.equals("+3 Cards"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "+3 Cards"+ "'", str7.equals("+3 Cards"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);

  }

  @Test
  public void test369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test369"); }

    cs362.dominion.Cards.Feast feast0 = new cs362.dominion.Cards.Feast();
    int i2 = feast0.getInitialSupply(10);
    int i4 = feast0.getInitialSupply((int)'a');
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = feast0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test370"); }

    cs362.dominion.Cards.Silver silver0 = new cs362.dominion.Cards.Silver();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = silver0.getType();
    int i3 = silver0.getInitialSupply((int)'4');
    java.lang.String str4 = silver0.getDefinition();
    java.lang.String str5 = silver0.getDefinition();
    int i6 = silver0.getCoins();
    int i7 = silver0.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = silver0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance9 = silver0.getType();
    java.lang.String str10 = silver0.getDefinition();
    int i11 = silver0.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance12 = silver0.getType();
    java.lang.String str13 = silver0.getDefinition();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "A silver resource, worth $2"+ "'", str4.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "A silver resource, worth $2"+ "'", str5.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    org.junit.Assert.assertTrue("'" + cardTypes_instance9 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance9.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "A silver resource, worth $2"+ "'", str10.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance12 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance12.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "A silver resource, worth $2"+ "'", str13.equals("A silver resource, worth $2"));

  }

  @Test
  public void test371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test371"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    int i2 = cutpurse0.getCost();
    int i3 = cutpurse0.getCoins();
    java.lang.String str4 = cutpurse0.getDefinition();
    int i5 = cutpurse0.getCoins();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str4.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);

  }

  @Test
  public void test372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test372"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    int i8 = hand7.getActions();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card9 = hand7.allCards();
    int i10 = hand7.getCoins();
    hand7.addActionPoints((int)'a');
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card13 = hand7.removeAllCards();
    cs362.dominion.Resources.Deck deck14 = null;
    cs362.dominion.Resources.Hand hand15 = new cs362.dominion.Resources.Hand(arraylist_card13, deck14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card13);

  }

  @Test
  public void test373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test373"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.size();
    int i13 = hand7.getBuys();
    hand7.printHand();
    int i15 = hand7.size();
    int i16 = hand7.getActions();
    int i17 = hand7.size();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card18 = hand7.allCards();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card18);

  }

  @Test
  public void test374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test374"); }

    cs362.dominion.Cards.Baron baron0 = new cs362.dominion.Cards.Baron();
    int i2 = baron0.getInitialSupply(1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = baron0.getType();
    int i5 = baron0.getInitialSupply(5);
    int i7 = baron0.getInitialSupply(6);
    int i8 = baron0.getBuys();
    int i9 = baron0.getCost();
    java.lang.String str10 = baron0.getDefinition();
    int i12 = baron0.getInitialSupply(6);
    int i13 = baron0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."+ "'", str10.equals("+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 4);

  }

  @Test
  public void test375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test375"); }

    cs362.dominion.Cards.Smithy smithy0 = new cs362.dominion.Cards.Smithy();
    int i1 = smithy0.getCards();
    int i3 = smithy0.getInitialSupply((int)(byte)-1);
    int i4 = smithy0.getCost();
    int i5 = smithy0.getCost();
    int i6 = smithy0.getCards();
    int i8 = smithy0.getInitialSupply(1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);

  }

  @Test
  public void test376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test376"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    int i3 = cutpurse0.getInitialSupply(5);
    cs362.dominion.Resources.Game game4 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom5 = new cs362.dominion.Cards.CouncilRoom();
    int i6 = councilRoom5.getCards();
    int i7 = councilRoom5.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = councilRoom5.getType();
    int i9 = councilRoom5.getBuys();
    java.lang.String str10 = councilRoom5.getDefinition();
    int i12 = councilRoom5.getInitialSupply((int)'a');
    cs362.dominion.Resources.Game game13 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom14 = new cs362.dominion.Cards.CouncilRoom();
    int i15 = councilRoom14.getCards();
    int i16 = councilRoom14.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance17 = councilRoom14.getType();
    int i18 = councilRoom14.getBuys();
    cs362.dominion.Resources.Game game19 = null;
    cs362.dominion.Resources.Player[] player_array20 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player21 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player21, player_array20);
    cs362.dominion.Resources.Supply supply23 = null;
    cs362.dominion.Resources.Option option24 = councilRoom14.playCard(game19, arraylist_player21, supply23);
    cs362.dominion.Resources.Supply supply25 = null;
    cs362.dominion.Resources.Option option26 = councilRoom5.playCard(game13, arraylist_player21, supply25);
    cs362.dominion.Resources.Supply supply27 = null;
    cs362.dominion.Resources.Option option28 = cutpurse0.playCard(game4, arraylist_player21, supply27);
    java.lang.String str29 = cutpurse0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str10.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance17 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance17.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str29.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));

  }

  @Test
  public void test377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test377"); }

    cs362.dominion.Cards.Ambassador ambassador0 = new cs362.dominion.Cards.Ambassador();
    int i1 = ambassador0.getCost();
    java.lang.String str2 = ambassador0.getName();
    int i4 = ambassador0.getInitialSupply(4);
    int i5 = ambassador0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = ambassador0.getType();
    int i8 = ambassador0.getInitialSupply((int)(short)1);
    int i10 = ambassador0.getInitialSupply((int)(byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Ambassador"+ "'", str2.equals("Ambassador"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);

  }

  @Test
  public void test378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test378"); }

    cs362.dominion.Cards.Feast feast0 = new cs362.dominion.Cards.Feast();
    int i1 = feast0.getCost();
    int i3 = feast0.getInitialSupply((int)(short)-1);
    int i4 = feast0.getCost();
    java.lang.String str5 = feast0.getDefinition();
    int i7 = feast0.getInitialSupply((int)'a');
    int i9 = feast0.getInitialSupply((int)'#');
    cs362.dominion.Resources.Game game10 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom11 = new cs362.dominion.Cards.CouncilRoom();
    int i12 = councilRoom11.getCards();
    int i14 = councilRoom11.getInitialSupply(3);
    int i15 = councilRoom11.getCards();
    int i16 = councilRoom11.getBuys();
    int i18 = councilRoom11.getInitialSupply((int)'#');
    int i19 = councilRoom11.getBuys();
    int i20 = councilRoom11.getCards();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance21 = councilRoom11.getType();
    int i23 = councilRoom11.getInitialSupply((int)(byte)-1);
    cs362.dominion.Resources.Game game24 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom25 = new cs362.dominion.Cards.CouncilRoom();
    int i26 = councilRoom25.getCards();
    int i27 = councilRoom25.getCards();
    java.lang.String str28 = councilRoom25.getDefinition();
    int i29 = councilRoom25.getBuys();
    int i30 = councilRoom25.getCards();
    int i32 = councilRoom25.getInitialSupply(1);
    int i33 = councilRoom25.getCost();
    int i34 = councilRoom25.getCost();
    cs362.dominion.Resources.Game game35 = null;
    cs362.dominion.Cards.Cutpurse cutpurse36 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str37 = cutpurse36.getDefinition();
    int i39 = cutpurse36.getInitialSupply(5);
    int i41 = cutpurse36.getInitialSupply((int)(byte)10);
    java.lang.String str42 = cutpurse36.getDefinition();
    cs362.dominion.Resources.Game game43 = null;
    cs362.dominion.Cards.Cutpurse cutpurse44 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str45 = cutpurse44.getDefinition();
    int i47 = cutpurse44.getInitialSupply(5);
    int i49 = cutpurse44.getInitialSupply(8);
    cs362.dominion.Resources.Game game50 = null;
    cs362.dominion.Cards.Gold gold51 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance52 = gold51.getType();
    cs362.dominion.Resources.Game game53 = null;
    cs362.dominion.Resources.Player[] player_array54 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player55 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player55, player_array54);
    cs362.dominion.Resources.Supply supply57 = null;
    cs362.dominion.Resources.Option option58 = gold51.playCard(game53, arraylist_player55, supply57);
    cs362.dominion.Resources.Supply supply59 = null;
    cs362.dominion.Resources.Option option60 = cutpurse44.playCard(game50, arraylist_player55, supply59);
    cs362.dominion.Resources.Supply supply61 = null;
    cs362.dominion.Resources.Option option62 = cutpurse36.playCard(game43, arraylist_player55, supply61);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance63 = cutpurse36.getType();
    cs362.dominion.Resources.Game game64 = null;
    cs362.dominion.Cards.Cutpurse cutpurse65 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str66 = cutpurse65.getDefinition();
    int i68 = cutpurse65.getInitialSupply(5);
    int i70 = cutpurse65.getInitialSupply((int)(byte)10);
    java.lang.String str71 = cutpurse65.getDefinition();
    int i72 = cutpurse65.getCost();
    int i74 = cutpurse65.getInitialSupply(6);
    cs362.dominion.Resources.Game game75 = null;
    cs362.dominion.Resources.Player[] player_array76 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player77 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b78 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player77, player_array76);
    cs362.dominion.Resources.Supply supply79 = null;
    cs362.dominion.Resources.Option option80 = cutpurse65.playCard(game75, arraylist_player77, supply79);
    cs362.dominion.Resources.Supply supply81 = null;
    cs362.dominion.Resources.Option option82 = cutpurse36.playCard(game64, arraylist_player77, supply81);
    cs362.dominion.Resources.Supply supply83 = null;
    cs362.dominion.Resources.Option option84 = councilRoom25.playCard(game35, arraylist_player77, supply83);
    cs362.dominion.Resources.Supply supply85 = null;
    cs362.dominion.Resources.Option option86 = councilRoom11.playCard(game24, arraylist_player77, supply85);
    cs362.dominion.Resources.Supply supply87 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option88 = feast0.playCard(game10, arraylist_player77, supply87);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Trash this card. Gain a card costing up to $5."+ "'", str5.equals("Trash this card. Gain a card costing up to $5."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance21 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance21.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str28.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str37.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str42.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str45.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance52 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance52.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option62);
    org.junit.Assert.assertTrue("'" + cardTypes_instance63 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance63.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str66.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str71.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option86);

  }

  @Test
  public void test379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test379"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.size();
    int i13 = hand7.size();
    cs362.dominion.Cards.GreatHall greatHall14 = new cs362.dominion.Cards.GreatHall();
    int i15 = greatHall14.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance16 = greatHall14.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance17 = greatHall14.getType();
    hand7.addCard((cs362.dominion.Cards.Card)greatHall14);
    hand7.addActionPoints((int)' ');
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls21 = hand7.cardTypesInHand();
    hand7.addActionPoints((int)(short)100);
    cs362.dominion.Resources.Game.gamePhase gamePhase_instance24 = cs362.dominion.Resources.Game.gamePhase.CLEANUP;
    cs362.dominion.Resources.Supply supply25 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls26 = hand7.actionOptions(gamePhase_instance24, supply25);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance16 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance16.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance17 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance17.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls21);
    org.junit.Assert.assertTrue("'" + gamePhase_instance24 + "' != '" + cs362.dominion.Resources.Game.gamePhase.CLEANUP + "'", gamePhase_instance24.equals(cs362.dominion.Resources.Game.gamePhase.CLEANUP));

  }

  @Test
  public void test380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test380"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = embargo8.getCost();
    java.lang.String str13 = embargo8.getDefinition();
    int i14 = embargo8.getCoins();
    int i16 = embargo8.getInitialSupply((int)(short)-1);
    cs362.dominion.Resources.Game game17 = null;
    cs362.dominion.Cards.GreatHall greatHall18 = new cs362.dominion.Cards.GreatHall();
    int i19 = greatHall18.getVictoryPoints();
    int i21 = greatHall18.getInitialSupply((int)(short)0);
    int i23 = greatHall18.getInitialSupply((int)'#');
    int i25 = greatHall18.getInitialSupply(1);
    int i26 = greatHall18.getVictoryPoints();
    int i27 = greatHall18.getCost();
    int i28 = greatHall18.getCost();
    int i29 = greatHall18.getActions();
    cs362.dominion.Resources.Game game30 = null;
    cs362.dominion.Cards.Silver silver31 = new cs362.dominion.Cards.Silver();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance32 = silver31.getType();
    int i34 = silver31.getInitialSupply((int)'4');
    java.lang.String str35 = silver31.getDefinition();
    java.lang.String str36 = silver31.getDefinition();
    cs362.dominion.Resources.Game game37 = null;
    cs362.dominion.Cards.Cutpurse cutpurse38 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str39 = cutpurse38.getDefinition();
    int i41 = cutpurse38.getInitialSupply(5);
    int i42 = cutpurse38.getCost();
    int i43 = cutpurse38.getCoins();
    cs362.dominion.Resources.Game game44 = null;
    cs362.dominion.Cards.Cutpurse cutpurse45 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str46 = cutpurse45.getDefinition();
    int i48 = cutpurse45.getInitialSupply(5);
    int i50 = cutpurse45.getInitialSupply(8);
    cs362.dominion.Resources.Game game51 = null;
    cs362.dominion.Cards.Gold gold52 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance53 = gold52.getType();
    cs362.dominion.Resources.Game game54 = null;
    cs362.dominion.Resources.Player[] player_array55 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player56 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player56, player_array55);
    cs362.dominion.Resources.Supply supply58 = null;
    cs362.dominion.Resources.Option option59 = gold52.playCard(game54, arraylist_player56, supply58);
    cs362.dominion.Resources.Supply supply60 = null;
    cs362.dominion.Resources.Option option61 = cutpurse45.playCard(game51, arraylist_player56, supply60);
    cs362.dominion.Resources.Supply supply62 = null;
    cs362.dominion.Resources.Option option63 = cutpurse38.playCard(game44, arraylist_player56, supply62);
    cs362.dominion.Resources.Supply supply64 = null;
    cs362.dominion.Resources.Option option65 = silver31.playCard(game37, arraylist_player56, supply64);
    cs362.dominion.Resources.Supply supply66 = null;
    cs362.dominion.Resources.Option option67 = greatHall18.playCard(game30, arraylist_player56, supply66);
    cs362.dominion.Resources.Supply supply68 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option69 = embargo8.playCard(game17, arraylist_player56, supply68);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."+ "'", str13.equals("+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance32 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance32.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "A silver resource, worth $2"+ "'", str35.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "A silver resource, worth $2"+ "'", str36.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str39.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str46.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance53 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance53.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option67);

  }

  @Test
  public void test381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test381"); }

    cs362.dominion.Cards.Gardens gardens0 = new cs362.dominion.Cards.Gardens();
    int i2 = gardens0.getInitialSupply((int)(byte)-1);
    int i4 = gardens0.getInitialSupply(0);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = gardens0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test382"); }

    cs362.dominion.Cards.Estate estate0 = new cs362.dominion.Cards.Estate();
    java.lang.String str1 = estate0.getDefinition();
    int i2 = estate0.getCoins();
    int i3 = estate0.getCost();
    int i4 = estate0.getCost();
    int i6 = estate0.getInitialSupply((int)'4');
    int i7 = estate0.getVictoryPoints();
    int i9 = estate0.getInitialSupply((int)'a');
    int i10 = estate0.getCost();
    java.lang.String str11 = estate0.getDefinition();
    int i12 = estate0.getVictoryPoints();
    int i13 = estate0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Victory card, worth 1 victory point"+ "'", str1.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Victory card, worth 1 victory point"+ "'", str11.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);

  }

  @Test
  public void test383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test383"); }

    cs362.dominion.Cards.Silver silver0 = new cs362.dominion.Cards.Silver();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = silver0.getType();
    int i3 = silver0.getInitialSupply((int)'4');
    java.lang.String str4 = silver0.getDefinition();
    java.lang.String str5 = silver0.getDefinition();
    int i6 = silver0.getCoins();
    int i8 = silver0.getInitialSupply(6);
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "A silver resource, worth $2"+ "'", str4.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "A silver resource, worth $2"+ "'", str5.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 40);

  }

  @Test
  public void test384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test384"); }

    cs362.dominion.Cards.Silver silver0 = new cs362.dominion.Cards.Silver();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = silver0.getType();
    java.lang.String str2 = silver0.getDefinition();
    int i3 = silver0.getBuys();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "A silver resource, worth $2"+ "'", str2.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test385"); }

    cs362.dominion.Cards.Copper copper0 = new cs362.dominion.Cards.Copper();
    int i2 = copper0.getInitialSupply((int)' ');
    int i4 = copper0.getInitialSupply((int)(byte)100);
    int i6 = copper0.getInitialSupply((int)(byte)100);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = copper0.getType();
    int i8 = copper0.getCoins();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 60);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test386"); }

    cs362.dominion.Cards.Bazaar bazaar0 = new cs362.dominion.Cards.Bazaar();
    int i1 = bazaar0.getCards();
    int i2 = bazaar0.getActions();
    int i3 = bazaar0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = bazaar0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = bazaar0.getType();
    int i6 = bazaar0.getCoins();
    int i7 = bazaar0.getCards();
    int i8 = bazaar0.getCoins();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test387"); }

    cs362.dominion.Cards.Smithy smithy0 = new cs362.dominion.Cards.Smithy();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = smithy0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = smithy0.getType();
    int i4 = smithy0.getInitialSupply((int)'a');
    int i6 = smithy0.getInitialSupply(0);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = smithy0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = smithy0.getType();
    int i10 = smithy0.getInitialSupply(0);
    int i11 = smithy0.getCards();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);

  }

  @Test
  public void test388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test388"); }

    cs362.dominion.Exceptions.ConfiguationException configuationException1 = new cs362.dominion.Exceptions.ConfiguationException("cs362.dominion.Exceptions.InvalidSelectionException: GreatHall");

  }

  @Test
  public void test389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test389"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    int i8 = hand7.getActions();
    int i9 = hand7.getCoins();
    hand7.addActionPoints((int)(short)100);
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card12 = hand7.allCards();
    int i13 = hand7.getActions();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls14 = hand7.cardTypesInHand();
    int i15 = hand7.size();
    cs362.dominion.Resources.Game.gamePhase gamePhase_instance16 = cs362.dominion.Resources.Game.gamePhase.BUY;
    cs362.dominion.Resources.Supply supply17 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls18 = hand7.actionOptions(gamePhase_instance16, supply17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    org.junit.Assert.assertTrue("'" + gamePhase_instance16 + "' != '" + cs362.dominion.Resources.Game.gamePhase.BUY + "'", gamePhase_instance16.equals(cs362.dominion.Resources.Game.gamePhase.BUY));

  }

  @Test
  public void test390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test390"); }

    cs362.dominion.Cards.Smithy smithy0 = new cs362.dominion.Cards.Smithy();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = smithy0.getType();
    int i2 = smithy0.getBuys();
    java.lang.String str3 = smithy0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = smithy0.getType();
    int i5 = smithy0.getCost();
    int i7 = smithy0.getInitialSupply(9);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = smithy0.getType();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "+3 Cards"+ "'", str3.equals("+3 Cards"));
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test391"); }

    cs362.dominion.Cards.CouncilRoom councilRoom0 = new cs362.dominion.Cards.CouncilRoom();
    int i1 = councilRoom0.getCards();
    int i3 = councilRoom0.getInitialSupply((int)'#');
    int i4 = councilRoom0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = councilRoom0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test392"); }

    cs362.dominion.Cards.Ambassador ambassador0 = new cs362.dominion.Cards.Ambassador();
    java.lang.String str1 = ambassador0.getDefinition();
    java.lang.String str2 = ambassador0.getDefinition();
    int i4 = ambassador0.getInitialSupply((int)' ');
    java.lang.String str5 = ambassador0.getDefinition();
    int i6 = ambassador0.getCost();
    cs362.dominion.Resources.Game game7 = null;
    cs362.dominion.Cards.Gold gold8 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance9 = gold8.getType();
    cs362.dominion.Resources.Game game10 = null;
    cs362.dominion.Resources.Player[] player_array11 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player12 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player12, player_array11);
    cs362.dominion.Resources.Supply supply14 = null;
    cs362.dominion.Resources.Option option15 = gold8.playCard(game10, arraylist_player12, supply14);
    cs362.dominion.Resources.Supply supply16 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option17 = ambassador0.playCard(game7, arraylist_player12, supply16);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str1.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str2.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str5.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance9 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance9.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option15);

  }

  @Test
  public void test393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test393"); }

    cs362.dominion.Cards.Gold gold0 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = gold0.getType();
    cs362.dominion.Resources.Game game2 = null;
    cs362.dominion.Resources.Player[] player_array3 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player4 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player4, player_array3);
    cs362.dominion.Resources.Supply supply6 = null;
    cs362.dominion.Resources.Option option7 = gold0.playCard(game2, arraylist_player4, supply6);
    int i9 = gold0.getInitialSupply(7);
    int i10 = gold0.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance11 = gold0.getType();
    int i12 = gold0.getCoins();
    int i13 = gold0.getActions();
    int i15 = gold0.getInitialSupply(4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);
    org.junit.Assert.assertTrue("'" + cardTypes_instance11 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance11.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 40);

  }

  @Test
  public void test394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test394"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    java.lang.String str3 = embargo0.getName();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = embargo0.getType();
    int i6 = embargo0.getInitialSupply(10);
    int i8 = embargo0.getInitialSupply((int)(byte)10);
    java.lang.String str9 = embargo0.getDefinition();
    int i11 = embargo0.getInitialSupply(0);
    java.lang.String str12 = embargo0.getDefinition();
    int i14 = embargo0.getInitialSupply(200);
    cs362.dominion.Resources.Game game15 = null;
    cs362.dominion.Cards.Cutpurse cutpurse16 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str17 = cutpurse16.getDefinition();
    int i19 = cutpurse16.getInitialSupply(5);
    int i21 = cutpurse16.getInitialSupply(8);
    cs362.dominion.Resources.Game game22 = null;
    cs362.dominion.Cards.Gold gold23 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance24 = gold23.getType();
    cs362.dominion.Resources.Game game25 = null;
    cs362.dominion.Resources.Player[] player_array26 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player27 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player27, player_array26);
    cs362.dominion.Resources.Supply supply29 = null;
    cs362.dominion.Resources.Option option30 = gold23.playCard(game25, arraylist_player27, supply29);
    cs362.dominion.Resources.Supply supply31 = null;
    cs362.dominion.Resources.Option option32 = cutpurse16.playCard(game22, arraylist_player27, supply31);
    int i33 = cutpurse16.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance34 = cutpurse16.getType();
    cs362.dominion.Resources.Game game35 = null;
    cs362.dominion.Cards.Cutpurse cutpurse36 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str37 = cutpurse36.getDefinition();
    int i39 = cutpurse36.getInitialSupply(5);
    int i41 = cutpurse36.getInitialSupply((int)(byte)10);
    java.lang.String str42 = cutpurse36.getDefinition();
    cs362.dominion.Resources.Game game43 = null;
    cs362.dominion.Cards.Cutpurse cutpurse44 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str45 = cutpurse44.getDefinition();
    int i47 = cutpurse44.getInitialSupply(5);
    int i49 = cutpurse44.getInitialSupply(8);
    cs362.dominion.Resources.Game game50 = null;
    cs362.dominion.Cards.Gold gold51 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance52 = gold51.getType();
    cs362.dominion.Resources.Game game53 = null;
    cs362.dominion.Resources.Player[] player_array54 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player55 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player55, player_array54);
    cs362.dominion.Resources.Supply supply57 = null;
    cs362.dominion.Resources.Option option58 = gold51.playCard(game53, arraylist_player55, supply57);
    cs362.dominion.Resources.Supply supply59 = null;
    cs362.dominion.Resources.Option option60 = cutpurse44.playCard(game50, arraylist_player55, supply59);
    cs362.dominion.Resources.Supply supply61 = null;
    cs362.dominion.Resources.Option option62 = cutpurse36.playCard(game43, arraylist_player55, supply61);
    cs362.dominion.Resources.Game game63 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom64 = new cs362.dominion.Cards.CouncilRoom();
    int i65 = councilRoom64.getCards();
    int i66 = councilRoom64.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance67 = councilRoom64.getType();
    int i68 = councilRoom64.getBuys();
    cs362.dominion.Resources.Game game69 = null;
    cs362.dominion.Resources.Player[] player_array70 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player71 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b72 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player71, player_array70);
    cs362.dominion.Resources.Supply supply73 = null;
    cs362.dominion.Resources.Option option74 = councilRoom64.playCard(game69, arraylist_player71, supply73);
    cs362.dominion.Resources.Supply supply75 = null;
    cs362.dominion.Resources.Option option76 = cutpurse36.playCard(game63, arraylist_player71, supply75);
    cs362.dominion.Resources.Supply supply77 = null;
    cs362.dominion.Resources.Option option78 = cutpurse16.playCard(game35, arraylist_player71, supply77);
    cs362.dominion.Resources.Supply supply79 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option80 = embargo0.playCard(game15, arraylist_player71, supply79);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Embargo"+ "'", str3.equals("Embargo"));
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."+ "'", str9.equals("+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."+ "'", str12.equals("+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str17.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance24 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance24.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance34 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance34.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str37.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str42.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str45.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance52 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance52.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance67 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance67.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option78);

  }

  @Test
  public void test395() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test395"); }

    cs362.dominion.Cards.Smithy smithy0 = new cs362.dominion.Cards.Smithy();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = smithy0.getType();
    java.lang.String str2 = smithy0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = smithy0.getType();
    int i4 = smithy0.getCards();
    java.lang.String str5 = smithy0.getDefinition();
    int i6 = smithy0.getCost();
    int i7 = smithy0.getCost();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "+3 Cards"+ "'", str2.equals("+3 Cards"));
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "+3 Cards"+ "'", str5.equals("+3 Cards"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);

  }

  @Test
  public void test396() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test396"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    int i8 = hand7.getActions();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls9 = hand7.cardTypesInHand();
    int i10 = hand7.getCoins();
    cs362.dominion.Cards.Cutpurse cutpurse11 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str12 = cutpurse11.getDefinition();
    int i13 = cutpurse11.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance14 = cutpurse11.getType();
    int i15 = cutpurse11.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance16 = cutpurse11.getType();
    hand7.addCard((cs362.dominion.Cards.Card)cutpurse11);
    int i19 = cutpurse11.getInitialSupply((int)(byte)10);
    int i20 = cutpurse11.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str12.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance14 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance14.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance16 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance16.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 4);

  }

  @Test
  public void test397() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test397"); }

    cs362.dominion.Cards.Province province0 = new cs362.dominion.Cards.Province();
    int i2 = province0.getInitialSupply(0);
    int i3 = province0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = province0.getType();
    int i5 = province0.getVictoryPoints();
    int i6 = province0.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = province0.getType();
    java.lang.String str8 = province0.getDefinition();
    int i10 = province0.getInitialSupply(9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 8);
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 6);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Victory card, worth 6 victory points"+ "'", str8.equals("Victory card, worth 6 victory points"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 8);

  }

  @Test
  public void test398() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test398"); }

    cs362.dominion.Cards.Copper copper0 = new cs362.dominion.Cards.Copper();
    int i2 = copper0.getInitialSupply((int)' ');
    int i4 = copper0.getInitialSupply(0);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = copper0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = copper0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 60);
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));

  }

  @Test
  public void test399() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test399"); }

    cs362.dominion.Cards.Province province0 = new cs362.dominion.Cards.Province();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = province0.getType();
    int i2 = province0.getCost();
    int i3 = province0.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = province0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = province0.getType();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 6);
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));

  }

  @Test
  public void test400() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test400"); }

    cs362.dominion.Cards.Province province0 = new cs362.dominion.Cards.Province();
    int i2 = province0.getInitialSupply((int)'a');
    java.lang.String str3 = province0.getDefinition();
    int i4 = province0.getVictoryPoints();
    int i5 = province0.getVictoryPoints();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Victory card, worth 6 victory points"+ "'", str3.equals("Victory card, worth 6 victory points"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 6);

  }

  @Test
  public void test401() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test401"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    int i8 = hand7.getActions();
    int i9 = hand7.getCoins();
    hand7.addActionPoints((int)(short)100);
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card12 = hand7.allCards();
    int i13 = hand7.getActions();
    int i14 = hand7.getCoins();
    hand7.addActionPoints((int)(byte)10);
    int i17 = hand7.getBuys();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card18 = hand7.removeAllCards();
    cs362.dominion.Resources.Deck deck19 = null;
    cs362.dominion.Resources.Hand hand20 = new cs362.dominion.Resources.Hand(arraylist_card18, deck19);
    int i21 = hand20.getBuys();
    cs362.dominion.Cards.Village village22 = new cs362.dominion.Cards.Village();
    int i24 = village22.getInitialSupply(40);
    java.lang.String str25 = village22.getDefinition();
    int i26 = village22.getCards();
    int i28 = village22.getInitialSupply((int)(byte)10);
    int i29 = village22.getActions();
    int i30 = village22.getActions();
    int i31 = village22.getVictoryPoints();
    int i32 = village22.getActions();
    int i33 = village22.getActions();
    cs362.dominion.Resources.Game game34 = null;
    cs362.dominion.Cards.Cutpurse cutpurse35 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str36 = cutpurse35.getDefinition();
    int i38 = cutpurse35.getInitialSupply(5);
    int i39 = cutpurse35.getCost();
    int i40 = cutpurse35.getCoins();
    cs362.dominion.Resources.Game game41 = null;
    cs362.dominion.Resources.Player[] player_array42 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player43 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player43, player_array42);
    cs362.dominion.Resources.Supply supply45 = null;
    cs362.dominion.Resources.Option option46 = cutpurse35.playCard(game41, arraylist_player43, supply45);
    int i47 = cutpurse35.getCost();
    cs362.dominion.Resources.Game game48 = null;
    cs362.dominion.Cards.Cutpurse cutpurse49 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str50 = cutpurse49.getDefinition();
    int i52 = cutpurse49.getInitialSupply(5);
    int i53 = cutpurse49.getCost();
    int i54 = cutpurse49.getCoins();
    cs362.dominion.Resources.Game game55 = null;
    cs362.dominion.Resources.Player[] player_array56 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player57 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b58 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player57, player_array56);
    cs362.dominion.Resources.Supply supply59 = null;
    cs362.dominion.Resources.Option option60 = cutpurse49.playCard(game55, arraylist_player57, supply59);
    cs362.dominion.Resources.Supply supply61 = null;
    cs362.dominion.Resources.Option option62 = cutpurse35.playCard(game48, arraylist_player57, supply61);
    cs362.dominion.Resources.Supply supply63 = null;
    cs362.dominion.Resources.Option option64 = village22.playCard(game34, arraylist_player57, supply63);
    int i65 = village22.getActions();
    hand20.addCard((cs362.dominion.Cards.Card)village22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "+1 Card; +2 Actions."+ "'", str25.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str36.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str50.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 2);

  }

  @Test
  public void test402() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test402"); }

    cs362.dominion.Cards.Ambassador ambassador0 = new cs362.dominion.Cards.Ambassador();
    java.lang.String str1 = ambassador0.getDefinition();
    java.lang.String str2 = ambassador0.getDefinition();
    java.lang.String str3 = ambassador0.getDefinition();
    int i4 = ambassador0.getCost();
    int i5 = ambassador0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str1.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str2.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str3.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);

  }

  @Test
  public void test403() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test403"); }

    cs362.dominion.Cards.GreatHall greatHall0 = new cs362.dominion.Cards.GreatHall();
    int i1 = greatHall0.getVictoryPoints();
    int i2 = greatHall0.getCards();
    int i3 = greatHall0.getCost();
    int i5 = greatHall0.getInitialSupply(7);
    int i7 = greatHall0.getInitialSupply((int)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test404() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test404"); }

    cs362.dominion.Cards.Village village0 = new cs362.dominion.Cards.Village();
    int i2 = village0.getInitialSupply(40);
    int i3 = village0.getActions();
    int i5 = village0.getInitialSupply(4);
    int i6 = village0.getCards();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test405() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test405"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    int i8 = hand7.getActions();
    int i9 = hand7.getCoins();
    hand7.addActionPoints((int)(short)100);
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card12 = hand7.allCards();
    int i13 = hand7.getBuys();
    int i14 = hand7.getBuys();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card15 = hand7.removeAllCards();
    cs362.dominion.Resources.Deck deck16 = null;
    cs362.dominion.Resources.Hand hand17 = new cs362.dominion.Resources.Hand(arraylist_card15, deck16);
    int i18 = hand17.getCoins();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);

  }

  @Test
  public void test406() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test406"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card12 = hand7.allCards();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls13 = hand7.cardTypesInHand();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card14 = hand7.removeAllCards();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card15 = hand7.removeAllCards();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls16 = hand7.cardTypesInHand();
    int i17 = hand7.getCoins();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card18 = hand7.removeAllCards();
    cs362.dominion.Resources.Deck deck19 = null;
    cs362.dominion.Resources.Hand hand20 = new cs362.dominion.Resources.Hand(arraylist_card18, deck19);
    int i21 = hand20.getBuys();
    cs362.dominion.Cards.CouncilRoom councilRoom22 = new cs362.dominion.Cards.CouncilRoom();
    int i23 = councilRoom22.getBuys();
    hand20.addCard((cs362.dominion.Cards.Card)councilRoom22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);

  }

  @Test
  public void test407() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test407"); }

    cs362.dominion.Cards.CouncilRoom councilRoom0 = new cs362.dominion.Cards.CouncilRoom();
    int i1 = councilRoom0.getCards();
    int i3 = councilRoom0.getInitialSupply((int)'#');
    int i4 = councilRoom0.getCost();
    java.lang.String str5 = councilRoom0.getDefinition();
    cs362.dominion.Resources.Game game6 = null;
    cs362.dominion.Cards.Cutpurse cutpurse7 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str8 = cutpurse7.getDefinition();
    int i10 = cutpurse7.getInitialSupply((int)'4');
    cs362.dominion.Resources.Game game11 = null;
    cs362.dominion.Cards.Cutpurse cutpurse12 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str13 = cutpurse12.getDefinition();
    int i15 = cutpurse12.getInitialSupply(5);
    int i16 = cutpurse12.getCost();
    int i17 = cutpurse12.getCoins();
    cs362.dominion.Resources.Game game18 = null;
    cs362.dominion.Resources.Player[] player_array19 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player20 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player20, player_array19);
    cs362.dominion.Resources.Supply supply22 = null;
    cs362.dominion.Resources.Option option23 = cutpurse12.playCard(game18, arraylist_player20, supply22);
    cs362.dominion.Resources.Supply supply24 = null;
    cs362.dominion.Resources.Option option25 = cutpurse7.playCard(game11, arraylist_player20, supply24);
    cs362.dominion.Resources.Supply supply26 = null;
    cs362.dominion.Resources.Option option27 = councilRoom0.playCard(game6, arraylist_player20, supply26);
    int i28 = councilRoom0.getBuys();
    int i29 = councilRoom0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance30 = councilRoom0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str5.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str8.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str13.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance30 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance30.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test408() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test408"); }

    cs362.dominion.Cards.Smithy smithy0 = new cs362.dominion.Cards.Smithy();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = smithy0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = smithy0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = smithy0.getType();
    int i4 = smithy0.getCost();
    int i5 = smithy0.getCost();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);

  }

  @Test
  public void test409() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test409"); }

    cs362.dominion.Cards.Baron baron0 = new cs362.dominion.Cards.Baron();
    int i2 = baron0.getInitialSupply(1);
    int i3 = baron0.getCost();
    int i4 = baron0.getCost();
    int i5 = baron0.getBuys();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = baron0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test410() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test410"); }

    cs362.dominion.Cards.Village village0 = new cs362.dominion.Cards.Village();
    int i2 = village0.getInitialSupply(40);
    int i4 = village0.getInitialSupply((int)(byte)1);
    int i6 = village0.getInitialSupply((int)(short)0);
    int i7 = village0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = village0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test411() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test411"); }

    cs362.dominion.Cards.Gardens gardens0 = new cs362.dominion.Cards.Gardens();
    int i1 = gardens0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = gardens0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = gardens0.getType();
    int i5 = gardens0.getInitialSupply((int)' ');
    java.lang.String str6 = gardens0.getDefinition();
    int i8 = gardens0.getInitialSupply(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Worth 1 Victory for every 10 cards in your deck (rounded down)."+ "'", str6.equals("Worth 1 Victory for every 10 cards in your deck (rounded down)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);

  }

  @Test
  public void test412() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test412"); }

    cs362.dominion.Cards.Bazaar bazaar0 = new cs362.dominion.Cards.Bazaar();
    java.lang.String str1 = bazaar0.getDefinition();
    java.lang.String str2 = bazaar0.getDefinition();
    int i3 = bazaar0.getCards();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = bazaar0.getType();
    int i5 = bazaar0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+1 Card; +2 Actions, +$1."+ "'", str1.equals("+1 Card; +2 Actions, +$1."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "+1 Card; +2 Actions, +$1."+ "'", str2.equals("+1 Card; +2 Actions, +$1."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);

  }

  @Test
  public void test413() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test413"); }

    cs362.dominion.Cards.Village village0 = new cs362.dominion.Cards.Village();
    int i2 = village0.getInitialSupply(40);
    java.lang.String str3 = village0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = village0.getType();
    int i5 = village0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "+1 Card; +2 Actions."+ "'", str3.equals("+1 Card; +2 Actions."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);

  }

  @Test
  public void test414() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test414"); }

    cs362.dominion.Cards.Feast feast0 = new cs362.dominion.Cards.Feast();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = feast0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = feast0.getType();
    cs362.dominion.Resources.Game game3 = null;
    cs362.dominion.Cards.Cutpurse cutpurse4 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str5 = cutpurse4.getDefinition();
    int i7 = cutpurse4.getInitialSupply(5);
    int i9 = cutpurse4.getInitialSupply(8);
    cs362.dominion.Resources.Game game10 = null;
    cs362.dominion.Cards.Gold gold11 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance12 = gold11.getType();
    cs362.dominion.Resources.Game game13 = null;
    cs362.dominion.Resources.Player[] player_array14 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player15 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player15, player_array14);
    cs362.dominion.Resources.Supply supply17 = null;
    cs362.dominion.Resources.Option option18 = gold11.playCard(game13, arraylist_player15, supply17);
    cs362.dominion.Resources.Supply supply19 = null;
    cs362.dominion.Resources.Option option20 = cutpurse4.playCard(game10, arraylist_player15, supply19);
    int i21 = cutpurse4.getCost();
    cs362.dominion.Resources.Game game22 = null;
    cs362.dominion.Cards.Cutpurse cutpurse23 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str24 = cutpurse23.getDefinition();
    int i26 = cutpurse23.getInitialSupply(5);
    cs362.dominion.Resources.Game game27 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom28 = new cs362.dominion.Cards.CouncilRoom();
    int i29 = councilRoom28.getCards();
    int i30 = councilRoom28.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance31 = councilRoom28.getType();
    int i32 = councilRoom28.getBuys();
    java.lang.String str33 = councilRoom28.getDefinition();
    int i35 = councilRoom28.getInitialSupply((int)'a');
    cs362.dominion.Resources.Game game36 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom37 = new cs362.dominion.Cards.CouncilRoom();
    int i38 = councilRoom37.getCards();
    int i39 = councilRoom37.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance40 = councilRoom37.getType();
    int i41 = councilRoom37.getBuys();
    cs362.dominion.Resources.Game game42 = null;
    cs362.dominion.Resources.Player[] player_array43 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player44 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player44, player_array43);
    cs362.dominion.Resources.Supply supply46 = null;
    cs362.dominion.Resources.Option option47 = councilRoom37.playCard(game42, arraylist_player44, supply46);
    cs362.dominion.Resources.Supply supply48 = null;
    cs362.dominion.Resources.Option option49 = councilRoom28.playCard(game36, arraylist_player44, supply48);
    cs362.dominion.Resources.Supply supply50 = null;
    cs362.dominion.Resources.Option option51 = cutpurse23.playCard(game27, arraylist_player44, supply50);
    cs362.dominion.Resources.Supply supply52 = null;
    cs362.dominion.Resources.Option option53 = cutpurse4.playCard(game22, arraylist_player44, supply52);
    cs362.dominion.Resources.Supply supply54 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option55 = feast0.playCard(game3, arraylist_player44, supply54);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str5.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance12 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance12.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str24.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance31 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance31.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str33.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance40 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance40.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option53);

  }

  @Test
  public void test415() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test415"); }

    cs362.dominion.Cards.Ambassador ambassador0 = new cs362.dominion.Cards.Ambassador();
    int i1 = ambassador0.getCost();
    java.lang.String str2 = ambassador0.getName();
    int i4 = ambassador0.getInitialSupply((int)(short)1);
    int i6 = ambassador0.getInitialSupply(3);
    int i8 = ambassador0.getInitialSupply((int)(short)10);
    cs362.dominion.Resources.Game game9 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom10 = new cs362.dominion.Cards.CouncilRoom();
    int i11 = councilRoom10.getCards();
    int i13 = councilRoom10.getInitialSupply((int)'#');
    java.lang.String str14 = councilRoom10.getDefinition();
    int i15 = councilRoom10.getCost();
    int i17 = councilRoom10.getInitialSupply(2);
    cs362.dominion.Resources.Game game18 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom19 = new cs362.dominion.Cards.CouncilRoom();
    int i20 = councilRoom19.getCards();
    int i21 = councilRoom19.getCost();
    java.lang.String str22 = councilRoom19.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance23 = councilRoom19.getType();
    int i25 = councilRoom19.getInitialSupply(3);
    int i26 = councilRoom19.getCost();
    int i27 = councilRoom19.getCost();
    int i28 = councilRoom19.getBuys();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance29 = councilRoom19.getType();
    int i30 = councilRoom19.getCost();
    cs362.dominion.Resources.Game game31 = null;
    cs362.dominion.Cards.Cutpurse cutpurse32 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str33 = cutpurse32.getDefinition();
    int i35 = cutpurse32.getInitialSupply(5);
    int i36 = cutpurse32.getCost();
    int i37 = cutpurse32.getCoins();
    cs362.dominion.Resources.Game game38 = null;
    cs362.dominion.Resources.Player[] player_array39 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player40 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player40, player_array39);
    cs362.dominion.Resources.Supply supply42 = null;
    cs362.dominion.Resources.Option option43 = cutpurse32.playCard(game38, arraylist_player40, supply42);
    cs362.dominion.Resources.Game game44 = null;
    cs362.dominion.Cards.Cutpurse cutpurse45 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str46 = cutpurse45.getDefinition();
    int i48 = cutpurse45.getInitialSupply(5);
    int i49 = cutpurse45.getCost();
    int i50 = cutpurse45.getCoins();
    cs362.dominion.Resources.Game game51 = null;
    cs362.dominion.Cards.Cutpurse cutpurse52 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str53 = cutpurse52.getDefinition();
    int i55 = cutpurse52.getInitialSupply(5);
    int i57 = cutpurse52.getInitialSupply(8);
    cs362.dominion.Resources.Game game58 = null;
    cs362.dominion.Cards.Gold gold59 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance60 = gold59.getType();
    cs362.dominion.Resources.Game game61 = null;
    cs362.dominion.Resources.Player[] player_array62 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player63 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b64 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player63, player_array62);
    cs362.dominion.Resources.Supply supply65 = null;
    cs362.dominion.Resources.Option option66 = gold59.playCard(game61, arraylist_player63, supply65);
    cs362.dominion.Resources.Supply supply67 = null;
    cs362.dominion.Resources.Option option68 = cutpurse52.playCard(game58, arraylist_player63, supply67);
    cs362.dominion.Resources.Supply supply69 = null;
    cs362.dominion.Resources.Option option70 = cutpurse45.playCard(game51, arraylist_player63, supply69);
    cs362.dominion.Resources.Supply supply71 = null;
    cs362.dominion.Resources.Option option72 = cutpurse32.playCard(game44, arraylist_player63, supply71);
    cs362.dominion.Resources.Supply supply73 = null;
    cs362.dominion.Resources.Option option74 = councilRoom19.playCard(game31, arraylist_player63, supply73);
    cs362.dominion.Resources.Supply supply75 = null;
    cs362.dominion.Resources.Option option76 = councilRoom10.playCard(game18, arraylist_player63, supply75);
    cs362.dominion.Resources.Supply supply77 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option78 = ambassador0.playCard(game9, arraylist_player63, supply77);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Ambassador"+ "'", str2.equals("Ambassador"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str14.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str22.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance23 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance23.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance29 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance29.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str33.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str46.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str53.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance60 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance60.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option76);

  }

  @Test
  public void test416() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test416"); }

    cs362.dominion.Cards.Duchy duchy0 = new cs362.dominion.Cards.Duchy();
    int i1 = duchy0.getVictoryPoints();
    int i2 = duchy0.getCoins();
    int i3 = duchy0.getVictoryPoints();
    int i5 = duchy0.getInitialSupply((int)(byte)10);
    int i6 = duchy0.getActions();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = duchy0.getType();
    int i9 = duchy0.getInitialSupply(0);
    int i11 = duchy0.getInitialSupply(5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 8);

  }

  @Test
  public void test417() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test417"); }

    cs362.dominion.Cards.GreatHall greatHall0 = new cs362.dominion.Cards.GreatHall();
    int i1 = greatHall0.getVictoryPoints();
    int i3 = greatHall0.getInitialSupply((int)(short)0);
    java.lang.String str4 = greatHall0.getDefinition();
    java.lang.String str5 = greatHall0.getDefinition();
    int i6 = greatHall0.getVictoryPoints();
    int i8 = greatHall0.getInitialSupply(0);
    int i9 = greatHall0.getCost();
    int i10 = greatHall0.getCards();
    java.lang.String str11 = greatHall0.getDefinition();
    int i12 = greatHall0.getVictoryPoints();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1 Victory Point +1 Card; +1 Action."+ "'", str4.equals("1 Victory Point +1 Card; +1 Action."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1 Victory Point +1 Card; +1 Action."+ "'", str5.equals("1 Victory Point +1 Card; +1 Action."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "1 Victory Point +1 Card; +1 Action."+ "'", str11.equals("1 Victory Point +1 Card; +1 Action."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);

  }

  @Test
  public void test418() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test418"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    int i8 = hand7.getActions();
    cs362.dominion.Cards.Copper copper9 = new cs362.dominion.Cards.Copper();
    int i11 = copper9.getInitialSupply((int)' ');
    int i13 = copper9.getInitialSupply(0);
    int i14 = copper9.getCost();
    int i15 = copper9.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)copper9);
    hand7.printHand();
    hand7.printHand();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card19 = hand7.allCards();
    cs362.dominion.Resources.Deck deck20 = null;
    cs362.dominion.Resources.Hand hand21 = new cs362.dominion.Resources.Hand(arraylist_card19, deck20);
    hand21.addActionPoints(0);
    cs362.dominion.Cards.CouncilRoom councilRoom24 = new cs362.dominion.Cards.CouncilRoom();
    int i25 = councilRoom24.getCards();
    int i26 = councilRoom24.getCost();
    java.lang.String str27 = councilRoom24.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance28 = councilRoom24.getType();
    int i30 = councilRoom24.getInitialSupply(3);
    int i31 = councilRoom24.getCost();
    int i32 = councilRoom24.getCost();
    int i33 = councilRoom24.getBuys();
    cs362.dominion.Resources.Game game34 = null;
    cs362.dominion.Cards.Gold gold35 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance36 = gold35.getType();
    cs362.dominion.Resources.Game game37 = null;
    cs362.dominion.Resources.Player[] player_array38 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player39 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player39, player_array38);
    cs362.dominion.Resources.Supply supply41 = null;
    cs362.dominion.Resources.Option option42 = gold35.playCard(game37, arraylist_player39, supply41);
    cs362.dominion.Resources.Supply supply43 = null;
    cs362.dominion.Resources.Option option44 = councilRoom24.playCard(game34, arraylist_player39, supply43);
    hand21.addCard((cs362.dominion.Cards.Card)councilRoom24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str27.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance28 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance28.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance36 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance36.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option44);

  }

  @Test
  public void test419() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test419"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = embargo8.getActions();
    int i14 = embargo8.getInitialSupply(0);
    java.lang.String str15 = embargo8.getDefinition();
    int i16 = embargo8.getCoins();
    int i18 = embargo8.getInitialSupply(200);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."+ "'", str15.equals("+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 10);

  }

  @Test
  public void test420() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test420"); }

    cs362.dominion.Cards.Baron baron0 = new cs362.dominion.Cards.Baron();
    int i2 = baron0.getInitialSupply(1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = baron0.getType();
    int i5 = baron0.getInitialSupply(5);
    int i7 = baron0.getInitialSupply(6);
    java.lang.String str8 = baron0.getDefinition();
    int i9 = baron0.getCost();
    int i10 = baron0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."+ "'", str8.equals("+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);

  }

  @Test
  public void test421() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test421"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.size();
    cs362.dominion.Cards.Feast feast13 = new cs362.dominion.Cards.Feast();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance14 = feast13.getType();
    int i16 = feast13.getInitialSupply(7);
    java.lang.String str17 = feast13.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance18 = feast13.getType();
    hand7.addCard((cs362.dominion.Cards.Card)feast13);
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card20 = hand7.removeAllCards();
    cs362.dominion.Resources.Deck deck21 = null;
    cs362.dominion.Resources.Hand hand22 = new cs362.dominion.Resources.Hand(arraylist_card20, deck21);
    hand22.addActionPoints(1);
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card25 = hand22.allCards();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance14 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance14.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Trash this card. Gain a card costing up to $5."+ "'", str17.equals("Trash this card. Gain a card costing up to $5."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance18 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance18.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card25);

  }

  @Test
  public void test422() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test422"); }

    cs362.dominion.Cards.Village village0 = new cs362.dominion.Cards.Village();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = village0.getType();
    int i2 = village0.getCards();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = village0.getType();
    java.lang.String str4 = village0.getDefinition();
    int i5 = village0.getCards();
    int i6 = village0.getActions();
    int i7 = village0.getCost();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "+1 Card; +2 Actions."+ "'", str4.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);

  }

  @Test
  public void test423() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test423"); }

    cs362.dominion.Cards.Estate estate0 = new cs362.dominion.Cards.Estate();
    java.lang.String str1 = estate0.getDefinition();
    int i2 = estate0.getCoins();
    int i3 = estate0.getCost();
    int i4 = estate0.getCost();
    int i6 = estate0.getInitialSupply((int)'4');
    int i7 = estate0.getVictoryPoints();
    int i9 = estate0.getInitialSupply((int)'a');
    int i10 = estate0.getCost();
    java.lang.String str11 = estate0.getDefinition();
    int i13 = estate0.getInitialSupply((int)'a');
    java.lang.String str14 = estate0.getDefinition();
    int i15 = estate0.getVictoryPoints();
    int i16 = estate0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Victory card, worth 1 victory point"+ "'", str1.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Victory card, worth 1 victory point"+ "'", str11.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Victory card, worth 1 victory point"+ "'", str14.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 2);

  }

  @Test
  public void test424() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test424"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    int i3 = embargo0.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = embargo0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test425() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test425"); }

    cs362.dominion.Cards.Baron baron0 = new cs362.dominion.Cards.Baron();
    int i2 = baron0.getInitialSupply(1);
    int i3 = baron0.getBuys();
    java.lang.String str4 = baron0.getDefinition();
    java.lang.String str5 = baron0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."+ "'", str4.equals("+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."+ "'", str5.equals("+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."));

  }

  @Test
  public void test426() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test426"); }

    cs362.dominion.Cards.CouncilRoom councilRoom0 = new cs362.dominion.Cards.CouncilRoom();
    int i1 = councilRoom0.getCards();
    int i3 = councilRoom0.getInitialSupply((int)'#');
    int i4 = councilRoom0.getCost();
    java.lang.String str5 = councilRoom0.getDefinition();
    int i6 = councilRoom0.getBuys();
    int i7 = councilRoom0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str5.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);

  }

  @Test
  public void test427() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test427"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    hand7.printHand();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card13 = hand7.allCards();
    int i14 = hand7.getBuys();
    int i15 = hand7.getActions();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);

  }

  @Test
  public void test428() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test428"); }

    cs362.dominion.Cards.Silver silver0 = new cs362.dominion.Cards.Silver();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = silver0.getType();
    int i2 = silver0.getCost();
    java.lang.String str3 = silver0.getDefinition();
    java.lang.String str4 = silver0.getDefinition();
    java.lang.String str5 = silver0.getDefinition();
    int i7 = silver0.getInitialSupply(40);
    int i9 = silver0.getInitialSupply(10);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance10 = silver0.getType();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "A silver resource, worth $2"+ "'", str3.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "A silver resource, worth $2"+ "'", str4.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "A silver resource, worth $2"+ "'", str5.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 40);
    org.junit.Assert.assertTrue("'" + cardTypes_instance10 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance10.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));

  }

  @Test
  public void test429() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test429"); }

    cs362.dominion.Cards.Duchy duchy0 = new cs362.dominion.Cards.Duchy();
    int i1 = duchy0.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = duchy0.getType();
    int i4 = duchy0.getInitialSupply((int)(byte)1);
    int i5 = duchy0.getVictoryPoints();
    int i6 = duchy0.getVictoryPoints();
    int i8 = duchy0.getInitialSupply((int)(short)100);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance9 = duchy0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 3);
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    org.junit.Assert.assertTrue("'" + cardTypes_instance9 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance9.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));

  }

  @Test
  public void test430() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test430"); }

    cs362.dominion.Cards.Mine mine0 = new cs362.dominion.Cards.Mine();
    int i2 = mine0.getInitialSupply((int)'a');
    int i3 = mine0.getCost();
    int i4 = mine0.getCost();
    int i6 = mine0.getInitialSupply((int)(byte)0);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = mine0.getType();
    int i8 = mine0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance9 = mine0.getType();
    int i10 = mine0.getCost();
    java.lang.String str11 = mine0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance9 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance9.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."+ "'", str11.equals("Trash a Treasure card from your hand. Gain a Treasure card costing up to $3 more; put it into your hand."));

  }

  @Test
  public void test431() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test431"); }

    cs362.dominion.Cards.Bazaar bazaar0 = new cs362.dominion.Cards.Bazaar();
    int i1 = bazaar0.getCards();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = bazaar0.getType();
    int i3 = bazaar0.getActions();
    int i5 = bazaar0.getInitialSupply((int)'a');
    int i6 = bazaar0.getCost();
    cs362.dominion.Resources.Game game7 = null;
    cs362.dominion.Cards.GreatHall greatHall8 = new cs362.dominion.Cards.GreatHall();
    int i9 = greatHall8.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance10 = greatHall8.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance11 = greatHall8.getType();
    int i13 = greatHall8.getInitialSupply((int)(byte)-1);
    int i15 = greatHall8.getInitialSupply((int)'a');
    int i16 = greatHall8.getCards();
    cs362.dominion.Resources.Game game17 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom18 = new cs362.dominion.Cards.CouncilRoom();
    int i19 = councilRoom18.getCards();
    int i21 = councilRoom18.getInitialSupply((int)'#');
    int i22 = councilRoom18.getCost();
    java.lang.String str23 = councilRoom18.getDefinition();
    cs362.dominion.Resources.Game game24 = null;
    cs362.dominion.Cards.Cutpurse cutpurse25 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str26 = cutpurse25.getDefinition();
    int i28 = cutpurse25.getInitialSupply((int)'4');
    cs362.dominion.Resources.Game game29 = null;
    cs362.dominion.Cards.Cutpurse cutpurse30 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str31 = cutpurse30.getDefinition();
    int i33 = cutpurse30.getInitialSupply(5);
    int i34 = cutpurse30.getCost();
    int i35 = cutpurse30.getCoins();
    cs362.dominion.Resources.Game game36 = null;
    cs362.dominion.Resources.Player[] player_array37 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player38 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player38, player_array37);
    cs362.dominion.Resources.Supply supply40 = null;
    cs362.dominion.Resources.Option option41 = cutpurse30.playCard(game36, arraylist_player38, supply40);
    cs362.dominion.Resources.Supply supply42 = null;
    cs362.dominion.Resources.Option option43 = cutpurse25.playCard(game29, arraylist_player38, supply42);
    cs362.dominion.Resources.Supply supply44 = null;
    cs362.dominion.Resources.Option option45 = councilRoom18.playCard(game24, arraylist_player38, supply44);
    cs362.dominion.Resources.Supply supply46 = null;
    cs362.dominion.Resources.Option option47 = greatHall8.playCard(game17, arraylist_player38, supply46);
    cs362.dominion.Resources.Supply supply48 = null;
    cs362.dominion.Resources.Option option49 = bazaar0.playCard(game7, arraylist_player38, supply48);
    int i50 = bazaar0.getActions();
    int i51 = bazaar0.getCoins();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance10 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance10.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance11 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance11.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str23.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str26.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str31.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);

  }

  @Test
  public void test432() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test432"); }

    cs362.dominion.Cards.Baron baron0 = new cs362.dominion.Cards.Baron();
    int i2 = baron0.getInitialSupply(1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = baron0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = baron0.getType();
    int i5 = baron0.getBuys();
    int i7 = baron0.getInitialSupply((int)(byte)-1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = baron0.getType();
    int i10 = baron0.getInitialSupply(100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);

  }

  @Test
  public void test433() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test433"); }

    cs362.dominion.Cards.Adventurer adventurer0 = new cs362.dominion.Cards.Adventurer();
    int i2 = adventurer0.getInitialSupply(40);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = adventurer0.getType();
    java.lang.String str4 = adventurer0.getDefinition();
    int i6 = adventurer0.getInitialSupply(5);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = adventurer0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = adventurer0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."+ "'", str4.equals("Reveal cards from your deck until you reveal 2 Treasure cards. Put those Treasure cards in your hand and discard the other revealed cards."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test434() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test434"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card12 = hand7.allCards();
    int i13 = hand7.getCoins();
    cs362.dominion.Cards.Duchy duchy14 = new cs362.dominion.Cards.Duchy();
    int i15 = duchy14.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance16 = duchy14.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance17 = duchy14.getType();
    int i18 = duchy14.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance19 = duchy14.getType();
    hand7.addCard((cs362.dominion.Cards.Card)duchy14);
    cs362.dominion.Resources.Game.gamePhase gamePhase_instance21 = cs362.dominion.Resources.Game.gamePhase.CLEANUP;
    cs362.dominion.Resources.Supply supply22 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls23 = hand7.buyOptions(gamePhase_instance21, supply22);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 3);
    org.junit.Assert.assertTrue("'" + cardTypes_instance16 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance16.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    org.junit.Assert.assertTrue("'" + cardTypes_instance17 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance17.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 3);
    org.junit.Assert.assertTrue("'" + cardTypes_instance19 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance19.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    org.junit.Assert.assertTrue("'" + gamePhase_instance21 + "' != '" + cs362.dominion.Resources.Game.gamePhase.CLEANUP + "'", gamePhase_instance21.equals(cs362.dominion.Resources.Game.gamePhase.CLEANUP));

  }

  @Test
  public void test435() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test435"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    int i3 = cutpurse0.getInitialSupply(5);
    int i5 = cutpurse0.getInitialSupply(8);
    cs362.dominion.Resources.Game game6 = null;
    cs362.dominion.Cards.Gold gold7 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = gold7.getType();
    cs362.dominion.Resources.Game game9 = null;
    cs362.dominion.Resources.Player[] player_array10 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player11 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player11, player_array10);
    cs362.dominion.Resources.Supply supply13 = null;
    cs362.dominion.Resources.Option option14 = gold7.playCard(game9, arraylist_player11, supply13);
    cs362.dominion.Resources.Supply supply15 = null;
    cs362.dominion.Resources.Option option16 = cutpurse0.playCard(game6, arraylist_player11, supply15);
    int i17 = cutpurse0.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance18 = cutpurse0.getType();
    cs362.dominion.Resources.Game game19 = null;
    cs362.dominion.Cards.Cutpurse cutpurse20 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str21 = cutpurse20.getDefinition();
    int i23 = cutpurse20.getInitialSupply(5);
    int i25 = cutpurse20.getInitialSupply((int)(byte)10);
    java.lang.String str26 = cutpurse20.getDefinition();
    cs362.dominion.Resources.Game game27 = null;
    cs362.dominion.Cards.Cutpurse cutpurse28 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str29 = cutpurse28.getDefinition();
    int i31 = cutpurse28.getInitialSupply(5);
    int i33 = cutpurse28.getInitialSupply(8);
    cs362.dominion.Resources.Game game34 = null;
    cs362.dominion.Cards.Gold gold35 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance36 = gold35.getType();
    cs362.dominion.Resources.Game game37 = null;
    cs362.dominion.Resources.Player[] player_array38 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player39 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player39, player_array38);
    cs362.dominion.Resources.Supply supply41 = null;
    cs362.dominion.Resources.Option option42 = gold35.playCard(game37, arraylist_player39, supply41);
    cs362.dominion.Resources.Supply supply43 = null;
    cs362.dominion.Resources.Option option44 = cutpurse28.playCard(game34, arraylist_player39, supply43);
    cs362.dominion.Resources.Supply supply45 = null;
    cs362.dominion.Resources.Option option46 = cutpurse20.playCard(game27, arraylist_player39, supply45);
    cs362.dominion.Resources.Game game47 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom48 = new cs362.dominion.Cards.CouncilRoom();
    int i49 = councilRoom48.getCards();
    int i50 = councilRoom48.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance51 = councilRoom48.getType();
    int i52 = councilRoom48.getBuys();
    cs362.dominion.Resources.Game game53 = null;
    cs362.dominion.Resources.Player[] player_array54 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player55 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player55, player_array54);
    cs362.dominion.Resources.Supply supply57 = null;
    cs362.dominion.Resources.Option option58 = councilRoom48.playCard(game53, arraylist_player55, supply57);
    cs362.dominion.Resources.Supply supply59 = null;
    cs362.dominion.Resources.Option option60 = cutpurse20.playCard(game47, arraylist_player55, supply59);
    cs362.dominion.Resources.Supply supply61 = null;
    cs362.dominion.Resources.Option option62 = cutpurse0.playCard(game19, arraylist_player55, supply61);
    java.lang.String str63 = cutpurse0.getDefinition();
    int i64 = cutpurse0.getVictoryPoints();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance18 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance18.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str21.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str26.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str29.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance36 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance36.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance51 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance51.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str63.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);

  }

  @Test
  public void test436() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test436"); }

    cs362.dominion.Cards.Smithy smithy0 = new cs362.dominion.Cards.Smithy();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = smithy0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = smithy0.getType();
    java.lang.String str3 = smithy0.getDefinition();
    java.lang.String str4 = smithy0.getDefinition();
    int i6 = smithy0.getInitialSupply((int)'a');
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "+3 Cards"+ "'", str3.equals("+3 Cards"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "+3 Cards"+ "'", str4.equals("+3 Cards"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);

  }

  @Test
  public void test437() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test437"); }

    cs362.dominion.Cards.Duchy duchy0 = new cs362.dominion.Cards.Duchy();
    int i1 = duchy0.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = duchy0.getType();
    int i4 = duchy0.getInitialSupply((int)(byte)1);
    int i5 = duchy0.getVictoryPoints();
    int i6 = duchy0.getVictoryPoints();
    cs362.dominion.Resources.Game game7 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom8 = new cs362.dominion.Cards.CouncilRoom();
    int i9 = councilRoom8.getCards();
    int i10 = councilRoom8.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance11 = councilRoom8.getType();
    int i12 = councilRoom8.getBuys();
    java.lang.String str13 = councilRoom8.getDefinition();
    cs362.dominion.Resources.Game game14 = null;
    cs362.dominion.Cards.Silver silver15 = new cs362.dominion.Cards.Silver();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance16 = silver15.getType();
    int i18 = silver15.getInitialSupply((int)'4');
    java.lang.String str19 = silver15.getDefinition();
    java.lang.String str20 = silver15.getDefinition();
    java.lang.String str21 = silver15.getDefinition();
    cs362.dominion.Resources.Game game22 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom23 = new cs362.dominion.Cards.CouncilRoom();
    int i24 = councilRoom23.getCards();
    int i25 = councilRoom23.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance26 = councilRoom23.getType();
    java.lang.String str27 = councilRoom23.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance28 = councilRoom23.getType();
    int i29 = councilRoom23.getCost();
    int i30 = councilRoom23.getCards();
    cs362.dominion.Resources.Game game31 = null;
    cs362.dominion.Cards.Cutpurse cutpurse32 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str33 = cutpurse32.getDefinition();
    int i35 = cutpurse32.getInitialSupply(5);
    int i36 = cutpurse32.getCost();
    int i37 = cutpurse32.getCoins();
    cs362.dominion.Resources.Game game38 = null;
    cs362.dominion.Resources.Player[] player_array39 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player40 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player40, player_array39);
    cs362.dominion.Resources.Supply supply42 = null;
    cs362.dominion.Resources.Option option43 = cutpurse32.playCard(game38, arraylist_player40, supply42);
    cs362.dominion.Resources.Supply supply44 = null;
    cs362.dominion.Resources.Option option45 = councilRoom23.playCard(game31, arraylist_player40, supply44);
    cs362.dominion.Resources.Supply supply46 = null;
    cs362.dominion.Resources.Option option47 = silver15.playCard(game22, arraylist_player40, supply46);
    cs362.dominion.Resources.Supply supply48 = null;
    cs362.dominion.Resources.Option option49 = councilRoom8.playCard(game14, arraylist_player40, supply48);
    cs362.dominion.Resources.Supply supply50 = null;
    cs362.dominion.Resources.Option option51 = duchy0.playCard(game7, arraylist_player40, supply50);
    int i53 = duchy0.getInitialSupply(40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 3);
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance11 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance11.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str13.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance16 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance16.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "A silver resource, worth $2"+ "'", str19.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "A silver resource, worth $2"+ "'", str20.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "A silver resource, worth $2"+ "'", str21.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance26 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance26.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str27.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance28 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance28.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str33.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 8);

  }

  @Test
  public void test438() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test438"); }

    cs362.dominion.Cards.GreatHall greatHall0 = new cs362.dominion.Cards.GreatHall();
    int i1 = greatHall0.getVictoryPoints();
    int i3 = greatHall0.getInitialSupply((int)(short)0);
    java.lang.String str4 = greatHall0.getDefinition();
    java.lang.String str5 = greatHall0.getDefinition();
    int i7 = greatHall0.getInitialSupply(1);
    int i8 = greatHall0.getCards();
    java.lang.String str9 = greatHall0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1 Victory Point +1 Card; +1 Action."+ "'", str4.equals("1 Victory Point +1 Card; +1 Action."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1 Victory Point +1 Card; +1 Action."+ "'", str5.equals("1 Victory Point +1 Card; +1 Action."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "1 Victory Point +1 Card; +1 Action."+ "'", str9.equals("1 Victory Point +1 Card; +1 Action."));

  }

  @Test
  public void test439() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test439"); }

    cs362.dominion.Cards.Ambassador ambassador0 = new cs362.dominion.Cards.Ambassador();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = ambassador0.getType();
    int i2 = ambassador0.getCost();
    java.lang.String str3 = ambassador0.getDefinition();
    int i5 = ambassador0.getInitialSupply((int)'#');
    int i6 = ambassador0.getCost();
    int i8 = ambassador0.getInitialSupply(8);
    int i10 = ambassador0.getInitialSupply(4);
    cs362.dominion.Resources.Game game11 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom12 = new cs362.dominion.Cards.CouncilRoom();
    int i13 = councilRoom12.getCards();
    int i14 = councilRoom12.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance15 = councilRoom12.getType();
    int i16 = councilRoom12.getBuys();
    java.lang.String str17 = councilRoom12.getDefinition();
    cs362.dominion.Resources.Game game18 = null;
    cs362.dominion.Cards.Silver silver19 = new cs362.dominion.Cards.Silver();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance20 = silver19.getType();
    int i22 = silver19.getInitialSupply((int)'4');
    java.lang.String str23 = silver19.getDefinition();
    java.lang.String str24 = silver19.getDefinition();
    java.lang.String str25 = silver19.getDefinition();
    cs362.dominion.Resources.Game game26 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom27 = new cs362.dominion.Cards.CouncilRoom();
    int i28 = councilRoom27.getCards();
    int i29 = councilRoom27.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance30 = councilRoom27.getType();
    java.lang.String str31 = councilRoom27.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance32 = councilRoom27.getType();
    int i33 = councilRoom27.getCost();
    int i34 = councilRoom27.getCards();
    cs362.dominion.Resources.Game game35 = null;
    cs362.dominion.Cards.Cutpurse cutpurse36 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str37 = cutpurse36.getDefinition();
    int i39 = cutpurse36.getInitialSupply(5);
    int i40 = cutpurse36.getCost();
    int i41 = cutpurse36.getCoins();
    cs362.dominion.Resources.Game game42 = null;
    cs362.dominion.Resources.Player[] player_array43 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player44 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player44, player_array43);
    cs362.dominion.Resources.Supply supply46 = null;
    cs362.dominion.Resources.Option option47 = cutpurse36.playCard(game42, arraylist_player44, supply46);
    cs362.dominion.Resources.Supply supply48 = null;
    cs362.dominion.Resources.Option option49 = councilRoom27.playCard(game35, arraylist_player44, supply48);
    cs362.dominion.Resources.Supply supply50 = null;
    cs362.dominion.Resources.Option option51 = silver19.playCard(game26, arraylist_player44, supply50);
    cs362.dominion.Resources.Supply supply52 = null;
    cs362.dominion.Resources.Option option53 = councilRoom12.playCard(game18, arraylist_player44, supply52);
    cs362.dominion.Resources.Supply supply54 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option55 = ambassador0.playCard(game11, arraylist_player44, supply54);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str3.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance15 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance15.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str17.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance20 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance20.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "A silver resource, worth $2"+ "'", str23.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "A silver resource, worth $2"+ "'", str24.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "A silver resource, worth $2"+ "'", str25.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance30 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance30.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str31.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance32 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance32.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str37.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option53);

  }

  @Test
  public void test440() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test440"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.size();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card13 = hand7.allCards();
    hand7.addActionPoints(3);
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card16 = hand7.allCards();
    hand7.addActionPoints((int)' ');
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card19 = hand7.removeAllCards();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card19);

  }

  @Test
  public void test441() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test441"); }

    cs362.dominion.Cards.Silver silver0 = new cs362.dominion.Cards.Silver();
    int i2 = silver0.getInitialSupply((int)(byte)0);
    int i3 = silver0.getCost();
    int i5 = silver0.getInitialSupply((int)(byte)-1);
    int i6 = silver0.getCost();
    java.lang.String str7 = silver0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = silver0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "A silver resource, worth $2"+ "'", str7.equals("A silver resource, worth $2"));
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));

  }

  @Test
  public void test442() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test442"); }

    cs362.dominion.Cards.CouncilRoom councilRoom0 = new cs362.dominion.Cards.CouncilRoom();
    int i1 = councilRoom0.getCost();
    cs362.dominion.Resources.Game game2 = null;
    cs362.dominion.Cards.Cutpurse cutpurse3 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str4 = cutpurse3.getDefinition();
    int i6 = cutpurse3.getInitialSupply(5);
    int i8 = cutpurse3.getInitialSupply((int)(byte)10);
    java.lang.String str9 = cutpurse3.getDefinition();
    int i10 = cutpurse3.getCost();
    int i12 = cutpurse3.getInitialSupply(6);
    cs362.dominion.Resources.Game game13 = null;
    cs362.dominion.Resources.Player[] player_array14 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player15 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player15, player_array14);
    cs362.dominion.Resources.Supply supply17 = null;
    cs362.dominion.Resources.Option option18 = cutpurse3.playCard(game13, arraylist_player15, supply17);
    cs362.dominion.Resources.Supply supply19 = null;
    cs362.dominion.Resources.Option option20 = councilRoom0.playCard(game2, arraylist_player15, supply19);
    cs362.dominion.Resources.Game game21 = null;
    cs362.dominion.Cards.Cutpurse cutpurse22 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str23 = cutpurse22.getDefinition();
    int i25 = cutpurse22.getInitialSupply(5);
    int i27 = cutpurse22.getInitialSupply((int)(byte)10);
    java.lang.String str28 = cutpurse22.getDefinition();
    cs362.dominion.Resources.Game game29 = null;
    cs362.dominion.Cards.Cutpurse cutpurse30 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str31 = cutpurse30.getDefinition();
    int i33 = cutpurse30.getInitialSupply(5);
    int i35 = cutpurse30.getInitialSupply(8);
    cs362.dominion.Resources.Game game36 = null;
    cs362.dominion.Cards.Gold gold37 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance38 = gold37.getType();
    cs362.dominion.Resources.Game game39 = null;
    cs362.dominion.Resources.Player[] player_array40 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player41 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player41, player_array40);
    cs362.dominion.Resources.Supply supply43 = null;
    cs362.dominion.Resources.Option option44 = gold37.playCard(game39, arraylist_player41, supply43);
    cs362.dominion.Resources.Supply supply45 = null;
    cs362.dominion.Resources.Option option46 = cutpurse30.playCard(game36, arraylist_player41, supply45);
    cs362.dominion.Resources.Supply supply47 = null;
    cs362.dominion.Resources.Option option48 = cutpurse22.playCard(game29, arraylist_player41, supply47);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance49 = cutpurse22.getType();
    cs362.dominion.Resources.Game game50 = null;
    cs362.dominion.Cards.Cutpurse cutpurse51 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str52 = cutpurse51.getDefinition();
    int i54 = cutpurse51.getInitialSupply(5);
    int i56 = cutpurse51.getInitialSupply((int)(byte)10);
    java.lang.String str57 = cutpurse51.getDefinition();
    int i58 = cutpurse51.getCost();
    int i60 = cutpurse51.getInitialSupply(6);
    cs362.dominion.Resources.Game game61 = null;
    cs362.dominion.Resources.Player[] player_array62 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player63 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b64 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player63, player_array62);
    cs362.dominion.Resources.Supply supply65 = null;
    cs362.dominion.Resources.Option option66 = cutpurse51.playCard(game61, arraylist_player63, supply65);
    cs362.dominion.Resources.Supply supply67 = null;
    cs362.dominion.Resources.Option option68 = cutpurse22.playCard(game50, arraylist_player63, supply67);
    cs362.dominion.Resources.Supply supply69 = null;
    cs362.dominion.Resources.Option option70 = councilRoom0.playCard(game21, arraylist_player63, supply69);
    java.lang.String str71 = councilRoom0.getDefinition();
    int i73 = councilRoom0.getInitialSupply((int)(short)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str4.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str9.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str23.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str28.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str31.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance38 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance38.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option48);
    org.junit.Assert.assertTrue("'" + cardTypes_instance49 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance49.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str52.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str57.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str71.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 10);

  }

  @Test
  public void test443() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test443"); }

    cs362.dominion.Cards.Feast feast0 = new cs362.dominion.Cards.Feast();
    int i2 = feast0.getInitialSupply(52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);

  }

  @Test
  public void test444() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test444"); }

    cs362.dominion.Cards.Province province0 = new cs362.dominion.Cards.Province();
    int i2 = province0.getInitialSupply(0);
    java.lang.String str3 = province0.getDefinition();
    int i5 = province0.getInitialSupply((int)' ');
    int i6 = province0.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = province0.getType();
    int i9 = province0.getInitialSupply(52);
    int i10 = province0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Victory card, worth 6 victory points"+ "'", str3.equals("Victory card, worth 6 victory points"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 6);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 8);

  }

  @Test
  public void test445() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test445"); }

    cs362.dominion.Cards.Bazaar bazaar0 = new cs362.dominion.Cards.Bazaar();
    int i1 = bazaar0.getCards();
    int i2 = bazaar0.getActions();
    int i3 = bazaar0.getCost();
    int i4 = bazaar0.getCards();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = bazaar0.getType();
    int i6 = bazaar0.getCost();
    int i7 = bazaar0.getCoins();
    int i8 = bazaar0.getCoins();
    int i9 = bazaar0.getCards();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance10 = bazaar0.getType();
    java.lang.String str11 = bazaar0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance10 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance10.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "+1 Card; +2 Actions, +$1."+ "'", str11.equals("+1 Card; +2 Actions, +$1."));

  }

  @Test
  public void test446() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test446"); }

    cs362.dominion.Cards.Baron baron0 = new cs362.dominion.Cards.Baron();
    int i2 = baron0.getInitialSupply(1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = baron0.getType();
    int i5 = baron0.getInitialSupply(5);
    int i7 = baron0.getInitialSupply(6);
    java.lang.String str8 = baron0.getDefinition();
    int i10 = baron0.getInitialSupply(4);
    int i11 = baron0.getBuys();
    java.lang.String str12 = baron0.getDefinition();
    int i13 = baron0.getCost();
    java.lang.String str14 = baron0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."+ "'", str8.equals("+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."+ "'", str12.equals("+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."+ "'", str14.equals("+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."));

  }

  @Test
  public void test447() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test447"); }

    cs362.dominion.Cards.Gardens gardens0 = new cs362.dominion.Cards.Gardens();
    int i2 = gardens0.getInitialSupply((int)(byte)-1);
    java.lang.String str3 = gardens0.getDefinition();
    int i4 = gardens0.getCost();
    int i6 = gardens0.getInitialSupply(60);
    int i7 = gardens0.getCost();
    java.lang.String str8 = gardens0.getName();
    java.lang.String str9 = gardens0.getDefinition();
    int i10 = gardens0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance11 = gardens0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Worth 1 Victory for every 10 cards in your deck (rounded down)."+ "'", str3.equals("Worth 1 Victory for every 10 cards in your deck (rounded down)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Gardens"+ "'", str8.equals("Gardens"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Worth 1 Victory for every 10 cards in your deck (rounded down)."+ "'", str9.equals("Worth 1 Victory for every 10 cards in your deck (rounded down)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance11 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance11.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test448() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test448"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    int i8 = hand7.getActions();
    int i9 = hand7.getCoins();
    hand7.addActionPoints((int)(short)100);
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls12 = hand7.cardTypesInHand();
    int i13 = hand7.getActions();
    hand7.addActionPoints(10);
    int i16 = hand7.getActions();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);

  }

  @Test
  public void test449() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test449"); }

    cs362.dominion.Cards.Village village0 = new cs362.dominion.Cards.Village();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = village0.getType();
    java.lang.String str2 = village0.getDefinition();
    int i3 = village0.getActions();
    int i5 = village0.getInitialSupply((int)(byte)-1);
    int i6 = village0.getActions();
    int i8 = village0.getInitialSupply((int)(byte)10);
    java.lang.String str9 = village0.getDefinition();
    int i11 = village0.getInitialSupply(100);
    int i12 = village0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance13 = village0.getType();
    int i14 = village0.getCost();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "+1 Card; +2 Actions."+ "'", str2.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "+1 Card; +2 Actions."+ "'", str9.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 3);
    org.junit.Assert.assertTrue("'" + cardTypes_instance13 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance13.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 3);

  }

  @Test
  public void test450() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test450"); }

    cs362.dominion.Cards.Village village0 = new cs362.dominion.Cards.Village();
    java.lang.String str1 = village0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = village0.getType();
    int i3 = village0.getCards();
    int i4 = village0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+1 Card; +2 Actions."+ "'", str1.equals("+1 Card; +2 Actions."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 3);

  }

  @Test
  public void test451() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test451"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.size();
    int i13 = hand7.size();
    int i14 = hand7.getCoins();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls15 = hand7.cardTypesInHand();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card16 = hand7.allCards();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card17 = hand7.allCards();
    hand7.printHand();
    cs362.dominion.Cards.Baron baron19 = new cs362.dominion.Cards.Baron();
    int i21 = baron19.getInitialSupply(1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance22 = baron19.getType();
    int i24 = baron19.getInitialSupply(5);
    int i26 = baron19.getInitialSupply(6);
    hand7.addCard((cs362.dominion.Cards.Card)baron19);
    int i29 = baron19.getInitialSupply((int)'4');
    java.lang.String str30 = baron19.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance31 = baron19.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance22 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance22.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."+ "'", str30.equals("+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance31 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance31.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test452() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test452"); }

    cs362.dominion.Cards.Smithy smithy0 = new cs362.dominion.Cards.Smithy();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = smithy0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = smithy0.getType();
    int i4 = smithy0.getInitialSupply(0);
    int i5 = smithy0.getCost();
    int i6 = smithy0.getCost();
    int i8 = smithy0.getInitialSupply(6);
    java.lang.String str9 = smithy0.getDefinition();
    int i11 = smithy0.getInitialSupply(40);
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "+3 Cards"+ "'", str9.equals("+3 Cards"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);

  }

  @Test
  public void test453() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test453"); }

    cs362.dominion.Cards.Smithy smithy0 = new cs362.dominion.Cards.Smithy();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = smithy0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = smithy0.getType();
    int i4 = smithy0.getInitialSupply(0);
    int i5 = smithy0.getCards();
    int i6 = smithy0.getCards();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);

  }

  @Test
  public void test454() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test454"); }

    cs362.dominion.Cards.Province province0 = new cs362.dominion.Cards.Province();
    int i1 = province0.getVictoryPoints();
    int i3 = province0.getInitialSupply(5);
    int i4 = province0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 8);

  }

  @Test
  public void test455() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test455"); }

    cs362.dominion.Cards.Estate estate0 = new cs362.dominion.Cards.Estate();
    java.lang.String str1 = estate0.getName();
    java.lang.String str2 = estate0.getDefinition();
    int i3 = estate0.getCost();
    int i4 = estate0.getVictoryPoints();
    int i5 = estate0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = estate0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = estate0.getType();
    int i9 = estate0.getInitialSupply((int)(short)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Estate"+ "'", str1.equals("Estate"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Victory card, worth 1 victory point"+ "'", str2.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 8);

  }

  @Test
  public void test456() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test456"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.getCoins();
    cs362.dominion.Cards.Copper copper13 = new cs362.dominion.Cards.Copper();
    int i15 = copper13.getInitialSupply((int)' ');
    hand7.addCard((cs362.dominion.Cards.Card)copper13);
    int i17 = hand7.size();
    hand7.addActionPoints(40);
    cs362.dominion.Cards.Gold gold20 = new cs362.dominion.Cards.Gold();
    int i21 = gold20.getCost();
    java.lang.String str22 = gold20.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance23 = gold20.getType();
    hand7.addCard((cs362.dominion.Cards.Card)gold20);
    cs362.dominion.Cards.Gardens gardens25 = new cs362.dominion.Cards.Gardens();
    int i26 = gardens25.getCost();
    int i28 = gardens25.getInitialSupply((int)(byte)0);
    hand7.addCard((cs362.dominion.Cards.Card)gardens25);
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card30 = hand7.removeAllCards();
    cs362.dominion.Resources.Deck deck31 = null;
    cs362.dominion.Resources.Hand hand32 = new cs362.dominion.Resources.Hand(arraylist_card30, deck31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "A gold resource, worth $3"+ "'", str22.equals("A gold resource, worth $3"));
    org.junit.Assert.assertTrue("'" + cardTypes_instance23 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance23.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card30);

  }

  @Test
  public void test457() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test457"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.size();
    int i13 = hand7.size();
    int i14 = hand7.getCoins();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls15 = hand7.cardTypesInHand();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card16 = hand7.allCards();
    cs362.dominion.Cards.Estate estate17 = new cs362.dominion.Cards.Estate();
    java.lang.String str18 = estate17.getDefinition();
    int i19 = estate17.getCoins();
    int i20 = estate17.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)estate17);
    java.lang.String str22 = estate17.getDefinition();
    int i24 = estate17.getInitialSupply(60);
    int i25 = estate17.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Victory card, worth 1 victory point"+ "'", str18.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Victory card, worth 1 victory point"+ "'", str22.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 2);

  }

  @Test
  public void test458() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test458"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card12 = hand7.allCards();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls13 = hand7.cardTypesInHand();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card14 = hand7.removeAllCards();
    cs362.dominion.Resources.Deck deck15 = null;
    cs362.dominion.Resources.Hand hand16 = new cs362.dominion.Resources.Hand(arraylist_card14, deck15);
    cs362.dominion.Cards.Ambassador ambassador17 = new cs362.dominion.Cards.Ambassador();
    int i18 = ambassador17.getBuys();
    java.lang.String str19 = ambassador17.getDefinition();
    hand16.addCard((cs362.dominion.Cards.Card)ambassador17);
    int i21 = hand16.getBuys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str19.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);

  }

  @Test
  public void test459() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test459"); }

    cs362.dominion.Cards.Smithy smithy0 = new cs362.dominion.Cards.Smithy();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = smithy0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = smithy0.getType();
    java.lang.String str3 = smithy0.getDefinition();
    int i4 = smithy0.getCards();
    java.lang.String str5 = smithy0.getDefinition();
    int i7 = smithy0.getInitialSupply(3);
    int i8 = smithy0.getCost();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "+3 Cards"+ "'", str3.equals("+3 Cards"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "+3 Cards"+ "'", str5.equals("+3 Cards"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test460() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test460"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.size();
    int i13 = hand7.size();
    int i14 = hand7.getCoins();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls15 = hand7.cardTypesInHand();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card16 = hand7.allCards();
    hand7.printHand();
    int i18 = hand7.getActions();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);

  }

  @Test
  public void test461() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test461"); }

    cs362.dominion.Cards.CouncilRoom councilRoom0 = new cs362.dominion.Cards.CouncilRoom();
    int i1 = councilRoom0.getCards();
    int i3 = councilRoom0.getInitialSupply(3);
    int i4 = councilRoom0.getCards();
    int i5 = councilRoom0.getBuys();
    int i6 = councilRoom0.getCards();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = councilRoom0.getType();
    java.lang.String str8 = councilRoom0.getDefinition();
    int i9 = councilRoom0.getCards();
    java.lang.String str10 = councilRoom0.getDefinition();
    int i12 = councilRoom0.getInitialSupply(5);
    int i13 = councilRoom0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str8.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str10.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 5);

  }

  @Test
  public void test462() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test462"); }

    cs362.dominion.Cards.Bazaar bazaar0 = new cs362.dominion.Cards.Bazaar();
    int i1 = bazaar0.getActions();
    int i3 = bazaar0.getInitialSupply((int)(byte)1);
    java.lang.String str4 = bazaar0.getDefinition();
    int i5 = bazaar0.getCost();
    int i6 = bazaar0.getCards();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "+1 Card; +2 Actions, +$1."+ "'", str4.equals("+1 Card; +2 Actions, +$1."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test463() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test463"); }

    cs362.dominion.Cards.Silver silver0 = new cs362.dominion.Cards.Silver();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = silver0.getType();
    int i2 = silver0.getCoins();
    int i3 = silver0.getCost();
    int i4 = silver0.getBuys();
    java.lang.String str5 = silver0.getDefinition();
    int i7 = silver0.getInitialSupply(101);
    int i8 = silver0.getCoins();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "A silver resource, worth $2"+ "'", str5.equals("A silver resource, worth $2"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);

  }

  @Test
  public void test464() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test464"); }

    cs362.dominion.Cards.Copper copper0 = new cs362.dominion.Cards.Copper();
    int i2 = copper0.getInitialSupply((int)' ');
    int i3 = copper0.getCost();
    java.lang.String str4 = copper0.getDefinition();
    int i6 = copper0.getInitialSupply(101);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = copper0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "A copper resource, worth $1"+ "'", str4.equals("A copper resource, worth $1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 60);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));

  }

  @Test
  public void test465() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test465"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.size();
    int i13 = hand7.getActions();
    int i14 = hand7.size();
    int i15 = hand7.getCoins();
    int i16 = hand7.getCoins();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls17 = hand7.cardTypesInHand();
    int i18 = hand7.getCoins();
    int i19 = hand7.getBuys();
    int i20 = hand7.getBuys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);

  }

  @Test
  public void test466() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test466"); }

    cs362.dominion.Cards.Ambassador ambassador0 = new cs362.dominion.Cards.Ambassador();
    int i1 = ambassador0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = ambassador0.getType();
    int i4 = ambassador0.getInitialSupply((int)(byte)-1);
    int i5 = ambassador0.getActions();
    java.lang.String str6 = ambassador0.getDefinition();
    int i7 = ambassador0.getActions();
    java.lang.String str8 = ambassador0.getDefinition();
    int i9 = ambassador0.getVictoryPoints();
    int i10 = ambassador0.getCost();
    int i11 = ambassador0.getCost();
    cs362.dominion.Resources.Game game12 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom13 = new cs362.dominion.Cards.CouncilRoom();
    int i14 = councilRoom13.getCards();
    int i16 = councilRoom13.getInitialSupply((int)'#');
    int i17 = councilRoom13.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance18 = councilRoom13.getType();
    cs362.dominion.Resources.Game game19 = null;
    cs362.dominion.Cards.Village village20 = new cs362.dominion.Cards.Village();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance21 = village20.getType();
    java.lang.String str22 = village20.getDefinition();
    int i23 = village20.getActions();
    int i25 = village20.getInitialSupply((int)(byte)-1);
    int i26 = village20.getActions();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance27 = village20.getType();
    java.lang.String str28 = village20.getDefinition();
    cs362.dominion.Resources.Game game29 = null;
    cs362.dominion.Cards.Cutpurse cutpurse30 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str31 = cutpurse30.getDefinition();
    int i33 = cutpurse30.getInitialSupply((int)'4');
    cs362.dominion.Resources.Game game34 = null;
    cs362.dominion.Cards.Cutpurse cutpurse35 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str36 = cutpurse35.getDefinition();
    int i38 = cutpurse35.getInitialSupply(5);
    int i39 = cutpurse35.getCost();
    int i40 = cutpurse35.getCoins();
    cs362.dominion.Resources.Game game41 = null;
    cs362.dominion.Resources.Player[] player_array42 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player43 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player43, player_array42);
    cs362.dominion.Resources.Supply supply45 = null;
    cs362.dominion.Resources.Option option46 = cutpurse35.playCard(game41, arraylist_player43, supply45);
    cs362.dominion.Resources.Supply supply47 = null;
    cs362.dominion.Resources.Option option48 = cutpurse30.playCard(game34, arraylist_player43, supply47);
    cs362.dominion.Resources.Supply supply49 = null;
    cs362.dominion.Resources.Option option50 = village20.playCard(game29, arraylist_player43, supply49);
    cs362.dominion.Resources.Supply supply51 = null;
    cs362.dominion.Resources.Option option52 = councilRoom13.playCard(game19, arraylist_player43, supply51);
    cs362.dominion.Resources.Supply supply53 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option54 = ambassador0.playCard(game12, arraylist_player43, supply53);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str6.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str8.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance18 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance18.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance21 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance21.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "+1 Card; +2 Actions."+ "'", str22.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance27 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance27.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "+1 Card; +2 Actions."+ "'", str28.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str31.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str36.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option52);

  }

  @Test
  public void test467() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test467"); }

    cs362.dominion.Cards.CouncilRoom councilRoom0 = new cs362.dominion.Cards.CouncilRoom();
    int i1 = councilRoom0.getCards();
    int i2 = councilRoom0.getCost();
    java.lang.String str3 = councilRoom0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = councilRoom0.getType();
    int i6 = councilRoom0.getInitialSupply(3);
    int i7 = councilRoom0.getCost();
    int i8 = councilRoom0.getCost();
    int i9 = councilRoom0.getBuys();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance10 = councilRoom0.getType();
    int i12 = councilRoom0.getInitialSupply((int)' ');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str3.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance10 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance10.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);

  }

  @Test
  public void test468() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test468"); }

    cs362.dominion.Cards.Duchy duchy0 = new cs362.dominion.Cards.Duchy();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = duchy0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = duchy0.getType();
    int i3 = duchy0.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = duchy0.getType();
    int i6 = duchy0.getInitialSupply(200);
    int i7 = duchy0.getCost();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 5);

  }

  @Test
  public void test469() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test469"); }

    cs362.dominion.Cards.Feast feast0 = new cs362.dominion.Cards.Feast();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = feast0.getType();
    int i3 = feast0.getInitialSupply((int)(short)100);
    java.lang.String str4 = feast0.getDefinition();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Trash this card. Gain a card costing up to $5."+ "'", str4.equals("Trash this card. Gain a card costing up to $5."));

  }

  @Test
  public void test470() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test470"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.size();
    int i13 = hand7.size();
    cs362.dominion.Cards.GreatHall greatHall14 = new cs362.dominion.Cards.GreatHall();
    int i15 = greatHall14.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance16 = greatHall14.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance17 = greatHall14.getType();
    hand7.addCard((cs362.dominion.Cards.Card)greatHall14);
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card19 = hand7.allCards();
    cs362.dominion.Cards.Feast feast20 = new cs362.dominion.Cards.Feast();
    int i21 = feast20.getCost();
    int i23 = feast20.getInitialSupply((int)(short)-1);
    hand7.addCard((cs362.dominion.Cards.Card)feast20);
    hand7.addActionPoints((-1));
    int i27 = hand7.getCoins();
    hand7.addActionPoints((int)(short)10);
    int i30 = hand7.getCoins();
    int i31 = hand7.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance16 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance16.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance17 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance17.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);

  }

  @Test
  public void test471() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test471"); }

    cs362.dominion.Cards.Copper copper0 = new cs362.dominion.Cards.Copper();
    int i2 = copper0.getInitialSupply((int)' ');
    int i4 = copper0.getInitialSupply((int)(byte)100);
    java.lang.String str5 = copper0.getDefinition();
    java.lang.String str6 = copper0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "A copper resource, worth $1"+ "'", str5.equals("A copper resource, worth $1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "A copper resource, worth $1"+ "'", str6.equals("A copper resource, worth $1"));

  }

  @Test
  public void test472() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test472"); }

    cs362.dominion.Cards.Ambassador ambassador0 = new cs362.dominion.Cards.Ambassador();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = ambassador0.getType();
    int i2 = ambassador0.getCost();
    java.lang.String str3 = ambassador0.getDefinition();
    int i5 = ambassador0.getInitialSupply((int)'#');
    java.lang.String str6 = ambassador0.getDefinition();
    int i7 = ambassador0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = ambassador0.getType();
    int i10 = ambassador0.getInitialSupply(60);
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str3.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."+ "'", str6.equals("Reveal a card from your hand. Return up to 2 copies of it from your hand to the Supply. Then each other player gains a copy of it."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);

  }

  @Test
  public void test473() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test473"); }

    cs362.dominion.Cards.CouncilRoom councilRoom0 = new cs362.dominion.Cards.CouncilRoom();
    int i1 = councilRoom0.getCards();
    int i2 = councilRoom0.getCards();
    int i4 = councilRoom0.getInitialSupply(200);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = councilRoom0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

  @Test
  public void test474() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test474"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    int i8 = hand7.getActions();
    int i9 = hand7.getCoins();
    hand7.addActionPoints((int)(short)100);
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card12 = hand7.allCards();
    int i13 = hand7.getBuys();
    int i14 = hand7.getActions();
    int i15 = hand7.getCoins();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls16 = hand7.cardTypesInHand();
    java.util.ArrayList<java.lang.Class<? extends cs362.dominion.Cards.Card>> arraylist_cls17 = hand7.cardTypesInHand();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_cls17);

  }

  @Test
  public void test475() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test475"); }

    cs362.dominion.Cards.Baron baron0 = new cs362.dominion.Cards.Baron();
    int i2 = baron0.getInitialSupply(1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = baron0.getType();
    java.lang.String str4 = baron0.getDefinition();
    int i6 = baron0.getInitialSupply((int)(byte)0);
    int i7 = baron0.getCost();
    int i9 = baron0.getInitialSupply(101);
    int i11 = baron0.getInitialSupply((int)(short)100);
    int i13 = baron0.getInitialSupply((int)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."+ "'", str4.equals("+1 Buy. You may discard an Estate card. If you do, +$4. Otherwise, gain an Estate card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);

  }

  @Test
  public void test476() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test476"); }

    cs362.dominion.Exceptions.InvalidSelectionException invalidSelectionException1 = new cs362.dominion.Exceptions.InvalidSelectionException("Smithy");
    cs362.dominion.Exceptions.InvalidSelectionException invalidSelectionException3 = new cs362.dominion.Exceptions.InvalidSelectionException("Embargo");
    cs362.dominion.Exceptions.InvalidOptionException invalidOptionException5 = new cs362.dominion.Exceptions.InvalidOptionException("hi!");
    cs362.dominion.Exceptions.ConfiguationException configuationException7 = new cs362.dominion.Exceptions.ConfiguationException("+$2. Trash this card. Put an Embargo token on top of a Supply pile. When a player buys a card, he gains a Curse card per Embargo token on that pile.");
    invalidOptionException5.addSuppressed((java.lang.Throwable)configuationException7);
    java.lang.Throwable[] throwable_array9 = invalidOptionException5.getSuppressed();
    invalidSelectionException3.addSuppressed((java.lang.Throwable)invalidOptionException5);
    invalidSelectionException1.addSuppressed((java.lang.Throwable)invalidSelectionException3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array9);

  }

  @Test
  public void test477() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test477"); }

    cs362.dominion.Cards.Duchy duchy0 = new cs362.dominion.Cards.Duchy();
    int i1 = duchy0.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = duchy0.getType();
    int i4 = duchy0.getInitialSupply((int)(byte)1);
    int i5 = duchy0.getVictoryPoints();
    int i6 = duchy0.getVictoryPoints();
    int i8 = duchy0.getInitialSupply((int)(short)10);
    int i9 = duchy0.getVictoryPoints();
    int i10 = duchy0.getVictoryPoints();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 3);
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 3);

  }

  @Test
  public void test478() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test478"); }

    cs362.dominion.Cards.Silver silver0 = new cs362.dominion.Cards.Silver();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = silver0.getType();
    int i2 = silver0.getCost();
    int i3 = silver0.getCoins();
    java.lang.String str4 = silver0.getDefinition();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "A silver resource, worth $2"+ "'", str4.equals("A silver resource, worth $2"));

  }

  @Test
  public void test479() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test479"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.size();
    int i13 = hand7.getActions();
    int i14 = hand7.size();
    int i15 = hand7.getCoins();
    int i16 = hand7.getActions();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card17 = hand7.allCards();
    int i18 = hand7.size();
    hand7.addActionPoints((int)(short)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 2);

  }

  @Test
  public void test480() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test480"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    int i3 = cutpurse0.getInitialSupply(5);
    int i5 = cutpurse0.getInitialSupply(8);
    cs362.dominion.Resources.Game game6 = null;
    cs362.dominion.Cards.Gold gold7 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = gold7.getType();
    cs362.dominion.Resources.Game game9 = null;
    cs362.dominion.Resources.Player[] player_array10 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player11 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player11, player_array10);
    cs362.dominion.Resources.Supply supply13 = null;
    cs362.dominion.Resources.Option option14 = gold7.playCard(game9, arraylist_player11, supply13);
    cs362.dominion.Resources.Supply supply15 = null;
    cs362.dominion.Resources.Option option16 = cutpurse0.playCard(game6, arraylist_player11, supply15);
    int i17 = cutpurse0.getCoins();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance18 = cutpurse0.getType();
    int i20 = cutpurse0.getInitialSupply((int)(byte)0);
    java.lang.String str21 = cutpurse0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance18 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance18.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str21.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));

  }

  @Test
  public void test481() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test481"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    int i3 = cutpurse0.getInitialSupply(5);
    int i5 = cutpurse0.getInitialSupply(8);
    cs362.dominion.Resources.Game game6 = null;
    cs362.dominion.Cards.Gold gold7 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = gold7.getType();
    cs362.dominion.Resources.Game game9 = null;
    cs362.dominion.Resources.Player[] player_array10 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player11 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player11, player_array10);
    cs362.dominion.Resources.Supply supply13 = null;
    cs362.dominion.Resources.Option option14 = gold7.playCard(game9, arraylist_player11, supply13);
    cs362.dominion.Resources.Supply supply15 = null;
    cs362.dominion.Resources.Option option16 = cutpurse0.playCard(game6, arraylist_player11, supply15);
    int i17 = cutpurse0.getCoins();
    int i19 = cutpurse0.getInitialSupply(200);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 10);

  }

  @Test
  public void test482() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test482"); }

    cs362.dominion.Cards.GreatHall greatHall0 = new cs362.dominion.Cards.GreatHall();
    int i1 = greatHall0.getVictoryPoints();
    int i3 = greatHall0.getInitialSupply((int)(short)0);
    java.lang.String str4 = greatHall0.getDefinition();
    java.lang.String str5 = greatHall0.getDefinition();
    int i6 = greatHall0.getVictoryPoints();
    int i8 = greatHall0.getInitialSupply(0);
    int i9 = greatHall0.getCost();
    int i10 = greatHall0.getCards();
    int i11 = greatHall0.getVictoryPoints();
    int i13 = greatHall0.getInitialSupply(0);
    int i14 = greatHall0.getActions();
    int i15 = greatHall0.getCost();
    int i17 = greatHall0.getInitialSupply(60);
    java.lang.String str18 = greatHall0.getDefinition();
    int i20 = greatHall0.getInitialSupply((int)' ');
    int i21 = greatHall0.getVictoryPoints();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1 Victory Point +1 Card; +1 Action."+ "'", str4.equals("1 Victory Point +1 Card; +1 Action."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "1 Victory Point +1 Card; +1 Action."+ "'", str5.equals("1 Victory Point +1 Card; +1 Action."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "1 Victory Point +1 Card; +1 Action."+ "'", str18.equals("1 Victory Point +1 Card; +1 Action."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);

  }

  @Test
  public void test483() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test483"); }

    cs362.dominion.Cards.Feast feast0 = new cs362.dominion.Cards.Feast();
    java.lang.String str1 = feast0.getDefinition();
    java.lang.String str2 = feast0.getDefinition();
    int i3 = feast0.getCost();
    cs362.dominion.Resources.Game game4 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom5 = new cs362.dominion.Cards.CouncilRoom();
    int i6 = councilRoom5.getCards();
    int i8 = councilRoom5.getInitialSupply((int)'#');
    int i9 = councilRoom5.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance10 = councilRoom5.getType();
    cs362.dominion.Resources.Game game11 = null;
    cs362.dominion.Cards.Village village12 = new cs362.dominion.Cards.Village();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance13 = village12.getType();
    java.lang.String str14 = village12.getDefinition();
    int i15 = village12.getActions();
    int i17 = village12.getInitialSupply((int)(byte)-1);
    int i18 = village12.getActions();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance19 = village12.getType();
    java.lang.String str20 = village12.getDefinition();
    cs362.dominion.Resources.Game game21 = null;
    cs362.dominion.Cards.Cutpurse cutpurse22 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str23 = cutpurse22.getDefinition();
    int i25 = cutpurse22.getInitialSupply((int)'4');
    cs362.dominion.Resources.Game game26 = null;
    cs362.dominion.Cards.Cutpurse cutpurse27 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str28 = cutpurse27.getDefinition();
    int i30 = cutpurse27.getInitialSupply(5);
    int i31 = cutpurse27.getCost();
    int i32 = cutpurse27.getCoins();
    cs362.dominion.Resources.Game game33 = null;
    cs362.dominion.Resources.Player[] player_array34 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player35 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player35, player_array34);
    cs362.dominion.Resources.Supply supply37 = null;
    cs362.dominion.Resources.Option option38 = cutpurse27.playCard(game33, arraylist_player35, supply37);
    cs362.dominion.Resources.Supply supply39 = null;
    cs362.dominion.Resources.Option option40 = cutpurse22.playCard(game26, arraylist_player35, supply39);
    cs362.dominion.Resources.Supply supply41 = null;
    cs362.dominion.Resources.Option option42 = village12.playCard(game21, arraylist_player35, supply41);
    cs362.dominion.Resources.Supply supply43 = null;
    cs362.dominion.Resources.Option option44 = councilRoom5.playCard(game11, arraylist_player35, supply43);
    cs362.dominion.Resources.Supply supply45 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option46 = feast0.playCard(game4, arraylist_player35, supply45);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Trash this card. Gain a card costing up to $5."+ "'", str1.equals("Trash this card. Gain a card costing up to $5."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Trash this card. Gain a card costing up to $5."+ "'", str2.equals("Trash this card. Gain a card costing up to $5."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance10 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance10.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance13 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance13.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "+1 Card; +2 Actions."+ "'", str14.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance19 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance19.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "+1 Card; +2 Actions."+ "'", str20.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str23.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str28.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option44);

  }

  @Test
  public void test484() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test484"); }

    cs362.dominion.Cards.Baron baron0 = new cs362.dominion.Cards.Baron();
    int i2 = baron0.getInitialSupply(1);
    int i4 = baron0.getInitialSupply(10);
    int i5 = baron0.getCoins();
    int i6 = baron0.getCost();
    cs362.dominion.Resources.Game game7 = null;
    cs362.dominion.Cards.GreatHall greatHall8 = new cs362.dominion.Cards.GreatHall();
    int i9 = greatHall8.getVictoryPoints();
    int i11 = greatHall8.getInitialSupply((int)(short)0);
    int i12 = greatHall8.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance13 = greatHall8.getType();
    java.lang.String str14 = greatHall8.getDefinition();
    cs362.dominion.Resources.Game game15 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom16 = new cs362.dominion.Cards.CouncilRoom();
    int i17 = councilRoom16.getCards();
    int i18 = councilRoom16.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance19 = councilRoom16.getType();
    int i20 = councilRoom16.getBuys();
    java.lang.String str21 = councilRoom16.getDefinition();
    int i23 = councilRoom16.getInitialSupply((int)'a');
    cs362.dominion.Resources.Game game24 = null;
    cs362.dominion.Cards.CouncilRoom councilRoom25 = new cs362.dominion.Cards.CouncilRoom();
    int i26 = councilRoom25.getCards();
    int i27 = councilRoom25.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance28 = councilRoom25.getType();
    int i29 = councilRoom25.getBuys();
    cs362.dominion.Resources.Game game30 = null;
    cs362.dominion.Resources.Player[] player_array31 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player32 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b33 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player32, player_array31);
    cs362.dominion.Resources.Supply supply34 = null;
    cs362.dominion.Resources.Option option35 = councilRoom25.playCard(game30, arraylist_player32, supply34);
    cs362.dominion.Resources.Supply supply36 = null;
    cs362.dominion.Resources.Option option37 = councilRoom16.playCard(game24, arraylist_player32, supply36);
    cs362.dominion.Resources.Supply supply38 = null;
    cs362.dominion.Resources.Option option39 = greatHall8.playCard(game15, arraylist_player32, supply38);
    cs362.dominion.Resources.Supply supply40 = null;
    // The following exception was thrown during execution in test generation
    try {
    cs362.dominion.Resources.Option option41 = baron0.playCard(game7, arraylist_player32, supply40);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 3);
    org.junit.Assert.assertTrue("'" + cardTypes_instance13 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance13.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1 Victory Point +1 Card; +1 Action."+ "'", str14.equals("1 Victory Point +1 Card; +1 Action."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance19 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance19.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str21.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance28 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance28.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option39);

  }

  @Test
  public void test485() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test485"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    int i8 = hand7.getActions();
    int i9 = hand7.getCoins();
    hand7.addActionPoints((int)(short)100);
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card12 = hand7.allCards();
    int i13 = hand7.getBuys();
    hand7.addActionPoints(101);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);

  }

  @Test
  public void test486() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test486"); }

    cs362.dominion.Cards.GreatHall greatHall0 = new cs362.dominion.Cards.GreatHall();
    int i1 = greatHall0.getVictoryPoints();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance2 = greatHall0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = greatHall0.getType();
    int i5 = greatHall0.getInitialSupply((int)(byte)-1);
    int i7 = greatHall0.getInitialSupply((int)'a');
    int i9 = greatHall0.getInitialSupply(60);
    int i11 = greatHall0.getInitialSupply((int)(byte)-1);
    java.lang.String str12 = greatHall0.getDefinition();
    cs362.dominion.Resources.Game game13 = null;
    cs362.dominion.Cards.Cutpurse cutpurse14 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str15 = cutpurse14.getDefinition();
    int i17 = cutpurse14.getInitialSupply(5);
    int i19 = cutpurse14.getInitialSupply(8);
    cs362.dominion.Resources.Game game20 = null;
    cs362.dominion.Cards.Gold gold21 = new cs362.dominion.Cards.Gold();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance22 = gold21.getType();
    cs362.dominion.Resources.Game game23 = null;
    cs362.dominion.Resources.Player[] player_array24 = new cs362.dominion.Resources.Player[] {  };
    java.util.ArrayList<cs362.dominion.Resources.Player> arraylist_player25 = new java.util.ArrayList<cs362.dominion.Resources.Player>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Resources.Player>)arraylist_player25, player_array24);
    cs362.dominion.Resources.Supply supply27 = null;
    cs362.dominion.Resources.Option option28 = gold21.playCard(game23, arraylist_player25, supply27);
    cs362.dominion.Resources.Supply supply29 = null;
    cs362.dominion.Resources.Option option30 = cutpurse14.playCard(game20, arraylist_player25, supply29);
    cs362.dominion.Resources.Supply supply31 = null;
    cs362.dominion.Resources.Option option32 = greatHall0.playCard(game13, arraylist_player25, supply31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    org.junit.Assert.assertTrue("'" + cardTypes_instance2 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance2.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "1 Victory Point +1 Card; +1 Action."+ "'", str12.equals("1 Victory Point +1 Card; +1 Action."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str15.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance22 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance22.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(option32);

  }

  @Test
  public void test487() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test487"); }

    cs362.dominion.Cards.Estate estate0 = new cs362.dominion.Cards.Estate();
    java.lang.String str1 = estate0.getDefinition();
    int i2 = estate0.getCoins();
    int i3 = estate0.getCost();
    java.lang.String str4 = estate0.getName();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = estate0.getType();
    int i7 = estate0.getInitialSupply((int)(short)1);
    java.lang.String str8 = estate0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Victory card, worth 1 victory point"+ "'", str1.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Estate"+ "'", str4.equals("Estate"));
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Estate"+ "'", str8.equals("Estate"));

  }

  @Test
  public void test488() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test488"); }

    cs362.dominion.Cards.CouncilRoom councilRoom0 = new cs362.dominion.Cards.CouncilRoom();
    int i1 = councilRoom0.getCards();
    int i2 = councilRoom0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = councilRoom0.getType();
    java.lang.String str4 = councilRoom0.getDefinition();
    java.lang.String str5 = councilRoom0.getDefinition();
    int i6 = councilRoom0.getVictoryPoints();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 5);
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str4.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "+4 Cards; +1 Buy. Each other player draws a card."+ "'", str5.equals("+4 Cards; +1 Buy. Each other player draws a card."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test489() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test489"); }

    cs362.dominion.Cards.Estate estate0 = new cs362.dominion.Cards.Estate();
    java.lang.String str1 = estate0.getName();
    java.lang.String str2 = estate0.getDefinition();
    int i3 = estate0.getCost();
    int i4 = estate0.getVictoryPoints();
    int i5 = estate0.getCost();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance6 = estate0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = estate0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = estate0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Estate"+ "'", str1.equals("Estate"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Victory card, worth 1 victory point"+ "'", str2.equals("Victory card, worth 1 victory point"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    org.junit.Assert.assertTrue("'" + cardTypes_instance6 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance6.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));

  }

  @Test
  public void test490() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test490"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    int i3 = cutpurse0.getInitialSupply(5);
    int i5 = cutpurse0.getInitialSupply(8);
    int i7 = cutpurse0.getInitialSupply(6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test491() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test491"); }

    cs362.dominion.Cards.Village village0 = new cs362.dominion.Cards.Village();
    int i2 = village0.getInitialSupply(40);
    java.lang.String str3 = village0.getDefinition();
    int i4 = village0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "+1 Card; +2 Actions."+ "'", str3.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 3);

  }

  @Test
  public void test492() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test492"); }

    cs362.dominion.Cards.Embargo embargo0 = new cs362.dominion.Cards.Embargo();
    java.lang.String str1 = embargo0.getName();
    int i2 = embargo0.getCost();
    cs362.dominion.Cards.Card[] card_array3 = new cs362.dominion.Cards.Card[] { embargo0 };
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card4 = new java.util.ArrayList<cs362.dominion.Cards.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<cs362.dominion.Cards.Card>)arraylist_card4, card_array3);
    cs362.dominion.Resources.Deck deck6 = null;
    cs362.dominion.Resources.Hand hand7 = new cs362.dominion.Resources.Hand(arraylist_card4, deck6);
    cs362.dominion.Cards.Embargo embargo8 = new cs362.dominion.Cards.Embargo();
    java.lang.String str9 = embargo8.getName();
    int i10 = embargo8.getCost();
    hand7.addCard((cs362.dominion.Cards.Card)embargo8);
    int i12 = hand7.getCoins();
    java.util.ArrayList<cs362.dominion.Cards.Card> arraylist_card13 = hand7.removeAllCards();
    int i14 = hand7.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Embargo"+ "'", str1.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Embargo"+ "'", str9.equals("Embargo"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);

  }

  @Test
  public void test493() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test493"); }

    cs362.dominion.Cards.Silver silver0 = new cs362.dominion.Cards.Silver();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = silver0.getType();
    int i2 = silver0.getCost();
    int i3 = silver0.getCost();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.TREASURE + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 3);

  }

  @Test
  public void test494() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test494"); }

    cs362.dominion.Cards.Province province0 = new cs362.dominion.Cards.Province();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = province0.getType();
    int i2 = province0.getCost();
    java.lang.String str3 = province0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = province0.getType();
    java.lang.String str5 = province0.getDefinition();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Victory card, worth 6 victory points"+ "'", str3.equals("Victory card, worth 6 victory points"));
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.VICTORY + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Victory card, worth 6 victory points"+ "'", str5.equals("Victory card, worth 6 victory points"));

  }

  @Test
  public void test495() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test495"); }

    cs362.dominion.Cards.Village village0 = new cs362.dominion.Cards.Village();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance1 = village0.getType();
    java.lang.String str2 = village0.getDefinition();
    int i4 = village0.getInitialSupply((int)(byte)1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance5 = village0.getType();
    int i6 = village0.getActions();
    int i7 = village0.getActions();
    int i9 = village0.getInitialSupply(7);
    int i11 = village0.getInitialSupply((int)'#');
    int i12 = village0.getActions();
    int i13 = village0.getBuys();
    org.junit.Assert.assertTrue("'" + cardTypes_instance1 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance1.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "+1 Card; +2 Actions."+ "'", str2.equals("+1 Card; +2 Actions."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance5 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance5.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);

  }

  @Test
  public void test496() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test496"); }

    cs362.dominion.Cards.Gold gold0 = new cs362.dominion.Cards.Gold();
    java.lang.String str1 = gold0.getDefinition();
    int i3 = gold0.getInitialSupply((int)'#');
    int i4 = gold0.getCost();
    int i5 = gold0.getActions();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "A gold resource, worth $3"+ "'", str1.equals("A gold resource, worth $3"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);

  }

  @Test
  public void test497() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test497"); }

    cs362.dominion.Cards.Cutpurse cutpurse0 = new cs362.dominion.Cards.Cutpurse();
    java.lang.String str1 = cutpurse0.getDefinition();
    java.lang.String str2 = cutpurse0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance3 = cutpurse0.getType();
    int i5 = cutpurse0.getInitialSupply(10);
    int i6 = cutpurse0.getCoins();
    java.lang.String str7 = cutpurse0.getDefinition();
    java.lang.String str8 = cutpurse0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str1.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str2.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance3 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance3.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str7.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."+ "'", str8.equals("+$2. Each other player discards a Copper card (or reveals a hand with no Copper)."));

  }

  @Test
  public void test498() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test498"); }

    cs362.dominion.Cards.Bazaar bazaar0 = new cs362.dominion.Cards.Bazaar();
    int i1 = bazaar0.getCards();
    int i2 = bazaar0.getCoins();
    int i4 = bazaar0.getInitialSupply(7);
    int i6 = bazaar0.getInitialSupply(60);
    int i7 = bazaar0.getCoins();
    int i8 = bazaar0.getCoins();
    int i9 = bazaar0.getActions();
    java.lang.String str10 = bazaar0.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "+1 Card; +2 Actions, +$1."+ "'", str10.equals("+1 Card; +2 Actions, +$1."));

  }

  @Test
  public void test499() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test499"); }

    cs362.dominion.Cards.Gardens gardens0 = new cs362.dominion.Cards.Gardens();
    int i1 = gardens0.getCost();
    int i3 = gardens0.getInitialSupply((int)(byte)0);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance4 = gardens0.getType();
    java.lang.String str5 = gardens0.getDefinition();
    int i7 = gardens0.getInitialSupply((int)(short)-1);
    int i8 = gardens0.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance4 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance4.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Worth 1 Victory for every 10 cards in your deck (rounded down)."+ "'", str5.equals("Worth 1 Victory for every 10 cards in your deck (rounded down)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);

  }

  @Test
  public void test500() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest6.test500"); }

    cs362.dominion.Cards.Gardens gardens0 = new cs362.dominion.Cards.Gardens();
    java.lang.String str1 = gardens0.getName();
    java.lang.String str2 = gardens0.getName();
    int i3 = gardens0.getCost();
    int i4 = gardens0.getCoins();
    int i6 = gardens0.getInitialSupply((int)(short)1);
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance7 = gardens0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance8 = gardens0.getType();
    java.lang.String str9 = gardens0.getDefinition();
    int i11 = gardens0.getInitialSupply((int)(byte)1);
    java.lang.String str12 = gardens0.getDefinition();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance13 = gardens0.getType();
    cs362.dominion.Cards.Card.cardTypes cardTypes_instance14 = gardens0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Gardens"+ "'", str1.equals("Gardens"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Gardens"+ "'", str2.equals("Gardens"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 10);
    org.junit.Assert.assertTrue("'" + cardTypes_instance7 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance7.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance8 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance8.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Worth 1 Victory for every 10 cards in your deck (rounded down)."+ "'", str9.equals("Worth 1 Victory for every 10 cards in your deck (rounded down)."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Worth 1 Victory for every 10 cards in your deck (rounded down)."+ "'", str12.equals("Worth 1 Victory for every 10 cards in your deck (rounded down)."));
    org.junit.Assert.assertTrue("'" + cardTypes_instance13 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance13.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));
    org.junit.Assert.assertTrue("'" + cardTypes_instance14 + "' != '" + cs362.dominion.Cards.Card.cardTypes.KINGDOM + "'", cardTypes_instance14.equals(cs362.dominion.Cards.Card.cardTypes.KINGDOM));

  }

}
