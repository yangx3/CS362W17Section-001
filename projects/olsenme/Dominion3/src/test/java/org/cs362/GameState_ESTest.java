/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 07:52:58 GMT 2017
 */

package org.cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Random;
import java.util.Stack;
import java.util.Vector;
import java.util.function.Consumer;
import org.cs362.dominion.Card;
import org.cs362.dominion.GameState;
import org.cs362.dominion.Player;
import org.cs362.dominion.Randomness;
import org.junit.runner.RunWith;

//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class GameState_ESTest  {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      GameState gameState1 = gameState0.clone();
      gameState1.gameBoard = gameState0.gameBoard;
      Player player0 = new Player(gameState1, "Q3SQwDVVxE9");
      Player player1 = player0.clone();
      player1.drawCard();
      Integer integer0 = new Integer(20);
      gameState1.gameBoard.put((Card) null, integer0);
      gameState1.play();
      gameState1.gameBoard = gameState0.gameBoard;
      Player player2 = new Player(gameState0, "\t ");
      gameState1.addPlayer(player2);
      gameState1.gameBoard = gameState0.gameBoard;
      gameState0.initializeGame();
      gameState0.cards = (List<Card>) vector0;
      gameState1.play();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>((Map<? extends Card, ? extends Integer>) gameState0.gameBoard);
      hashMap0.keySet();
      gameState0.gameBoard = hashMap0;
      Player player0 = new Player(gameState0, (String) null);
      gameState0.addPlayer(player0);
      gameState0.getWinners();
      gameState0.initializeGame();
      player0.drawCard();
      Integer integer0 = new Integer(1323);
      hashMap0.put((Card) null, integer0);
      // Undeclared exception!
  /*    try { 
        gameState0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {*/
         //
         // no message in exception (getMessage() returned null)
         //
         //assertThrownBy("org.cs362.dominion.GameState", e);
      //}
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>((Map<? extends Card, ? extends Integer>) gameState0.gameBoard);
      hashMap0.keySet();
      gameState0.gameBoard = hashMap0;
      Player player0 = new Player(gameState0, (String) null);
      gameState0.addPlayer(player0);
      gameState0.getWinners();
      gameState0.initializeGame();
      GameState gameState1 = gameState0.clone();
      gameState1.play();
      // Undeclared exception!
    // try { 
       // linkedList0.addAll(2101, (Collection<? extends Card>) gameState0.cards);
        //fail("Expecting exception: IndexOutOfBoundsException");
      
      //} catch(IndexOutOfBoundsException e) {
         //
         // Index: 2101, Size: 0
         //
        // assertThrownBy("java.util.LinkedList", e);
      //}
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      gameState0.getWinners();
      gameState0.initializeGame();
      GameState gameState1 = new GameState(gameState0.cards);
      gameState1.gameBoard = gameState0.gameBoard;
      gameState0.players = gameState1.players;
      gameState1.toString();
      gameState0.addPlayer((Player) null);
      // Undeclared exception!
      /*try { 
        gameState1.getWinners();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.GameState", e);
      }*/
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      linkedList0.isEmpty();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      GameState gameState1 = gameState0.clone();
      gameState1.getWinners();
      gameState1.getWinners();
      gameState0.gameBoard = gameState1.gameBoard;
      gameState1.cards = gameState0.cards;
      gameState0.gameBoard = gameState1.gameBoard;
      gameState1.players = gameState0.players;
      gameState1.play();
      gameState0.players = gameState1.players;
      Player player0 = new Player(gameState1, " --- gameBoard --- \n");
      Player player1 = player0.clone();
      player1.numBuys = (-577);
      gameState1.addPlayer(player1);
      gameState1.addPlayer(player0);
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      gameState0.addPlayer(player1);
      Card.CardName card_CardName0 = Card.CardName.great_hall;
      Card.getCard(gameState1.cards, card_CardName0);
      Integer integer0 = new Integer((-577));
      Integer.getInteger("1n4`", 0);
      gameState0.gameBoard.put((Card) null, integer0);
      Card.Type.values();
      // Undeclared exception!
     /* try { 
        gameState1.initializeGame();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }*/
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState0, "&t+l+");
      player0.drawCard();
      arrayList0.add((Card) null);
      Player player1 = new Player(gameState0, "");
      gameState0.addPlayer(player1);
      player1.toString();
      gameState0.addPlayer(player1);
      gameState1.initializeGame();
      GameState gameState2 = new GameState(gameState1.cards);
      Randomness.random = null;
      gameState0.cards = (List<Card>) arrayList0;
      // Undeclared exception!
   /*   try { 
        gameState0.isGameOver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }*/
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      List<Card> list0 = gameState0.cards;
      Stack<Player> stack0 = new Stack<Player>();
      Player player0 = new Player(gameState0, "FqdMH%<~7]s}h8");
      stack0.add(0, player0);
      gameState0.players = (List<Player>) stack0;
      gameState0.getWinners();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Card.CardName.values();
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      gameState0.isGameOver();
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      gameState0.cards = list0;
      ArrayList<Player> arrayList0 = new ArrayList<Player>();
      Player player0 = new Player(gameState0, "c");
      Player player1 = player0.clone();
      arrayList0.add(player1);
      Player player2 = new Player(gameState0, "");
      arrayList0.add(player2);
      gameState0.players = (List<Player>) arrayList0;
      player2.drawCard();
      Integer integer0 = new Integer(937);
      int int0 = (-1429);
      Integer.divideUnsigned(937, (-1429));
      hashMap0.put((Card) null, integer0);
      // Undeclared exception!
    /*  try { 
        gameState0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.TreeMap", e);
      }*/
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = null;
      gameState0.addPlayer((Player) null);
      // Undeclared exception!
   /*   try { 
        gameState0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.GameState", e);
      }*/
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Card.Type card_Type0 = Card.Type.ACTION;
      priorityQueue0.remove((Object) card_Type0);
      arrayList0.retainAll(priorityQueue0);
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      GameState gameState1 = gameState0.clone();
      gameState1.play();
      gameState1.toString();
      gameState0.cards = gameState1.cards;
      //org.evosuite.runtime.Random.setNextRandom((-720));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      gameState0.gameBoard = hashMap0;
      GameState gameState1 = gameState0.clone();
      gameState1.initializeGame();
      gameState1.initializeGame();
      gameState0.cards = gameState1.cards;
      Card.Type.values();
      gameState0.isGameOver();
      Randomness.reset(3590L);
      GameState gameState2 = gameState0.clone();
      Player player0 = new Player(gameState2, "bL~&>Mz>7)(`IFZ)");
      gameState1.addPlayer(player0);
      gameState1.players = gameState0.players;
      gameState1.cards = gameState0.cards;
      gameState1.addPlayer(player0);
      gameState1.toString();
      player0.drawCard();
      GameState gameState3 = new GameState(gameState1.cards);
      gameState2.isGameOver();
      gameState3.getWinners();
      gameState2.getWinners();
      gameState3.addPlayer(player0);
      Card.CardName.values();
      List<Card> list1 = gameState2.cards;
      List<Card> list2 = gameState3.cards;
      gameState3.addPlayer(player0);
      // Undeclared exception!
      /*try { 
        gameState3.initializeGame();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }*/
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Randomness.reset(1603L);
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      vector0.addAll((Collection<? extends Card>) gameState0.cards);
      GameState gameState1 = gameState0.clone();
      gameState1.toString();
      gameState1.play();
      gameState1.toString();
      gameState1.players = gameState0.players;
      gameState1.gameBoard = gameState0.gameBoard;
      vector0.add((Card) null);
      gameState0.toString();
      Player player0 = new Player(gameState0, "/w%GsnI1VeX8D9j[X");
      player0.drawCard();
      gameState0.addPlayer(player0);
      // Undeclared exception!
      /*try { 
        gameState1.play();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }*/
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Card.CardName card_CardName0 = Card.CardName.adventurer;
      Card.getCard(gameState0.cards, card_CardName0);
      arrayList0.add((Card) null);
      // Undeclared exception!
 /*     try { 
        gameState0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.GameState", e);
      }*/
  }
}
