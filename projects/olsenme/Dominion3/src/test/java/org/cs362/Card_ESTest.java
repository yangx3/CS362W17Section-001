/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 07:50:45 GMT 2017
 */

package org.cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.cs362.dominion.Card;
import org.cs362.dominion.GameState;
import org.cs362.dominion.Player;


//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class Card_ESTest  {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.salvager;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 9, (-68), 16);
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      arrayList0.add(card0);
      Player player0 = new Player(gameState0, " discards ");
      Player player1 = player0.clone();
      player1.hand = (List<Card>) arrayList0;
      card0.play(player1, gameState0);
      assertEquals(9, card0.getCost());
      assertEquals(-68, card0.getScore());
      assertEquals(16, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.smithy;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, (-4129), (-4129), (-4129));
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "7");
      card0.play(player0, gameState0);
      assertEquals(-4129, card0.getScore());
      assertEquals(-4129, card0.getCost());
      assertEquals(-4129, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Estate;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 2129, 2129, 2129);
      card0.getType();
      assertEquals(2129, card0.getTreasureValue());
      assertEquals(2129, card0.getCost());
      assertEquals(2129, card0.getScore());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.feast;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 0);
      int int0 = card0.getTreasureValue();
      assertEquals(0, int0);
      assertEquals(0, card0.getScore());
      assertEquals(0, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.great_hall;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, (-803), 37, (-803));
      int int0 = card0.getTreasureValue();
      assertEquals((-803), int0);
      assertEquals(-803, card0.getCost());
      assertEquals(37, card0.getScore());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Gold;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 0);
      int int0 = card0.getScore();
      assertEquals(0, card0.getCost());
      assertEquals(0, card0.getTreasureValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.great_hall;
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.feast;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 0);
      int int0 = card0.getCost();
      assertEquals(0, int0);
      assertEquals(0, card0.getScore());
      assertEquals(0, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.salvager;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, (-4129), (-4129), (-4129));
      int int0 = card0.getCost();
      assertEquals(-4129, card0.getTreasureValue());
      assertEquals(-4129, card0.getScore());
      assertEquals((-4129), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Gold;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 9, (-68), 16);
      card0.getCardName();
      assertEquals(-68, card0.getScore());
      assertEquals(16, card0.getTreasureValue());
      assertEquals(9, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Curse;
      Card card0 = Card.getCard(list0, card_CardName0);
      //assertNull(card0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.great_hall;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, (-803), 37, (-803));
      Vector<Card> vector0 = new Vector<Card>();
      vector0.add(card0);
      Card.getCard(vector0, card_CardName0);
      assertEquals("[ \tgreat_hall-ACTION \t\t Cost: -803 \t\t Score: 37 \tTreasure Value: -803]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.baron;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 90, 90, 1408);
      Card.CardName card_CardName1 = Card.CardName.adventurer;
      Card card1 = new Card(card_CardName1, card_Type0, 1408, 1408, 90);
      int int0 = card0.compareTo(card1);
      assertEquals(1408, card1.getScore());
      assertEquals(2, int0);
      assertEquals(90, card1.getTreasureValue());
      assertEquals(1408, card1.getCost());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Silver;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 2352, 2352, 2352);
      Card.CardName card_CardName1 = Card.CardName.feast;
      Card card1 = new Card(card_CardName1, card_Type0, 2352, 2352, 2352);
      int int0 = card0.compareTo(card1);
      assertEquals(2352, card1.getTreasureValue());
      assertEquals(2352, card1.getCost());
      assertEquals(2352, card1.getScore());
      assertEquals((-12), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.baron;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 90, 90, 1408);
      Card card1 = (Card)card0.clone();
      assertEquals(90, card1.getScore());
      assertEquals(1408, card1.getTreasureValue());
      assertEquals(90, card1.getCost());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      Card.CardName card_CardName0 = Card.CardName.Curse;
      stack0.add((Card) null);
      // Undeclared exception!
      try { 
        Card.getCard(stack0, card_CardName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
 //        assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Card.Type card_Type0 = Card.Type.ACTION;
      // Undeclared exception!
      try { 
        Card.filter((Iterable<Card>) null, card_Type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.adventurer;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 1107, 0);
      // Undeclared exception!
      try { 
        card0.compareTo((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Gold;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 9, (-68), 16);
      card0.getType();
      assertEquals(9, card0.getCost());
      assertEquals(-68, card0.getScore());
      assertEquals(16, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.council_room;
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.cutpurse;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 152, 2356, 1853);
      boolean boolean0 = card0.equals(card0);
      assertEquals(2356, card0.getScore());
      assertEquals(1853, card0.getTreasureValue());
      assertTrue(boolean0);
      assertEquals(152, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.council_room;
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashSet<Card> hashSet0 = new HashSet<Card>(1910);
      Card.CardName card_CardName0 = Card.CardName.adventurer;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, 6, 6, 18);
      hashSet0.add(card0);
      assertEquals(18, card0.getTreasureValue());
      assertEquals(6, card0.getScore());
      assertEquals(6, card0.getCost());
      
      Card.Type card_Type1 = Card.Type.ACTION;
      List<Card> list0 = Card.filter(hashSet0, card_Type1);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.baron;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 90, 90, 1408);
      Stack<Card> stack0 = new Stack<Card>();
      stack0.add(card0);
      Card.filter(stack0, card_Type0);
      assertEquals("[ \tbaron-ACTION \t\t Cost: 90 \t\t Score: 90 \tTreasure Value: 1408]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      Card.CardName card_CardName0 = Card.CardName.Gold;
      Card card0 = Card.getCard(arrayList0, card_CardName0);
      assertNull(card0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.council_room;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "org.apache.oro.io.GlobFilenameFilter");
      gameState0.addPlayer(player0);
      player0.clone();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.council_room;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "org.apache.oro.io.GlobFilenameFilter");
      gameState0.addPlayer(player0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.ambassador;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "I+iK");
      player0.drawCard();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Gold;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 9, (-68), 16);
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Player player0 = new Player(gameState0, " discards ");
      card0.play(player0, gameState0);
      assertEquals(-68, card0.getScore());
      assertEquals(16, card0.getTreasureValue());
      assertEquals(9, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.salvager;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 9, (-68), 16);
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Player player0 = new Player(gameState0, " discards ");
      // Undeclared exception!
      try { 
        card0.play(player0, gameState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         //assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card.CardName card_CardName0 = Card.CardName.village;
      Card card0 = new Card(card_CardName0, card_Type0, 15, (-167), 32);
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, "");
      card0.play(player0, gameState0);
      assertEquals(15, card0.getCost());
      assertEquals(-167, card0.getScore());
      assertEquals(32, card0.getTreasureValue());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.gardens;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, (-903), 0, (-521));
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "d");
      card0.play(player0, gameState0);
      assertEquals(0, card0.getScore());
      assertEquals(-521, card0.getTreasureValue());
      assertEquals(-903, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.mine;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, (-3990), (-3990), 19);
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "ACTION");
      // Undeclared exception!
      try { 
        card0.play(player0, gameState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         //assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.great_hall;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, (-803), 37, (-803));
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, (String) null);
      card0.play(player0, gameState0);
      assertEquals(-803, card0.getCost());
      assertEquals(-803, card0.getTreasureValue());
      assertEquals(37, card0.getScore());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.feast;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, " \tfeast-ACTION \t\t Cost: 4 \t\t Score: 0 \tTreasure Value: 0");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.embargo;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 80, (-1576), 12);
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Player player0 = new Player(gameState0, "Yj=`:B-C[JRb];e");
      card0.play(player0, gameState0);
      assertEquals(-1576, card0.getScore());
      assertEquals(12, card0.getTreasureValue());
      assertEquals(80, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.cutpurse;
      Card.getCard(list0, card_CardName0);
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "\t");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.baron;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 90, 90, 1408);
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, " \tbaron-ACTION \t\t Cost: 90 \t\t Score: 90 \tTreasure Value: 1408");
      // Undeclared exception!
      try { 
        card0.play(player0, gameState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Card.CardName card_CardName0 = Card.CardName.adventurer;
      Card.getCard(list0, card_CardName0);
      Player player0 = new Player(gameState0, "d");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Gold;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 0, (-1083), (-1083));
      int int0 = card0.getScore();
      assertEquals((-1083), int0);
      assertEquals(-1083, card0.getTreasureValue());
      assertEquals(0, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.baron;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 90, 90, 1408);
      int int0 = card0.getTreasureValue();
      assertEquals(90, card0.getCost());
      assertEquals(1408, int0);
      assertEquals(90, card0.getScore());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.baron;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 90, 90, 1408);
      card0.compareTo(card0);
      assertEquals(90, card0.getScore());
      assertEquals(1408, card0.getTreasureValue());
      assertEquals(90, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.adventurer;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card card0 = new Card(card_CardName0, card_Type0, 90, 90, 90);
      int int0 = card0.getCost();
      assertEquals(90, card0.getScore());
      assertEquals(90, int0);
      assertEquals(90, card0.getTreasureValue());
  }
}
