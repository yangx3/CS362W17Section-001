
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test001"); }

    org.cs362.dominion.Card.CardName cardName0 = org.cs362.dominion.Card.CardName.Cutpurse;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + org.cs362.dominion.Card.CardName.Cutpurse + "'", cardName0.equals(org.cs362.dominion.Card.CardName.Cutpurse));

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test002"); }

    java.lang.Iterable<org.cs362.dominion.Card> iterable_card0 = null;
    org.cs362.dominion.Card.Type type1 = org.cs362.dominion.Card.Type.ACTION;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<org.cs362.dominion.Card> list_card2 = org.cs362.dominion.Card.filter(iterable_card0, type1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + type1 + "' != '" + org.cs362.dominion.Card.Type.ACTION + "'", type1.equals(org.cs362.dominion.Card.Type.ACTION));

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test003"); }

    org.cs362.dominion.Card.CardName cardName0 = org.cs362.dominion.Card.CardName.Feast;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + org.cs362.dominion.Card.CardName.Feast + "'", cardName0.equals(org.cs362.dominion.Card.CardName.Feast));

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test004"); }

    org.cs362.dominion.Card.CardName cardName0 = org.cs362.dominion.Card.CardName.Smithy;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + org.cs362.dominion.Card.CardName.Smithy + "'", cardName0.equals(org.cs362.dominion.Card.CardName.Smithy));

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test005"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.Card.CardName cardName1 = org.cs362.dominion.Card.CardName.Embargo;
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.Card card2 = org.cs362.dominion.Card.getCard(list_card0, cardName1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + cardName1 + "' != '" + org.cs362.dominion.Card.CardName.Embargo + "'", cardName1.equals(org.cs362.dominion.Card.CardName.Embargo));

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test006"); }

    org.cs362.dominion.Card.CardName cardName0 = org.cs362.dominion.Card.CardName.Village;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + org.cs362.dominion.Card.CardName.Village + "'", cardName0.equals(org.cs362.dominion.Card.CardName.Village));

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test007"); }

    org.cs362.dominion.Card.CardName cardName0 = org.cs362.dominion.Card.CardName.Baron;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + org.cs362.dominion.Card.CardName.Baron + "'", cardName0.equals(org.cs362.dominion.Card.CardName.Baron));

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test008"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i2 = gameState1.play();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test009"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.GameState gameState3 = gameState1.clone();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test010"); }

    org.cs362.dominion.Card.CardName cardName0 = org.cs362.dominion.Card.CardName.Gardens;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + org.cs362.dominion.Card.CardName.Gardens + "'", cardName0.equals(org.cs362.dominion.Card.CardName.Gardens));

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test011"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i3 = null;
    gameState1.gameBoard = hashmap_card_i3;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i5 = gameState1.gameBoard;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str6 = gameState1.toString();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(hashmap_card_i5);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test012"); }

    org.cs362.dominion.Card.CardName cardName0 = org.cs362.dominion.Card.CardName.Duchy;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + org.cs362.dominion.Card.CardName.Duchy + "'", cardName0.equals(org.cs362.dominion.Card.CardName.Duchy));

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test013"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.GameState gameState2 = gameState1.clone();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test014"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i3 = null;
    gameState1.gameBoard = hashmap_card_i3;
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.GameState gameState5 = gameState1.clone();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test015"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState1, "hi!");
    org.cs362.dominion.Card card7 = null;
    player6.discard(card7);
    player6.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test016"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState1, "hi!");
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.GameState gameState7 = gameState1.clone();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test017"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.Card.CardName cardName1 = org.cs362.dominion.Card.CardName.Silver;
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.Card card2 = org.cs362.dominion.Card.getCard(list_card0, cardName1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + cardName1 + "' != '" + org.cs362.dominion.Card.CardName.Silver + "'", cardName1.equals(org.cs362.dominion.Card.CardName.Silver));

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test018"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i3 = null;
    gameState1.gameBoard = hashmap_card_i3;
    // The following exception was thrown during execution in test generation
    try {
    boolean b5 = gameState1.isGameOver();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test019"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    org.cs362.dominion.Player player5 = new org.cs362.dominion.Player(gameState1, "");
    player5.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test020"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i3 = null;
    gameState1.gameBoard = hashmap_card_i3;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i5 = gameState1.gameBoard;
    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i6 = gameState1.play();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(hashmap_card_i5);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test021"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i5 = gameState1.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i5);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test022"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState1, "hi!");
    org.cs362.dominion.Card card7 = null;
    player6.discard(card7);
    java.lang.String str9 = player6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str9.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test023"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i6 = gameState1.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i6);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test024"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card.Type type10 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card11 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card6, type10);
    gameState1.cards = arraylist_card6;
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Silver;
    org.cs362.dominion.Card card14 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type10.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Silver + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test025"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.GameState gameState5 = gameState1.clone();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test026"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i6 = null;
    gameState1.gameBoard = hashmap_card_i6;
    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState1.play();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test027"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card8, type12);
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card6, type12);
    org.cs362.dominion.Card.Type type15 = null;
    java.util.List<org.cs362.dominion.Card> list_card16 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card6, type15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type12.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test028"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card.Type type10 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card11 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card6, type10);
    gameState1.cards = arraylist_card6;
    boolean b13 = gameState1.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type10.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test029"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i6 = null;
    gameState1.gameBoard = hashmap_card_i6;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState1.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test030"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = null;
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState(list_card3);
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState4.cards;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState4.cards;
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState4.players;
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState4, "hi!");
    gameState1.addPlayer(player9);
    org.cs362.dominion.Card card11 = null;
    player9.discard(card11);
    player9.printStateGame();
    java.lang.String str14 = player9.toString();
    org.cs362.dominion.Card card15 = null;
    player9.discard(card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str14.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test031"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    org.cs362.dominion.Player player5 = new org.cs362.dominion.Player(gameState1, "");
    java.util.List<org.cs362.dominion.Card> list_card6 = null;
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    java.util.List<org.cs362.dominion.Card> list_card8 = gameState7.cards;
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState7.cards;
    java.util.List<org.cs362.dominion.Player> list_player10 = gameState7.players;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState7.players;
    java.util.List<org.cs362.dominion.Card> list_card12 = null;
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState(list_card12);
    java.util.List<org.cs362.dominion.Card> list_card14 = gameState13.cards;
    java.util.List<org.cs362.dominion.Card> list_card15 = gameState13.cards;
    java.util.List<org.cs362.dominion.Player> list_player16 = gameState13.players;
    java.util.List<org.cs362.dominion.Player> list_player17 = gameState13.players;
    java.util.List<org.cs362.dominion.Card> list_card18 = null;
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState(list_card18);
    java.util.List<org.cs362.dominion.Card> list_card20 = gameState19.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState19.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card22 = null;
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState(list_card22);
    java.util.List<org.cs362.dominion.Card> list_card24 = gameState23.cards;
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState23.cards;
    java.util.List<org.cs362.dominion.Player> list_player26 = gameState23.players;
    java.util.List<org.cs362.dominion.Player> list_player27 = gameState23.players;
    gameState19.players = list_player27;
    gameState13.players = list_player27;
    gameState7.players = list_player27;
    gameState1.players = list_player27;
    // The following exception was thrown during execution in test generation
    try {
    boolean b32 = gameState1.isGameOver();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player27);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test032"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.lang.String str5 = gameState1.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i6 = gameState1.getWinners();
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card.CardName cardName12 = org.cs362.dominion.Card.CardName.Curse;
    org.cs362.dominion.Card card13 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName12);
    gameState1.cards = arraylist_card8;
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card8);
    java.util.List<org.cs362.dominion.Card> list_card16 = null;
    org.cs362.dominion.GameState gameState17 = new org.cs362.dominion.GameState(list_card16);
    java.util.List<org.cs362.dominion.Card> list_card18 = gameState17.cards;
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState17.cards;
    java.util.List<org.cs362.dominion.Player> list_player20 = gameState17.players;
    java.util.List<org.cs362.dominion.Player> list_player21 = gameState17.players;
    java.util.List<org.cs362.dominion.Card> list_card22 = null;
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState(list_card22);
    java.util.List<org.cs362.dominion.Card> list_card24 = gameState23.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i25 = gameState23.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card26 = null;
    org.cs362.dominion.GameState gameState27 = new org.cs362.dominion.GameState(list_card26);
    java.util.List<org.cs362.dominion.Card> list_card28 = gameState27.cards;
    java.util.List<org.cs362.dominion.Card> list_card29 = gameState27.cards;
    java.util.List<org.cs362.dominion.Player> list_player30 = gameState27.players;
    java.util.List<org.cs362.dominion.Player> list_player31 = gameState27.players;
    gameState23.players = list_player31;
    gameState17.players = list_player31;
    gameState15.players = list_player31;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + org.cs362.dominion.Card.CardName.Curse + "'", cardName12.equals(org.cs362.dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test033"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i5 = gameState1.play();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test034"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    gameState1.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test035"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = null;
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState(list_card3);
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState4.cards;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState4.cards;
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState4.players;
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState4, "hi!");
    gameState1.addPlayer(player9);
    gameState1.initializeGame();
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.GameState gameState12 = gameState1.clone();
      org.junit.Assert.fail("Expected exception of type java.lang.CloneNotSupportedException");
    } catch (java.lang.CloneNotSupportedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test036"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i5 = gameState1.play();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test037"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    boolean b8 = gameState7.isGameOver();
    java.lang.String str9 = gameState7.toString();
    java.util.List<org.cs362.dominion.Card> list_card10 = null;
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState(list_card10);
    java.util.List<org.cs362.dominion.Card> list_card12 = gameState11.cards;
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState11.cards;
    java.util.List<org.cs362.dominion.Player> list_player14 = gameState11.players;
    org.cs362.dominion.Player player16 = new org.cs362.dominion.Player(gameState11, "hi!");
    player16.buyCard();
    player16.buyCard();
    player16.printStateGame();
    gameState7.addPlayer(player16);
    java.util.List<org.cs362.dominion.Player> list_player21 = gameState7.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str9.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test038"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card.Type type10 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card11 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card6, type10);
    gameState1.cards = arraylist_card6;
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player14 = gameState1.players;
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card16, cardName18);
    org.cs362.dominion.Card.Type type20 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card21 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card16, type20);
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    org.cs362.dominion.Card.CardName cardName25 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card26 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card23, cardName25);
    org.cs362.dominion.Card.Type type27 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card28 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card23, type27);
    java.util.List<org.cs362.dominion.Card> list_card29 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card16, type27);
    org.cs362.dominion.GameState gameState30 = new org.cs362.dominion.GameState(list_card29);
    java.util.List<org.cs362.dominion.Player> list_player31 = gameState30.players;
    gameState1.players = list_player31;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type10.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type20.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName25.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type27.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test039"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = null;
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState(list_card3);
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState4.cards;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState4.cards;
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState4.players;
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState4, "hi!");
    gameState1.addPlayer(player9);
    org.cs362.dominion.Card card11 = null;
    player9.discard(card11);
    player9.printStateGame();
    org.cs362.dominion.Card card14 = null;
    player9.discard(card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test040"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    org.cs362.dominion.Player player5 = new org.cs362.dominion.Player(gameState1, "");
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.GameState gameState6 = gameState1.clone();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test041"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    org.cs362.dominion.Player player11 = new org.cs362.dominion.Player(gameState7, "hi!");
    player11.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test042"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    gameState1.initializeGame();
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState1.players;
    // The following exception was thrown during execution in test generation
    try {
    boolean b8 = gameState1.isGameOver();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test043"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i5 = gameState1.gameBoard;
    // The following exception was thrown during execution in test generation
    try {
    boolean b6 = gameState1.isGameOver();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i5);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test044"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i3 = null;
    gameState1.gameBoard = hashmap_card_i3;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i5 = gameState1.getWinners();
    gameState1.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i5);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test045"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    org.cs362.dominion.Player player5 = new org.cs362.dominion.Player(gameState1, "");
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState1.cards;
    gameState1.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test046"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = null;
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState(list_card3);
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState4.cards;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState4.cards;
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState4.players;
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState4, "hi!");
    gameState1.addPlayer(player9);
    gameState1.initializeGame();
    java.util.List<org.cs362.dominion.Card> list_card12 = gameState1.cards;
    // The following exception was thrown during execution in test generation
    try {
    boolean b13 = gameState1.isGameOver();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card12);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test047"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.lang.String str5 = gameState1.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i6 = gameState1.getWinners();
    gameState1.initializeGame();
    java.util.List<org.cs362.dominion.Player> list_player8 = gameState1.players;
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.GameState gameState9 = gameState1.clone();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player8);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test048"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.Card.Type type7 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card8 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type7);
    org.cs362.dominion.Card.CardName cardName9 = null;
    org.cs362.dominion.Card card10 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName9);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Minion;
    org.cs362.dominion.Card card12 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName11);
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type7.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Minion + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Minion));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test049"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    gameState7.players = list_player12;
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.lang.String str18 = player17.toString();
    java.lang.String str19 = player17.toString();
    player17.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + " ---  --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str18.equals(" ---  --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + " ---  --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str19.equals(" ---  --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test050"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.Card.CardName cardName9 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card10 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName9);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card12 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName11);
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card7);
    boolean b14 = gameState13.isGameOver();
    org.cs362.dominion.Player player16 = new org.cs362.dominion.Player(gameState13, "");
    java.util.List<org.cs362.dominion.Card> list_card17 = null;
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState(list_card17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState18.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState18.getWinners();
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState18, "");
    java.util.List<org.cs362.dominion.Card> list_card23 = null;
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState(list_card23);
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState24.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i26 = gameState24.getWinners();
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState24, "");
    java.util.List<org.cs362.dominion.Card> list_card29 = null;
    org.cs362.dominion.GameState gameState30 = new org.cs362.dominion.GameState(list_card29);
    java.util.List<org.cs362.dominion.Card> list_card31 = gameState30.cards;
    java.util.List<org.cs362.dominion.Card> list_card32 = null;
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState(list_card32);
    java.util.List<org.cs362.dominion.Card> list_card34 = gameState33.cards;
    java.util.List<org.cs362.dominion.Card> list_card35 = gameState33.cards;
    java.util.List<org.cs362.dominion.Player> list_player36 = gameState33.players;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState33, "hi!");
    gameState30.addPlayer(player38);
    org.cs362.dominion.Card card40 = null;
    player38.discard(card40);
    player38.printStateGame();
    org.cs362.dominion.Player[] player_array43 = new org.cs362.dominion.Player[] { player16, player22, player28, player38 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player44 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player44, player_array43);
    gameState5.players = arraylist_player44;
    java.lang.String str47 = gameState5.toString();
    // The following exception was thrown during execution in test generation
    try {
    gameState5.initializeGame();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName9.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str47.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test051"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState1.cards;
    org.cs362.dominion.Player player7 = null;
    gameState1.addPlayer(player7);
    org.cs362.dominion.Player player10 = new org.cs362.dominion.Player(gameState1, " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    player10.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test052"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.lang.String str9 = gameState7.toString();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    boolean b11 = gameState7.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str9.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test053"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Player> list_player8 = gameState7.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player8);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test054"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    boolean b8 = gameState7.isGameOver();
    org.cs362.dominion.Player player10 = new org.cs362.dominion.Player(gameState7, "");
    gameState7.initializeGame();
    java.util.List<org.cs362.dominion.Card> list_card12 = null;
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState(list_card12);
    java.util.List<org.cs362.dominion.Card> list_card14 = gameState13.cards;
    java.util.List<org.cs362.dominion.Card> list_card15 = null;
    org.cs362.dominion.GameState gameState16 = new org.cs362.dominion.GameState(list_card15);
    java.util.List<org.cs362.dominion.Card> list_card17 = gameState16.cards;
    java.util.List<org.cs362.dominion.Card> list_card18 = gameState16.cards;
    java.util.List<org.cs362.dominion.Player> list_player19 = gameState16.players;
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState16, "hi!");
    gameState13.addPlayer(player21);
    org.cs362.dominion.Card card23 = null;
    player21.discard(card23);
    gameState7.addPlayer(player21);
    java.lang.String str26 = player21.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str26.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test055"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card.Type type10 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card11 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card6, type10);
    gameState1.cards = arraylist_card6;
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState1.cards;
    org.cs362.dominion.Card[] card_array14 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card15 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card15, card_array14);
    org.cs362.dominion.Card.CardName cardName17 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card18 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card15, cardName17);
    org.cs362.dominion.Card.CardName cardName19 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card20 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card15, cardName19);
    org.cs362.dominion.Card.Type type21 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card22 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card15, type21);
    java.util.List<org.cs362.dominion.Card> list_card23 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card13, type21);
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState(list_card23);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i25 = gameState24.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type10.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName17.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName19.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type21.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i25);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test056"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    org.cs362.dominion.Player player5 = new org.cs362.dominion.Player(gameState1, "");
    java.util.List<org.cs362.dominion.Card> list_card6 = null;
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    java.util.List<org.cs362.dominion.Card> list_card8 = gameState7.cards;
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState7.cards;
    java.util.List<org.cs362.dominion.Player> list_player10 = gameState7.players;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState7.players;
    java.util.List<org.cs362.dominion.Card> list_card12 = null;
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState(list_card12);
    java.util.List<org.cs362.dominion.Card> list_card14 = gameState13.cards;
    java.util.List<org.cs362.dominion.Card> list_card15 = gameState13.cards;
    java.util.List<org.cs362.dominion.Player> list_player16 = gameState13.players;
    java.util.List<org.cs362.dominion.Player> list_player17 = gameState13.players;
    java.util.List<org.cs362.dominion.Card> list_card18 = null;
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState(list_card18);
    java.util.List<org.cs362.dominion.Card> list_card20 = gameState19.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState19.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card22 = null;
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState(list_card22);
    java.util.List<org.cs362.dominion.Card> list_card24 = gameState23.cards;
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState23.cards;
    java.util.List<org.cs362.dominion.Player> list_player26 = gameState23.players;
    java.util.List<org.cs362.dominion.Player> list_player27 = gameState23.players;
    gameState19.players = list_player27;
    gameState13.players = list_player27;
    gameState7.players = list_player27;
    gameState1.players = list_player27;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i32 = gameState1.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card33 = null;
    org.cs362.dominion.GameState gameState34 = new org.cs362.dominion.GameState(list_card33);
    java.util.List<org.cs362.dominion.Card> list_card35 = gameState34.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i36 = gameState34.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player37 = gameState34.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i38 = gameState34.gameBoard;
    gameState1.gameBoard = hashmap_card_i38;
    // The following exception was thrown during execution in test generation
    try {
    boolean b40 = gameState1.isGameOver();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i38);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test057"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    gameState7.players = list_player12;
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    player15.printStateGame();
    player15.buyCard();
    player15.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test058"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card.Type type10 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card11 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card6, type10);
    gameState1.cards = arraylist_card6;
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card14, cardName16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card14, cardName18);
    org.cs362.dominion.GameState gameState20 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card14);
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    org.cs362.dominion.Card.CardName cardName24 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card25 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card22, cardName24);
    org.cs362.dominion.Card.CardName cardName26 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card27 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card22, cardName26);
    org.cs362.dominion.GameState gameState28 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card22);
    org.cs362.dominion.Card.CardName cardName29 = org.cs362.dominion.Card.CardName.Adventurer;
    org.cs362.dominion.Card card30 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card22, cardName29);
    org.cs362.dominion.Card.CardName cardName31 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card32 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card22, cardName31);
    org.cs362.dominion.Card card33 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card14, cardName31);
    org.cs362.dominion.Card card34 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type10.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName24.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName26.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + org.cs362.dominion.Card.CardName.Adventurer + "'", cardName29.equals(org.cs362.dominion.Card.CardName.Adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName31.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test059"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.lang.String str2 = gameState1.toString();
    java.lang.String str3 = gameState1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str2.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str3.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test060"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    boolean b8 = gameState7.isGameOver();
    java.lang.String str9 = gameState7.toString();
    java.util.List<org.cs362.dominion.Card> list_card10 = null;
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState(list_card10);
    java.util.List<org.cs362.dominion.Card> list_card12 = gameState11.cards;
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState11.cards;
    java.util.List<org.cs362.dominion.Player> list_player14 = gameState11.players;
    org.cs362.dominion.Player player16 = new org.cs362.dominion.Player(gameState11, "hi!");
    player16.buyCard();
    player16.buyCard();
    player16.printStateGame();
    gameState7.addPlayer(player16);
    java.lang.String str21 = player16.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str9.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str21.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test061"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.lang.String str5 = gameState1.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i6 = gameState1.play();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test062"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i6 = gameState1.play();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test063"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Curse;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Curse + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test064"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    boolean b8 = gameState7.isGameOver();
    java.lang.String str9 = gameState7.toString();
    java.util.List<org.cs362.dominion.Card> list_card10 = null;
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState(list_card10);
    java.util.List<org.cs362.dominion.Card> list_card12 = gameState11.cards;
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState11.cards;
    java.util.List<org.cs362.dominion.Player> list_player14 = gameState11.players;
    org.cs362.dominion.Player player16 = new org.cs362.dominion.Player(gameState11, "hi!");
    player16.buyCard();
    player16.buyCard();
    player16.printStateGame();
    gameState7.addPlayer(player16);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState7.getWinners();
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.GameState gameState22 = gameState7.clone();
      org.junit.Assert.fail("Expected exception of type java.lang.CloneNotSupportedException");
    } catch (java.lang.CloneNotSupportedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str9.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test065"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState1, "hi!");
    player6.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test066"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.Card.CardName cardName9 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card10 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName9);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card12 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName11);
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card7);
    boolean b14 = gameState13.isGameOver();
    org.cs362.dominion.Player player16 = new org.cs362.dominion.Player(gameState13, "");
    java.util.List<org.cs362.dominion.Card> list_card17 = null;
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState(list_card17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState18.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState18.getWinners();
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState18, "");
    java.util.List<org.cs362.dominion.Card> list_card23 = null;
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState(list_card23);
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState24.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i26 = gameState24.getWinners();
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState24, "");
    java.util.List<org.cs362.dominion.Card> list_card29 = null;
    org.cs362.dominion.GameState gameState30 = new org.cs362.dominion.GameState(list_card29);
    java.util.List<org.cs362.dominion.Card> list_card31 = gameState30.cards;
    java.util.List<org.cs362.dominion.Card> list_card32 = null;
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState(list_card32);
    java.util.List<org.cs362.dominion.Card> list_card34 = gameState33.cards;
    java.util.List<org.cs362.dominion.Card> list_card35 = gameState33.cards;
    java.util.List<org.cs362.dominion.Player> list_player36 = gameState33.players;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState33, "hi!");
    gameState30.addPlayer(player38);
    org.cs362.dominion.Card card40 = null;
    player38.discard(card40);
    player38.printStateGame();
    org.cs362.dominion.Player[] player_array43 = new org.cs362.dominion.Player[] { player16, player22, player28, player38 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player44 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player44, player_array43);
    gameState5.players = arraylist_player44;
    java.util.List<org.cs362.dominion.Card> list_card47 = null;
    org.cs362.dominion.GameState gameState48 = new org.cs362.dominion.GameState(list_card47);
    java.util.List<org.cs362.dominion.Card> list_card49 = gameState48.cards;
    java.util.List<org.cs362.dominion.Card> list_card50 = gameState48.cards;
    java.util.List<org.cs362.dominion.Player> list_player51 = gameState48.players;
    java.util.List<org.cs362.dominion.Player> list_player52 = gameState48.players;
    java.util.List<org.cs362.dominion.Card> list_card53 = gameState48.cards;
    java.util.List<org.cs362.dominion.Card> list_card54 = null;
    org.cs362.dominion.GameState gameState55 = new org.cs362.dominion.GameState(list_card54);
    java.util.List<org.cs362.dominion.Card> list_card56 = gameState55.cards;
    java.util.List<org.cs362.dominion.Card> list_card57 = gameState55.cards;
    java.util.List<org.cs362.dominion.Player> list_player58 = gameState55.players;
    gameState48.players = list_player58;
    gameState5.players = list_player58;
    java.lang.String str61 = gameState5.toString();
    java.lang.String str62 = gameState5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName9.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str61.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str62.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test067"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test068"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i6 = null;
    gameState1.gameBoard = hashmap_card_i6;
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card14 = null;
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState(list_card14);
    java.util.List<org.cs362.dominion.Card> list_card16 = gameState15.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState15.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player18 = gameState15.players;
    gameState9.players = list_player18;
    gameState1.players = list_player18;
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState1, "");
    java.util.List<org.cs362.dominion.Player> list_player23 = gameState1.players;
    org.cs362.dominion.Card[] card_array24 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card25 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card25, card_array24);
    org.cs362.dominion.Card.CardName cardName27 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card28 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card25, cardName27);
    org.cs362.dominion.Card.CardName cardName29 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card30 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card25, cardName29);
    org.cs362.dominion.GameState gameState31 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card25);
    boolean b32 = gameState31.isGameOver();
    java.lang.String str33 = gameState31.toString();
    java.util.List<org.cs362.dominion.Card> list_card34 = null;
    org.cs362.dominion.GameState gameState35 = new org.cs362.dominion.GameState(list_card34);
    java.util.List<org.cs362.dominion.Card> list_card36 = gameState35.cards;
    java.util.List<org.cs362.dominion.Card> list_card37 = gameState35.cards;
    java.util.List<org.cs362.dominion.Player> list_player38 = gameState35.players;
    org.cs362.dominion.Player player40 = new org.cs362.dominion.Player(gameState35, "hi!");
    player40.buyCard();
    player40.buyCard();
    player40.printStateGame();
    gameState31.addPlayer(player40);
    player40.playKingdomCard();
    gameState1.addPlayer(player40);
    java.util.List<org.cs362.dominion.Card> list_card47 = null;
    org.cs362.dominion.GameState gameState48 = new org.cs362.dominion.GameState(list_card47);
    java.util.List<org.cs362.dominion.Card> list_card49 = gameState48.cards;
    java.util.List<org.cs362.dominion.Card> list_card50 = gameState48.cards;
    java.util.List<org.cs362.dominion.Player> list_player51 = gameState48.players;
    java.util.List<org.cs362.dominion.Card> list_card52 = gameState48.cards;
    java.util.List<org.cs362.dominion.Card> list_card53 = null;
    org.cs362.dominion.GameState gameState54 = new org.cs362.dominion.GameState(list_card53);
    java.util.List<org.cs362.dominion.Card> list_card55 = gameState54.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i56 = gameState54.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player57 = gameState54.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i58 = gameState54.gameBoard;
    gameState48.gameBoard = hashmap_card_i58;
    gameState1.gameBoard = hashmap_card_i58;
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.GameState gameState61 = gameState1.clone();
      org.junit.Assert.fail("Expected exception of type java.lang.CloneNotSupportedException");
    } catch (java.lang.CloneNotSupportedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName27.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName29.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str33.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i58);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test069"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    boolean b8 = gameState7.isGameOver();
    org.cs362.dominion.Player player10 = new org.cs362.dominion.Player(gameState7, "");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i11 = gameState7.getWinners();
    org.cs362.dominion.GameState gameState12 = gameState7.clone();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i13 = gameState7.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i13);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test070"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card7 = gameState1.cards;
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState1, "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card7);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test071"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState1, "hi!");
    org.cs362.dominion.Player player7 = null;
    gameState1.addPlayer(player7);
    java.util.List<org.cs362.dominion.Card> list_card9 = null;
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState(list_card9);
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState10.cards;
    java.util.List<org.cs362.dominion.Card> list_card12 = gameState10.cards;
    java.util.List<org.cs362.dominion.Player> list_player13 = gameState10.players;
    java.util.List<org.cs362.dominion.Card> list_card14 = gameState10.cards;
    java.util.List<org.cs362.dominion.Card> list_card15 = null;
    org.cs362.dominion.GameState gameState16 = new org.cs362.dominion.GameState(list_card15);
    java.util.List<org.cs362.dominion.Card> list_card17 = gameState16.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i18 = gameState16.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player19 = gameState16.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState16.gameBoard;
    gameState10.gameBoard = hashmap_card_i20;
    gameState1.gameBoard = hashmap_card_i20;
    java.util.List<org.cs362.dominion.Card> list_card23 = null;
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState(list_card23);
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState24.cards;
    java.util.List<org.cs362.dominion.Card> list_card26 = gameState24.cards;
    java.util.List<org.cs362.dominion.Player> list_player27 = gameState24.players;
    java.lang.String str28 = gameState24.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i29 = gameState24.getWinners();
    org.cs362.dominion.Card[] card_array30 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card31 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card31, card_array30);
    org.cs362.dominion.Card.CardName cardName33 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card34 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card31, cardName33);
    org.cs362.dominion.Card.CardName cardName35 = org.cs362.dominion.Card.CardName.Curse;
    org.cs362.dominion.Card card36 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card31, cardName35);
    gameState24.cards = arraylist_card31;
    org.cs362.dominion.GameState gameState38 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card31);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i39 = gameState38.gameBoard;
    gameState1.gameBoard = hashmap_card_i39;
    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i41 = gameState1.play();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str28.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName33.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + org.cs362.dominion.Card.CardName.Curse + "'", cardName35.equals(org.cs362.dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i39);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test072"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card8, type12);
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type12);
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState(list_card14);
    java.util.List<org.cs362.dominion.Player> list_player16 = gameState15.players;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState15.getWinners();
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card19, cardName21);
    org.cs362.dominion.Card.Type type23 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card24 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card19, type23);
    gameState15.cards = arraylist_card19;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type12.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type23.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test073"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card8, type12);
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type12);
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i16 = gameState15.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type12.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i16);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test074"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    boolean b8 = gameState7.isGameOver();
    org.cs362.dominion.Player player10 = new org.cs362.dominion.Player(gameState7, "");
    org.cs362.dominion.Card card11 = null;
    player10.discard(card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test075"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState1, "hi!");
    org.cs362.dominion.Card card7 = null;
    player6.discard(card7);
    player6.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test076"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.Card.CardName cardName9 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card10 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName9);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card12 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName11);
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card7);
    boolean b14 = gameState13.isGameOver();
    org.cs362.dominion.Player player16 = new org.cs362.dominion.Player(gameState13, "");
    java.util.List<org.cs362.dominion.Card> list_card17 = null;
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState(list_card17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState18.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState18.getWinners();
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState18, "");
    java.util.List<org.cs362.dominion.Card> list_card23 = null;
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState(list_card23);
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState24.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i26 = gameState24.getWinners();
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState24, "");
    java.util.List<org.cs362.dominion.Card> list_card29 = null;
    org.cs362.dominion.GameState gameState30 = new org.cs362.dominion.GameState(list_card29);
    java.util.List<org.cs362.dominion.Card> list_card31 = gameState30.cards;
    java.util.List<org.cs362.dominion.Card> list_card32 = null;
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState(list_card32);
    java.util.List<org.cs362.dominion.Card> list_card34 = gameState33.cards;
    java.util.List<org.cs362.dominion.Card> list_card35 = gameState33.cards;
    java.util.List<org.cs362.dominion.Player> list_player36 = gameState33.players;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState33, "hi!");
    gameState30.addPlayer(player38);
    org.cs362.dominion.Card card40 = null;
    player38.discard(card40);
    player38.printStateGame();
    org.cs362.dominion.Player[] player_array43 = new org.cs362.dominion.Player[] { player16, player22, player28, player38 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player44 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player44, player_array43);
    gameState5.players = arraylist_player44;
    java.util.List<org.cs362.dominion.Card> list_card47 = null;
    org.cs362.dominion.GameState gameState48 = new org.cs362.dominion.GameState(list_card47);
    java.util.List<org.cs362.dominion.Card> list_card49 = gameState48.cards;
    java.util.List<org.cs362.dominion.Card> list_card50 = gameState48.cards;
    java.util.List<org.cs362.dominion.Player> list_player51 = gameState48.players;
    java.util.List<org.cs362.dominion.Player> list_player52 = gameState48.players;
    java.util.List<org.cs362.dominion.Card> list_card53 = gameState48.cards;
    java.util.List<org.cs362.dominion.Card> list_card54 = null;
    org.cs362.dominion.GameState gameState55 = new org.cs362.dominion.GameState(list_card54);
    java.util.List<org.cs362.dominion.Card> list_card56 = gameState55.cards;
    java.util.List<org.cs362.dominion.Card> list_card57 = gameState55.cards;
    java.util.List<org.cs362.dominion.Player> list_player58 = gameState55.players;
    gameState48.players = list_player58;
    gameState5.players = list_player58;
    java.lang.String str61 = gameState5.toString();
    org.cs362.dominion.GameState gameState62 = gameState5.clone();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i63 = gameState62.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName9.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str61.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i63);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test077"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card4 = null;
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState(list_card4);
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState5.cards;
    java.util.List<org.cs362.dominion.Card> list_card7 = gameState5.cards;
    java.util.List<org.cs362.dominion.Player> list_player8 = gameState5.players;
    java.util.List<org.cs362.dominion.Player> list_player9 = gameState5.players;
    gameState1.players = list_player9;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i11 = gameState1.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i11);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test078"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.lang.String str5 = gameState1.toString();
    java.lang.String str6 = gameState1.toString();
    java.lang.String str7 = gameState1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str6.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str7.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test079"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i6 = null;
    gameState1.gameBoard = hashmap_card_i6;
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card14 = null;
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState(list_card14);
    java.util.List<org.cs362.dominion.Card> list_card16 = gameState15.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState15.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player18 = gameState15.players;
    gameState9.players = list_player18;
    gameState1.players = list_player18;
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState1, "");
    java.util.List<org.cs362.dominion.Player> list_player23 = gameState1.players;
    org.cs362.dominion.Card[] card_array24 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card25 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card25, card_array24);
    org.cs362.dominion.Card.CardName cardName27 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card28 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card25, cardName27);
    org.cs362.dominion.Card.CardName cardName29 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card30 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card25, cardName29);
    org.cs362.dominion.GameState gameState31 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card25);
    boolean b32 = gameState31.isGameOver();
    java.lang.String str33 = gameState31.toString();
    java.util.List<org.cs362.dominion.Card> list_card34 = null;
    org.cs362.dominion.GameState gameState35 = new org.cs362.dominion.GameState(list_card34);
    java.util.List<org.cs362.dominion.Card> list_card36 = gameState35.cards;
    java.util.List<org.cs362.dominion.Card> list_card37 = gameState35.cards;
    java.util.List<org.cs362.dominion.Player> list_player38 = gameState35.players;
    org.cs362.dominion.Player player40 = new org.cs362.dominion.Player(gameState35, "hi!");
    player40.buyCard();
    player40.buyCard();
    player40.printStateGame();
    gameState31.addPlayer(player40);
    player40.playKingdomCard();
    gameState1.addPlayer(player40);
    org.cs362.dominion.Card card47 = null;
    player40.discard(card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName27.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName29.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str33.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player38);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test080"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card8, type12);
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type12);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card16, cardName18);
    org.cs362.dominion.Card.Type type20 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card21 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card16, type20);
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    org.cs362.dominion.Card.CardName cardName25 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card26 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card23, cardName25);
    org.cs362.dominion.Card.Type type27 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card28 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card23, type27);
    java.util.List<org.cs362.dominion.Card> list_card29 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card16, type27);
    java.util.List<org.cs362.dominion.Card> list_card30 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type12.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type20.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName25.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type27.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test081"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    org.cs362.dominion.Player player11 = new org.cs362.dominion.Player(gameState7, "hi!");
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState7, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i14 = gameState7.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i14);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test082"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.Card.CardName cardName9 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card10 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName9);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card12 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName11);
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card7);
    boolean b14 = gameState13.isGameOver();
    org.cs362.dominion.Player player16 = new org.cs362.dominion.Player(gameState13, "");
    java.util.List<org.cs362.dominion.Card> list_card17 = null;
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState(list_card17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState18.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState18.getWinners();
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState18, "");
    java.util.List<org.cs362.dominion.Card> list_card23 = null;
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState(list_card23);
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState24.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i26 = gameState24.getWinners();
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState24, "");
    java.util.List<org.cs362.dominion.Card> list_card29 = null;
    org.cs362.dominion.GameState gameState30 = new org.cs362.dominion.GameState(list_card29);
    java.util.List<org.cs362.dominion.Card> list_card31 = gameState30.cards;
    java.util.List<org.cs362.dominion.Card> list_card32 = null;
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState(list_card32);
    java.util.List<org.cs362.dominion.Card> list_card34 = gameState33.cards;
    java.util.List<org.cs362.dominion.Card> list_card35 = gameState33.cards;
    java.util.List<org.cs362.dominion.Player> list_player36 = gameState33.players;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState33, "hi!");
    gameState30.addPlayer(player38);
    org.cs362.dominion.Card card40 = null;
    player38.discard(card40);
    player38.printStateGame();
    org.cs362.dominion.Player[] player_array43 = new org.cs362.dominion.Player[] { player16, player22, player28, player38 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player44 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player44, player_array43);
    gameState5.players = arraylist_player44;
    java.util.List<org.cs362.dominion.Card> list_card47 = null;
    org.cs362.dominion.GameState gameState48 = new org.cs362.dominion.GameState(list_card47);
    java.util.List<org.cs362.dominion.Card> list_card49 = gameState48.cards;
    java.util.List<org.cs362.dominion.Card> list_card50 = gameState48.cards;
    java.util.List<org.cs362.dominion.Player> list_player51 = gameState48.players;
    java.util.List<org.cs362.dominion.Player> list_player52 = gameState48.players;
    java.util.List<org.cs362.dominion.Card> list_card53 = gameState48.cards;
    java.util.List<org.cs362.dominion.Card> list_card54 = null;
    org.cs362.dominion.GameState gameState55 = new org.cs362.dominion.GameState(list_card54);
    java.util.List<org.cs362.dominion.Card> list_card56 = gameState55.cards;
    java.util.List<org.cs362.dominion.Card> list_card57 = gameState55.cards;
    java.util.List<org.cs362.dominion.Player> list_player58 = gameState55.players;
    gameState48.players = list_player58;
    gameState5.players = list_player58;
    java.lang.String str61 = gameState5.toString();
    org.cs362.dominion.GameState gameState62 = gameState5.clone();
    boolean b63 = gameState5.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName9.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str61.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test083"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card7 = null;
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card7);
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState8.cards;
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState8.cards;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState8.players;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState8, "hi!");
    org.cs362.dominion.Card card14 = null;
    player13.discard(card14);
    gameState1.addPlayer(player13);
    player13.playKingdomCard();
    org.cs362.dominion.Card card18 = null;
    player13.discard(card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test084"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    boolean b8 = gameState7.isGameOver();
    org.cs362.dominion.Player player10 = new org.cs362.dominion.Player(gameState7, "");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i11 = gameState7.getWinners();
    gameState7.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i11);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test085"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.List<org.cs362.dominion.Card> list_card9 = null;
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState(list_card9);
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState10.cards;
    java.util.List<org.cs362.dominion.Card> list_card12 = gameState10.cards;
    java.util.List<org.cs362.dominion.Player> list_player13 = gameState10.players;
    java.lang.String str14 = gameState10.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i15 = gameState10.getWinners();
    org.cs362.dominion.Card[] card_array16 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card17 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card17, card_array16);
    org.cs362.dominion.Card.CardName cardName19 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card20 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card17, cardName19);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Curse;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card17, cardName21);
    gameState10.cards = arraylist_card17;
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card17);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i25 = gameState24.gameBoard;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i26 = gameState24.gameBoard;
    gameState7.gameBoard = hashmap_card_i26;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i28 = gameState7.getWinners();
    org.cs362.dominion.Player player30 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str14.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName19.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Curse + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i28);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test086"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card6 = null;
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    java.util.List<org.cs362.dominion.Card> list_card8 = gameState7.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player10 = gameState7.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    gameState1.gameBoard = hashmap_card_i11;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i13 = gameState1.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i13);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test087"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card.Type type10 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card11 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card6, type10);
    gameState1.cards = arraylist_card6;
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState1.cards;
    org.cs362.dominion.Card[] card_array14 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card15 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card15, card_array14);
    org.cs362.dominion.Card.CardName cardName17 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card18 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card15, cardName17);
    org.cs362.dominion.Card.Type type19 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card20 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card15, type19);
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    org.cs362.dominion.Card.CardName cardName24 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card25 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card22, cardName24);
    org.cs362.dominion.Card.Type type26 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card27 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card22, type26);
    java.util.List<org.cs362.dominion.Card> list_card28 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card20, type26);
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    org.cs362.dominion.Card.CardName cardName32 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card33 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card30, cardName32);
    org.cs362.dominion.Card.Type type34 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card35 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card30, type34);
    org.cs362.dominion.Card.Type type36 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card37 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card30, type36);
    org.cs362.dominion.Card.Type type38 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card39 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card37, type38);
    java.util.List<org.cs362.dominion.Card> list_card40 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card28, type38);
    org.cs362.dominion.Card[] card_array41 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card42 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card42, card_array41);
    org.cs362.dominion.Card.CardName cardName44 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card45 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card42, cardName44);
    org.cs362.dominion.Card.CardName cardName46 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card47 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card42, cardName46);
    org.cs362.dominion.Card.Type type48 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card49 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card42, type48);
    java.util.List<org.cs362.dominion.Card> list_card50 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card40, type48);
    java.util.List<org.cs362.dominion.Card> list_card51 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card13, type48);
    org.cs362.dominion.Card[] card_array52 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card53 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card53, card_array52);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card53, cardName55);
    org.cs362.dominion.Card.CardName cardName57 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card58 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card53, cardName57);
    org.cs362.dominion.Card.Type type59 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card60 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card53, type59);
    java.util.List<org.cs362.dominion.Card> list_card61 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card13, type59);
    org.cs362.dominion.Card.Type type62 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card63 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card13, type62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type10.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName17.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type19.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName24.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type26.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName32.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type34.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type36.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type38.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName44.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card45);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName46.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card47);
    org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type48.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    org.junit.Assert.assertTrue("'" + cardName57 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName57.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card58);
    org.junit.Assert.assertTrue("'" + type59 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type59.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    org.junit.Assert.assertTrue("'" + type62 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type62.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test088"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = null;
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState(list_card3);
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState4.cards;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState4.cards;
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState4.players;
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState4, "hi!");
    gameState1.addPlayer(player9);
    java.lang.String str11 = player9.toString();
    org.cs362.dominion.Card card12 = null;
    player9.discard(card12);
    java.lang.String str14 = player9.toString();
    player9.buyCard();
    player9.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str11.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str14.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test089"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    gameState7.players = list_player12;
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    player15.printStateGame();
    org.cs362.dominion.Card card17 = null;
    player15.discard(card17);
    java.lang.String str19 = player15.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + " ---  --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str19.equals(" ---  --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test090"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState6 = gameState5.clone();
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState5.players;
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i11 = gameState9.getWinners();
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState9, "");
    java.util.List<org.cs362.dominion.Card> list_card14 = null;
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState(list_card14);
    java.util.List<org.cs362.dominion.Card> list_card16 = gameState15.cards;
    java.util.List<org.cs362.dominion.Card> list_card17 = gameState15.cards;
    java.util.List<org.cs362.dominion.Player> list_player18 = gameState15.players;
    java.util.List<org.cs362.dominion.Player> list_player19 = gameState15.players;
    java.util.List<org.cs362.dominion.Card> list_card20 = null;
    org.cs362.dominion.GameState gameState21 = new org.cs362.dominion.GameState(list_card20);
    java.util.List<org.cs362.dominion.Card> list_card22 = gameState21.cards;
    java.util.List<org.cs362.dominion.Card> list_card23 = gameState21.cards;
    java.util.List<org.cs362.dominion.Player> list_player24 = gameState21.players;
    java.util.List<org.cs362.dominion.Player> list_player25 = gameState21.players;
    java.util.List<org.cs362.dominion.Card> list_card26 = null;
    org.cs362.dominion.GameState gameState27 = new org.cs362.dominion.GameState(list_card26);
    java.util.List<org.cs362.dominion.Card> list_card28 = gameState27.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i29 = gameState27.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card30 = null;
    org.cs362.dominion.GameState gameState31 = new org.cs362.dominion.GameState(list_card30);
    java.util.List<org.cs362.dominion.Card> list_card32 = gameState31.cards;
    java.util.List<org.cs362.dominion.Card> list_card33 = gameState31.cards;
    java.util.List<org.cs362.dominion.Player> list_player34 = gameState31.players;
    java.util.List<org.cs362.dominion.Player> list_player35 = gameState31.players;
    gameState27.players = list_player35;
    gameState21.players = list_player35;
    gameState15.players = list_player35;
    gameState9.players = list_player35;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i40 = gameState9.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card41 = null;
    org.cs362.dominion.GameState gameState42 = new org.cs362.dominion.GameState(list_card41);
    java.util.List<org.cs362.dominion.Card> list_card43 = gameState42.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i44 = gameState42.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player45 = gameState42.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i46 = gameState42.gameBoard;
    gameState9.gameBoard = hashmap_card_i46;
    gameState5.gameBoard = hashmap_card_i46;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i46);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test091"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Curse;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.Card.Type type7 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card8 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Curse + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type7.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test092"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card7 = null;
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card7);
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState8.cards;
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState8.cards;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState8.players;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState8, "hi!");
    org.cs362.dominion.Card card14 = null;
    player13.discard(card14);
    gameState1.addPlayer(player13);
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.GameState gameState17 = gameState1.clone();
      org.junit.Assert.fail("Expected exception of type java.lang.CloneNotSupportedException");
    } catch (java.lang.CloneNotSupportedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test093"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    org.cs362.dominion.Player player5 = new org.cs362.dominion.Player(gameState1, "");
    java.lang.String str6 = player5.toString();
    org.cs362.dominion.Card card7 = null;
    player5.discard(card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " ---  ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str6.equals(" ---  ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test094"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    gameState7.players = list_player12;
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.lang.String str18 = gameState7.toString();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState7.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str18.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test095"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = null;
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState(list_card3);
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState4.cards;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState4.cards;
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState4.players;
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState4, "hi!");
    gameState1.addPlayer(player9);
    java.lang.String str11 = player9.toString();
    org.cs362.dominion.Card card12 = null;
    player9.discard(card12);
    player9.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str11.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test096"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    gameState7.players = list_player12;
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.lang.String str18 = player17.toString();
    player17.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + " ---  --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str18.equals(" ---  --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test097"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = null;
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    java.util.List<org.cs362.dominion.Card> list_card8 = gameState7.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card10 = null;
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState(list_card10);
    java.util.List<org.cs362.dominion.Card> list_card12 = gameState11.cards;
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState11.cards;
    java.util.List<org.cs362.dominion.Player> list_player14 = gameState11.players;
    java.util.List<org.cs362.dominion.Player> list_player15 = gameState11.players;
    gameState7.players = list_player15;
    gameState1.players = list_player15;
    java.util.List<org.cs362.dominion.Card> list_card18 = gameState1.cards;
    org.cs362.dominion.Player player20 = new org.cs362.dominion.Player(gameState1, " ---  ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Card card21 = null;
    player20.discard(card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card18);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test098"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.lang.String str5 = gameState1.toString();
    java.lang.String str6 = gameState1.toString();
    java.util.List<org.cs362.dominion.Card> list_card7 = null;
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card7);
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState8.cards;
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState8.cards;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState8.players;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState8, "hi!");
    org.cs362.dominion.Card card14 = null;
    player13.discard(card14);
    player13.printStateGame();
    gameState1.addPlayer(player13);
    player13.printStateGame();
    org.cs362.dominion.Card card19 = null;
    player13.discard(card19);
    player13.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str6.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test099"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    org.cs362.dominion.Player player5 = new org.cs362.dominion.Player(gameState1, "");
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card7 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player8 = gameState1.players;
    org.cs362.dominion.Card[] card_array9 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card10 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card10, card_array9);
    org.cs362.dominion.Card.CardName cardName12 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card13 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card10, cardName12);
    org.cs362.dominion.Card.CardName cardName14 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card15 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card10, cardName14);
    org.cs362.dominion.GameState gameState16 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card10);
    java.util.List<org.cs362.dominion.Card> list_card17 = null;
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState(list_card17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState18.cards;
    java.util.List<org.cs362.dominion.Card> list_card20 = gameState18.cards;
    java.util.List<org.cs362.dominion.Player> list_player21 = gameState18.players;
    gameState16.players = list_player21;
    org.cs362.dominion.Player player24 = new org.cs362.dominion.Player(gameState16, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState16, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.List<org.cs362.dominion.Player> list_player27 = gameState16.players;
    gameState1.players = list_player27;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName12.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player27);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test100"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    boolean b8 = gameState7.isGameOver();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test101"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    org.cs362.dominion.Player player11 = new org.cs362.dominion.Player(gameState7, "hi!");
    boolean b12 = gameState7.isGameOver();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i13 = gameState7.play();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i14 = gameState7.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i14);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test102"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = null;
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState(list_card3);
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState4.cards;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState4.cards;
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState4.players;
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState4, "hi!");
    gameState1.addPlayer(player9);
    org.cs362.dominion.Card card11 = null;
    player9.discard(card11);
    player9.printStateGame();
    player9.playKingdomCard();
    org.cs362.dominion.Card card15 = null;
    player9.discard(card15);
    java.lang.String str17 = player9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null, null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str17.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null, null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test103"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.List<org.cs362.dominion.Card> list_card9 = null;
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState(list_card9);
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState10.cards;
    java.util.List<org.cs362.dominion.Card> list_card12 = gameState10.cards;
    java.util.List<org.cs362.dominion.Player> list_player13 = gameState10.players;
    java.lang.String str14 = gameState10.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i15 = gameState10.getWinners();
    org.cs362.dominion.Card[] card_array16 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card17 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card17, card_array16);
    org.cs362.dominion.Card.CardName cardName19 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card20 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card17, cardName19);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Curse;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card17, cardName21);
    gameState10.cards = arraylist_card17;
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card17);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i25 = gameState24.gameBoard;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i26 = gameState24.gameBoard;
    gameState7.gameBoard = hashmap_card_i26;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i28 = gameState7.getWinners();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i29 = gameState7.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str14.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName19.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Curse + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i29);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test104"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.lang.String str5 = gameState1.toString();
    java.lang.String str6 = gameState1.toString();
    java.util.List<org.cs362.dominion.Card> list_card7 = null;
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card7);
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState8.cards;
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState8.cards;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState8.players;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState8, "hi!");
    org.cs362.dominion.Card card14 = null;
    player13.discard(card14);
    player13.printStateGame();
    gameState1.addPlayer(player13);
    player13.printStateGame();
    player13.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str6.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test105"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = null;
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState(list_card3);
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState4.cards;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState4.cards;
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState4.players;
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState4, "hi!");
    gameState1.addPlayer(player9);
    java.lang.String str11 = player9.toString();
    org.cs362.dominion.Card card12 = null;
    player9.discard(card12);
    player9.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str11.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test106"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.lang.String str5 = gameState1.toString();
    java.lang.String str6 = gameState1.toString();
    gameState1.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str6.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test107"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.Card.Type type7 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card8 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type7);
    org.cs362.dominion.Card.CardName cardName9 = null;
    org.cs362.dominion.Card card10 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName9);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Minion;
    org.cs362.dominion.Card card12 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName11);
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Estate;
    org.cs362.dominion.Card card14 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName13);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card16, cardName18);
    org.cs362.dominion.Card.Type type20 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card21 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card16, type20);
    org.cs362.dominion.Card.Type type22 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card23 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card16, type22);
    java.util.List<org.cs362.dominion.Card> list_card24 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type22);
    org.cs362.dominion.Card.CardName cardName25 = org.cs362.dominion.Card.CardName.CouncilRoom;
    org.cs362.dominion.Card card26 = org.cs362.dominion.Card.getCard(list_card24, cardName25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type7.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Minion + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Minion));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Estate + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type20.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type22.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + org.cs362.dominion.Card.CardName.CouncilRoom + "'", cardName25.equals(org.cs362.dominion.Card.CardName.CouncilRoom));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test108"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    boolean b8 = gameState7.isGameOver();
    org.cs362.dominion.Player player10 = new org.cs362.dominion.Player(gameState7, "");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i11 = gameState7.getWinners();
    org.cs362.dominion.GameState gameState12 = gameState7.clone();
    java.util.List<org.cs362.dominion.Player> list_player13 = gameState7.players;
    java.util.List<org.cs362.dominion.Card> list_card14 = null;
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState(list_card14);
    java.util.List<org.cs362.dominion.Card> list_card16 = gameState15.cards;
    java.util.List<org.cs362.dominion.Card> list_card17 = gameState15.cards;
    java.util.List<org.cs362.dominion.Player> list_player18 = gameState15.players;
    java.util.List<org.cs362.dominion.Player> list_player19 = gameState15.players;
    gameState7.players = list_player19;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test109"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    gameState7.players = list_player12;
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.lang.String str18 = gameState7.toString();
    java.util.List<org.cs362.dominion.Card> list_card19 = null;
    org.cs362.dominion.GameState gameState20 = new org.cs362.dominion.GameState(list_card19);
    java.util.List<org.cs362.dominion.Card> list_card21 = gameState20.cards;
    java.util.List<org.cs362.dominion.Card> list_card22 = gameState20.cards;
    java.util.List<org.cs362.dominion.Player> list_player23 = gameState20.players;
    java.lang.String str24 = gameState20.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i25 = gameState20.getWinners();
    org.cs362.dominion.Card[] card_array26 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card27 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card27, card_array26);
    org.cs362.dominion.Card.CardName cardName29 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card30 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card27, cardName29);
    org.cs362.dominion.Card.CardName cardName31 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card32 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card27, cardName31);
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card27);
    java.util.List<org.cs362.dominion.Card> list_card34 = null;
    org.cs362.dominion.GameState gameState35 = new org.cs362.dominion.GameState(list_card34);
    java.util.List<org.cs362.dominion.Card> list_card36 = gameState35.cards;
    java.util.List<org.cs362.dominion.Card> list_card37 = gameState35.cards;
    java.util.List<org.cs362.dominion.Player> list_player38 = gameState35.players;
    gameState33.players = list_player38;
    org.cs362.dominion.Player player41 = new org.cs362.dominion.Player(gameState33, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player43 = new org.cs362.dominion.Player(gameState33, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.List<org.cs362.dominion.Player> list_player44 = gameState33.players;
    gameState20.players = list_player44;
    gameState7.players = list_player44;
    org.cs362.dominion.GameState gameState47 = gameState7.clone();
    java.util.List<org.cs362.dominion.Card> list_card48 = null;
    org.cs362.dominion.GameState gameState49 = new org.cs362.dominion.GameState(list_card48);
    java.util.List<org.cs362.dominion.Card> list_card50 = gameState49.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i51 = gameState49.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card52 = null;
    org.cs362.dominion.GameState gameState53 = new org.cs362.dominion.GameState(list_card52);
    java.util.List<org.cs362.dominion.Card> list_card54 = gameState53.cards;
    java.util.List<org.cs362.dominion.Card> list_card55 = gameState53.cards;
    java.util.List<org.cs362.dominion.Player> list_player56 = gameState53.players;
    java.util.List<org.cs362.dominion.Player> list_player57 = gameState53.players;
    gameState49.players = list_player57;
    java.util.List<org.cs362.dominion.Card> list_card59 = null;
    org.cs362.dominion.GameState gameState60 = new org.cs362.dominion.GameState(list_card59);
    java.util.List<org.cs362.dominion.Card> list_card61 = gameState60.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i62 = gameState60.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player63 = gameState60.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i64 = gameState60.gameBoard;
    gameState49.gameBoard = hashmap_card_i64;
    gameState47.gameBoard = hashmap_card_i64;
    java.util.List<org.cs362.dominion.Player> list_player67 = gameState47.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str18.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str24.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName29.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName31.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player67);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test110"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    gameState7.players = list_player12;
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    player15.printStateGame();
    player15.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test111"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    gameState7.players = list_player12;
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.lang.String str18 = gameState7.toString();
    java.util.List<org.cs362.dominion.Card> list_card19 = null;
    org.cs362.dominion.GameState gameState20 = new org.cs362.dominion.GameState(list_card19);
    java.util.List<org.cs362.dominion.Card> list_card21 = gameState20.cards;
    java.util.List<org.cs362.dominion.Card> list_card22 = gameState20.cards;
    java.util.List<org.cs362.dominion.Player> list_player23 = gameState20.players;
    java.lang.String str24 = gameState20.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i25 = gameState20.getWinners();
    org.cs362.dominion.Card[] card_array26 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card27 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card27, card_array26);
    org.cs362.dominion.Card.CardName cardName29 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card30 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card27, cardName29);
    org.cs362.dominion.Card.CardName cardName31 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card32 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card27, cardName31);
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card27);
    java.util.List<org.cs362.dominion.Card> list_card34 = null;
    org.cs362.dominion.GameState gameState35 = new org.cs362.dominion.GameState(list_card34);
    java.util.List<org.cs362.dominion.Card> list_card36 = gameState35.cards;
    java.util.List<org.cs362.dominion.Card> list_card37 = gameState35.cards;
    java.util.List<org.cs362.dominion.Player> list_player38 = gameState35.players;
    gameState33.players = list_player38;
    org.cs362.dominion.Player player41 = new org.cs362.dominion.Player(gameState33, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player43 = new org.cs362.dominion.Player(gameState33, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.List<org.cs362.dominion.Player> list_player44 = gameState33.players;
    gameState20.players = list_player44;
    gameState7.players = list_player44;
    org.cs362.dominion.GameState gameState47 = gameState7.clone();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i48 = null;
    gameState47.gameBoard = hashmap_card_i48;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str18.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str24.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName29.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName31.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState47);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test112"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = null;
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    java.util.List<org.cs362.dominion.Card> list_card8 = gameState7.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card10 = null;
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState(list_card10);
    java.util.List<org.cs362.dominion.Card> list_card12 = gameState11.cards;
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState11.cards;
    java.util.List<org.cs362.dominion.Player> list_player14 = gameState11.players;
    java.util.List<org.cs362.dominion.Player> list_player15 = gameState11.players;
    gameState7.players = list_player15;
    gameState1.players = list_player15;
    java.util.List<org.cs362.dominion.Card> list_card18 = gameState1.cards;
    org.cs362.dominion.Player player20 = new org.cs362.dominion.Player(gameState1, " ---  ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    player20.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card18);

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test113"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.List<org.cs362.dominion.Card> list_card9 = null;
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState(list_card9);
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState10.cards;
    java.util.List<org.cs362.dominion.Card> list_card12 = gameState10.cards;
    java.util.List<org.cs362.dominion.Player> list_player13 = gameState10.players;
    java.lang.String str14 = gameState10.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i15 = gameState10.getWinners();
    org.cs362.dominion.Card[] card_array16 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card17 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card17, card_array16);
    org.cs362.dominion.Card.CardName cardName19 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card20 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card17, cardName19);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Curse;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card17, cardName21);
    gameState10.cards = arraylist_card17;
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card17);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i25 = gameState24.gameBoard;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i26 = gameState24.gameBoard;
    gameState7.gameBoard = hashmap_card_i26;
    java.util.List<org.cs362.dominion.Card> list_card28 = null;
    org.cs362.dominion.GameState gameState29 = new org.cs362.dominion.GameState(list_card28);
    java.util.List<org.cs362.dominion.Card> list_card30 = gameState29.cards;
    java.util.List<org.cs362.dominion.Card> list_card31 = gameState29.cards;
    java.util.List<org.cs362.dominion.Player> list_player32 = gameState29.players;
    org.cs362.dominion.Card[] card_array33 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card34 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card34, card_array33);
    org.cs362.dominion.Card.CardName cardName36 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card37 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card34, cardName36);
    org.cs362.dominion.Card.Type type38 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card39 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card34, type38);
    gameState29.cards = arraylist_card34;
    java.util.List<org.cs362.dominion.Card> list_card41 = gameState29.cards;
    java.util.List<org.cs362.dominion.Player> list_player42 = gameState29.players;
    gameState7.players = list_player42;
    java.util.List<org.cs362.dominion.Player> list_player44 = gameState7.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str14.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName19.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Curse + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName36.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type38.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player44);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test114"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card4 = null;
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState(list_card4);
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState5.cards;
    java.util.List<org.cs362.dominion.Card> list_card7 = gameState5.cards;
    java.util.List<org.cs362.dominion.Player> list_player8 = gameState5.players;
    java.util.List<org.cs362.dominion.Player> list_player9 = gameState5.players;
    gameState1.players = list_player9;
    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i11 = gameState1.play();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test115"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState6 = gameState5.clone();
    java.util.List<org.cs362.dominion.Card> list_card7 = null;
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card7);
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState8.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i10 = gameState8.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState8.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i12 = gameState8.gameBoard;
    gameState6.gameBoard = hashmap_card_i12;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i12);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test116"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    gameState7.players = list_player12;
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.List<org.cs362.dominion.Player> list_player18 = gameState7.players;
    boolean b19 = gameState7.isGameOver();
    java.lang.String str20 = gameState7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str20.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test117"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card.Type type7 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card8 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type7);
    org.cs362.dominion.Card.Type type9 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card10 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card8, type9);
    org.cs362.dominion.Card.Type type11 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card12 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card10, type11);
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type7.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type9.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    org.junit.Assert.assertTrue("'" + type11 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type11.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test118"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card6 = null;
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    java.util.List<org.cs362.dominion.Card> list_card8 = gameState7.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player10 = gameState7.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    gameState5.gameBoard = hashmap_card_i11;
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState5.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test119"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    gameState7.players = list_player12;
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    player17.playKingdomCard();
    java.lang.String str19 = player17.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + " ---  --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str19.equals(" ---  --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test120"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card7 = null;
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card7);
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState8.cards;
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState8.cards;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState8.players;
    gameState1.players = list_player11;
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState1, "The board game is embty you need to intialize the game!!!!");
    player14.printStateGame();
    player14.printStateGame();
    java.lang.String str17 = player14.toString();
    player14.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + " --- The board game is embty you need to intialize the game!!!! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str17.equals(" --- The board game is embty you need to intialize the game!!!! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test121"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card8, type12);
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type12);
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState(list_card14);
    java.util.List<org.cs362.dominion.Player> list_player16 = gameState15.players;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState15.play();
    java.lang.String str18 = gameState15.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i19 = gameState15.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type12.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str18.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i19);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test122"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.lang.String str5 = gameState1.toString();
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.GameState gameState6 = gameState1.clone();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test123"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState1, "hi!");
    org.cs362.dominion.Player player7 = null;
    gameState1.addPlayer(player7);
    java.util.List<org.cs362.dominion.Card> list_card9 = null;
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState(list_card9);
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState10.cards;
    java.util.List<org.cs362.dominion.Card> list_card12 = gameState10.cards;
    java.util.List<org.cs362.dominion.Player> list_player13 = gameState10.players;
    java.util.List<org.cs362.dominion.Card> list_card14 = gameState10.cards;
    java.util.List<org.cs362.dominion.Card> list_card15 = null;
    org.cs362.dominion.GameState gameState16 = new org.cs362.dominion.GameState(list_card15);
    java.util.List<org.cs362.dominion.Card> list_card17 = gameState16.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i18 = gameState16.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player19 = gameState16.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState16.gameBoard;
    gameState10.gameBoard = hashmap_card_i20;
    gameState1.gameBoard = hashmap_card_i20;
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.GameState gameState23 = gameState1.clone();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test124"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i6 = null;
    gameState1.gameBoard = hashmap_card_i6;
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card14 = null;
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState(list_card14);
    java.util.List<org.cs362.dominion.Card> list_card16 = gameState15.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState15.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player18 = gameState15.players;
    gameState9.players = list_player18;
    gameState1.players = list_player18;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str21 = gameState1.toString();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player18);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test125"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i6 = null;
    gameState1.gameBoard = hashmap_card_i6;
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card12 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName11);
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card14 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName13);
    org.cs362.dominion.Card.Type type15 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card16 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card9, type15);
    java.util.List<org.cs362.dominion.Card> list_card17 = null;
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState(list_card17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState18.cards;
    java.util.List<org.cs362.dominion.Card> list_card20 = gameState18.cards;
    java.util.List<org.cs362.dominion.Player> list_player21 = gameState18.players;
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    org.cs362.dominion.Card.CardName cardName25 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card26 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card23, cardName25);
    org.cs362.dominion.Card.Type type27 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card28 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card23, type27);
    gameState18.cards = arraylist_card23;
    java.util.List<org.cs362.dominion.Card> list_card30 = gameState18.cards;
    org.cs362.dominion.Card[] card_array31 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card32 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b33 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card32, card_array31);
    org.cs362.dominion.Card.CardName cardName34 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card35 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card32, cardName34);
    org.cs362.dominion.Card.Type type36 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card37 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card32, type36);
    org.cs362.dominion.Card[] card_array38 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card39, card_array38);
    org.cs362.dominion.Card.CardName cardName41 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card42 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card39, cardName41);
    org.cs362.dominion.Card.Type type43 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card44 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card39, type43);
    java.util.List<org.cs362.dominion.Card> list_card45 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card37, type43);
    org.cs362.dominion.Card[] card_array46 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card47 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card47, card_array46);
    org.cs362.dominion.Card.CardName cardName49 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card50 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card47, cardName49);
    org.cs362.dominion.Card.Type type51 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card52 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card47, type51);
    org.cs362.dominion.Card.Type type53 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card54 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card47, type53);
    org.cs362.dominion.Card.Type type55 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card56 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card54, type55);
    java.util.List<org.cs362.dominion.Card> list_card57 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card45, type55);
    org.cs362.dominion.Card[] card_array58 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card59 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b60 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card59, card_array58);
    org.cs362.dominion.Card.CardName cardName61 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card62 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card59, cardName61);
    org.cs362.dominion.Card.CardName cardName63 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card64 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card59, cardName63);
    org.cs362.dominion.Card.Type type65 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card66 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card59, type65);
    java.util.List<org.cs362.dominion.Card> list_card67 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card57, type65);
    java.util.List<org.cs362.dominion.Card> list_card68 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card30, type65);
    java.util.List<org.cs362.dominion.Card> list_card69 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card9, type65);
    gameState1.cards = arraylist_card9;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type15.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName25.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type27.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName34.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card35);
    org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type36.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    org.junit.Assert.assertTrue("'" + cardName41 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName41.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card42);
    org.junit.Assert.assertTrue("'" + type43 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type43.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    org.junit.Assert.assertTrue("'" + cardName49 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName49.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card50);
    org.junit.Assert.assertTrue("'" + type51 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type51.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    org.junit.Assert.assertTrue("'" + type53 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type53.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card54);
    org.junit.Assert.assertTrue("'" + type55 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type55.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    org.junit.Assert.assertTrue("'" + cardName61 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName61.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card62);
    org.junit.Assert.assertTrue("'" + cardName63 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName63.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card64);
    org.junit.Assert.assertTrue("'" + type65 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type65.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card69);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test126"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState6 = gameState5.clone();
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState5.players;
    java.util.List<org.cs362.dominion.Card> list_card8 = gameState5.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test127"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = null;
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    java.util.List<org.cs362.dominion.Card> list_card8 = gameState7.cards;
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState7.cards;
    java.util.List<org.cs362.dominion.Player> list_player10 = gameState7.players;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState7.players;
    java.util.List<org.cs362.dominion.Card> list_card12 = null;
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState(list_card12);
    java.util.List<org.cs362.dominion.Card> list_card14 = gameState13.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i15 = gameState13.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card16 = null;
    org.cs362.dominion.GameState gameState17 = new org.cs362.dominion.GameState(list_card16);
    java.util.List<org.cs362.dominion.Card> list_card18 = gameState17.cards;
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState17.cards;
    java.util.List<org.cs362.dominion.Player> list_player20 = gameState17.players;
    java.util.List<org.cs362.dominion.Player> list_player21 = gameState17.players;
    gameState13.players = list_player21;
    gameState7.players = list_player21;
    gameState1.players = list_player21;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i25 = gameState1.gameBoard;
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.GameState gameState26 = gameState1.clone();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i25);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test128"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState1, "hi!");
    player6.buyCard();
    player6.buyCard();
    player6.printStateGame();
    player6.printStateGame();
    java.lang.String str11 = player6.toString();
    org.cs362.dominion.Card card12 = null;
    player6.discard(card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str11.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test129"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    org.cs362.dominion.Player player5 = new org.cs362.dominion.Player(gameState1, "");
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card7 = gameState1.cards;
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card12 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName11);
    org.cs362.dominion.Card.Type type13 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card9, type13);
    org.cs362.dominion.Card.Type type15 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card16 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card9, type15);
    org.cs362.dominion.Card.Type type17 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card18 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card16, type17);
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    org.cs362.dominion.Card.CardName cardName22 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card23 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card20, cardName22);
    org.cs362.dominion.Card.Type type24 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card25 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card20, type24);
    org.cs362.dominion.Card[] card_array26 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card27 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card27, card_array26);
    org.cs362.dominion.Card.CardName cardName29 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card30 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card27, cardName29);
    org.cs362.dominion.Card.Type type31 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card32 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card27, type31);
    java.util.List<org.cs362.dominion.Card> list_card33 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card25, type31);
    java.util.List<org.cs362.dominion.Card> list_card34 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card18, type31);
    gameState1.cards = list_card34;
    java.util.List<org.cs362.dominion.Card> list_card36 = gameState1.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type13.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type15.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type17.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName22.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type24.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName29.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type31.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test130"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState1.cards;
    org.cs362.dominion.Player player7 = null;
    gameState1.addPlayer(player7);
    org.cs362.dominion.Player player10 = new org.cs362.dominion.Player(gameState1, " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Card[] card_array11 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card12, card_array11);
    org.cs362.dominion.Card.CardName cardName14 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card15 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card12, cardName14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card12, cardName16);
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card12);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState18.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState18.play();
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState18, "hi!");
    gameState1.addPlayer(player22);
    java.util.List<org.cs362.dominion.Card> list_card24 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState1.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card25);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test131"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card.Type type7 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card8 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type7);
    org.cs362.dominion.Card.Type type9 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card10 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card8, type9);
    org.cs362.dominion.Card[] card_array11 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card12, card_array11);
    org.cs362.dominion.Card.CardName cardName14 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card15 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card12, cardName14);
    org.cs362.dominion.Card.Type type16 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card17 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card12, type16);
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card19, cardName21);
    org.cs362.dominion.Card.Type type23 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card24 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card19, type23);
    java.util.List<org.cs362.dominion.Card> list_card25 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card17, type23);
    java.util.List<org.cs362.dominion.Card> list_card26 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card10, type23);
    org.cs362.dominion.GameState gameState27 = new org.cs362.dominion.GameState(list_card26);
    org.cs362.dominion.GameState gameState28 = gameState27.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type7.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type9.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type16.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type23.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState28);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test132"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = null;
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState(list_card3);
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState4.cards;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState4.cards;
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState4.players;
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState4, "hi!");
    gameState1.addPlayer(player9);
    org.cs362.dominion.Card card11 = null;
    player9.discard(card11);
    player9.printStateGame();
    java.lang.String str14 = player9.toString();
    player9.playKingdomCard();
    player9.printStateGame();
    player9.buyCard();
    org.cs362.dominion.Card card18 = null;
    player9.discard(card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str14.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test133"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = null;
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState(list_card3);
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState4.cards;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState4.cards;
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState4.players;
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState4, "hi!");
    gameState1.addPlayer(player9);
    org.cs362.dominion.Card card11 = null;
    player9.discard(card11);
    player9.printStateGame();
    java.lang.String str14 = player9.toString();
    player9.playKingdomCard();
    player9.buyCard();
    java.lang.String str17 = player9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str14.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str17.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test134"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.lang.String str5 = gameState1.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i6 = gameState1.getWinners();
    java.lang.String str7 = gameState1.toString();
    java.util.List<org.cs362.dominion.Player> list_player8 = gameState1.players;
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.GameState gameState9 = gameState1.clone();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str7.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player8);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test135"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card.Type type10 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card11 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card6, type10);
    gameState1.cards = arraylist_card6;
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState1.cards;
    org.cs362.dominion.Card.Type type14 = org.cs362.dominion.Card.Type.ACTION;
    java.util.List<org.cs362.dominion.Card> list_card15 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card13, type14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type10.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.cs362.dominion.Card.Type.ACTION + "'", type14.equals(org.cs362.dominion.Card.Type.ACTION));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test136"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i6 = null;
    gameState1.gameBoard = hashmap_card_i6;
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card14 = null;
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState(list_card14);
    java.util.List<org.cs362.dominion.Card> list_card16 = gameState15.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState15.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player18 = gameState15.players;
    gameState9.players = list_player18;
    gameState1.players = list_player18;
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState1, "");
    java.util.List<org.cs362.dominion.Player> list_player23 = gameState1.players;
    org.cs362.dominion.Card[] card_array24 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card25 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card25, card_array24);
    org.cs362.dominion.Card.CardName cardName27 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card28 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card25, cardName27);
    org.cs362.dominion.Card.CardName cardName29 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card30 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card25, cardName29);
    org.cs362.dominion.GameState gameState31 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card25);
    boolean b32 = gameState31.isGameOver();
    java.lang.String str33 = gameState31.toString();
    java.util.List<org.cs362.dominion.Card> list_card34 = null;
    org.cs362.dominion.GameState gameState35 = new org.cs362.dominion.GameState(list_card34);
    java.util.List<org.cs362.dominion.Card> list_card36 = gameState35.cards;
    java.util.List<org.cs362.dominion.Card> list_card37 = gameState35.cards;
    java.util.List<org.cs362.dominion.Player> list_player38 = gameState35.players;
    org.cs362.dominion.Player player40 = new org.cs362.dominion.Player(gameState35, "hi!");
    player40.buyCard();
    player40.buyCard();
    player40.printStateGame();
    gameState31.addPlayer(player40);
    player40.playKingdomCard();
    gameState1.addPlayer(player40);
    player40.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName27.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName29.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str33.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player38);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test137"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i6 = null;
    gameState1.gameBoard = hashmap_card_i6;
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card14 = null;
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState(list_card14);
    java.util.List<org.cs362.dominion.Card> list_card16 = gameState15.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState15.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player18 = gameState15.players;
    gameState9.players = list_player18;
    gameState1.players = list_player18;
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState1, "");
    java.util.List<org.cs362.dominion.Player> list_player23 = gameState1.players;
    gameState1.initializeGame();
    java.util.List<org.cs362.dominion.Card> list_card25 = null;
    org.cs362.dominion.GameState gameState26 = new org.cs362.dominion.GameState(list_card25);
    java.util.List<org.cs362.dominion.Card> list_card27 = gameState26.cards;
    java.util.List<org.cs362.dominion.Card> list_card28 = gameState26.cards;
    java.util.List<org.cs362.dominion.Player> list_player29 = gameState26.players;
    java.util.List<org.cs362.dominion.Player> list_player30 = gameState26.players;
    gameState26.initializeGame();
    java.util.List<org.cs362.dominion.Player> list_player32 = gameState26.players;
    java.util.List<org.cs362.dominion.Card> list_card33 = null;
    org.cs362.dominion.GameState gameState34 = new org.cs362.dominion.GameState(list_card33);
    java.util.List<org.cs362.dominion.Card> list_card35 = gameState34.cards;
    java.util.List<org.cs362.dominion.Card> list_card36 = gameState34.cards;
    java.util.List<org.cs362.dominion.Player> list_player37 = gameState34.players;
    org.cs362.dominion.Player player39 = new org.cs362.dominion.Player(gameState34, "hi!");
    org.cs362.dominion.Card card40 = null;
    player39.discard(card40);
    gameState26.addPlayer(player39);
    gameState1.addPlayer(player39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player37);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test138"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    boolean b8 = gameState7.isGameOver();
    org.cs362.dominion.Player player10 = new org.cs362.dominion.Player(gameState7, "");
    gameState7.initializeGame();
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    org.cs362.dominion.Card.CardName cardName15 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card16 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card13, cardName15);
    org.cs362.dominion.GameState gameState17 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card13);
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card19, cardName21);
    org.cs362.dominion.Card.CardName cardName23 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card24 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card19, cardName23);
    org.cs362.dominion.GameState gameState25 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card19);
    boolean b26 = gameState25.isGameOver();
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState25, "");
    java.util.List<org.cs362.dominion.Card> list_card29 = null;
    org.cs362.dominion.GameState gameState30 = new org.cs362.dominion.GameState(list_card29);
    java.util.List<org.cs362.dominion.Card> list_card31 = gameState30.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i32 = gameState30.getWinners();
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState30, "");
    java.util.List<org.cs362.dominion.Card> list_card35 = null;
    org.cs362.dominion.GameState gameState36 = new org.cs362.dominion.GameState(list_card35);
    java.util.List<org.cs362.dominion.Card> list_card37 = gameState36.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i38 = gameState36.getWinners();
    org.cs362.dominion.Player player40 = new org.cs362.dominion.Player(gameState36, "");
    java.util.List<org.cs362.dominion.Card> list_card41 = null;
    org.cs362.dominion.GameState gameState42 = new org.cs362.dominion.GameState(list_card41);
    java.util.List<org.cs362.dominion.Card> list_card43 = gameState42.cards;
    java.util.List<org.cs362.dominion.Card> list_card44 = null;
    org.cs362.dominion.GameState gameState45 = new org.cs362.dominion.GameState(list_card44);
    java.util.List<org.cs362.dominion.Card> list_card46 = gameState45.cards;
    java.util.List<org.cs362.dominion.Card> list_card47 = gameState45.cards;
    java.util.List<org.cs362.dominion.Player> list_player48 = gameState45.players;
    org.cs362.dominion.Player player50 = new org.cs362.dominion.Player(gameState45, "hi!");
    gameState42.addPlayer(player50);
    org.cs362.dominion.Card card52 = null;
    player50.discard(card52);
    player50.printStateGame();
    org.cs362.dominion.Player[] player_array55 = new org.cs362.dominion.Player[] { player28, player34, player40, player50 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player56 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player56, player_array55);
    gameState17.players = arraylist_player56;
    java.util.List<org.cs362.dominion.Card> list_card59 = null;
    org.cs362.dominion.GameState gameState60 = new org.cs362.dominion.GameState(list_card59);
    java.util.List<org.cs362.dominion.Card> list_card61 = gameState60.cards;
    java.util.List<org.cs362.dominion.Card> list_card62 = gameState60.cards;
    java.util.List<org.cs362.dominion.Player> list_player63 = gameState60.players;
    java.util.List<org.cs362.dominion.Player> list_player64 = gameState60.players;
    java.util.List<org.cs362.dominion.Card> list_card65 = gameState60.cards;
    java.util.List<org.cs362.dominion.Card> list_card66 = null;
    org.cs362.dominion.GameState gameState67 = new org.cs362.dominion.GameState(list_card66);
    java.util.List<org.cs362.dominion.Card> list_card68 = gameState67.cards;
    java.util.List<org.cs362.dominion.Card> list_card69 = gameState67.cards;
    java.util.List<org.cs362.dominion.Player> list_player70 = gameState67.players;
    gameState60.players = list_player70;
    gameState17.players = list_player70;
    gameState7.players = list_player70;
    java.util.List<org.cs362.dominion.Card> list_card74 = gameState7.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName15.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName23.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card74);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test139"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.Card.CardName cardName9 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card10 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName9);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card12 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName11);
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card7);
    boolean b14 = gameState13.isGameOver();
    org.cs362.dominion.Player player16 = new org.cs362.dominion.Player(gameState13, "");
    java.util.List<org.cs362.dominion.Card> list_card17 = null;
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState(list_card17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState18.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState18.getWinners();
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState18, "");
    java.util.List<org.cs362.dominion.Card> list_card23 = null;
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState(list_card23);
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState24.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i26 = gameState24.getWinners();
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState24, "");
    java.util.List<org.cs362.dominion.Card> list_card29 = null;
    org.cs362.dominion.GameState gameState30 = new org.cs362.dominion.GameState(list_card29);
    java.util.List<org.cs362.dominion.Card> list_card31 = gameState30.cards;
    java.util.List<org.cs362.dominion.Card> list_card32 = null;
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState(list_card32);
    java.util.List<org.cs362.dominion.Card> list_card34 = gameState33.cards;
    java.util.List<org.cs362.dominion.Card> list_card35 = gameState33.cards;
    java.util.List<org.cs362.dominion.Player> list_player36 = gameState33.players;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState33, "hi!");
    gameState30.addPlayer(player38);
    org.cs362.dominion.Card card40 = null;
    player38.discard(card40);
    player38.printStateGame();
    org.cs362.dominion.Player[] player_array43 = new org.cs362.dominion.Player[] { player16, player22, player28, player38 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player44 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player44, player_array43);
    gameState5.players = arraylist_player44;
    java.lang.String str47 = gameState5.toString();
    org.cs362.dominion.Card[] card_array48 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card49 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card49, card_array48);
    gameState5.cards = arraylist_card49;
    org.cs362.dominion.Player player53 = new org.cs362.dominion.Player(gameState5, "hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName9.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str47.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test140"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    // The following exception was thrown during execution in test generation
    try {
    boolean b2 = gameState1.isGameOver();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test141"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.lang.String str5 = gameState1.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i6 = gameState1.getWinners();
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card.CardName cardName12 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card13 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName12);
    org.cs362.dominion.GameState gameState14 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card8);
    java.util.List<org.cs362.dominion.Card> list_card15 = null;
    org.cs362.dominion.GameState gameState16 = new org.cs362.dominion.GameState(list_card15);
    java.util.List<org.cs362.dominion.Card> list_card17 = gameState16.cards;
    java.util.List<org.cs362.dominion.Card> list_card18 = gameState16.cards;
    java.util.List<org.cs362.dominion.Player> list_player19 = gameState16.players;
    gameState14.players = list_player19;
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState14, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player24 = new org.cs362.dominion.Player(gameState14, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.List<org.cs362.dominion.Player> list_player25 = gameState14.players;
    gameState1.players = list_player25;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i27 = gameState1.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName12.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i27);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test142"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.lang.String str5 = gameState1.toString();
    java.lang.String str6 = gameState1.toString();
    java.util.List<org.cs362.dominion.Card> list_card7 = null;
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card7);
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState8.cards;
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState8.cards;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState8.players;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState8, "hi!");
    org.cs362.dominion.Card card14 = null;
    player13.discard(card14);
    player13.printStateGame();
    gameState1.addPlayer(player13);
    player13.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str6.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test143"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.lang.String str9 = gameState7.toString();
    gameState7.initializeGame();
    java.lang.String str11 = gameState7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str9.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str11.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test144"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.Card.CardName cardName9 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card10 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName9);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card12 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName11);
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card7);
    boolean b14 = gameState13.isGameOver();
    org.cs362.dominion.Player player16 = new org.cs362.dominion.Player(gameState13, "");
    java.util.List<org.cs362.dominion.Card> list_card17 = null;
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState(list_card17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState18.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState18.getWinners();
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState18, "");
    java.util.List<org.cs362.dominion.Card> list_card23 = null;
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState(list_card23);
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState24.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i26 = gameState24.getWinners();
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState24, "");
    java.util.List<org.cs362.dominion.Card> list_card29 = null;
    org.cs362.dominion.GameState gameState30 = new org.cs362.dominion.GameState(list_card29);
    java.util.List<org.cs362.dominion.Card> list_card31 = gameState30.cards;
    java.util.List<org.cs362.dominion.Card> list_card32 = null;
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState(list_card32);
    java.util.List<org.cs362.dominion.Card> list_card34 = gameState33.cards;
    java.util.List<org.cs362.dominion.Card> list_card35 = gameState33.cards;
    java.util.List<org.cs362.dominion.Player> list_player36 = gameState33.players;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState33, "hi!");
    gameState30.addPlayer(player38);
    org.cs362.dominion.Card card40 = null;
    player38.discard(card40);
    player38.printStateGame();
    org.cs362.dominion.Player[] player_array43 = new org.cs362.dominion.Player[] { player16, player22, player28, player38 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player44 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player44, player_array43);
    gameState5.players = arraylist_player44;
    java.util.List<org.cs362.dominion.Card> list_card47 = null;
    org.cs362.dominion.GameState gameState48 = new org.cs362.dominion.GameState(list_card47);
    java.util.List<org.cs362.dominion.Card> list_card49 = gameState48.cards;
    java.util.List<org.cs362.dominion.Card> list_card50 = gameState48.cards;
    java.util.List<org.cs362.dominion.Player> list_player51 = gameState48.players;
    java.util.List<org.cs362.dominion.Player> list_player52 = gameState48.players;
    java.util.List<org.cs362.dominion.Card> list_card53 = gameState48.cards;
    java.util.List<org.cs362.dominion.Card> list_card54 = null;
    org.cs362.dominion.GameState gameState55 = new org.cs362.dominion.GameState(list_card54);
    java.util.List<org.cs362.dominion.Card> list_card56 = gameState55.cards;
    java.util.List<org.cs362.dominion.Card> list_card57 = gameState55.cards;
    java.util.List<org.cs362.dominion.Player> list_player58 = gameState55.players;
    gameState48.players = list_player58;
    gameState5.players = list_player58;
    java.lang.String str61 = gameState5.toString();
    org.cs362.dominion.GameState gameState62 = gameState5.clone();
    org.cs362.dominion.GameState gameState63 = gameState62.clone();
    org.cs362.dominion.Card[] card_array64 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card65 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b66 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card65, card_array64);
    org.cs362.dominion.Card.CardName cardName67 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card68 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card65, cardName67);
    org.cs362.dominion.Card.CardName cardName69 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card70 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card65, cardName69);
    org.cs362.dominion.GameState gameState71 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card65);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i72 = gameState71.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i73 = gameState71.play();
    org.cs362.dominion.Player player75 = new org.cs362.dominion.Player(gameState71, "hi!");
    org.cs362.dominion.Player player77 = new org.cs362.dominion.Player(gameState71, "hi!");
    gameState62.addPlayer(player77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName9.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str61.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    org.junit.Assert.assertTrue("'" + cardName67 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName67.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card68);
    org.junit.Assert.assertTrue("'" + cardName69 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName69.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i73);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test145"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    org.cs362.dominion.Player player11 = new org.cs362.dominion.Player(gameState7, "hi!");
    player11.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test146"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i6 = null;
    gameState1.gameBoard = hashmap_card_i6;
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card14 = null;
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState(list_card14);
    java.util.List<org.cs362.dominion.Card> list_card16 = gameState15.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState15.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player18 = gameState15.players;
    gameState9.players = list_player18;
    gameState1.players = list_player18;
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState1, "");
    org.cs362.dominion.Card card23 = null;
    player22.discard(card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player18);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test147"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.lang.String str5 = gameState1.toString();
    java.lang.String str6 = gameState1.toString();
    java.util.List<org.cs362.dominion.Card> list_card7 = null;
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card7);
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState8.cards;
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState8.cards;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState8.players;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState8, "hi!");
    org.cs362.dominion.Card card14 = null;
    player13.discard(card14);
    player13.printStateGame();
    gameState1.addPlayer(player13);
    java.lang.String str18 = gameState1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str6.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str18.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test148"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card4 = null;
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState(list_card4);
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState5.cards;
    java.util.List<org.cs362.dominion.Card> list_card7 = gameState5.cards;
    java.util.List<org.cs362.dominion.Player> list_player8 = gameState5.players;
    java.lang.String str9 = gameState5.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i10 = gameState5.getWinners();
    org.cs362.dominion.Card[] card_array11 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card12, card_array11);
    org.cs362.dominion.Card.CardName cardName14 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card15 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card12, cardName14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Curse;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card12, cardName16);
    gameState5.cards = arraylist_card12;
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card12);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState19.gameBoard;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i21 = gameState19.gameBoard;
    gameState3.gameBoard = hashmap_card_i21;
    org.cs362.dominion.GameState gameState23 = gameState3.clone();
    gameState23.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i25 = gameState23.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str9.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Curse + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i25);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test149"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    gameState7.players = list_player12;
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.List<org.cs362.dominion.Player> list_player18 = gameState7.players;
    boolean b19 = gameState7.isGameOver();
    java.util.List<org.cs362.dominion.Card> list_card20 = null;
    org.cs362.dominion.GameState gameState21 = new org.cs362.dominion.GameState(list_card20);
    java.util.List<org.cs362.dominion.Card> list_card22 = gameState21.cards;
    java.util.List<org.cs362.dominion.Card> list_card23 = null;
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState(list_card23);
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState24.cards;
    java.util.List<org.cs362.dominion.Card> list_card26 = gameState24.cards;
    java.util.List<org.cs362.dominion.Player> list_player27 = gameState24.players;
    org.cs362.dominion.Player player29 = new org.cs362.dominion.Player(gameState24, "hi!");
    gameState21.addPlayer(player29);
    org.cs362.dominion.Card card31 = null;
    player29.discard(card31);
    player29.printStateGame();
    java.lang.String str34 = player29.toString();
    player29.playKingdomCard();
    java.lang.String str36 = player29.toString();
    gameState7.addPlayer(player29);
    java.util.List<org.cs362.dominion.Player> list_player38 = gameState7.players;
    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i39 = gameState7.play();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str34.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str36.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player38);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test150"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = null;
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    java.util.List<org.cs362.dominion.Card> list_card8 = gameState7.cards;
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState7.cards;
    java.util.List<org.cs362.dominion.Player> list_player10 = gameState7.players;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState7.players;
    java.util.List<org.cs362.dominion.Card> list_card12 = null;
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState(list_card12);
    java.util.List<org.cs362.dominion.Card> list_card14 = gameState13.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i15 = gameState13.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card16 = null;
    org.cs362.dominion.GameState gameState17 = new org.cs362.dominion.GameState(list_card16);
    java.util.List<org.cs362.dominion.Card> list_card18 = gameState17.cards;
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState17.cards;
    java.util.List<org.cs362.dominion.Player> list_player20 = gameState17.players;
    java.util.List<org.cs362.dominion.Player> list_player21 = gameState17.players;
    gameState13.players = list_player21;
    gameState7.players = list_player21;
    gameState1.players = list_player21;
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.GameState gameState25 = gameState1.clone();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test151"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.lang.String str5 = gameState1.toString();
    java.lang.String str6 = gameState1.toString();
    java.util.List<org.cs362.dominion.Card> list_card7 = null;
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card7);
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState8.cards;
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState8.cards;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState8.players;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState8, "hi!");
    org.cs362.dominion.Card card14 = null;
    player13.discard(card14);
    player13.printStateGame();
    gameState1.addPlayer(player13);
    gameState1.initializeGame();
    // The following exception was thrown during execution in test generation
    try {
    boolean b19 = gameState1.isGameOver();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str6.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test152"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    gameState7.players = list_player12;
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.lang.String str18 = player17.toString();
    java.lang.String str19 = player17.toString();
    player17.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + " ---  --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str18.equals(" ---  --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + " ---  --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str19.equals(" ---  --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test153"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card8, type12);
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card6, type12);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card16, cardName18);
    org.cs362.dominion.Card.Type type20 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card21 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card16, type20);
    org.cs362.dominion.Card.Type type22 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card23 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card16, type22);
    org.cs362.dominion.Card.Type type24 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card25 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card23, type24);
    java.util.List<org.cs362.dominion.Card> list_card26 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card14, type24);
    org.cs362.dominion.Card[] card_array27 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card28 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card28, card_array27);
    org.cs362.dominion.Card.CardName cardName30 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card31 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card28, cardName30);
    org.cs362.dominion.Card.CardName cardName32 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card33 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card28, cardName32);
    org.cs362.dominion.Card.Type type34 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card35 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card28, type34);
    java.util.List<org.cs362.dominion.Card> list_card36 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card26, type34);
    org.cs362.dominion.GameState gameState37 = new org.cs362.dominion.GameState(list_card26);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i38 = gameState37.play();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card43 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card.Type type44 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card45 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card40, type44);
    org.cs362.dominion.Card.Type type46 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card47 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card40, type46);
    gameState37.cards = list_card47;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type12.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type20.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type22.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type24.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName30.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName32.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type34.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card43);
    org.junit.Assert.assertTrue("'" + type44 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type44.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    org.junit.Assert.assertTrue("'" + type46 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type46.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test154"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    gameState1.initializeGame();
    java.util.List<org.cs362.dominion.Card> list_card3 = null;
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState(list_card3);
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState4.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i6 = gameState4.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card7 = null;
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card7);
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState8.cards;
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState8.cards;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState8.players;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState8.players;
    gameState4.players = list_player12;
    java.util.List<org.cs362.dominion.Card> list_card14 = null;
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState(list_card14);
    java.util.List<org.cs362.dominion.Card> list_card16 = gameState15.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState15.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player18 = gameState15.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState15.gameBoard;
    gameState4.gameBoard = hashmap_card_i19;
    gameState1.gameBoard = hashmap_card_i19;
    java.lang.String str22 = gameState1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str22.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test155"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = null;
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState(list_card3);
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState4.cards;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState4.cards;
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState4.players;
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState4, "hi!");
    gameState1.addPlayer(player9);
    gameState1.initializeGame();
    gameState1.initializeGame();
    java.lang.String str13 = gameState1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str13.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test156"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = null;
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState(list_card3);
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState4.cards;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState4.cards;
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState4.players;
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState4, "hi!");
    gameState1.addPlayer(player9);
    org.cs362.dominion.Card card11 = null;
    player9.discard(card11);
    player9.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test157"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card6 = null;
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    java.util.List<org.cs362.dominion.Card> list_card8 = gameState7.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player10 = gameState7.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    gameState5.gameBoard = hashmap_card_i11;
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card14, cardName16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card14, cardName18);
    org.cs362.dominion.GameState gameState20 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card14);
    java.util.List<org.cs362.dominion.Card> list_card21 = null;
    org.cs362.dominion.GameState gameState22 = new org.cs362.dominion.GameState(list_card21);
    java.util.List<org.cs362.dominion.Card> list_card23 = gameState22.cards;
    java.util.List<org.cs362.dominion.Card> list_card24 = gameState22.cards;
    java.util.List<org.cs362.dominion.Player> list_player25 = gameState22.players;
    gameState20.players = list_player25;
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState20, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player30 = new org.cs362.dominion.Player(gameState20, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    gameState5.addPlayer(player30);
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.GameState gameState32 = gameState5.clone();
      org.junit.Assert.fail("Expected exception of type java.lang.CloneNotSupportedException");
    } catch (java.lang.CloneNotSupportedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player25);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test158"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    boolean b8 = gameState7.isGameOver();
    org.cs362.dominion.Player player10 = new org.cs362.dominion.Player(gameState7, "");
    gameState7.initializeGame();
    java.util.List<org.cs362.dominion.Card> list_card12 = null;
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState(list_card12);
    java.util.List<org.cs362.dominion.Card> list_card14 = gameState13.cards;
    java.util.List<org.cs362.dominion.Card> list_card15 = null;
    org.cs362.dominion.GameState gameState16 = new org.cs362.dominion.GameState(list_card15);
    java.util.List<org.cs362.dominion.Card> list_card17 = gameState16.cards;
    java.util.List<org.cs362.dominion.Card> list_card18 = gameState16.cards;
    java.util.List<org.cs362.dominion.Player> list_player19 = gameState16.players;
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState16, "hi!");
    gameState13.addPlayer(player21);
    org.cs362.dominion.Card card23 = null;
    player21.discard(card23);
    gameState7.addPlayer(player21);
    boolean b26 = gameState7.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test159"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.lang.String str9 = gameState7.toString();
    boolean b10 = gameState7.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str9.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test160"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card8, type12);
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type12);
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState(list_card14);
    java.util.List<org.cs362.dominion.Player> list_player16 = gameState15.players;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState15.play();
    java.util.List<org.cs362.dominion.Card> list_card18 = null;
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState(list_card18);
    java.util.List<org.cs362.dominion.Card> list_card20 = gameState19.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState19.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card22 = null;
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState(list_card22);
    java.util.List<org.cs362.dominion.Card> list_card24 = gameState23.cards;
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState23.cards;
    java.util.List<org.cs362.dominion.Player> list_player26 = gameState23.players;
    java.util.List<org.cs362.dominion.Player> list_player27 = gameState23.players;
    gameState19.players = list_player27;
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    org.cs362.dominion.Card.CardName cardName32 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card33 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card30, cardName32);
    org.cs362.dominion.Card.CardName cardName34 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card35 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card30, cardName34);
    org.cs362.dominion.GameState gameState36 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card30);
    java.util.List<org.cs362.dominion.Card> list_card37 = null;
    org.cs362.dominion.GameState gameState38 = new org.cs362.dominion.GameState(list_card37);
    java.util.List<org.cs362.dominion.Card> list_card39 = gameState38.cards;
    java.util.List<org.cs362.dominion.Card> list_card40 = gameState38.cards;
    java.util.List<org.cs362.dominion.Player> list_player41 = gameState38.players;
    gameState36.players = list_player41;
    org.cs362.dominion.Player player44 = new org.cs362.dominion.Player(gameState36, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player46 = new org.cs362.dominion.Player(gameState36, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.lang.String str47 = gameState36.toString();
    java.util.List<org.cs362.dominion.Card> list_card48 = null;
    org.cs362.dominion.GameState gameState49 = new org.cs362.dominion.GameState(list_card48);
    java.util.List<org.cs362.dominion.Card> list_card50 = gameState49.cards;
    java.util.List<org.cs362.dominion.Card> list_card51 = gameState49.cards;
    java.util.List<org.cs362.dominion.Player> list_player52 = gameState49.players;
    java.lang.String str53 = gameState49.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i54 = gameState49.getWinners();
    org.cs362.dominion.Card[] card_array55 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card56 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card56, card_array55);
    org.cs362.dominion.Card.CardName cardName58 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card59 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card56, cardName58);
    org.cs362.dominion.Card.CardName cardName60 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card61 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card56, cardName60);
    org.cs362.dominion.GameState gameState62 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card56);
    java.util.List<org.cs362.dominion.Card> list_card63 = null;
    org.cs362.dominion.GameState gameState64 = new org.cs362.dominion.GameState(list_card63);
    java.util.List<org.cs362.dominion.Card> list_card65 = gameState64.cards;
    java.util.List<org.cs362.dominion.Card> list_card66 = gameState64.cards;
    java.util.List<org.cs362.dominion.Player> list_player67 = gameState64.players;
    gameState62.players = list_player67;
    org.cs362.dominion.Player player70 = new org.cs362.dominion.Player(gameState62, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player72 = new org.cs362.dominion.Player(gameState62, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.List<org.cs362.dominion.Player> list_player73 = gameState62.players;
    gameState49.players = list_player73;
    gameState36.players = list_player73;
    gameState19.players = list_player73;
    gameState15.players = list_player73;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i78 = gameState15.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type12.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName32.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName34.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str47.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str53.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName58.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card59);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName60.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i78);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test161"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card5 = null;
    org.cs362.dominion.GameState gameState6 = new org.cs362.dominion.GameState(list_card5);
    java.util.List<org.cs362.dominion.Card> list_card7 = gameState6.cards;
    java.util.List<org.cs362.dominion.Card> list_card8 = gameState6.cards;
    java.util.List<org.cs362.dominion.Player> list_player9 = gameState6.players;
    org.cs362.dominion.Player player11 = new org.cs362.dominion.Player(gameState6, "hi!");
    player11.buyCard();
    gameState1.addPlayer(player11);
    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i14 = gameState1.play();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test162"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card8, type12);
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card6, type12);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card16, cardName18);
    org.cs362.dominion.Card.Type type20 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card21 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card16, type20);
    org.cs362.dominion.Card.Type type22 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card23 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card16, type22);
    org.cs362.dominion.Card.Type type24 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card25 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card23, type24);
    java.util.List<org.cs362.dominion.Card> list_card26 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card14, type24);
    org.cs362.dominion.Card[] card_array27 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card28 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card28, card_array27);
    org.cs362.dominion.Card.CardName cardName30 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card31 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card28, cardName30);
    org.cs362.dominion.Card.CardName cardName32 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card33 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card28, cardName32);
    org.cs362.dominion.Card.Type type34 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card35 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card28, type34);
    java.util.List<org.cs362.dominion.Card> list_card36 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card26, type34);
    org.cs362.dominion.GameState gameState37 = new org.cs362.dominion.GameState(list_card26);
    org.cs362.dominion.GameState gameState38 = gameState37.clone();
    boolean b39 = gameState37.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type12.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type20.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type22.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type24.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName30.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName32.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type34.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test163"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.lang.String str5 = gameState1.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i6 = gameState1.getWinners();
    java.lang.String str7 = gameState1.toString();
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    java.util.List<org.cs362.dominion.Player> list_player13 = gameState9.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i14 = null;
    gameState9.gameBoard = hashmap_card_i14;
    java.util.List<org.cs362.dominion.Card> list_card16 = null;
    org.cs362.dominion.GameState gameState17 = new org.cs362.dominion.GameState(list_card16);
    java.util.List<org.cs362.dominion.Card> list_card18 = gameState17.cards;
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState17.cards;
    java.util.List<org.cs362.dominion.Player> list_player20 = gameState17.players;
    java.util.List<org.cs362.dominion.Card> list_card21 = gameState17.cards;
    java.util.List<org.cs362.dominion.Card> list_card22 = null;
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState(list_card22);
    java.util.List<org.cs362.dominion.Card> list_card24 = gameState23.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i25 = gameState23.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player26 = gameState23.players;
    gameState17.players = list_player26;
    gameState9.players = list_player26;
    org.cs362.dominion.Player player30 = new org.cs362.dominion.Player(gameState9, "");
    java.util.List<org.cs362.dominion.Player> list_player31 = gameState9.players;
    gameState1.players = list_player31;
    java.lang.String str33 = gameState1.toString();
    org.cs362.dominion.Card[] card_array34 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card35 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card35, card_array34);
    org.cs362.dominion.Card.CardName cardName37 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card38 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card35, cardName37);
    org.cs362.dominion.Card.CardName cardName39 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card40 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card35, cardName39);
    org.cs362.dominion.GameState gameState41 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card35);
    java.util.List<org.cs362.dominion.Card> list_card42 = null;
    org.cs362.dominion.GameState gameState43 = new org.cs362.dominion.GameState(list_card42);
    java.util.List<org.cs362.dominion.Card> list_card44 = gameState43.cards;
    java.util.List<org.cs362.dominion.Card> list_card45 = gameState43.cards;
    java.util.List<org.cs362.dominion.Player> list_player46 = gameState43.players;
    gameState41.players = list_player46;
    org.cs362.dominion.Player player49 = new org.cs362.dominion.Player(gameState41, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.List<org.cs362.dominion.Card> list_card50 = null;
    org.cs362.dominion.GameState gameState51 = new org.cs362.dominion.GameState(list_card50);
    java.util.List<org.cs362.dominion.Card> list_card52 = gameState51.cards;
    java.util.List<org.cs362.dominion.Card> list_card53 = gameState51.cards;
    java.util.List<org.cs362.dominion.Player> list_player54 = gameState51.players;
    java.util.List<org.cs362.dominion.Player> list_player55 = gameState51.players;
    java.util.List<org.cs362.dominion.Card> list_card56 = gameState51.cards;
    java.util.List<org.cs362.dominion.Card> list_card57 = null;
    org.cs362.dominion.GameState gameState58 = new org.cs362.dominion.GameState(list_card57);
    java.util.List<org.cs362.dominion.Card> list_card59 = gameState58.cards;
    java.util.List<org.cs362.dominion.Card> list_card60 = gameState58.cards;
    java.util.List<org.cs362.dominion.Player> list_player61 = gameState58.players;
    gameState51.players = list_player61;
    gameState41.players = list_player61;
    gameState1.players = list_player61;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str7.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str33.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName37.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName39.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player61);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test164"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.List<org.cs362.dominion.Player> list_player9 = gameState7.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test165"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card8, type12);
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type12);
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Player> list_player16 = gameState15.players;
    gameState15.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type12.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player16);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test166"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card7 = null;
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card7);
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState8.cards;
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState8.cards;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState8.players;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState8, "hi!");
    org.cs362.dominion.Card card14 = null;
    player13.discard(card14);
    gameState1.addPlayer(player13);
    player13.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test167"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = null;
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState(list_card3);
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState4.cards;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState4.cards;
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState4.players;
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState4, "hi!");
    gameState1.addPlayer(player9);
    gameState1.initializeGame();
    gameState1.initializeGame();
    java.util.List<org.cs362.dominion.Card> list_card13 = null;
    org.cs362.dominion.GameState gameState14 = new org.cs362.dominion.GameState(list_card13);
    java.util.List<org.cs362.dominion.Card> list_card15 = gameState14.cards;
    java.util.List<org.cs362.dominion.Card> list_card16 = gameState14.cards;
    java.util.List<org.cs362.dominion.Player> list_player17 = gameState14.players;
    java.lang.String str18 = gameState14.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i19 = gameState14.getWinners();
    java.lang.String str20 = gameState14.toString();
    java.util.List<org.cs362.dominion.Card> list_card21 = null;
    org.cs362.dominion.GameState gameState22 = new org.cs362.dominion.GameState(list_card21);
    java.util.List<org.cs362.dominion.Card> list_card23 = gameState22.cards;
    java.util.List<org.cs362.dominion.Card> list_card24 = gameState22.cards;
    java.util.List<org.cs362.dominion.Player> list_player25 = gameState22.players;
    java.util.List<org.cs362.dominion.Player> list_player26 = gameState22.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i27 = null;
    gameState22.gameBoard = hashmap_card_i27;
    java.util.List<org.cs362.dominion.Card> list_card29 = null;
    org.cs362.dominion.GameState gameState30 = new org.cs362.dominion.GameState(list_card29);
    java.util.List<org.cs362.dominion.Card> list_card31 = gameState30.cards;
    java.util.List<org.cs362.dominion.Card> list_card32 = gameState30.cards;
    java.util.List<org.cs362.dominion.Player> list_player33 = gameState30.players;
    java.util.List<org.cs362.dominion.Card> list_card34 = gameState30.cards;
    java.util.List<org.cs362.dominion.Card> list_card35 = null;
    org.cs362.dominion.GameState gameState36 = new org.cs362.dominion.GameState(list_card35);
    java.util.List<org.cs362.dominion.Card> list_card37 = gameState36.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i38 = gameState36.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player39 = gameState36.players;
    gameState30.players = list_player39;
    gameState22.players = list_player39;
    org.cs362.dominion.Player player43 = new org.cs362.dominion.Player(gameState22, "");
    java.util.List<org.cs362.dominion.Player> list_player44 = gameState22.players;
    gameState14.players = list_player44;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i46 = gameState14.gameBoard;
    gameState1.gameBoard = hashmap_card_i46;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str18.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str20.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i46);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test168"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.Card.CardName cardName9 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card10 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName9);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card12 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName11);
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card7);
    boolean b14 = gameState13.isGameOver();
    org.cs362.dominion.Player player16 = new org.cs362.dominion.Player(gameState13, "");
    java.util.List<org.cs362.dominion.Card> list_card17 = null;
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState(list_card17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState18.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState18.getWinners();
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState18, "");
    java.util.List<org.cs362.dominion.Card> list_card23 = null;
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState(list_card23);
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState24.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i26 = gameState24.getWinners();
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState24, "");
    java.util.List<org.cs362.dominion.Card> list_card29 = null;
    org.cs362.dominion.GameState gameState30 = new org.cs362.dominion.GameState(list_card29);
    java.util.List<org.cs362.dominion.Card> list_card31 = gameState30.cards;
    java.util.List<org.cs362.dominion.Card> list_card32 = null;
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState(list_card32);
    java.util.List<org.cs362.dominion.Card> list_card34 = gameState33.cards;
    java.util.List<org.cs362.dominion.Card> list_card35 = gameState33.cards;
    java.util.List<org.cs362.dominion.Player> list_player36 = gameState33.players;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState33, "hi!");
    gameState30.addPlayer(player38);
    org.cs362.dominion.Card card40 = null;
    player38.discard(card40);
    player38.printStateGame();
    org.cs362.dominion.Player[] player_array43 = new org.cs362.dominion.Player[] { player16, player22, player28, player38 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player44 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player44, player_array43);
    gameState5.players = arraylist_player44;
    java.util.List<org.cs362.dominion.Card> list_card47 = null;
    org.cs362.dominion.GameState gameState48 = new org.cs362.dominion.GameState(list_card47);
    java.util.List<org.cs362.dominion.Card> list_card49 = gameState48.cards;
    java.util.List<org.cs362.dominion.Card> list_card50 = gameState48.cards;
    java.util.List<org.cs362.dominion.Player> list_player51 = gameState48.players;
    java.util.List<org.cs362.dominion.Player> list_player52 = gameState48.players;
    java.util.List<org.cs362.dominion.Card> list_card53 = gameState48.cards;
    java.util.List<org.cs362.dominion.Card> list_card54 = null;
    org.cs362.dominion.GameState gameState55 = new org.cs362.dominion.GameState(list_card54);
    java.util.List<org.cs362.dominion.Card> list_card56 = gameState55.cards;
    java.util.List<org.cs362.dominion.Card> list_card57 = gameState55.cards;
    java.util.List<org.cs362.dominion.Player> list_player58 = gameState55.players;
    gameState48.players = list_player58;
    gameState5.players = list_player58;
    java.lang.String str61 = gameState5.toString();
    org.cs362.dominion.GameState gameState62 = gameState5.clone();
    org.cs362.dominion.GameState gameState63 = gameState62.clone();
    java.util.List<org.cs362.dominion.Card> list_card64 = null;
    org.cs362.dominion.GameState gameState65 = new org.cs362.dominion.GameState(list_card64);
    java.util.List<org.cs362.dominion.Card> list_card66 = gameState65.cards;
    java.util.List<org.cs362.dominion.Card> list_card67 = gameState65.cards;
    java.util.List<org.cs362.dominion.Player> list_player68 = gameState65.players;
    org.cs362.dominion.Player player70 = new org.cs362.dominion.Player(gameState65, "hi!");
    org.cs362.dominion.Card card71 = null;
    player70.discard(card71);
    player70.printStateGame();
    gameState63.addPlayer(player70);
    java.lang.String str75 = player70.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName9.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str61.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str75.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test169"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    gameState1.initializeGame();
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card8 = gameState1.cards;
    org.cs362.dominion.Card[] card_array9 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card10 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card10, card_array9);
    org.cs362.dominion.Card.CardName cardName12 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card13 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card10, cardName12);
    org.cs362.dominion.Card.CardName cardName14 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card15 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card10, cardName14);
    org.cs362.dominion.GameState gameState16 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card10);
    java.util.List<org.cs362.dominion.Card> list_card17 = null;
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState(list_card17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState18.cards;
    java.util.List<org.cs362.dominion.Card> list_card20 = gameState18.cards;
    java.util.List<org.cs362.dominion.Player> list_player21 = gameState18.players;
    gameState16.players = list_player21;
    org.cs362.dominion.Player player24 = new org.cs362.dominion.Player(gameState16, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Card[] card_array25 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card26 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card26, card_array25);
    org.cs362.dominion.Card.CardName cardName28 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card29 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card26, cardName28);
    org.cs362.dominion.Card.CardName cardName30 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card31 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card26, cardName30);
    org.cs362.dominion.GameState gameState32 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card26);
    org.cs362.dominion.Card[] card_array33 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card34 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card34, card_array33);
    org.cs362.dominion.Card.CardName cardName36 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card37 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card34, cardName36);
    org.cs362.dominion.Card.CardName cardName38 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card39 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card34, cardName38);
    org.cs362.dominion.GameState gameState40 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card34);
    gameState40.initializeGame();
    java.lang.String str42 = gameState40.toString();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i43 = gameState40.gameBoard;
    gameState32.gameBoard = hashmap_card_i43;
    gameState16.gameBoard = hashmap_card_i43;
    gameState1.gameBoard = hashmap_card_i43;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName12.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName28.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName30.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName36.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName38.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str42.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i43);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test170"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState1, "hi!");
    player6.buyCard();
    player6.buyCard();
    player6.printStateGame();
    player6.printStateGame();
    org.cs362.dominion.Card card11 = null;
    player6.discard(card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test171"); }

    org.cs362.dominion.GameState gameState0 = null;
    org.cs362.dominion.Player player2 = new org.cs362.dominion.Player(gameState0, "The board game is embty you need to intialize the game!!!!");
    // The following exception was thrown during execution in test generation
    try {
    player2.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test172"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card5 = null;
    org.cs362.dominion.GameState gameState6 = new org.cs362.dominion.GameState(list_card5);
    java.util.List<org.cs362.dominion.Card> list_card7 = gameState6.cards;
    java.util.List<org.cs362.dominion.Card> list_card8 = gameState6.cards;
    java.util.List<org.cs362.dominion.Player> list_player9 = gameState6.players;
    org.cs362.dominion.Player player11 = new org.cs362.dominion.Player(gameState6, "hi!");
    player11.buyCard();
    gameState1.addPlayer(player11);
    // The following exception was thrown during execution in test generation
    try {
    boolean b14 = gameState1.isGameOver();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test173"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    boolean b8 = gameState7.isGameOver();
    org.cs362.dominion.Player player10 = new org.cs362.dominion.Player(gameState7, "");
    player10.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test174"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.Card.CardName cardName9 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card10 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName9);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card12 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName11);
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card7);
    boolean b14 = gameState13.isGameOver();
    org.cs362.dominion.Player player16 = new org.cs362.dominion.Player(gameState13, "");
    java.util.List<org.cs362.dominion.Card> list_card17 = null;
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState(list_card17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState18.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState18.getWinners();
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState18, "");
    java.util.List<org.cs362.dominion.Card> list_card23 = null;
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState(list_card23);
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState24.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i26 = gameState24.getWinners();
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState24, "");
    java.util.List<org.cs362.dominion.Card> list_card29 = null;
    org.cs362.dominion.GameState gameState30 = new org.cs362.dominion.GameState(list_card29);
    java.util.List<org.cs362.dominion.Card> list_card31 = gameState30.cards;
    java.util.List<org.cs362.dominion.Card> list_card32 = null;
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState(list_card32);
    java.util.List<org.cs362.dominion.Card> list_card34 = gameState33.cards;
    java.util.List<org.cs362.dominion.Card> list_card35 = gameState33.cards;
    java.util.List<org.cs362.dominion.Player> list_player36 = gameState33.players;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState33, "hi!");
    gameState30.addPlayer(player38);
    org.cs362.dominion.Card card40 = null;
    player38.discard(card40);
    player38.printStateGame();
    org.cs362.dominion.Player[] player_array43 = new org.cs362.dominion.Player[] { player16, player22, player28, player38 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player44 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player44, player_array43);
    gameState5.players = arraylist_player44;
    java.util.List<org.cs362.dominion.Card> list_card47 = null;
    org.cs362.dominion.GameState gameState48 = new org.cs362.dominion.GameState(list_card47);
    java.util.List<org.cs362.dominion.Card> list_card49 = gameState48.cards;
    java.util.List<org.cs362.dominion.Card> list_card50 = gameState48.cards;
    java.util.List<org.cs362.dominion.Player> list_player51 = gameState48.players;
    java.util.List<org.cs362.dominion.Player> list_player52 = gameState48.players;
    java.util.List<org.cs362.dominion.Card> list_card53 = gameState48.cards;
    java.util.List<org.cs362.dominion.Card> list_card54 = null;
    org.cs362.dominion.GameState gameState55 = new org.cs362.dominion.GameState(list_card54);
    java.util.List<org.cs362.dominion.Card> list_card56 = gameState55.cards;
    java.util.List<org.cs362.dominion.Card> list_card57 = gameState55.cards;
    java.util.List<org.cs362.dominion.Player> list_player58 = gameState55.players;
    gameState48.players = list_player58;
    gameState5.players = list_player58;
    java.lang.String str61 = gameState5.toString();
    org.cs362.dominion.GameState gameState62 = gameState5.clone();
    java.util.List<org.cs362.dominion.Card> list_card63 = gameState62.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i64 = gameState62.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName9.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str61.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i64);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test175"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card8, type12);
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type12);
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    java.util.List<org.cs362.dominion.Card> list_card18 = gameState15.cards;
    gameState15.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState15.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type12.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test176"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.lang.String str5 = gameState1.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i6 = gameState1.getWinners();
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card.CardName cardName12 = org.cs362.dominion.Card.CardName.Curse;
    org.cs362.dominion.Card card13 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName12);
    gameState1.cards = arraylist_card8;
    java.util.List<org.cs362.dominion.Card> list_card15 = null;
    org.cs362.dominion.GameState gameState16 = new org.cs362.dominion.GameState(list_card15);
    java.util.List<org.cs362.dominion.Card> list_card17 = gameState16.cards;
    java.util.List<org.cs362.dominion.Card> list_card18 = gameState16.cards;
    java.util.List<org.cs362.dominion.Player> list_player19 = gameState16.players;
    java.lang.String str20 = gameState16.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState16.getWinners();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    org.cs362.dominion.Card.CardName cardName25 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card26 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card23, cardName25);
    org.cs362.dominion.Card.CardName cardName27 = org.cs362.dominion.Card.CardName.Curse;
    org.cs362.dominion.Card card28 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card23, cardName27);
    gameState16.cards = arraylist_card23;
    org.cs362.dominion.Card[] card_array30 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card31 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card31, card_array30);
    org.cs362.dominion.Card.CardName cardName33 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card34 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card31, cardName33);
    org.cs362.dominion.Card.Type type35 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card36 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card31, type35);
    org.cs362.dominion.Card.Type type37 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card38 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card31, type37);
    org.cs362.dominion.Card.Type type39 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card40 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card38, type39);
    org.cs362.dominion.Card.Type type41 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card42 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card40, type41);
    org.cs362.dominion.Card.CardName cardName43 = org.cs362.dominion.Card.CardName.GreatHall;
    org.cs362.dominion.Card card44 = org.cs362.dominion.Card.getCard(list_card40, cardName43);
    org.cs362.dominion.Card card45 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card23, cardName43);
    org.cs362.dominion.Card card46 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + org.cs362.dominion.Card.CardName.Curse + "'", cardName12.equals(org.cs362.dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str20.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName25.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + org.cs362.dominion.Card.CardName.Curse + "'", cardName27.equals(org.cs362.dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName33.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type35.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type37.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type39.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    org.junit.Assert.assertTrue("'" + type41 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type41.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    org.junit.Assert.assertTrue("'" + cardName43 + "' != '" + org.cs362.dominion.Card.CardName.GreatHall + "'", cardName43.equals(org.cs362.dominion.Card.CardName.GreatHall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card46);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test177"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.lang.String str5 = gameState1.toString();
    java.lang.String str6 = gameState1.toString();
    java.util.List<org.cs362.dominion.Card> list_card7 = null;
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card7);
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState8.cards;
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState8.cards;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState8.players;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState8, "hi!");
    org.cs362.dominion.Card card14 = null;
    player13.discard(card14);
    player13.printStateGame();
    gameState1.addPlayer(player13);
    org.cs362.dominion.Card card18 = null;
    player13.discard(card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str6.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test178"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.Card.CardName cardName9 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card10 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName9);
    org.cs362.dominion.Card.Type type11 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card12 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card7, type11);
    org.cs362.dominion.Card.Type type13 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card7, type13);
    org.cs362.dominion.Card.Type type15 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card16 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card14, type15);
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    org.cs362.dominion.Card.CardName cardName20 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card21 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card18, cardName20);
    org.cs362.dominion.Card.Type type22 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card23 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card18, type22);
    org.cs362.dominion.Card[] card_array24 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card25 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card25, card_array24);
    org.cs362.dominion.Card.CardName cardName27 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card28 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card25, cardName27);
    org.cs362.dominion.Card.Type type29 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card30 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card25, type29);
    java.util.List<org.cs362.dominion.Card> list_card31 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card23, type29);
    java.util.List<org.cs362.dominion.Card> list_card32 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card16, type29);
    gameState5.cards = list_card32;
    org.cs362.dominion.GameState gameState34 = new org.cs362.dominion.GameState(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName9.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    org.junit.Assert.assertTrue("'" + type11 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type11.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type13.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type15.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName20.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type22.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName27.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type29.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test179"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = null;
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState(list_card3);
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState4.cards;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState4.cards;
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState4.players;
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState4, "hi!");
    gameState1.addPlayer(player9);
    java.lang.String str11 = player9.toString();
    org.cs362.dominion.Card card12 = null;
    player9.discard(card12);
    player9.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str11.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test180"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.lang.String str5 = gameState1.toString();
    java.lang.String str6 = gameState1.toString();
    java.util.List<org.cs362.dominion.Card> list_card7 = null;
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card7);
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState8.cards;
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState8.cards;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState8.players;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState8, "hi!");
    org.cs362.dominion.Card card14 = null;
    player13.discard(card14);
    player13.printStateGame();
    gameState1.addPlayer(player13);
    player13.printStateGame();
    org.cs362.dominion.Card card19 = null;
    player13.discard(card19);
    player13.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str6.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test181"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    boolean b8 = gameState7.isGameOver();
    org.cs362.dominion.Player player10 = new org.cs362.dominion.Player(gameState7, "");
    gameState7.initializeGame();
    java.util.List<org.cs362.dominion.Card> list_card12 = null;
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState(list_card12);
    java.util.List<org.cs362.dominion.Card> list_card14 = gameState13.cards;
    java.util.List<org.cs362.dominion.Card> list_card15 = null;
    org.cs362.dominion.GameState gameState16 = new org.cs362.dominion.GameState(list_card15);
    java.util.List<org.cs362.dominion.Card> list_card17 = gameState16.cards;
    java.util.List<org.cs362.dominion.Card> list_card18 = gameState16.cards;
    java.util.List<org.cs362.dominion.Player> list_player19 = gameState16.players;
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState16, "hi!");
    gameState13.addPlayer(player21);
    org.cs362.dominion.Card card23 = null;
    player21.discard(card23);
    gameState7.addPlayer(player21);
    gameState7.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test182"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.Card.CardName cardName9 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card10 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName9);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card12 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName11);
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card7);
    boolean b14 = gameState13.isGameOver();
    org.cs362.dominion.Player player16 = new org.cs362.dominion.Player(gameState13, "");
    java.util.List<org.cs362.dominion.Card> list_card17 = null;
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState(list_card17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState18.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState18.getWinners();
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState18, "");
    java.util.List<org.cs362.dominion.Card> list_card23 = null;
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState(list_card23);
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState24.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i26 = gameState24.getWinners();
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState24, "");
    java.util.List<org.cs362.dominion.Card> list_card29 = null;
    org.cs362.dominion.GameState gameState30 = new org.cs362.dominion.GameState(list_card29);
    java.util.List<org.cs362.dominion.Card> list_card31 = gameState30.cards;
    java.util.List<org.cs362.dominion.Card> list_card32 = null;
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState(list_card32);
    java.util.List<org.cs362.dominion.Card> list_card34 = gameState33.cards;
    java.util.List<org.cs362.dominion.Card> list_card35 = gameState33.cards;
    java.util.List<org.cs362.dominion.Player> list_player36 = gameState33.players;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState33, "hi!");
    gameState30.addPlayer(player38);
    org.cs362.dominion.Card card40 = null;
    player38.discard(card40);
    player38.printStateGame();
    org.cs362.dominion.Player[] player_array43 = new org.cs362.dominion.Player[] { player16, player22, player28, player38 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player44 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player44, player_array43);
    gameState5.players = arraylist_player44;
    java.util.List<org.cs362.dominion.Card> list_card47 = null;
    org.cs362.dominion.GameState gameState48 = new org.cs362.dominion.GameState(list_card47);
    java.util.List<org.cs362.dominion.Card> list_card49 = gameState48.cards;
    java.util.List<org.cs362.dominion.Card> list_card50 = gameState48.cards;
    java.util.List<org.cs362.dominion.Player> list_player51 = gameState48.players;
    java.util.List<org.cs362.dominion.Player> list_player52 = gameState48.players;
    java.util.List<org.cs362.dominion.Card> list_card53 = gameState48.cards;
    java.util.List<org.cs362.dominion.Card> list_card54 = null;
    org.cs362.dominion.GameState gameState55 = new org.cs362.dominion.GameState(list_card54);
    java.util.List<org.cs362.dominion.Card> list_card56 = gameState55.cards;
    java.util.List<org.cs362.dominion.Card> list_card57 = gameState55.cards;
    java.util.List<org.cs362.dominion.Player> list_player58 = gameState55.players;
    gameState48.players = list_player58;
    gameState5.players = list_player58;
    org.cs362.dominion.Player player62 = new org.cs362.dominion.Player(gameState5, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    player62.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName9.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player58);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test183"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card7 = gameState1.cards;
    java.lang.String str8 = gameState1.toString();
    org.cs362.dominion.Player player10 = new org.cs362.dominion.Player(gameState1, " ---  ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    player10.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str8.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test184"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = null;
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState(list_card3);
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState4.cards;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState4.cards;
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState4.players;
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState4, "hi!");
    gameState1.addPlayer(player9);
    org.cs362.dominion.Card card11 = null;
    player9.discard(card11);
    player9.printStateGame();
    player9.playKingdomCard();
    player9.buyCard();
    org.cs362.dominion.Card card16 = null;
    player9.discard(card16);
    player9.buyCard();
    player9.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test185"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.Card.CardName cardName9 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card10 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName9);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card12 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName11);
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card7);
    boolean b14 = gameState13.isGameOver();
    org.cs362.dominion.Player player16 = new org.cs362.dominion.Player(gameState13, "");
    java.util.List<org.cs362.dominion.Card> list_card17 = null;
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState(list_card17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState18.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState18.getWinners();
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState18, "");
    java.util.List<org.cs362.dominion.Card> list_card23 = null;
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState(list_card23);
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState24.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i26 = gameState24.getWinners();
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState24, "");
    java.util.List<org.cs362.dominion.Card> list_card29 = null;
    org.cs362.dominion.GameState gameState30 = new org.cs362.dominion.GameState(list_card29);
    java.util.List<org.cs362.dominion.Card> list_card31 = gameState30.cards;
    java.util.List<org.cs362.dominion.Card> list_card32 = null;
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState(list_card32);
    java.util.List<org.cs362.dominion.Card> list_card34 = gameState33.cards;
    java.util.List<org.cs362.dominion.Card> list_card35 = gameState33.cards;
    java.util.List<org.cs362.dominion.Player> list_player36 = gameState33.players;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState33, "hi!");
    gameState30.addPlayer(player38);
    org.cs362.dominion.Card card40 = null;
    player38.discard(card40);
    player38.printStateGame();
    org.cs362.dominion.Player[] player_array43 = new org.cs362.dominion.Player[] { player16, player22, player28, player38 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player44 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player44, player_array43);
    gameState5.players = arraylist_player44;
    java.util.List<org.cs362.dominion.Card> list_card47 = null;
    org.cs362.dominion.GameState gameState48 = new org.cs362.dominion.GameState(list_card47);
    java.util.List<org.cs362.dominion.Card> list_card49 = gameState48.cards;
    java.util.List<org.cs362.dominion.Card> list_card50 = gameState48.cards;
    java.util.List<org.cs362.dominion.Player> list_player51 = gameState48.players;
    java.util.List<org.cs362.dominion.Player> list_player52 = gameState48.players;
    java.util.List<org.cs362.dominion.Card> list_card53 = gameState48.cards;
    java.util.List<org.cs362.dominion.Card> list_card54 = null;
    org.cs362.dominion.GameState gameState55 = new org.cs362.dominion.GameState(list_card54);
    java.util.List<org.cs362.dominion.Card> list_card56 = gameState55.cards;
    java.util.List<org.cs362.dominion.Card> list_card57 = gameState55.cards;
    java.util.List<org.cs362.dominion.Player> list_player58 = gameState55.players;
    gameState48.players = list_player58;
    gameState5.players = list_player58;
    java.lang.String str61 = gameState5.toString();
    org.cs362.dominion.GameState gameState62 = gameState5.clone();
    org.cs362.dominion.GameState gameState63 = gameState62.clone();
    java.util.List<org.cs362.dominion.Card> list_card64 = null;
    org.cs362.dominion.GameState gameState65 = new org.cs362.dominion.GameState(list_card64);
    java.util.List<org.cs362.dominion.Card> list_card66 = gameState65.cards;
    java.util.List<org.cs362.dominion.Card> list_card67 = gameState65.cards;
    java.util.List<org.cs362.dominion.Player> list_player68 = gameState65.players;
    org.cs362.dominion.Player player70 = new org.cs362.dominion.Player(gameState65, "hi!");
    org.cs362.dominion.Card card71 = null;
    player70.discard(card71);
    player70.printStateGame();
    gameState63.addPlayer(player70);
    org.cs362.dominion.Card card75 = null;
    player70.discard(card75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName9.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str61.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player68);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test186"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.lang.String str5 = gameState1.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i6 = gameState1.getWinners();
    java.lang.String str7 = gameState1.toString();
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card12 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName11);
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card14 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName13);
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card9);
    java.util.List<org.cs362.dominion.Card> list_card16 = null;
    org.cs362.dominion.GameState gameState17 = new org.cs362.dominion.GameState(list_card16);
    java.util.List<org.cs362.dominion.Card> list_card18 = gameState17.cards;
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState17.cards;
    java.util.List<org.cs362.dominion.Player> list_player20 = gameState17.players;
    gameState15.players = list_player20;
    org.cs362.dominion.Player player23 = new org.cs362.dominion.Player(gameState15, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player25 = new org.cs362.dominion.Player(gameState15, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.lang.String str26 = gameState15.toString();
    java.util.List<org.cs362.dominion.Card> list_card27 = null;
    org.cs362.dominion.GameState gameState28 = new org.cs362.dominion.GameState(list_card27);
    java.util.List<org.cs362.dominion.Card> list_card29 = gameState28.cards;
    java.util.List<org.cs362.dominion.Card> list_card30 = gameState28.cards;
    java.util.List<org.cs362.dominion.Player> list_player31 = gameState28.players;
    java.lang.String str32 = gameState28.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i33 = gameState28.getWinners();
    org.cs362.dominion.Card[] card_array34 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card35 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card35, card_array34);
    org.cs362.dominion.Card.CardName cardName37 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card38 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card35, cardName37);
    org.cs362.dominion.Card.CardName cardName39 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card40 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card35, cardName39);
    org.cs362.dominion.GameState gameState41 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card35);
    java.util.List<org.cs362.dominion.Card> list_card42 = null;
    org.cs362.dominion.GameState gameState43 = new org.cs362.dominion.GameState(list_card42);
    java.util.List<org.cs362.dominion.Card> list_card44 = gameState43.cards;
    java.util.List<org.cs362.dominion.Card> list_card45 = gameState43.cards;
    java.util.List<org.cs362.dominion.Player> list_player46 = gameState43.players;
    gameState41.players = list_player46;
    org.cs362.dominion.Player player49 = new org.cs362.dominion.Player(gameState41, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player51 = new org.cs362.dominion.Player(gameState41, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.List<org.cs362.dominion.Player> list_player52 = gameState41.players;
    gameState28.players = list_player52;
    gameState15.players = list_player52;
    gameState1.players = list_player52;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str7.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str26.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str32.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName37.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName39.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player52);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test187"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.lang.String str5 = gameState1.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i6 = gameState1.getWinners();
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card.CardName cardName12 = org.cs362.dominion.Card.CardName.Curse;
    org.cs362.dominion.Card card13 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName12);
    gameState1.cards = arraylist_card8;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i15 = gameState1.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + org.cs362.dominion.Card.CardName.Curse + "'", cardName12.equals(org.cs362.dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i15);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test188"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    gameState7.players = list_player12;
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    player17.printStateGame();
    player17.printStateGame();
    player17.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test189"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    boolean b4 = gameState3.isGameOver();
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card.Type type10 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card11 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card6, type10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    org.cs362.dominion.Card.CardName cardName15 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card16 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card13, cardName15);
    org.cs362.dominion.Card.Type type17 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card18 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card13, type17);
    java.util.List<org.cs362.dominion.Card> list_card19 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card11, type17);
    gameState3.cards = list_card11;
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    org.cs362.dominion.Card.CardName cardName24 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card25 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card22, cardName24);
    org.cs362.dominion.Card.Type type26 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card27 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card22, type26);
    org.cs362.dominion.Card.Type type28 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card29 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card22, type28);
    org.cs362.dominion.Card.Type type30 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card31 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card29, type30);
    org.cs362.dominion.Card[] card_array32 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card33 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card33, card_array32);
    org.cs362.dominion.Card.CardName cardName35 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card36 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card33, cardName35);
    org.cs362.dominion.Card.Type type37 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card38 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card33, type37);
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card43 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card.Type type44 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card45 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card40, type44);
    java.util.List<org.cs362.dominion.Card> list_card46 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card38, type44);
    java.util.List<org.cs362.dominion.Card> list_card47 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card31, type44);
    org.cs362.dominion.GameState gameState48 = new org.cs362.dominion.GameState(list_card47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    org.cs362.dominion.Card.CardName cardName52 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card53 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card50, cardName52);
    org.cs362.dominion.Card.Type type54 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card55 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card50, type54);
    org.cs362.dominion.Card.Type type56 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card57 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card50, type56);
    org.cs362.dominion.Card.Type type58 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card59 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card57, type58);
    org.cs362.dominion.Card[] card_array60 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card61 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b62 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card61, card_array60);
    org.cs362.dominion.Card.CardName cardName63 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card64 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card61, cardName63);
    org.cs362.dominion.Card.Type type65 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card66 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card61, type65);
    org.cs362.dominion.Card[] card_array67 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card68 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b69 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card68, card_array67);
    org.cs362.dominion.Card.CardName cardName70 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card71 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card68, cardName70);
    org.cs362.dominion.Card.Type type72 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card73 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card68, type72);
    java.util.List<org.cs362.dominion.Card> list_card74 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card66, type72);
    java.util.List<org.cs362.dominion.Card> list_card75 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card59, type72);
    java.util.List<org.cs362.dominion.Card> list_card76 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card47, type72);
    java.util.List<org.cs362.dominion.Card> list_card77 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card11, type72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type10.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName15.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type17.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName24.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type26.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type28.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type30.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName35.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type37.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card43);
    org.junit.Assert.assertTrue("'" + type44 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type44.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName52.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card53);
    org.junit.Assert.assertTrue("'" + type54 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type54.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card55);
    org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type56.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    org.junit.Assert.assertTrue("'" + type58 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type58.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    org.junit.Assert.assertTrue("'" + cardName63 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName63.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card64);
    org.junit.Assert.assertTrue("'" + type65 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type65.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    org.junit.Assert.assertTrue("'" + cardName70 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName70.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card71);
    org.junit.Assert.assertTrue("'" + type72 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type72.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card77);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test190"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card12 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName11);
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card14 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName13);
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card9);
    gameState15.initializeGame();
    java.lang.String str17 = gameState15.toString();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i18 = gameState15.gameBoard;
    gameState7.gameBoard = hashmap_card_i18;
    gameState7.initializeGame();
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState7, " ---  ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Card[] card_array23 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card24 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card24, card_array23);
    org.cs362.dominion.GameState gameState26 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card24);
    boolean b27 = gameState26.isGameOver();
    org.cs362.dominion.Card[] card_array28 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card29, card_array28);
    org.cs362.dominion.Card.CardName cardName31 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card32 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card29, cardName31);
    org.cs362.dominion.Card.Type type33 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card34 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card29, type33);
    org.cs362.dominion.Card[] card_array35 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card36 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card36, card_array35);
    org.cs362.dominion.Card.CardName cardName38 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card39 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card36, cardName38);
    org.cs362.dominion.Card.Type type40 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card41 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card36, type40);
    java.util.List<org.cs362.dominion.Card> list_card42 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card34, type40);
    gameState26.cards = list_card34;
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card48 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card card49 = org.cs362.dominion.Card.getCard(list_card34, cardName47);
    gameState7.cards = list_card34;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str17.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName31.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type33.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName38.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card39);
    org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type40.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card49);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test191"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    gameState7.players = list_player12;
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.lang.String str18 = gameState7.toString();
    java.util.List<org.cs362.dominion.Card> list_card19 = null;
    org.cs362.dominion.GameState gameState20 = new org.cs362.dominion.GameState(list_card19);
    java.util.List<org.cs362.dominion.Card> list_card21 = gameState20.cards;
    java.util.List<org.cs362.dominion.Card> list_card22 = gameState20.cards;
    java.util.List<org.cs362.dominion.Player> list_player23 = gameState20.players;
    java.lang.String str24 = gameState20.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i25 = gameState20.getWinners();
    org.cs362.dominion.Card[] card_array26 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card27 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card27, card_array26);
    org.cs362.dominion.Card.CardName cardName29 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card30 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card27, cardName29);
    org.cs362.dominion.Card.CardName cardName31 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card32 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card27, cardName31);
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card27);
    java.util.List<org.cs362.dominion.Card> list_card34 = null;
    org.cs362.dominion.GameState gameState35 = new org.cs362.dominion.GameState(list_card34);
    java.util.List<org.cs362.dominion.Card> list_card36 = gameState35.cards;
    java.util.List<org.cs362.dominion.Card> list_card37 = gameState35.cards;
    java.util.List<org.cs362.dominion.Player> list_player38 = gameState35.players;
    gameState33.players = list_player38;
    org.cs362.dominion.Player player41 = new org.cs362.dominion.Player(gameState33, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player43 = new org.cs362.dominion.Player(gameState33, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.List<org.cs362.dominion.Player> list_player44 = gameState33.players;
    gameState20.players = list_player44;
    gameState7.players = list_player44;
    org.cs362.dominion.GameState gameState47 = gameState7.clone();
    java.util.List<org.cs362.dominion.Card> list_card48 = null;
    org.cs362.dominion.GameState gameState49 = new org.cs362.dominion.GameState(list_card48);
    java.util.List<org.cs362.dominion.Card> list_card50 = gameState49.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i51 = gameState49.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card52 = null;
    org.cs362.dominion.GameState gameState53 = new org.cs362.dominion.GameState(list_card52);
    java.util.List<org.cs362.dominion.Card> list_card54 = gameState53.cards;
    java.util.List<org.cs362.dominion.Card> list_card55 = gameState53.cards;
    java.util.List<org.cs362.dominion.Player> list_player56 = gameState53.players;
    java.util.List<org.cs362.dominion.Player> list_player57 = gameState53.players;
    gameState49.players = list_player57;
    java.util.List<org.cs362.dominion.Card> list_card59 = null;
    org.cs362.dominion.GameState gameState60 = new org.cs362.dominion.GameState(list_card59);
    java.util.List<org.cs362.dominion.Card> list_card61 = gameState60.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i62 = gameState60.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player63 = gameState60.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i64 = gameState60.gameBoard;
    gameState49.gameBoard = hashmap_card_i64;
    gameState47.gameBoard = hashmap_card_i64;
    boolean b67 = gameState47.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str18.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str24.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName29.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName31.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test192"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.lang.String str2 = gameState1.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    gameState1.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str2.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test193"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    boolean b8 = gameState7.isGameOver();
    org.cs362.dominion.Player player10 = new org.cs362.dominion.Player(gameState7, "");
    gameState7.initializeGame();
    java.util.List<org.cs362.dominion.Card> list_card12 = null;
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState(list_card12);
    java.util.List<org.cs362.dominion.Card> list_card14 = gameState13.cards;
    java.util.List<org.cs362.dominion.Card> list_card15 = null;
    org.cs362.dominion.GameState gameState16 = new org.cs362.dominion.GameState(list_card15);
    java.util.List<org.cs362.dominion.Card> list_card17 = gameState16.cards;
    java.util.List<org.cs362.dominion.Card> list_card18 = gameState16.cards;
    java.util.List<org.cs362.dominion.Player> list_player19 = gameState16.players;
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState16, "hi!");
    gameState13.addPlayer(player21);
    org.cs362.dominion.Card card23 = null;
    player21.discard(card23);
    gameState7.addPlayer(player21);
    org.cs362.dominion.Player player27 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test194"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.Card.CardName cardName7 = org.cs362.dominion.Card.CardName.Mine;
    org.cs362.dominion.Card card8 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + org.cs362.dominion.Card.CardName.Mine + "'", cardName7.equals(org.cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test195"); }

    java.lang.Iterable<org.cs362.dominion.Card> iterable_card0 = null;
    org.cs362.dominion.Card.Type type1 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<org.cs362.dominion.Card> list_card2 = org.cs362.dominion.Card.filter(iterable_card0, type1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test196"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState1, "hi!");
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState1.players;
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.GameState gameState8 = gameState1.clone();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test197"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState1.cards;
    org.cs362.dominion.Player player7 = null;
    gameState1.addPlayer(player7);
    org.cs362.dominion.Player player10 = new org.cs362.dominion.Player(gameState1, " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.List<org.cs362.dominion.Card> list_card11 = null;
    org.cs362.dominion.GameState gameState12 = new org.cs362.dominion.GameState(list_card11);
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState12.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i14 = gameState12.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player15 = gameState12.players;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState12, "hi!");
    org.cs362.dominion.Player player18 = null;
    gameState12.addPlayer(player18);
    java.util.List<org.cs362.dominion.Card> list_card20 = null;
    org.cs362.dominion.GameState gameState21 = new org.cs362.dominion.GameState(list_card20);
    java.util.List<org.cs362.dominion.Card> list_card22 = gameState21.cards;
    java.util.List<org.cs362.dominion.Card> list_card23 = gameState21.cards;
    java.util.List<org.cs362.dominion.Player> list_player24 = gameState21.players;
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState21.cards;
    java.util.List<org.cs362.dominion.Card> list_card26 = null;
    org.cs362.dominion.GameState gameState27 = new org.cs362.dominion.GameState(list_card26);
    java.util.List<org.cs362.dominion.Card> list_card28 = gameState27.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i29 = gameState27.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player30 = gameState27.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i31 = gameState27.gameBoard;
    gameState21.gameBoard = hashmap_card_i31;
    gameState12.gameBoard = hashmap_card_i31;
    gameState1.gameBoard = hashmap_card_i31;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i31);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test198"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = null;
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState(list_card3);
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState4.cards;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState4.cards;
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState4.players;
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState4, "hi!");
    gameState1.addPlayer(player9);
    player9.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test199"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    gameState7.players = list_player12;
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.lang.String str18 = gameState7.toString();
    java.util.List<org.cs362.dominion.Card> list_card19 = null;
    org.cs362.dominion.GameState gameState20 = new org.cs362.dominion.GameState(list_card19);
    java.util.List<org.cs362.dominion.Card> list_card21 = gameState20.cards;
    java.util.List<org.cs362.dominion.Card> list_card22 = gameState20.cards;
    java.util.List<org.cs362.dominion.Player> list_player23 = gameState20.players;
    java.lang.String str24 = gameState20.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i25 = gameState20.getWinners();
    org.cs362.dominion.Card[] card_array26 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card27 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card27, card_array26);
    org.cs362.dominion.Card.CardName cardName29 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card30 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card27, cardName29);
    org.cs362.dominion.Card.CardName cardName31 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card32 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card27, cardName31);
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card27);
    java.util.List<org.cs362.dominion.Card> list_card34 = null;
    org.cs362.dominion.GameState gameState35 = new org.cs362.dominion.GameState(list_card34);
    java.util.List<org.cs362.dominion.Card> list_card36 = gameState35.cards;
    java.util.List<org.cs362.dominion.Card> list_card37 = gameState35.cards;
    java.util.List<org.cs362.dominion.Player> list_player38 = gameState35.players;
    gameState33.players = list_player38;
    org.cs362.dominion.Player player41 = new org.cs362.dominion.Player(gameState33, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player43 = new org.cs362.dominion.Player(gameState33, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.List<org.cs362.dominion.Player> list_player44 = gameState33.players;
    gameState20.players = list_player44;
    gameState7.players = list_player44;
    org.cs362.dominion.GameState gameState47 = gameState7.clone();
    java.util.List<org.cs362.dominion.Card> list_card48 = null;
    org.cs362.dominion.GameState gameState49 = new org.cs362.dominion.GameState(list_card48);
    java.util.List<org.cs362.dominion.Card> list_card50 = gameState49.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i51 = gameState49.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card52 = null;
    org.cs362.dominion.GameState gameState53 = new org.cs362.dominion.GameState(list_card52);
    java.util.List<org.cs362.dominion.Card> list_card54 = gameState53.cards;
    java.util.List<org.cs362.dominion.Card> list_card55 = gameState53.cards;
    java.util.List<org.cs362.dominion.Player> list_player56 = gameState53.players;
    java.util.List<org.cs362.dominion.Player> list_player57 = gameState53.players;
    gameState49.players = list_player57;
    java.util.List<org.cs362.dominion.Card> list_card59 = null;
    org.cs362.dominion.GameState gameState60 = new org.cs362.dominion.GameState(list_card59);
    java.util.List<org.cs362.dominion.Card> list_card61 = gameState60.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i62 = gameState60.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player63 = gameState60.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i64 = gameState60.gameBoard;
    gameState49.gameBoard = hashmap_card_i64;
    gameState47.gameBoard = hashmap_card_i64;
    org.cs362.dominion.GameState gameState67 = gameState47.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str18.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str24.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName29.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName31.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState67);

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test200"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    org.cs362.dominion.Player player5 = new org.cs362.dominion.Player(gameState1, "");
    java.util.List<org.cs362.dominion.Card> list_card6 = null;
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    java.util.List<org.cs362.dominion.Card> list_card8 = gameState7.cards;
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState7.cards;
    java.util.List<org.cs362.dominion.Player> list_player10 = gameState7.players;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState7.players;
    java.util.List<org.cs362.dominion.Card> list_card12 = null;
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState(list_card12);
    java.util.List<org.cs362.dominion.Card> list_card14 = gameState13.cards;
    java.util.List<org.cs362.dominion.Card> list_card15 = gameState13.cards;
    java.util.List<org.cs362.dominion.Player> list_player16 = gameState13.players;
    java.util.List<org.cs362.dominion.Player> list_player17 = gameState13.players;
    java.util.List<org.cs362.dominion.Card> list_card18 = null;
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState(list_card18);
    java.util.List<org.cs362.dominion.Card> list_card20 = gameState19.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState19.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card22 = null;
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState(list_card22);
    java.util.List<org.cs362.dominion.Card> list_card24 = gameState23.cards;
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState23.cards;
    java.util.List<org.cs362.dominion.Player> list_player26 = gameState23.players;
    java.util.List<org.cs362.dominion.Player> list_player27 = gameState23.players;
    gameState19.players = list_player27;
    gameState13.players = list_player27;
    gameState7.players = list_player27;
    gameState1.players = list_player27;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i32 = gameState1.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player33 = gameState1.players;
    org.cs362.dominion.Card[] card_array34 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card35 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card35, card_array34);
    org.cs362.dominion.Card.CardName cardName37 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card38 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card35, cardName37);
    org.cs362.dominion.GameState gameState39 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card35);
    java.util.List<org.cs362.dominion.Card> list_card40 = null;
    org.cs362.dominion.GameState gameState41 = new org.cs362.dominion.GameState(list_card40);
    java.util.List<org.cs362.dominion.Card> list_card42 = gameState41.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i43 = gameState41.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player44 = gameState41.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i45 = gameState41.gameBoard;
    gameState39.gameBoard = hashmap_card_i45;
    org.cs362.dominion.Card[] card_array47 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card48 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card48, card_array47);
    org.cs362.dominion.Card.CardName cardName50 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card51 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card48, cardName50);
    org.cs362.dominion.Card.CardName cardName52 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card53 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card48, cardName52);
    org.cs362.dominion.GameState gameState54 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card48);
    java.util.List<org.cs362.dominion.Card> list_card55 = null;
    org.cs362.dominion.GameState gameState56 = new org.cs362.dominion.GameState(list_card55);
    java.util.List<org.cs362.dominion.Card> list_card57 = gameState56.cards;
    java.util.List<org.cs362.dominion.Card> list_card58 = gameState56.cards;
    java.util.List<org.cs362.dominion.Player> list_player59 = gameState56.players;
    gameState54.players = list_player59;
    org.cs362.dominion.Player player62 = new org.cs362.dominion.Player(gameState54, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player64 = new org.cs362.dominion.Player(gameState54, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    gameState39.addPlayer(player64);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i66 = gameState39.getWinners();
    org.cs362.dominion.Player player68 = new org.cs362.dominion.Player(gameState39, " ---  ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    gameState1.addPlayer(player68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName37.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    org.junit.Assert.assertTrue("'" + cardName50 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName50.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card51);
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName52.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i66);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test201"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = null;
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState(list_card3);
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState4.cards;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState4.cards;
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState4.players;
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState4, "hi!");
    gameState1.addPlayer(player9);
    org.cs362.dominion.Card card11 = null;
    player9.discard(card11);
    player9.printStateGame();
    player9.playKingdomCard();
    org.cs362.dominion.Card card15 = null;
    player9.discard(card15);
    player9.playKingdomCard();
    player9.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test202"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    boolean b10 = gameState7.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test203"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    boolean b8 = gameState7.isGameOver();
    java.lang.String str9 = gameState7.toString();
    java.util.List<org.cs362.dominion.Card> list_card10 = null;
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState(list_card10);
    java.util.List<org.cs362.dominion.Card> list_card12 = gameState11.cards;
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState11.cards;
    java.util.List<org.cs362.dominion.Player> list_player14 = gameState11.players;
    org.cs362.dominion.Player player16 = new org.cs362.dominion.Player(gameState11, "hi!");
    player16.buyCard();
    player16.buyCard();
    player16.printStateGame();
    gameState7.addPlayer(player16);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState7.play();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    org.cs362.dominion.Card.CardName cardName25 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card26 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card23, cardName25);
    org.cs362.dominion.Card.CardName cardName27 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card28 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card23, cardName27);
    org.cs362.dominion.GameState gameState29 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card23);
    java.util.List<org.cs362.dominion.Card> list_card30 = null;
    org.cs362.dominion.GameState gameState31 = new org.cs362.dominion.GameState(list_card30);
    java.util.List<org.cs362.dominion.Card> list_card32 = gameState31.cards;
    java.util.List<org.cs362.dominion.Card> list_card33 = gameState31.cards;
    java.util.List<org.cs362.dominion.Player> list_player34 = gameState31.players;
    gameState29.players = list_player34;
    org.cs362.dominion.Player player37 = new org.cs362.dominion.Player(gameState29, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player39 = new org.cs362.dominion.Player(gameState29, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.List<org.cs362.dominion.Player> list_player40 = gameState29.players;
    gameState7.players = list_player40;
    java.util.List<org.cs362.dominion.Card> list_card42 = null;
    org.cs362.dominion.GameState gameState43 = new org.cs362.dominion.GameState(list_card42);
    java.util.List<org.cs362.dominion.Card> list_card44 = gameState43.cards;
    java.util.List<org.cs362.dominion.Card> list_card45 = gameState43.cards;
    java.util.List<org.cs362.dominion.Player> list_player46 = gameState43.players;
    java.lang.String str47 = gameState43.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i48 = gameState43.getWinners();
    gameState43.initializeGame();
    java.util.List<org.cs362.dominion.Player> list_player50 = gameState43.players;
    java.util.List<org.cs362.dominion.Card> list_card51 = null;
    org.cs362.dominion.GameState gameState52 = new org.cs362.dominion.GameState(list_card51);
    java.util.List<org.cs362.dominion.Card> list_card53 = gameState52.cards;
    java.util.List<org.cs362.dominion.Card> list_card54 = gameState52.cards;
    java.util.List<org.cs362.dominion.Player> list_player55 = gameState52.players;
    java.util.List<org.cs362.dominion.Player> list_player56 = gameState52.players;
    java.util.List<org.cs362.dominion.Card> list_card57 = null;
    org.cs362.dominion.GameState gameState58 = new org.cs362.dominion.GameState(list_card57);
    java.util.List<org.cs362.dominion.Card> list_card59 = gameState58.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i60 = gameState58.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card61 = null;
    org.cs362.dominion.GameState gameState62 = new org.cs362.dominion.GameState(list_card61);
    java.util.List<org.cs362.dominion.Card> list_card63 = gameState62.cards;
    java.util.List<org.cs362.dominion.Card> list_card64 = gameState62.cards;
    java.util.List<org.cs362.dominion.Player> list_player65 = gameState62.players;
    java.util.List<org.cs362.dominion.Player> list_player66 = gameState62.players;
    gameState58.players = list_player66;
    gameState52.players = list_player66;
    gameState43.players = list_player66;
    java.util.List<org.cs362.dominion.Player> list_player70 = gameState43.players;
    gameState7.players = list_player70;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str9.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName25.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName27.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str47.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player70);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test204"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = null;
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    java.util.List<org.cs362.dominion.Card> list_card8 = gameState7.cards;
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState7.cards;
    java.util.List<org.cs362.dominion.Player> list_player10 = gameState7.players;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState7.players;
    java.util.List<org.cs362.dominion.Card> list_card12 = null;
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState(list_card12);
    java.util.List<org.cs362.dominion.Card> list_card14 = gameState13.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i15 = gameState13.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card16 = null;
    org.cs362.dominion.GameState gameState17 = new org.cs362.dominion.GameState(list_card16);
    java.util.List<org.cs362.dominion.Card> list_card18 = gameState17.cards;
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState17.cards;
    java.util.List<org.cs362.dominion.Player> list_player20 = gameState17.players;
    java.util.List<org.cs362.dominion.Player> list_player21 = gameState17.players;
    gameState13.players = list_player21;
    gameState7.players = list_player21;
    gameState1.players = list_player21;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i25 = gameState1.gameBoard;
    org.cs362.dominion.Card[] card_array26 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card27 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card27, card_array26);
    org.cs362.dominion.Card.CardName cardName29 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card30 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card27, cardName29);
    org.cs362.dominion.Card.Type type31 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card32 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card27, type31);
    org.cs362.dominion.Card.Type type33 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card34 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card27, type33);
    org.cs362.dominion.Card.Type type35 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card36 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card34, type35);
    gameState1.cards = list_card36;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName29.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type31.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type33.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type35.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test205"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState1, "hi!");
    org.cs362.dominion.Player player7 = null;
    gameState1.addPlayer(player7);
    java.util.List<org.cs362.dominion.Card> list_card9 = null;
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState(list_card9);
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState10.cards;
    java.util.List<org.cs362.dominion.Card> list_card12 = gameState10.cards;
    java.util.List<org.cs362.dominion.Player> list_player13 = gameState10.players;
    java.util.List<org.cs362.dominion.Card> list_card14 = gameState10.cards;
    java.util.List<org.cs362.dominion.Card> list_card15 = null;
    org.cs362.dominion.GameState gameState16 = new org.cs362.dominion.GameState(list_card15);
    java.util.List<org.cs362.dominion.Card> list_card17 = gameState16.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i18 = gameState16.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player19 = gameState16.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState16.gameBoard;
    gameState10.gameBoard = hashmap_card_i20;
    gameState1.gameBoard = hashmap_card_i20;
    // The following exception was thrown during execution in test generation
    try {
    boolean b23 = gameState1.isGameOver();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test206"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    boolean b8 = gameState7.isGameOver();
    org.cs362.dominion.Player player10 = new org.cs362.dominion.Player(gameState7, "");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i11 = gameState7.getWinners();
    org.cs362.dominion.GameState gameState12 = gameState7.clone();
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState12, "hi!");
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card16, cardName18);
    org.cs362.dominion.GameState gameState20 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card16);
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    org.cs362.dominion.Card.CardName cardName24 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card25 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card22, cardName24);
    org.cs362.dominion.Card.CardName cardName26 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card27 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card22, cardName26);
    org.cs362.dominion.GameState gameState28 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card22);
    boolean b29 = gameState28.isGameOver();
    org.cs362.dominion.Player player31 = new org.cs362.dominion.Player(gameState28, "");
    java.util.List<org.cs362.dominion.Card> list_card32 = null;
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState(list_card32);
    java.util.List<org.cs362.dominion.Card> list_card34 = gameState33.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i35 = gameState33.getWinners();
    org.cs362.dominion.Player player37 = new org.cs362.dominion.Player(gameState33, "");
    java.util.List<org.cs362.dominion.Card> list_card38 = null;
    org.cs362.dominion.GameState gameState39 = new org.cs362.dominion.GameState(list_card38);
    java.util.List<org.cs362.dominion.Card> list_card40 = gameState39.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i41 = gameState39.getWinners();
    org.cs362.dominion.Player player43 = new org.cs362.dominion.Player(gameState39, "");
    java.util.List<org.cs362.dominion.Card> list_card44 = null;
    org.cs362.dominion.GameState gameState45 = new org.cs362.dominion.GameState(list_card44);
    java.util.List<org.cs362.dominion.Card> list_card46 = gameState45.cards;
    java.util.List<org.cs362.dominion.Card> list_card47 = null;
    org.cs362.dominion.GameState gameState48 = new org.cs362.dominion.GameState(list_card47);
    java.util.List<org.cs362.dominion.Card> list_card49 = gameState48.cards;
    java.util.List<org.cs362.dominion.Card> list_card50 = gameState48.cards;
    java.util.List<org.cs362.dominion.Player> list_player51 = gameState48.players;
    org.cs362.dominion.Player player53 = new org.cs362.dominion.Player(gameState48, "hi!");
    gameState45.addPlayer(player53);
    org.cs362.dominion.Card card55 = null;
    player53.discard(card55);
    player53.printStateGame();
    org.cs362.dominion.Player[] player_array58 = new org.cs362.dominion.Player[] { player31, player37, player43, player53 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player59 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b60 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player59, player_array58);
    gameState20.players = arraylist_player59;
    java.util.List<org.cs362.dominion.Card> list_card62 = null;
    org.cs362.dominion.GameState gameState63 = new org.cs362.dominion.GameState(list_card62);
    java.util.List<org.cs362.dominion.Card> list_card64 = gameState63.cards;
    java.util.List<org.cs362.dominion.Card> list_card65 = gameState63.cards;
    java.util.List<org.cs362.dominion.Player> list_player66 = gameState63.players;
    java.util.List<org.cs362.dominion.Player> list_player67 = gameState63.players;
    java.util.List<org.cs362.dominion.Card> list_card68 = gameState63.cards;
    java.util.List<org.cs362.dominion.Card> list_card69 = null;
    org.cs362.dominion.GameState gameState70 = new org.cs362.dominion.GameState(list_card69);
    java.util.List<org.cs362.dominion.Card> list_card71 = gameState70.cards;
    java.util.List<org.cs362.dominion.Card> list_card72 = gameState70.cards;
    java.util.List<org.cs362.dominion.Player> list_player73 = gameState70.players;
    gameState63.players = list_player73;
    gameState20.players = list_player73;
    gameState12.players = list_player73;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName24.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName26.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player73);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test207"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    org.cs362.dominion.Player player5 = new org.cs362.dominion.Player(gameState1, "");
    java.util.List<org.cs362.dominion.Card> list_card6 = null;
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    java.util.List<org.cs362.dominion.Card> list_card8 = gameState7.cards;
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState7.cards;
    java.util.List<org.cs362.dominion.Player> list_player10 = gameState7.players;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState7.players;
    java.util.List<org.cs362.dominion.Card> list_card12 = null;
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState(list_card12);
    java.util.List<org.cs362.dominion.Card> list_card14 = gameState13.cards;
    java.util.List<org.cs362.dominion.Card> list_card15 = gameState13.cards;
    java.util.List<org.cs362.dominion.Player> list_player16 = gameState13.players;
    java.util.List<org.cs362.dominion.Player> list_player17 = gameState13.players;
    java.util.List<org.cs362.dominion.Card> list_card18 = null;
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState(list_card18);
    java.util.List<org.cs362.dominion.Card> list_card20 = gameState19.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState19.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card22 = null;
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState(list_card22);
    java.util.List<org.cs362.dominion.Card> list_card24 = gameState23.cards;
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState23.cards;
    java.util.List<org.cs362.dominion.Player> list_player26 = gameState23.players;
    java.util.List<org.cs362.dominion.Player> list_player27 = gameState23.players;
    gameState19.players = list_player27;
    gameState13.players = list_player27;
    gameState7.players = list_player27;
    gameState1.players = list_player27;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i32 = gameState1.getWinners();
    org.cs362.dominion.Card[] card_array33 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card34 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card34, card_array33);
    org.cs362.dominion.Card.CardName cardName36 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card37 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card34, cardName36);
    org.cs362.dominion.Card.CardName cardName38 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card39 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card34, cardName38);
    org.cs362.dominion.GameState gameState40 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card34);
    gameState40.initializeGame();
    java.util.List<org.cs362.dominion.Card> list_card42 = null;
    org.cs362.dominion.GameState gameState43 = new org.cs362.dominion.GameState(list_card42);
    java.util.List<org.cs362.dominion.Card> list_card44 = gameState43.cards;
    java.util.List<org.cs362.dominion.Card> list_card45 = gameState43.cards;
    java.util.List<org.cs362.dominion.Player> list_player46 = gameState43.players;
    java.lang.String str47 = gameState43.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i48 = gameState43.getWinners();
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    org.cs362.dominion.Card.CardName cardName52 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card53 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card50, cardName52);
    org.cs362.dominion.Card.CardName cardName54 = org.cs362.dominion.Card.CardName.Curse;
    org.cs362.dominion.Card card55 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card50, cardName54);
    gameState43.cards = arraylist_card50;
    org.cs362.dominion.GameState gameState57 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card50);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i58 = gameState57.gameBoard;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i59 = gameState57.gameBoard;
    gameState40.gameBoard = hashmap_card_i59;
    gameState1.gameBoard = hashmap_card_i59;
    org.cs362.dominion.Player player62 = null;
    gameState1.addPlayer(player62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName36.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName38.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str47.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName52.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card53);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + org.cs362.dominion.Card.CardName.Curse + "'", cardName54.equals(org.cs362.dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i59);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test208"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card8, type12);
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card6, type12);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card16, cardName18);
    org.cs362.dominion.Card.Type type20 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card21 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card16, type20);
    org.cs362.dominion.Card.Type type22 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card23 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card16, type22);
    org.cs362.dominion.Card.Type type24 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card25 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card23, type24);
    java.util.List<org.cs362.dominion.Card> list_card26 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card14, type24);
    org.cs362.dominion.Card[] card_array27 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card28 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card28, card_array27);
    org.cs362.dominion.Card.CardName cardName30 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card31 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card28, cardName30);
    org.cs362.dominion.Card.CardName cardName32 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card33 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card28, cardName32);
    org.cs362.dominion.Card.Type type34 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card35 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card28, type34);
    java.util.List<org.cs362.dominion.Card> list_card36 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card26, type34);
    org.cs362.dominion.GameState gameState37 = new org.cs362.dominion.GameState(list_card26);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i38 = gameState37.play();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i39 = gameState37.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type12.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type20.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type22.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type24.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName30.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName32.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type34.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i39);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test209"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.Card.CardName cardName1 = org.cs362.dominion.Card.CardName.Cooper;
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.Card card2 = org.cs362.dominion.Card.getCard(list_card0, cardName1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + cardName1 + "' != '" + org.cs362.dominion.Card.CardName.Cooper + "'", cardName1.equals(org.cs362.dominion.Card.CardName.Cooper));

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test210"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test211"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    org.cs362.dominion.Player player5 = new org.cs362.dominion.Player(gameState1, "");
    java.util.List<org.cs362.dominion.Card> list_card6 = null;
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    java.util.List<org.cs362.dominion.Card> list_card8 = gameState7.cards;
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState7.cards;
    java.util.List<org.cs362.dominion.Player> list_player10 = gameState7.players;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState7.players;
    java.util.List<org.cs362.dominion.Card> list_card12 = null;
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState(list_card12);
    java.util.List<org.cs362.dominion.Card> list_card14 = gameState13.cards;
    java.util.List<org.cs362.dominion.Card> list_card15 = gameState13.cards;
    java.util.List<org.cs362.dominion.Player> list_player16 = gameState13.players;
    java.util.List<org.cs362.dominion.Player> list_player17 = gameState13.players;
    java.util.List<org.cs362.dominion.Card> list_card18 = null;
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState(list_card18);
    java.util.List<org.cs362.dominion.Card> list_card20 = gameState19.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState19.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card22 = null;
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState(list_card22);
    java.util.List<org.cs362.dominion.Card> list_card24 = gameState23.cards;
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState23.cards;
    java.util.List<org.cs362.dominion.Player> list_player26 = gameState23.players;
    java.util.List<org.cs362.dominion.Player> list_player27 = gameState23.players;
    gameState19.players = list_player27;
    gameState13.players = list_player27;
    gameState7.players = list_player27;
    gameState1.players = list_player27;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i32 = gameState1.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player33 = gameState1.players;
    java.lang.String str34 = gameState1.toString();
    java.util.List<org.cs362.dominion.Card> list_card35 = null;
    org.cs362.dominion.GameState gameState36 = new org.cs362.dominion.GameState(list_card35);
    java.util.List<org.cs362.dominion.Card> list_card37 = gameState36.cards;
    java.util.List<org.cs362.dominion.Card> list_card38 = gameState36.cards;
    java.util.List<org.cs362.dominion.Player> list_player39 = gameState36.players;
    java.lang.String str40 = gameState36.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i41 = gameState36.getWinners();
    gameState36.initializeGame();
    java.util.List<org.cs362.dominion.Player> list_player43 = gameState36.players;
    java.util.List<org.cs362.dominion.Card> list_card44 = null;
    org.cs362.dominion.GameState gameState45 = new org.cs362.dominion.GameState(list_card44);
    java.util.List<org.cs362.dominion.Card> list_card46 = gameState45.cards;
    java.util.List<org.cs362.dominion.Card> list_card47 = gameState45.cards;
    java.util.List<org.cs362.dominion.Player> list_player48 = gameState45.players;
    java.util.List<org.cs362.dominion.Player> list_player49 = gameState45.players;
    java.util.List<org.cs362.dominion.Card> list_card50 = null;
    org.cs362.dominion.GameState gameState51 = new org.cs362.dominion.GameState(list_card50);
    java.util.List<org.cs362.dominion.Card> list_card52 = gameState51.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i53 = gameState51.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card54 = null;
    org.cs362.dominion.GameState gameState55 = new org.cs362.dominion.GameState(list_card54);
    java.util.List<org.cs362.dominion.Card> list_card56 = gameState55.cards;
    java.util.List<org.cs362.dominion.Card> list_card57 = gameState55.cards;
    java.util.List<org.cs362.dominion.Player> list_player58 = gameState55.players;
    java.util.List<org.cs362.dominion.Player> list_player59 = gameState55.players;
    gameState51.players = list_player59;
    gameState45.players = list_player59;
    gameState36.players = list_player59;
    gameState36.initializeGame();
    gameState36.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i65 = gameState36.gameBoard;
    gameState1.gameBoard = hashmap_card_i65;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str34.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str40.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i65);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test212"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = null;
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState(list_card3);
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState4.cards;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState4.cards;
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState4.players;
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState4, "hi!");
    gameState1.addPlayer(player9);
    gameState1.initializeGame();
    java.util.List<org.cs362.dominion.Card> list_card12 = gameState1.cards;
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState1, " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    player14.buyCard();
    player14.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card12);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test213"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = null;
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState(list_card3);
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState4.cards;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState4.cards;
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState4.players;
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState4, "hi!");
    gameState1.addPlayer(player9);
    org.cs362.dominion.Card card11 = null;
    player9.discard(card11);
    player9.printStateGame();
    java.lang.String str14 = player9.toString();
    player9.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str14.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test214"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    boolean b8 = gameState7.isGameOver();
    org.cs362.dominion.Player player10 = new org.cs362.dominion.Player(gameState7, "");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i11 = gameState7.getWinners();
    java.lang.String str12 = gameState7.toString();
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState7, " ---  --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str12.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test215"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card.Type type7 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card8 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type7);
    org.cs362.dominion.Card.Type type9 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card10 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card8, type9);
    org.cs362.dominion.Card.Type type11 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card12 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card10, type11);
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Estate;
    org.cs362.dominion.Card card14 = org.cs362.dominion.Card.getCard(list_card12, cardName13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type7.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type9.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    org.junit.Assert.assertTrue("'" + type11 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type11.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Estate + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test216"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState1.cards;
    org.cs362.dominion.Player player7 = null;
    gameState1.addPlayer(player7);
    org.cs362.dominion.Player player10 = new org.cs362.dominion.Player(gameState1, " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    // The following exception was thrown during execution in test generation
    try {
    boolean b11 = gameState1.isGameOver();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test217"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.Card.CardName cardName9 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card10 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName9);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card12 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName11);
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card7);
    boolean b14 = gameState13.isGameOver();
    org.cs362.dominion.Player player16 = new org.cs362.dominion.Player(gameState13, "");
    java.util.List<org.cs362.dominion.Card> list_card17 = null;
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState(list_card17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState18.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState18.getWinners();
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState18, "");
    java.util.List<org.cs362.dominion.Card> list_card23 = null;
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState(list_card23);
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState24.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i26 = gameState24.getWinners();
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState24, "");
    java.util.List<org.cs362.dominion.Card> list_card29 = null;
    org.cs362.dominion.GameState gameState30 = new org.cs362.dominion.GameState(list_card29);
    java.util.List<org.cs362.dominion.Card> list_card31 = gameState30.cards;
    java.util.List<org.cs362.dominion.Card> list_card32 = null;
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState(list_card32);
    java.util.List<org.cs362.dominion.Card> list_card34 = gameState33.cards;
    java.util.List<org.cs362.dominion.Card> list_card35 = gameState33.cards;
    java.util.List<org.cs362.dominion.Player> list_player36 = gameState33.players;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState33, "hi!");
    gameState30.addPlayer(player38);
    org.cs362.dominion.Card card40 = null;
    player38.discard(card40);
    player38.printStateGame();
    org.cs362.dominion.Player[] player_array43 = new org.cs362.dominion.Player[] { player16, player22, player28, player38 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player44 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player44, player_array43);
    gameState5.players = arraylist_player44;
    java.util.List<org.cs362.dominion.Card> list_card47 = null;
    org.cs362.dominion.GameState gameState48 = new org.cs362.dominion.GameState(list_card47);
    java.util.List<org.cs362.dominion.Card> list_card49 = gameState48.cards;
    java.util.List<org.cs362.dominion.Card> list_card50 = gameState48.cards;
    java.util.List<org.cs362.dominion.Player> list_player51 = gameState48.players;
    java.util.List<org.cs362.dominion.Player> list_player52 = gameState48.players;
    java.util.List<org.cs362.dominion.Card> list_card53 = gameState48.cards;
    java.util.List<org.cs362.dominion.Card> list_card54 = null;
    org.cs362.dominion.GameState gameState55 = new org.cs362.dominion.GameState(list_card54);
    java.util.List<org.cs362.dominion.Card> list_card56 = gameState55.cards;
    java.util.List<org.cs362.dominion.Card> list_card57 = gameState55.cards;
    java.util.List<org.cs362.dominion.Player> list_player58 = gameState55.players;
    gameState48.players = list_player58;
    gameState5.players = list_player58;
    java.lang.String str61 = gameState5.toString();
    org.cs362.dominion.GameState gameState62 = gameState5.clone();
    org.cs362.dominion.GameState gameState63 = gameState62.clone();
    org.cs362.dominion.Card[] card_array64 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card65 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b66 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card65, card_array64);
    org.cs362.dominion.Card.CardName cardName67 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card68 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card65, cardName67);
    org.cs362.dominion.Card.CardName cardName69 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card70 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card65, cardName69);
    org.cs362.dominion.Card.Type type71 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card72 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card65, type71);
    org.cs362.dominion.Card.CardName cardName73 = null;
    org.cs362.dominion.Card card74 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card65, cardName73);
    org.cs362.dominion.Card.CardName cardName75 = org.cs362.dominion.Card.CardName.Minion;
    org.cs362.dominion.Card card76 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card65, cardName75);
    org.cs362.dominion.Card.CardName cardName77 = org.cs362.dominion.Card.CardName.Estate;
    org.cs362.dominion.Card card78 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card65, cardName77);
    org.cs362.dominion.Card[] card_array79 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card80 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b81 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card80, card_array79);
    org.cs362.dominion.Card.CardName cardName82 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card83 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card80, cardName82);
    org.cs362.dominion.Card.Type type84 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card85 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card80, type84);
    org.cs362.dominion.Card.Type type86 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card87 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card80, type86);
    java.util.List<org.cs362.dominion.Card> list_card88 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card65, type86);
    gameState63.cards = arraylist_card65;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName9.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str61.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    org.junit.Assert.assertTrue("'" + cardName67 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName67.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card68);
    org.junit.Assert.assertTrue("'" + cardName69 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName69.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card70);
    org.junit.Assert.assertTrue("'" + type71 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type71.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card74);
    org.junit.Assert.assertTrue("'" + cardName75 + "' != '" + org.cs362.dominion.Card.CardName.Minion + "'", cardName75.equals(org.cs362.dominion.Card.CardName.Minion));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card76);
    org.junit.Assert.assertTrue("'" + cardName77 + "' != '" + org.cs362.dominion.Card.CardName.Estate + "'", cardName77.equals(org.cs362.dominion.Card.CardName.Estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    org.junit.Assert.assertTrue("'" + cardName82 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName82.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card83);
    org.junit.Assert.assertTrue("'" + type84 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type84.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    org.junit.Assert.assertTrue("'" + type86 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type86.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card88);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test218"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.lang.String str5 = gameState1.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i6 = gameState1.getWinners();
    java.lang.String str7 = gameState1.toString();
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    java.util.List<org.cs362.dominion.Player> list_player13 = gameState9.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i14 = null;
    gameState9.gameBoard = hashmap_card_i14;
    java.util.List<org.cs362.dominion.Card> list_card16 = null;
    org.cs362.dominion.GameState gameState17 = new org.cs362.dominion.GameState(list_card16);
    java.util.List<org.cs362.dominion.Card> list_card18 = gameState17.cards;
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState17.cards;
    java.util.List<org.cs362.dominion.Player> list_player20 = gameState17.players;
    java.util.List<org.cs362.dominion.Card> list_card21 = gameState17.cards;
    java.util.List<org.cs362.dominion.Card> list_card22 = null;
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState(list_card22);
    java.util.List<org.cs362.dominion.Card> list_card24 = gameState23.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i25 = gameState23.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player26 = gameState23.players;
    gameState17.players = list_player26;
    gameState9.players = list_player26;
    org.cs362.dominion.Player player30 = new org.cs362.dominion.Player(gameState9, "");
    java.util.List<org.cs362.dominion.Player> list_player31 = gameState9.players;
    gameState1.players = list_player31;
    java.lang.String str33 = gameState1.toString();
    org.cs362.dominion.Card[] card_array34 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card35 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card35, card_array34);
    org.cs362.dominion.Card.CardName cardName37 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card38 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card35, cardName37);
    org.cs362.dominion.Card.CardName cardName39 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card40 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card35, cardName39);
    org.cs362.dominion.Card.Type type41 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card42 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card35, type41);
    org.cs362.dominion.Card.CardName cardName43 = null;
    org.cs362.dominion.Card card44 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card35, cardName43);
    org.cs362.dominion.Card.CardName cardName45 = org.cs362.dominion.Card.CardName.Minion;
    org.cs362.dominion.Card card46 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card35, cardName45);
    gameState1.cards = arraylist_card35;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str7.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str33.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName37.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName39.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);
    org.junit.Assert.assertTrue("'" + type41 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type41.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card44);
    org.junit.Assert.assertTrue("'" + cardName45 + "' != '" + org.cs362.dominion.Card.CardName.Minion + "'", cardName45.equals(org.cs362.dominion.Card.CardName.Minion));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card46);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test219"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    gameState7.players = list_player12;
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.List<org.cs362.dominion.Player> list_player18 = gameState7.players;
    org.cs362.dominion.Player player20 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Card card21 = null;
    player20.discard(card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player18);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test220"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    gameState7.players = list_player12;
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Card[] card_array16 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card17 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card17, card_array16);
    org.cs362.dominion.Card.CardName cardName19 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card20 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card17, cardName19);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card17, cardName21);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card17);
    gameState23.initializeGame();
    java.util.List<org.cs362.dominion.Card> list_card25 = null;
    org.cs362.dominion.GameState gameState26 = new org.cs362.dominion.GameState(list_card25);
    java.util.List<org.cs362.dominion.Card> list_card27 = gameState26.cards;
    java.util.List<org.cs362.dominion.Card> list_card28 = gameState26.cards;
    java.util.List<org.cs362.dominion.Player> list_player29 = gameState26.players;
    java.lang.String str30 = gameState26.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i31 = gameState26.getWinners();
    org.cs362.dominion.Card[] card_array32 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card33 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card33, card_array32);
    org.cs362.dominion.Card.CardName cardName35 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card36 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card33, cardName35);
    org.cs362.dominion.Card.CardName cardName37 = org.cs362.dominion.Card.CardName.Curse;
    org.cs362.dominion.Card card38 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card33, cardName37);
    gameState26.cards = arraylist_card33;
    org.cs362.dominion.GameState gameState40 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card33);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i41 = gameState40.gameBoard;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i42 = gameState40.gameBoard;
    gameState23.gameBoard = hashmap_card_i42;
    java.util.List<org.cs362.dominion.Card> list_card44 = null;
    org.cs362.dominion.GameState gameState45 = new org.cs362.dominion.GameState(list_card44);
    java.util.List<org.cs362.dominion.Card> list_card46 = gameState45.cards;
    java.util.List<org.cs362.dominion.Card> list_card47 = gameState45.cards;
    java.util.List<org.cs362.dominion.Player> list_player48 = gameState45.players;
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    org.cs362.dominion.Card.CardName cardName52 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card53 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card50, cardName52);
    org.cs362.dominion.Card.Type type54 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card55 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card50, type54);
    gameState45.cards = arraylist_card50;
    java.util.List<org.cs362.dominion.Card> list_card57 = gameState45.cards;
    java.util.List<org.cs362.dominion.Player> list_player58 = gameState45.players;
    gameState23.players = list_player58;
    gameState7.players = list_player58;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName19.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str30.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName35.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + org.cs362.dominion.Card.CardName.Curse + "'", cardName37.equals(org.cs362.dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName52.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card53);
    org.junit.Assert.assertTrue("'" + type54 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type54.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player58);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test221"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = null;
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    java.util.List<org.cs362.dominion.Card> list_card8 = gameState7.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card10 = null;
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState(list_card10);
    java.util.List<org.cs362.dominion.Card> list_card12 = gameState11.cards;
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState11.cards;
    java.util.List<org.cs362.dominion.Player> list_player14 = gameState11.players;
    java.util.List<org.cs362.dominion.Player> list_player15 = gameState11.players;
    gameState7.players = list_player15;
    gameState1.players = list_player15;
    java.util.List<org.cs362.dominion.Card> list_card18 = gameState1.cards;
    org.cs362.dominion.Player player20 = new org.cs362.dominion.Player(gameState1, " ---  ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.List<org.cs362.dominion.Player> list_player21 = null;
    gameState1.players = list_player21;
    java.lang.String str23 = gameState1.toString();
    org.cs362.dominion.Card[] card_array24 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card25 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card25, card_array24);
    org.cs362.dominion.Card.CardName cardName27 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card28 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card25, cardName27);
    org.cs362.dominion.Card.CardName cardName29 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card30 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card25, cardName29);
    org.cs362.dominion.GameState gameState31 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card25);
    org.cs362.dominion.Card[] card_array32 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card33 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card33, card_array32);
    org.cs362.dominion.Card.CardName cardName35 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card36 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card33, cardName35);
    org.cs362.dominion.Card.CardName cardName37 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card38 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card33, cardName37);
    org.cs362.dominion.GameState gameState39 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card33);
    gameState39.initializeGame();
    java.lang.String str41 = gameState39.toString();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i42 = gameState39.gameBoard;
    gameState31.gameBoard = hashmap_card_i42;
    gameState1.gameBoard = hashmap_card_i42;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str23.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName27.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName29.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName35.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName37.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str41.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i42);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test222"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card7 = gameState1.cards;
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState1, "hi!");
    java.lang.String str10 = player9.toString();
    player9.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str10.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test223"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i6 = null;
    gameState1.gameBoard = hashmap_card_i6;
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card14 = null;
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState(list_card14);
    java.util.List<org.cs362.dominion.Card> list_card16 = gameState15.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState15.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player18 = gameState15.players;
    gameState9.players = list_player18;
    gameState1.players = list_player18;
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState1, "");
    gameState1.initializeGame();
    org.cs362.dominion.Card[] card_array24 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card25 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card25, card_array24);
    org.cs362.dominion.GameState gameState27 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card25);
    java.util.List<org.cs362.dominion.Card> list_card28 = null;
    org.cs362.dominion.GameState gameState29 = new org.cs362.dominion.GameState(list_card28);
    java.util.List<org.cs362.dominion.Card> list_card30 = gameState29.cards;
    java.util.List<org.cs362.dominion.Card> list_card31 = gameState29.cards;
    java.util.List<org.cs362.dominion.Player> list_player32 = gameState29.players;
    java.lang.String str33 = gameState29.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i34 = gameState29.getWinners();
    org.cs362.dominion.Card[] card_array35 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card36 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card36, card_array35);
    org.cs362.dominion.Card.CardName cardName38 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card39 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card36, cardName38);
    org.cs362.dominion.Card.CardName cardName40 = org.cs362.dominion.Card.CardName.Curse;
    org.cs362.dominion.Card card41 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card36, cardName40);
    gameState29.cards = arraylist_card36;
    org.cs362.dominion.GameState gameState43 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card36);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i44 = gameState43.gameBoard;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i45 = gameState43.gameBoard;
    gameState27.gameBoard = hashmap_card_i45;
    gameState1.gameBoard = hashmap_card_i45;
    java.util.List<org.cs362.dominion.Card> list_card48 = gameState1.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str33.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName38.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card39);
    org.junit.Assert.assertTrue("'" + cardName40 + "' != '" + org.cs362.dominion.Card.CardName.Curse + "'", cardName40.equals(org.cs362.dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card48);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test224"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.lang.String str9 = gameState7.toString();
    gameState7.initializeGame();
    boolean b11 = gameState7.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str9.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test225"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState1, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState1.getWinners();
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.GameState gameState8 = gameState1.clone();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test226"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Player player7 = new org.cs362.dominion.Player(gameState5, "");
    player7.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test227"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Adventurer;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName8);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName10);
    java.util.List<org.cs362.dominion.Card> list_card12 = null;
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState(list_card12);
    java.util.List<org.cs362.dominion.Card> list_card14 = gameState13.cards;
    java.util.List<org.cs362.dominion.Card> list_card15 = gameState13.cards;
    java.util.List<org.cs362.dominion.Player> list_player16 = gameState13.players;
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    org.cs362.dominion.Card.CardName cardName20 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card21 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card18, cardName20);
    org.cs362.dominion.Card.Type type22 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card23 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card18, type22);
    gameState13.cards = arraylist_card18;
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState13.cards;
    org.cs362.dominion.Card[] card_array26 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card27 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card27, card_array26);
    org.cs362.dominion.Card.CardName cardName29 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card30 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card27, cardName29);
    org.cs362.dominion.Card.Type type31 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card32 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card27, type31);
    org.cs362.dominion.Card[] card_array33 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card34 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card34, card_array33);
    org.cs362.dominion.Card.CardName cardName36 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card37 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card34, cardName36);
    org.cs362.dominion.Card.Type type38 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card39 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card34, type38);
    java.util.List<org.cs362.dominion.Card> list_card40 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card32, type38);
    org.cs362.dominion.Card[] card_array41 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card42 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card42, card_array41);
    org.cs362.dominion.Card.CardName cardName44 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card45 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card42, cardName44);
    org.cs362.dominion.Card.Type type46 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card47 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card42, type46);
    org.cs362.dominion.Card.Type type48 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card49 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card42, type48);
    org.cs362.dominion.Card.Type type50 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card51 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card49, type50);
    java.util.List<org.cs362.dominion.Card> list_card52 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card40, type50);
    org.cs362.dominion.Card[] card_array53 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card54 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card54, card_array53);
    org.cs362.dominion.Card.CardName cardName56 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card57 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card54, cardName56);
    org.cs362.dominion.Card.CardName cardName58 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card59 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card54, cardName58);
    org.cs362.dominion.Card.Type type60 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card61 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card54, type60);
    java.util.List<org.cs362.dominion.Card> list_card62 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card52, type60);
    java.util.List<org.cs362.dominion.Card> list_card63 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card25, type60);
    org.cs362.dominion.Card[] card_array64 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card65 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b66 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card65, card_array64);
    org.cs362.dominion.Card.CardName cardName67 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card68 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card65, cardName67);
    org.cs362.dominion.Card.CardName cardName69 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card70 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card65, cardName69);
    org.cs362.dominion.Card.Type type71 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card72 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card65, type71);
    java.util.List<org.cs362.dominion.Card> list_card73 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card25, type71);
    java.util.List<org.cs362.dominion.Card> list_card74 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Adventurer + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName20.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type22.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName29.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type31.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName36.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type38.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName44.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card45);
    org.junit.Assert.assertTrue("'" + type46 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type46.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type48.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    org.junit.Assert.assertTrue("'" + type50 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type50.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName56.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card57);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName58.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card59);
    org.junit.Assert.assertTrue("'" + type60 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type60.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    org.junit.Assert.assertTrue("'" + cardName67 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName67.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card68);
    org.junit.Assert.assertTrue("'" + cardName69 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName69.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card70);
    org.junit.Assert.assertTrue("'" + type71 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type71.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card74);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test228"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card7 = gameState1.cards;
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState1, "hi!");
    org.cs362.dominion.Card card10 = null;
    player9.discard(card10);
    player9.playKingdomCard();
    player9.playKingdomCard();
    java.lang.String str14 = player9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str14.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test229"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card8, type12);
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type12);
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    java.util.List<org.cs362.dominion.Card> list_card18 = gameState15.cards;
    org.cs362.dominion.GameState gameState19 = gameState15.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type12.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState19);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test230"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.lang.String str9 = gameState7.toString();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    org.cs362.dominion.GameState gameState11 = gameState7.clone();
    java.util.List<org.cs362.dominion.Card> list_card12 = null;
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState(list_card12);
    java.util.List<org.cs362.dominion.Card> list_card14 = gameState13.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i15 = gameState13.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player16 = gameState13.players;
    org.cs362.dominion.Player player18 = new org.cs362.dominion.Player(gameState13, "hi!");
    java.util.List<org.cs362.dominion.Player> list_player19 = gameState13.players;
    gameState11.players = list_player19;
    java.lang.String str21 = gameState11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str9.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str21.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test231"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState1.cards;
    org.cs362.dominion.Player player7 = null;
    gameState1.addPlayer(player7);
    org.cs362.dominion.Player player10 = new org.cs362.dominion.Player(gameState1, " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Card[] card_array11 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card12, card_array11);
    org.cs362.dominion.Card.CardName cardName14 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card15 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card12, cardName14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card12, cardName16);
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card12);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState18.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState18.play();
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState18, "hi!");
    gameState1.addPlayer(player22);
    org.cs362.dominion.Player player25 = new org.cs362.dominion.Player(gameState1, "The board game is embty you need to intialize the game!!!!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test232"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card7 = null;
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card7);
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState8.cards;
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState8.cards;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState8.players;
    gameState1.players = list_player11;
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState1, "The board game is embty you need to intialize the game!!!!");
    java.util.List<org.cs362.dominion.Card> list_card15 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i16 = gameState1.gameBoard;
    java.lang.String str17 = gameState1.toString();
    org.cs362.dominion.Player player19 = new org.cs362.dominion.Player(gameState1, " ---  --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str17.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test233"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    boolean b4 = gameState3.isGameOver();
    java.util.List<org.cs362.dominion.Player> list_player5 = null;
    gameState3.players = list_player5;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test234"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.Card.Type type7 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card8 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type7);
    org.cs362.dominion.Card.CardName cardName9 = null;
    org.cs362.dominion.Card card10 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName9);
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    org.cs362.dominion.Card.CardName cardName15 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card16 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card13, cardName15);
    org.cs362.dominion.Card.CardName cardName17 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card18 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card13, cardName17);
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card13);
    boolean b20 = gameState19.isGameOver();
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState19, "");
    java.util.List<org.cs362.dominion.Player> list_player23 = gameState19.players;
    gameState11.players = list_player23;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type7.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName15.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName17.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player23);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test235"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card6 = null;
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    java.util.List<org.cs362.dominion.Card> list_card8 = gameState7.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player10 = gameState7.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    gameState5.gameBoard = hashmap_card_i11;
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card14, cardName16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card14, cardName18);
    org.cs362.dominion.GameState gameState20 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card14);
    java.util.List<org.cs362.dominion.Card> list_card21 = null;
    org.cs362.dominion.GameState gameState22 = new org.cs362.dominion.GameState(list_card21);
    java.util.List<org.cs362.dominion.Card> list_card23 = gameState22.cards;
    java.util.List<org.cs362.dominion.Card> list_card24 = gameState22.cards;
    java.util.List<org.cs362.dominion.Player> list_player25 = gameState22.players;
    gameState20.players = list_player25;
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState20, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player30 = new org.cs362.dominion.Player(gameState20, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    gameState5.addPlayer(player30);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i32 = gameState5.getWinners();
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState5, " ---  ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Card card35 = null;
    player34.discard(card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i32);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test236"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card8, type12);
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type12);
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Player> list_player16 = gameState15.players;
    java.util.List<org.cs362.dominion.Card> list_card17 = null;
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState(list_card17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState18.cards;
    java.util.List<org.cs362.dominion.Card> list_card20 = null;
    org.cs362.dominion.GameState gameState21 = new org.cs362.dominion.GameState(list_card20);
    java.util.List<org.cs362.dominion.Card> list_card22 = gameState21.cards;
    java.util.List<org.cs362.dominion.Card> list_card23 = gameState21.cards;
    java.util.List<org.cs362.dominion.Player> list_player24 = gameState21.players;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState21, "hi!");
    gameState18.addPlayer(player26);
    org.cs362.dominion.Card card28 = null;
    player26.discard(card28);
    player26.printStateGame();
    java.lang.String str31 = player26.toString();
    player26.playKingdomCard();
    player26.printStateGame();
    player26.buyCard();
    java.lang.String str35 = player26.toString();
    player26.playKingdomCard();
    gameState15.addPlayer(player26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type12.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str31.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str35.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test237"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    boolean b8 = gameState7.isGameOver();
    org.cs362.dominion.Player player10 = new org.cs362.dominion.Player(gameState7, "");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i11 = gameState7.getWinners();
    org.cs362.dominion.GameState gameState12 = gameState7.clone();
    java.lang.String str13 = gameState12.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str13.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test238"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    boolean b8 = gameState7.isGameOver();
    org.cs362.dominion.Player player10 = new org.cs362.dominion.Player(gameState7, "");
    gameState7.initializeGame();
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState7.players;
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState7, " ---  --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test239"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState6 = gameState5.clone();
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState6.players;
    java.util.List<org.cs362.dominion.Card> list_card8 = gameState6.cards;
    org.cs362.dominion.Card[] card_array9 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card10 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card10, card_array9);
    org.cs362.dominion.Card.CardName cardName12 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card13 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card10, cardName12);
    org.cs362.dominion.Card.CardName cardName14 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card15 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card10, cardName14);
    org.cs362.dominion.Card.Type type16 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card17 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card10, type16);
    org.cs362.dominion.Card.CardName cardName18 = null;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card10, cardName18);
    org.cs362.dominion.Card.CardName cardName20 = org.cs362.dominion.Card.CardName.Minion;
    org.cs362.dominion.Card card21 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card10, cardName20);
    org.cs362.dominion.Card.CardName cardName22 = org.cs362.dominion.Card.CardName.Estate;
    org.cs362.dominion.Card card23 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card10, cardName22);
    org.cs362.dominion.Card[] card_array24 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card25 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card25, card_array24);
    org.cs362.dominion.Card.CardName cardName27 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card28 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card25, cardName27);
    org.cs362.dominion.Card.Type type29 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card30 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card25, type29);
    java.util.List<org.cs362.dominion.Card> list_card31 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card10, type29);
    org.cs362.dominion.Card[] card_array32 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card33 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card33, card_array32);
    org.cs362.dominion.Card.CardName cardName35 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card36 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card33, cardName35);
    org.cs362.dominion.Card.Type type37 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card38 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card33, type37);
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card43 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card.Type type44 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card45 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card40, type44);
    java.util.List<org.cs362.dominion.Card> list_card46 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card33, type44);
    java.util.List<org.cs362.dominion.Card> list_card47 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card31, type44);
    java.util.List<org.cs362.dominion.Card> list_card48 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card8, type44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName12.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type16.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + org.cs362.dominion.Card.CardName.Minion + "'", cardName20.equals(org.cs362.dominion.Card.CardName.Minion));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + org.cs362.dominion.Card.CardName.Estate + "'", cardName22.equals(org.cs362.dominion.Card.CardName.Estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName27.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type29.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName35.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type37.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card43);
    org.junit.Assert.assertTrue("'" + type44 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type44.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test240"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.lang.String str5 = gameState1.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i6 = gameState1.getWinners();
    java.lang.String str7 = gameState1.toString();
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState1, "The board game is embty you need to intialize the game!!!!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str7.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test241"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i5 = gameState1.gameBoard;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState1.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test242"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card.Type type10 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card11 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card6, type10);
    gameState1.cards = arraylist_card6;
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState1.cards;
    org.cs362.dominion.Card[] card_array14 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card15 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card15, card_array14);
    org.cs362.dominion.Card.CardName cardName17 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card18 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card15, cardName17);
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard(list_card13, cardName17);
    org.cs362.dominion.GameState gameState20 = new org.cs362.dominion.GameState(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type10.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName17.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test243"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.Card.Type type7 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card8 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type7);
    org.cs362.dominion.Card.CardName cardName9 = null;
    org.cs362.dominion.Card card10 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName9);
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState12 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type7.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test244"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState1, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState1.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test245"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.Card.CardName cardName9 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card10 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName9);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card12 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName11);
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card7);
    boolean b14 = gameState13.isGameOver();
    org.cs362.dominion.Player player16 = new org.cs362.dominion.Player(gameState13, "");
    java.util.List<org.cs362.dominion.Card> list_card17 = null;
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState(list_card17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState18.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState18.getWinners();
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState18, "");
    java.util.List<org.cs362.dominion.Card> list_card23 = null;
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState(list_card23);
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState24.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i26 = gameState24.getWinners();
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState24, "");
    java.util.List<org.cs362.dominion.Card> list_card29 = null;
    org.cs362.dominion.GameState gameState30 = new org.cs362.dominion.GameState(list_card29);
    java.util.List<org.cs362.dominion.Card> list_card31 = gameState30.cards;
    java.util.List<org.cs362.dominion.Card> list_card32 = null;
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState(list_card32);
    java.util.List<org.cs362.dominion.Card> list_card34 = gameState33.cards;
    java.util.List<org.cs362.dominion.Card> list_card35 = gameState33.cards;
    java.util.List<org.cs362.dominion.Player> list_player36 = gameState33.players;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState33, "hi!");
    gameState30.addPlayer(player38);
    org.cs362.dominion.Card card40 = null;
    player38.discard(card40);
    player38.printStateGame();
    org.cs362.dominion.Player[] player_array43 = new org.cs362.dominion.Player[] { player16, player22, player28, player38 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player44 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player44, player_array43);
    gameState5.players = arraylist_player44;
    java.util.List<org.cs362.dominion.Card> list_card47 = null;
    org.cs362.dominion.GameState gameState48 = new org.cs362.dominion.GameState(list_card47);
    java.util.List<org.cs362.dominion.Card> list_card49 = gameState48.cards;
    java.util.List<org.cs362.dominion.Card> list_card50 = gameState48.cards;
    java.util.List<org.cs362.dominion.Player> list_player51 = gameState48.players;
    java.util.List<org.cs362.dominion.Player> list_player52 = gameState48.players;
    java.util.List<org.cs362.dominion.Card> list_card53 = gameState48.cards;
    java.util.List<org.cs362.dominion.Card> list_card54 = null;
    org.cs362.dominion.GameState gameState55 = new org.cs362.dominion.GameState(list_card54);
    java.util.List<org.cs362.dominion.Card> list_card56 = gameState55.cards;
    java.util.List<org.cs362.dominion.Card> list_card57 = gameState55.cards;
    java.util.List<org.cs362.dominion.Player> list_player58 = gameState55.players;
    gameState48.players = list_player58;
    gameState5.players = list_player58;
    java.lang.String str61 = gameState5.toString();
    java.util.List<org.cs362.dominion.Player> list_player62 = gameState5.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName9.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str61.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player62);

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test246"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    gameState7.players = list_player12;
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.lang.String str18 = gameState7.toString();
    java.util.List<org.cs362.dominion.Card> list_card19 = null;
    org.cs362.dominion.GameState gameState20 = new org.cs362.dominion.GameState(list_card19);
    java.util.List<org.cs362.dominion.Card> list_card21 = gameState20.cards;
    java.util.List<org.cs362.dominion.Card> list_card22 = gameState20.cards;
    java.util.List<org.cs362.dominion.Player> list_player23 = gameState20.players;
    java.lang.String str24 = gameState20.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i25 = gameState20.getWinners();
    org.cs362.dominion.Card[] card_array26 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card27 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card27, card_array26);
    org.cs362.dominion.Card.CardName cardName29 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card30 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card27, cardName29);
    org.cs362.dominion.Card.CardName cardName31 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card32 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card27, cardName31);
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card27);
    java.util.List<org.cs362.dominion.Card> list_card34 = null;
    org.cs362.dominion.GameState gameState35 = new org.cs362.dominion.GameState(list_card34);
    java.util.List<org.cs362.dominion.Card> list_card36 = gameState35.cards;
    java.util.List<org.cs362.dominion.Card> list_card37 = gameState35.cards;
    java.util.List<org.cs362.dominion.Player> list_player38 = gameState35.players;
    gameState33.players = list_player38;
    org.cs362.dominion.Player player41 = new org.cs362.dominion.Player(gameState33, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player43 = new org.cs362.dominion.Player(gameState33, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.List<org.cs362.dominion.Player> list_player44 = gameState33.players;
    gameState20.players = list_player44;
    gameState7.players = list_player44;
    org.cs362.dominion.GameState gameState47 = gameState7.clone();
    org.cs362.dominion.Player player49 = new org.cs362.dominion.Player(gameState47, " --- The board game is embty you need to intialize the game!!!! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str18.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str24.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName29.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName31.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState47);

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test247"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.lang.String str2 = gameState1.toString();
    org.cs362.dominion.Card[] card_array3 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card4 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card4, card_array3);
    org.cs362.dominion.Card.CardName cardName6 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card7 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card4, cardName6);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card4, cardName8);
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card4);
    java.util.List<org.cs362.dominion.Card> list_card11 = null;
    org.cs362.dominion.GameState gameState12 = new org.cs362.dominion.GameState(list_card11);
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState12.cards;
    java.util.List<org.cs362.dominion.Card> list_card14 = gameState12.cards;
    java.util.List<org.cs362.dominion.Player> list_player15 = gameState12.players;
    gameState10.players = list_player15;
    org.cs362.dominion.Player player18 = new org.cs362.dominion.Player(gameState10, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player20 = new org.cs362.dominion.Player(gameState10, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.lang.String str21 = gameState10.toString();
    java.util.List<org.cs362.dominion.Card> list_card22 = null;
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState(list_card22);
    java.util.List<org.cs362.dominion.Card> list_card24 = gameState23.cards;
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState23.cards;
    java.util.List<org.cs362.dominion.Player> list_player26 = gameState23.players;
    java.lang.String str27 = gameState23.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i28 = gameState23.getWinners();
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    org.cs362.dominion.Card.CardName cardName32 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card33 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card30, cardName32);
    org.cs362.dominion.Card.CardName cardName34 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card35 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card30, cardName34);
    org.cs362.dominion.GameState gameState36 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card30);
    java.util.List<org.cs362.dominion.Card> list_card37 = null;
    org.cs362.dominion.GameState gameState38 = new org.cs362.dominion.GameState(list_card37);
    java.util.List<org.cs362.dominion.Card> list_card39 = gameState38.cards;
    java.util.List<org.cs362.dominion.Card> list_card40 = gameState38.cards;
    java.util.List<org.cs362.dominion.Player> list_player41 = gameState38.players;
    gameState36.players = list_player41;
    org.cs362.dominion.Player player44 = new org.cs362.dominion.Player(gameState36, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player46 = new org.cs362.dominion.Player(gameState36, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.List<org.cs362.dominion.Player> list_player47 = gameState36.players;
    gameState23.players = list_player47;
    gameState10.players = list_player47;
    org.cs362.dominion.GameState gameState50 = gameState10.clone();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i51 = gameState10.gameBoard;
    gameState1.gameBoard = hashmap_card_i51;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str2.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    org.junit.Assert.assertTrue("'" + cardName6 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName6.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card7);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str21.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str27.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName32.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName34.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i51);

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test248"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = null;
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    java.util.List<org.cs362.dominion.Card> list_card8 = gameState7.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card10 = null;
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState(list_card10);
    java.util.List<org.cs362.dominion.Card> list_card12 = gameState11.cards;
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState11.cards;
    java.util.List<org.cs362.dominion.Player> list_player14 = gameState11.players;
    java.util.List<org.cs362.dominion.Player> list_player15 = gameState11.players;
    gameState7.players = list_player15;
    gameState1.players = list_player15;
    java.util.List<org.cs362.dominion.Card> list_card18 = gameState1.cards;
    java.lang.String str19 = gameState1.toString();
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.Card.CardName cardName23 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card24 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card21, cardName23);
    org.cs362.dominion.Card.CardName cardName25 = org.cs362.dominion.Card.CardName.Curse;
    org.cs362.dominion.Card card26 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card21, cardName25);
    org.cs362.dominion.GameState gameState27 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    boolean b28 = gameState27.isGameOver();
    org.cs362.dominion.Player player30 = new org.cs362.dominion.Player(gameState27, "");
    java.util.List<org.cs362.dominion.Card> list_card31 = null;
    org.cs362.dominion.GameState gameState32 = new org.cs362.dominion.GameState(list_card31);
    java.util.List<org.cs362.dominion.Card> list_card33 = gameState32.cards;
    java.util.List<org.cs362.dominion.Card> list_card34 = gameState32.cards;
    java.util.List<org.cs362.dominion.Player> list_player35 = gameState32.players;
    java.lang.String str36 = gameState32.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i37 = gameState32.getWinners();
    gameState32.initializeGame();
    java.util.List<org.cs362.dominion.Player> list_player39 = gameState32.players;
    org.cs362.dominion.Card[] card_array40 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card41 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card41, card_array40);
    org.cs362.dominion.Card.CardName cardName43 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card44 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card41, cardName43);
    org.cs362.dominion.Card.CardName cardName45 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card46 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card41, cardName45);
    org.cs362.dominion.Card.Type type47 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card48 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card41, type47);
    gameState32.cards = list_card48;
    gameState27.cards = list_card48;
    gameState1.cards = list_card48;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str19.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName23.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + org.cs362.dominion.Card.CardName.Curse + "'", cardName25.equals(org.cs362.dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str36.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    org.junit.Assert.assertTrue("'" + cardName43 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName43.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card44);
    org.junit.Assert.assertTrue("'" + cardName45 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName45.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card46);
    org.junit.Assert.assertTrue("'" + type47 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type47.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test249"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card.Type type7 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card8 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type7);
    org.cs362.dominion.Card.Type type9 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card10 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card8, type9);
    org.cs362.dominion.Card[] card_array11 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card12, card_array11);
    org.cs362.dominion.Card.CardName cardName14 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card15 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card12, cardName14);
    org.cs362.dominion.Card.Type type16 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card17 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card12, type16);
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card19, cardName21);
    org.cs362.dominion.Card.Type type23 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card24 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card19, type23);
    java.util.List<org.cs362.dominion.Card> list_card25 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card17, type23);
    java.util.List<org.cs362.dominion.Card> list_card26 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card10, type23);
    org.cs362.dominion.GameState gameState27 = new org.cs362.dominion.GameState(list_card26);
    org.cs362.dominion.Card[] card_array28 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card29, card_array28);
    org.cs362.dominion.Card.CardName cardName31 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card32 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card29, cardName31);
    org.cs362.dominion.Card.Type type33 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card34 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card29, type33);
    org.cs362.dominion.Card.Type type35 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card36 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card29, type35);
    org.cs362.dominion.Card.Type type37 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card38 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card36, type37);
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card43 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card.Type type44 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card45 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card40, type44);
    org.cs362.dominion.Card[] card_array46 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card47 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card47, card_array46);
    org.cs362.dominion.Card.CardName cardName49 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card50 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card47, cardName49);
    org.cs362.dominion.Card.Type type51 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card52 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card47, type51);
    java.util.List<org.cs362.dominion.Card> list_card53 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card45, type51);
    java.util.List<org.cs362.dominion.Card> list_card54 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card38, type51);
    java.util.List<org.cs362.dominion.Card> list_card55 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card26, type51);
    org.cs362.dominion.GameState gameState56 = new org.cs362.dominion.GameState(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type7.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type9.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type16.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type23.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName31.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type33.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type35.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type37.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card43);
    org.junit.Assert.assertTrue("'" + type44 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type44.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    org.junit.Assert.assertTrue("'" + cardName49 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName49.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card50);
    org.junit.Assert.assertTrue("'" + type51 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type51.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card55);

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test250"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName10);
    org.cs362.dominion.GameState gameState12 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card6);
    boolean b13 = gameState12.isGameOver();
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState12, "");
    java.util.List<org.cs362.dominion.Player> list_player16 = gameState12.players;
    gameState1.players = list_player16;
    java.lang.String str18 = gameState1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str18.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test251"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Curse;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    boolean b8 = gameState7.isGameOver();
    org.cs362.dominion.Player player10 = new org.cs362.dominion.Player(gameState7, "");
    java.util.List<org.cs362.dominion.Card> list_card11 = null;
    org.cs362.dominion.GameState gameState12 = new org.cs362.dominion.GameState(list_card11);
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState12.cards;
    java.util.List<org.cs362.dominion.Card> list_card14 = gameState12.cards;
    java.util.List<org.cs362.dominion.Player> list_player15 = gameState12.players;
    java.lang.String str16 = gameState12.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState12.getWinners();
    gameState12.initializeGame();
    java.util.List<org.cs362.dominion.Player> list_player19 = gameState12.players;
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.Card.CardName cardName23 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card24 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card21, cardName23);
    org.cs362.dominion.Card.CardName cardName25 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card26 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card21, cardName25);
    org.cs362.dominion.Card.Type type27 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card28 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card21, type27);
    gameState12.cards = list_card28;
    gameState7.cards = list_card28;
    org.cs362.dominion.GameState gameState31 = new org.cs362.dominion.GameState(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Curse + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str16.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName23.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName25.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type27.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test252"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState1, "hi!");
    java.util.List<org.cs362.dominion.Card> list_card7 = null;
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card7);
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState8.cards;
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState8.cards;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState8.players;
    java.util.List<org.cs362.dominion.Card> list_card12 = gameState8.cards;
    java.util.List<org.cs362.dominion.Card> list_card13 = null;
    org.cs362.dominion.GameState gameState14 = new org.cs362.dominion.GameState(list_card13);
    java.util.List<org.cs362.dominion.Card> list_card15 = gameState14.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i16 = gameState14.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player17 = gameState14.players;
    gameState8.players = list_player17;
    gameState1.players = list_player17;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player17);

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test253"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card8, type12);
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type12);
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState(list_card14);
    java.util.List<org.cs362.dominion.Player> list_player16 = gameState15.players;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState15.play();
    java.lang.String str18 = gameState15.toString();
    org.cs362.dominion.Player player20 = new org.cs362.dominion.Player(gameState15, "The board game is embty you need to intialize the game!!!!");
    player20.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type12.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str18.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test254"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i3 = null;
    gameState1.gameBoard = hashmap_card_i3;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i5 = gameState1.getWinners();
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.Card.CardName cardName9 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card10 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName9);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card12 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName11);
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card7);
    java.util.List<org.cs362.dominion.Card> list_card14 = null;
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState(list_card14);
    java.util.List<org.cs362.dominion.Card> list_card16 = gameState15.cards;
    java.util.List<org.cs362.dominion.Card> list_card17 = gameState15.cards;
    java.util.List<org.cs362.dominion.Player> list_player18 = gameState15.players;
    gameState13.players = list_player18;
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState13, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player23 = new org.cs362.dominion.Player(gameState13, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.lang.String str24 = gameState13.toString();
    java.util.List<org.cs362.dominion.Card> list_card25 = null;
    org.cs362.dominion.GameState gameState26 = new org.cs362.dominion.GameState(list_card25);
    java.util.List<org.cs362.dominion.Card> list_card27 = gameState26.cards;
    java.util.List<org.cs362.dominion.Card> list_card28 = gameState26.cards;
    java.util.List<org.cs362.dominion.Player> list_player29 = gameState26.players;
    java.lang.String str30 = gameState26.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i31 = gameState26.getWinners();
    org.cs362.dominion.Card[] card_array32 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card33 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card33, card_array32);
    org.cs362.dominion.Card.CardName cardName35 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card36 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card33, cardName35);
    org.cs362.dominion.Card.CardName cardName37 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card38 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card33, cardName37);
    org.cs362.dominion.GameState gameState39 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card33);
    java.util.List<org.cs362.dominion.Card> list_card40 = null;
    org.cs362.dominion.GameState gameState41 = new org.cs362.dominion.GameState(list_card40);
    java.util.List<org.cs362.dominion.Card> list_card42 = gameState41.cards;
    java.util.List<org.cs362.dominion.Card> list_card43 = gameState41.cards;
    java.util.List<org.cs362.dominion.Player> list_player44 = gameState41.players;
    gameState39.players = list_player44;
    org.cs362.dominion.Player player47 = new org.cs362.dominion.Player(gameState39, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player49 = new org.cs362.dominion.Player(gameState39, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.List<org.cs362.dominion.Player> list_player50 = gameState39.players;
    gameState26.players = list_player50;
    gameState13.players = list_player50;
    org.cs362.dominion.GameState gameState53 = gameState13.clone();
    java.util.List<org.cs362.dominion.Card> list_card54 = null;
    org.cs362.dominion.GameState gameState55 = new org.cs362.dominion.GameState(list_card54);
    java.util.List<org.cs362.dominion.Card> list_card56 = gameState55.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i57 = gameState55.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card58 = null;
    org.cs362.dominion.GameState gameState59 = new org.cs362.dominion.GameState(list_card58);
    java.util.List<org.cs362.dominion.Card> list_card60 = gameState59.cards;
    java.util.List<org.cs362.dominion.Card> list_card61 = gameState59.cards;
    java.util.List<org.cs362.dominion.Player> list_player62 = gameState59.players;
    java.util.List<org.cs362.dominion.Player> list_player63 = gameState59.players;
    gameState55.players = list_player63;
    java.util.List<org.cs362.dominion.Card> list_card65 = null;
    org.cs362.dominion.GameState gameState66 = new org.cs362.dominion.GameState(list_card65);
    java.util.List<org.cs362.dominion.Card> list_card67 = gameState66.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i68 = gameState66.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player69 = gameState66.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i70 = gameState66.gameBoard;
    gameState55.gameBoard = hashmap_card_i70;
    gameState53.gameBoard = hashmap_card_i70;
    gameState1.gameBoard = hashmap_card_i70;
    java.lang.String str74 = gameState1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName9.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str24.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str30.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName35.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName37.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str74.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test255"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card8, type12);
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card6, type12);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card16, cardName18);
    org.cs362.dominion.Card.Type type20 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card21 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card16, type20);
    org.cs362.dominion.Card.Type type22 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card23 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card16, type22);
    org.cs362.dominion.Card.Type type24 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card25 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card23, type24);
    java.util.List<org.cs362.dominion.Card> list_card26 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card14, type24);
    org.cs362.dominion.Card[] card_array27 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card28 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card28, card_array27);
    org.cs362.dominion.Card.CardName cardName30 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card31 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card28, cardName30);
    org.cs362.dominion.Card.CardName cardName32 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card33 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card28, cardName32);
    org.cs362.dominion.Card.Type type34 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card35 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card28, type34);
    java.util.List<org.cs362.dominion.Card> list_card36 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card26, type34);
    org.cs362.dominion.GameState gameState37 = new org.cs362.dominion.GameState(list_card26);
    org.cs362.dominion.Card[] card_array38 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card39, card_array38);
    org.cs362.dominion.Card.CardName cardName41 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card42 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card39, cardName41);
    org.cs362.dominion.Card.Type type43 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card44 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card39, type43);
    org.cs362.dominion.Card.CardName cardName45 = org.cs362.dominion.Card.CardName.Mine;
    org.cs362.dominion.Card card46 = org.cs362.dominion.Card.getCard(list_card44, cardName45);
    org.cs362.dominion.Card card47 = org.cs362.dominion.Card.getCard(list_card26, cardName45);
    org.cs362.dominion.GameState gameState48 = new org.cs362.dominion.GameState(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type12.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type20.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type22.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type24.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName30.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName32.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type34.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    org.junit.Assert.assertTrue("'" + cardName41 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName41.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card42);
    org.junit.Assert.assertTrue("'" + type43 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type43.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    org.junit.Assert.assertTrue("'" + cardName45 + "' != '" + org.cs362.dominion.Card.CardName.Mine + "'", cardName45.equals(org.cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card47);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test256"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card8, type12);
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type12);
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState(list_card14);
    java.util.List<org.cs362.dominion.Player> list_player16 = gameState15.players;
    org.cs362.dominion.GameState gameState17 = gameState15.clone();
    org.cs362.dominion.Player player19 = new org.cs362.dominion.Player(gameState15, "The board game is embty you need to intialize the game!!!!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type12.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test257"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState1, "hi!");
    org.cs362.dominion.Card card7 = null;
    player6.discard(card7);
    org.cs362.dominion.Card card9 = null;
    player6.discard(card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test258"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    gameState7.players = list_player12;
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    player15.printStateGame();
    org.cs362.dominion.Card card17 = null;
    player15.discard(card17);
    player15.printStateGame();
    player15.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test259"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card8, type12);
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card6, type12);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card16, cardName18);
    org.cs362.dominion.Card.Type type20 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card21 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card16, type20);
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    org.cs362.dominion.Card.CardName cardName25 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card26 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card23, cardName25);
    org.cs362.dominion.Card.Type type27 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card28 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card23, type27);
    java.util.List<org.cs362.dominion.Card> list_card29 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card21, type27);
    org.cs362.dominion.Card[] card_array30 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card31 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card31, card_array30);
    org.cs362.dominion.Card.CardName cardName33 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card34 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card31, cardName33);
    org.cs362.dominion.Card.Type type35 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card36 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card31, type35);
    org.cs362.dominion.Card.Type type37 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card38 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card31, type37);
    org.cs362.dominion.Card.Type type39 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card40 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card38, type39);
    java.util.List<org.cs362.dominion.Card> list_card41 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card29, type39);
    java.util.List<org.cs362.dominion.Card> list_card42 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card14, type39);
    org.cs362.dominion.GameState gameState43 = new org.cs362.dominion.GameState(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type12.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type20.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName25.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type27.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName33.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type35.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type37.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type39.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test260"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card8, type12);
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type12);
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    java.util.List<org.cs362.dominion.Card> list_card18 = null;
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState(list_card18);
    java.util.List<org.cs362.dominion.Card> list_card20 = gameState19.cards;
    java.util.List<org.cs362.dominion.Card> list_card21 = gameState19.cards;
    java.util.List<org.cs362.dominion.Player> list_player22 = gameState19.players;
    java.util.List<org.cs362.dominion.Player> list_player23 = gameState19.players;
    java.util.List<org.cs362.dominion.Card> list_card24 = gameState19.cards;
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState19.cards;
    org.cs362.dominion.Player player27 = new org.cs362.dominion.Player(gameState19, "hi!");
    java.lang.String str28 = player27.toString();
    gameState15.addPlayer(player27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type12.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str28.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test261"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = null;
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState(list_card3);
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState4.cards;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState4.cards;
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState4.players;
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState4, "hi!");
    gameState1.addPlayer(player9);
    org.cs362.dominion.Card card11 = null;
    player9.discard(card11);
    player9.printStateGame();
    player9.playKingdomCard();
    org.cs362.dominion.Card card15 = null;
    player9.discard(card15);
    player9.printStateGame();
    player9.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test262"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.Card.CardName cardName9 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card10 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName9);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card12 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName11);
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card7);
    boolean b14 = gameState13.isGameOver();
    org.cs362.dominion.Player player16 = new org.cs362.dominion.Player(gameState13, "");
    java.util.List<org.cs362.dominion.Card> list_card17 = null;
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState(list_card17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState18.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState18.getWinners();
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState18, "");
    java.util.List<org.cs362.dominion.Card> list_card23 = null;
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState(list_card23);
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState24.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i26 = gameState24.getWinners();
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState24, "");
    java.util.List<org.cs362.dominion.Card> list_card29 = null;
    org.cs362.dominion.GameState gameState30 = new org.cs362.dominion.GameState(list_card29);
    java.util.List<org.cs362.dominion.Card> list_card31 = gameState30.cards;
    java.util.List<org.cs362.dominion.Card> list_card32 = null;
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState(list_card32);
    java.util.List<org.cs362.dominion.Card> list_card34 = gameState33.cards;
    java.util.List<org.cs362.dominion.Card> list_card35 = gameState33.cards;
    java.util.List<org.cs362.dominion.Player> list_player36 = gameState33.players;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState33, "hi!");
    gameState30.addPlayer(player38);
    org.cs362.dominion.Card card40 = null;
    player38.discard(card40);
    player38.printStateGame();
    org.cs362.dominion.Player[] player_array43 = new org.cs362.dominion.Player[] { player16, player22, player28, player38 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player44 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player44, player_array43);
    gameState5.players = arraylist_player44;
    java.util.List<org.cs362.dominion.Card> list_card47 = null;
    org.cs362.dominion.GameState gameState48 = new org.cs362.dominion.GameState(list_card47);
    java.util.List<org.cs362.dominion.Card> list_card49 = gameState48.cards;
    java.util.List<org.cs362.dominion.Card> list_card50 = gameState48.cards;
    java.util.List<org.cs362.dominion.Player> list_player51 = gameState48.players;
    java.util.List<org.cs362.dominion.Player> list_player52 = gameState48.players;
    java.util.List<org.cs362.dominion.Card> list_card53 = gameState48.cards;
    java.util.List<org.cs362.dominion.Card> list_card54 = null;
    org.cs362.dominion.GameState gameState55 = new org.cs362.dominion.GameState(list_card54);
    java.util.List<org.cs362.dominion.Card> list_card56 = gameState55.cards;
    java.util.List<org.cs362.dominion.Card> list_card57 = gameState55.cards;
    java.util.List<org.cs362.dominion.Player> list_player58 = gameState55.players;
    gameState48.players = list_player58;
    gameState5.players = list_player58;
    java.lang.String str61 = gameState5.toString();
    org.cs362.dominion.GameState gameState62 = gameState5.clone();
    org.cs362.dominion.GameState gameState63 = gameState62.clone();
    java.util.List<org.cs362.dominion.Card> list_card64 = null;
    org.cs362.dominion.GameState gameState65 = new org.cs362.dominion.GameState(list_card64);
    java.util.List<org.cs362.dominion.Card> list_card66 = gameState65.cards;
    java.util.List<org.cs362.dominion.Card> list_card67 = gameState65.cards;
    java.util.List<org.cs362.dominion.Player> list_player68 = gameState65.players;
    org.cs362.dominion.Player player70 = new org.cs362.dominion.Player(gameState65, "hi!");
    org.cs362.dominion.Card card71 = null;
    player70.discard(card71);
    player70.printStateGame();
    gameState63.addPlayer(player70);
    org.cs362.dominion.Card[] card_array75 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card76 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b77 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card76, card_array75);
    org.cs362.dominion.Card.CardName cardName78 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card79 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card76, cardName78);
    org.cs362.dominion.Card.CardName cardName80 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card81 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card76, cardName80);
    org.cs362.dominion.GameState gameState82 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card76);
    org.cs362.dominion.Card[] card_array83 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card84 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b85 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card84, card_array83);
    org.cs362.dominion.Card.CardName cardName86 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card87 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card84, cardName86);
    org.cs362.dominion.Card.CardName cardName88 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card89 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card84, cardName88);
    org.cs362.dominion.GameState gameState90 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card84);
    gameState90.initializeGame();
    java.lang.String str92 = gameState90.toString();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i93 = gameState90.gameBoard;
    gameState82.gameBoard = hashmap_card_i93;
    gameState63.gameBoard = hashmap_card_i93;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName9.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str61.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    org.junit.Assert.assertTrue("'" + cardName78 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName78.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card79);
    org.junit.Assert.assertTrue("'" + cardName80 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName80.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    org.junit.Assert.assertTrue("'" + cardName86 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName86.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card87);
    org.junit.Assert.assertTrue("'" + cardName88 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName88.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str92 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str92.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i93);

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test263"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i6 = null;
    gameState1.gameBoard = hashmap_card_i6;
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card14 = null;
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState(list_card14);
    java.util.List<org.cs362.dominion.Card> list_card16 = gameState15.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState15.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player18 = gameState15.players;
    gameState9.players = list_player18;
    gameState1.players = list_player18;
    java.util.List<org.cs362.dominion.Player> list_player21 = gameState1.players;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i22 = gameState1.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i22);

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test264"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card6 = null;
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    java.util.List<org.cs362.dominion.Card> list_card8 = gameState7.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player10 = gameState7.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i11 = gameState7.gameBoard;
    gameState5.gameBoard = hashmap_card_i11;
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card14, cardName16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card14, cardName18);
    org.cs362.dominion.GameState gameState20 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card14);
    java.util.List<org.cs362.dominion.Card> list_card21 = null;
    org.cs362.dominion.GameState gameState22 = new org.cs362.dominion.GameState(list_card21);
    java.util.List<org.cs362.dominion.Card> list_card23 = gameState22.cards;
    java.util.List<org.cs362.dominion.Card> list_card24 = gameState22.cards;
    java.util.List<org.cs362.dominion.Player> list_player25 = gameState22.players;
    gameState20.players = list_player25;
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState20, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player30 = new org.cs362.dominion.Player(gameState20, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    gameState5.addPlayer(player30);
    player30.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player25);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test265"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.Card.CardName cardName9 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card10 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName9);
    org.cs362.dominion.Card.Type type11 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card12 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card7, type11);
    org.cs362.dominion.Card.Type type13 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card7, type13);
    org.cs362.dominion.Card.Type type15 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card16 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card14, type15);
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    org.cs362.dominion.Card.CardName cardName20 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card21 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card18, cardName20);
    org.cs362.dominion.Card.Type type22 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card23 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card18, type22);
    org.cs362.dominion.Card[] card_array24 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card25 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card25, card_array24);
    org.cs362.dominion.Card.CardName cardName27 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card28 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card25, cardName27);
    org.cs362.dominion.Card.Type type29 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card30 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card25, type29);
    java.util.List<org.cs362.dominion.Card> list_card31 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card23, type29);
    java.util.List<org.cs362.dominion.Card> list_card32 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card16, type29);
    gameState5.cards = list_card32;
    gameState5.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName9.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    org.junit.Assert.assertTrue("'" + type11 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type11.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type13.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type15.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName20.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type22.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName27.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type29.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test266"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card8, type12);
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type12);
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState(list_card14);
    java.util.List<org.cs362.dominion.Player> list_player16 = gameState15.players;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState15.play();
    java.util.List<org.cs362.dominion.Card> list_card18 = null;
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState(list_card18);
    java.util.List<org.cs362.dominion.Card> list_card20 = gameState19.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState19.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card22 = null;
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState(list_card22);
    java.util.List<org.cs362.dominion.Card> list_card24 = gameState23.cards;
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState23.cards;
    java.util.List<org.cs362.dominion.Player> list_player26 = gameState23.players;
    java.util.List<org.cs362.dominion.Player> list_player27 = gameState23.players;
    gameState19.players = list_player27;
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    org.cs362.dominion.Card.CardName cardName32 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card33 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card30, cardName32);
    org.cs362.dominion.Card.CardName cardName34 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card35 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card30, cardName34);
    org.cs362.dominion.GameState gameState36 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card30);
    java.util.List<org.cs362.dominion.Card> list_card37 = null;
    org.cs362.dominion.GameState gameState38 = new org.cs362.dominion.GameState(list_card37);
    java.util.List<org.cs362.dominion.Card> list_card39 = gameState38.cards;
    java.util.List<org.cs362.dominion.Card> list_card40 = gameState38.cards;
    java.util.List<org.cs362.dominion.Player> list_player41 = gameState38.players;
    gameState36.players = list_player41;
    org.cs362.dominion.Player player44 = new org.cs362.dominion.Player(gameState36, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player46 = new org.cs362.dominion.Player(gameState36, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.lang.String str47 = gameState36.toString();
    java.util.List<org.cs362.dominion.Card> list_card48 = null;
    org.cs362.dominion.GameState gameState49 = new org.cs362.dominion.GameState(list_card48);
    java.util.List<org.cs362.dominion.Card> list_card50 = gameState49.cards;
    java.util.List<org.cs362.dominion.Card> list_card51 = gameState49.cards;
    java.util.List<org.cs362.dominion.Player> list_player52 = gameState49.players;
    java.lang.String str53 = gameState49.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i54 = gameState49.getWinners();
    org.cs362.dominion.Card[] card_array55 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card56 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card56, card_array55);
    org.cs362.dominion.Card.CardName cardName58 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card59 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card56, cardName58);
    org.cs362.dominion.Card.CardName cardName60 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card61 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card56, cardName60);
    org.cs362.dominion.GameState gameState62 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card56);
    java.util.List<org.cs362.dominion.Card> list_card63 = null;
    org.cs362.dominion.GameState gameState64 = new org.cs362.dominion.GameState(list_card63);
    java.util.List<org.cs362.dominion.Card> list_card65 = gameState64.cards;
    java.util.List<org.cs362.dominion.Card> list_card66 = gameState64.cards;
    java.util.List<org.cs362.dominion.Player> list_player67 = gameState64.players;
    gameState62.players = list_player67;
    org.cs362.dominion.Player player70 = new org.cs362.dominion.Player(gameState62, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player72 = new org.cs362.dominion.Player(gameState62, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.List<org.cs362.dominion.Player> list_player73 = gameState62.players;
    gameState49.players = list_player73;
    gameState36.players = list_player73;
    gameState19.players = list_player73;
    gameState15.players = list_player73;
    org.cs362.dominion.GameState gameState78 = gameState15.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type12.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName32.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName34.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str47.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str53.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName58.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card59);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName60.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState78);

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test267"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card.CardName cardName7 = org.cs362.dominion.Card.CardName.Mine;
    org.cs362.dominion.Card card8 = org.cs362.dominion.Card.getCard(list_card6, cardName7);
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card6);
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + org.cs362.dominion.Card.CardName.Mine + "'", cardName7.equals(org.cs362.dominion.Card.CardName.Mine));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test268"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.lang.String str5 = gameState1.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i6 = gameState1.getWinners();
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card.CardName cardName12 = org.cs362.dominion.Card.CardName.Curse;
    org.cs362.dominion.Card card13 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName12);
    gameState1.cards = arraylist_card8;
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card8);
    org.cs362.dominion.GameState gameState16 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + org.cs362.dominion.Card.CardName.Curse + "'", cardName12.equals(org.cs362.dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test269"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.Card.CardName cardName9 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card10 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName9);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card12 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName11);
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card7);
    boolean b14 = gameState13.isGameOver();
    org.cs362.dominion.Player player16 = new org.cs362.dominion.Player(gameState13, "");
    java.util.List<org.cs362.dominion.Card> list_card17 = null;
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState(list_card17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState18.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState18.getWinners();
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState18, "");
    java.util.List<org.cs362.dominion.Card> list_card23 = null;
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState(list_card23);
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState24.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i26 = gameState24.getWinners();
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState24, "");
    java.util.List<org.cs362.dominion.Card> list_card29 = null;
    org.cs362.dominion.GameState gameState30 = new org.cs362.dominion.GameState(list_card29);
    java.util.List<org.cs362.dominion.Card> list_card31 = gameState30.cards;
    java.util.List<org.cs362.dominion.Card> list_card32 = null;
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState(list_card32);
    java.util.List<org.cs362.dominion.Card> list_card34 = gameState33.cards;
    java.util.List<org.cs362.dominion.Card> list_card35 = gameState33.cards;
    java.util.List<org.cs362.dominion.Player> list_player36 = gameState33.players;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState33, "hi!");
    gameState30.addPlayer(player38);
    org.cs362.dominion.Card card40 = null;
    player38.discard(card40);
    player38.printStateGame();
    org.cs362.dominion.Player[] player_array43 = new org.cs362.dominion.Player[] { player16, player22, player28, player38 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player44 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player44, player_array43);
    gameState5.players = arraylist_player44;
    java.lang.String str47 = gameState5.toString();
    org.cs362.dominion.Card[] card_array48 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card49 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card49, card_array48);
    gameState5.cards = arraylist_card49;
    // The following exception was thrown during execution in test generation
    try {
    gameState5.initializeGame();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName9.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str47.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test270"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    org.cs362.dominion.Card[] card_array4 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card5 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card5, card_array4);
    org.cs362.dominion.Card.CardName cardName7 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card8 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card5, cardName7);
    org.cs362.dominion.Card.CardName cardName9 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card10 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card5, cardName9);
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card5);
    java.util.List<org.cs362.dominion.Card> list_card12 = null;
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState(list_card12);
    java.util.List<org.cs362.dominion.Card> list_card14 = gameState13.cards;
    java.util.List<org.cs362.dominion.Card> list_card15 = gameState13.cards;
    java.util.List<org.cs362.dominion.Player> list_player16 = gameState13.players;
    gameState11.players = list_player16;
    org.cs362.dominion.Player player19 = new org.cs362.dominion.Player(gameState11, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState11, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.List<org.cs362.dominion.Player> list_player22 = gameState11.players;
    boolean b23 = gameState11.isGameOver();
    java.util.List<org.cs362.dominion.Card> list_card24 = null;
    org.cs362.dominion.GameState gameState25 = new org.cs362.dominion.GameState(list_card24);
    java.util.List<org.cs362.dominion.Card> list_card26 = gameState25.cards;
    java.util.List<org.cs362.dominion.Card> list_card27 = null;
    org.cs362.dominion.GameState gameState28 = new org.cs362.dominion.GameState(list_card27);
    java.util.List<org.cs362.dominion.Card> list_card29 = gameState28.cards;
    java.util.List<org.cs362.dominion.Card> list_card30 = gameState28.cards;
    java.util.List<org.cs362.dominion.Player> list_player31 = gameState28.players;
    org.cs362.dominion.Player player33 = new org.cs362.dominion.Player(gameState28, "hi!");
    gameState25.addPlayer(player33);
    java.lang.String str35 = player33.toString();
    gameState11.addPlayer(player33);
    gameState1.addPlayer(player33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName7.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName9.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str35.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test271"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card7 = null;
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card7);
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState8.cards;
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState8.cards;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState8.players;
    gameState1.players = list_player11;
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState1, "The board game is embty you need to intialize the game!!!!");
    java.util.List<org.cs362.dominion.Card> list_card15 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i16 = gameState1.gameBoard;
    java.lang.String str17 = gameState1.toString();
    java.util.List<org.cs362.dominion.Player> list_player18 = gameState1.players;
    java.lang.String str19 = gameState1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str17.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str19.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test272"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card7 = null;
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card7);
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState8.cards;
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState8.cards;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState8.players;
    gameState1.players = list_player11;
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState1, "The board game is embty you need to intialize the game!!!!");
    java.util.List<org.cs362.dominion.Card> list_card15 = gameState1.cards;
    gameState1.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card15);

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test273"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card7 = null;
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card7);
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState8.cards;
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState8.cards;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState8.players;
    gameState1.players = list_player11;
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState1, "The board game is embty you need to intialize the game!!!!");
    java.util.List<org.cs362.dominion.Card> list_card15 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i16 = gameState1.gameBoard;
    org.cs362.dominion.Player player18 = new org.cs362.dominion.Player(gameState1, " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    player18.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i16);

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test274"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    org.cs362.dominion.Player player11 = new org.cs362.dominion.Player(gameState7, "hi!");
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState7, "hi!");
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState7, " ---  ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i16 = gameState7.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i16);

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test275"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card12 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName11);
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card14 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName13);
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card9);
    gameState15.initializeGame();
    java.lang.String str17 = gameState15.toString();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i18 = gameState15.gameBoard;
    gameState7.gameBoard = hashmap_card_i18;
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState7, "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str17.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i18);

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test276"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = gameState3.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState4);

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test277"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card[] card_array3 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card4 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card4, card_array3);
    org.cs362.dominion.GameState gameState6 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card4);
    boolean b7 = gameState6.isGameOver();
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card12 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card9, cardName11);
    org.cs362.dominion.Card.Type type13 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card9, type13);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card16, cardName18);
    org.cs362.dominion.Card.Type type20 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card21 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card16, type20);
    java.util.List<org.cs362.dominion.Card> list_card22 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card14, type20);
    gameState6.cards = list_card14;
    org.cs362.dominion.Card[] card_array24 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card25 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card25, card_array24);
    org.cs362.dominion.Card.CardName cardName27 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card28 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card25, cardName27);
    org.cs362.dominion.Card card29 = org.cs362.dominion.Card.getCard(list_card14, cardName27);
    org.cs362.dominion.Card card30 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName27);
    org.cs362.dominion.GameState gameState31 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type13.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type20.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName27.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test278"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card7 = gameState1.cards;
    java.lang.String str8 = gameState1.toString();
    org.cs362.dominion.Player player10 = new org.cs362.dominion.Player(gameState1, " ---  ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState1.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str8.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test279"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    org.cs362.dominion.Player player11 = new org.cs362.dominion.Player(gameState7, "hi!");
    boolean b12 = gameState7.isGameOver();
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState7, "");
    java.util.List<org.cs362.dominion.Card> list_card15 = gameState7.cards;
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.GreatHall;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard(list_card15, cardName16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.GreatHall + "'", cardName16.equals(org.cs362.dominion.Card.CardName.GreatHall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test280"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.Card.CardName cardName9 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card10 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName9);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card12 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card7, cardName11);
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card7);
    boolean b14 = gameState13.isGameOver();
    org.cs362.dominion.Player player16 = new org.cs362.dominion.Player(gameState13, "");
    java.util.List<org.cs362.dominion.Card> list_card17 = null;
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState(list_card17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState18.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState18.getWinners();
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState18, "");
    java.util.List<org.cs362.dominion.Card> list_card23 = null;
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState(list_card23);
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState24.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i26 = gameState24.getWinners();
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState24, "");
    java.util.List<org.cs362.dominion.Card> list_card29 = null;
    org.cs362.dominion.GameState gameState30 = new org.cs362.dominion.GameState(list_card29);
    java.util.List<org.cs362.dominion.Card> list_card31 = gameState30.cards;
    java.util.List<org.cs362.dominion.Card> list_card32 = null;
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState(list_card32);
    java.util.List<org.cs362.dominion.Card> list_card34 = gameState33.cards;
    java.util.List<org.cs362.dominion.Card> list_card35 = gameState33.cards;
    java.util.List<org.cs362.dominion.Player> list_player36 = gameState33.players;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState33, "hi!");
    gameState30.addPlayer(player38);
    org.cs362.dominion.Card card40 = null;
    player38.discard(card40);
    player38.printStateGame();
    org.cs362.dominion.Player[] player_array43 = new org.cs362.dominion.Player[] { player16, player22, player28, player38 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player44 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player44, player_array43);
    gameState5.players = arraylist_player44;
    boolean b47 = gameState5.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName9.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test281"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    gameState7.players = list_player12;
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    player17.printStateGame();
    player17.printStateGame();
    java.lang.String str20 = player17.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + " ---  --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str20.equals(" ---  --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test282"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = null;
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState(list_card3);
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState4.cards;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState4.cards;
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState4.players;
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState4, "hi!");
    gameState1.addPlayer(player9);
    player9.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test283"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card8, type12);
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card6, type12);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card16, cardName18);
    org.cs362.dominion.Card.Type type20 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card21 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card16, type20);
    org.cs362.dominion.Card.Type type22 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card23 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card16, type22);
    org.cs362.dominion.Card.Type type24 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card25 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card23, type24);
    java.util.List<org.cs362.dominion.Card> list_card26 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card14, type24);
    org.cs362.dominion.Card[] card_array27 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card28 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card28, card_array27);
    org.cs362.dominion.Card.CardName cardName30 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card31 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card28, cardName30);
    org.cs362.dominion.Card.CardName cardName32 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card33 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card28, cardName32);
    org.cs362.dominion.Card.Type type34 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card35 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card28, type34);
    java.util.List<org.cs362.dominion.Card> list_card36 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card26, type34);
    org.cs362.dominion.GameState gameState37 = new org.cs362.dominion.GameState(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type12.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type20.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type22.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type24.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName30.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName32.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type34.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test284"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card.Type type10 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card11 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card6, type10);
    gameState1.cards = arraylist_card6;
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player14 = gameState1.players;
    gameState1.initializeGame();
    java.util.List<org.cs362.dominion.Card> list_card16 = null;
    org.cs362.dominion.GameState gameState17 = new org.cs362.dominion.GameState(list_card16);
    gameState17.initializeGame();
    java.util.List<org.cs362.dominion.Card> list_card19 = null;
    org.cs362.dominion.GameState gameState20 = new org.cs362.dominion.GameState(list_card19);
    java.util.List<org.cs362.dominion.Card> list_card21 = gameState20.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i22 = gameState20.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card23 = null;
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState(list_card23);
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState24.cards;
    java.util.List<org.cs362.dominion.Card> list_card26 = gameState24.cards;
    java.util.List<org.cs362.dominion.Player> list_player27 = gameState24.players;
    java.util.List<org.cs362.dominion.Player> list_player28 = gameState24.players;
    gameState20.players = list_player28;
    java.util.List<org.cs362.dominion.Card> list_card30 = null;
    org.cs362.dominion.GameState gameState31 = new org.cs362.dominion.GameState(list_card30);
    java.util.List<org.cs362.dominion.Card> list_card32 = gameState31.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i33 = gameState31.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player34 = gameState31.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i35 = gameState31.gameBoard;
    gameState20.gameBoard = hashmap_card_i35;
    gameState17.gameBoard = hashmap_card_i35;
    gameState1.gameBoard = hashmap_card_i35;
    java.util.List<org.cs362.dominion.Player> list_player39 = gameState1.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type10.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player39);

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test285"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = null;
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    java.util.List<org.cs362.dominion.Card> list_card8 = gameState7.cards;
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState7.cards;
    java.util.List<org.cs362.dominion.Player> list_player10 = gameState7.players;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState7.players;
    java.util.List<org.cs362.dominion.Card> list_card12 = null;
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState(list_card12);
    java.util.List<org.cs362.dominion.Card> list_card14 = gameState13.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i15 = gameState13.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card16 = null;
    org.cs362.dominion.GameState gameState17 = new org.cs362.dominion.GameState(list_card16);
    java.util.List<org.cs362.dominion.Card> list_card18 = gameState17.cards;
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState17.cards;
    java.util.List<org.cs362.dominion.Player> list_player20 = gameState17.players;
    java.util.List<org.cs362.dominion.Player> list_player21 = gameState17.players;
    gameState13.players = list_player21;
    gameState7.players = list_player21;
    gameState1.players = list_player21;
    java.util.List<org.cs362.dominion.Card> list_card25 = null;
    org.cs362.dominion.GameState gameState26 = new org.cs362.dominion.GameState(list_card25);
    java.util.List<org.cs362.dominion.Card> list_card27 = gameState26.cards;
    java.util.List<org.cs362.dominion.Card> list_card28 = gameState26.cards;
    java.util.List<org.cs362.dominion.Player> list_player29 = gameState26.players;
    gameState1.players = list_player29;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player29);

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test286"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    gameState7.players = list_player12;
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Card card16 = null;
    player15.discard(card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test287"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card4 = null;
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState(list_card4);
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState5.cards;
    java.util.List<org.cs362.dominion.Card> list_card7 = gameState5.cards;
    java.util.List<org.cs362.dominion.Player> list_player8 = gameState5.players;
    java.lang.String str9 = gameState5.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i10 = gameState5.getWinners();
    org.cs362.dominion.Card[] card_array11 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card12, card_array11);
    org.cs362.dominion.Card.CardName cardName14 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card15 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card12, cardName14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Curse;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card12, cardName16);
    gameState5.cards = arraylist_card12;
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card12);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState19.gameBoard;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i21 = gameState19.gameBoard;
    gameState3.gameBoard = hashmap_card_i21;
    org.cs362.dominion.GameState gameState23 = gameState3.clone();
    gameState23.initializeGame();
    java.util.List<org.cs362.dominion.Card> list_card25 = null;
    org.cs362.dominion.GameState gameState26 = new org.cs362.dominion.GameState(list_card25);
    java.util.List<org.cs362.dominion.Card> list_card27 = gameState26.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i28 = gameState26.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card29 = null;
    org.cs362.dominion.GameState gameState30 = new org.cs362.dominion.GameState(list_card29);
    java.util.List<org.cs362.dominion.Card> list_card31 = gameState30.cards;
    java.util.List<org.cs362.dominion.Card> list_card32 = gameState30.cards;
    java.util.List<org.cs362.dominion.Player> list_player33 = gameState30.players;
    java.util.List<org.cs362.dominion.Player> list_player34 = gameState30.players;
    gameState26.players = list_player34;
    org.cs362.dominion.Card[] card_array36 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card37 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card37, card_array36);
    org.cs362.dominion.Card.CardName cardName39 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card40 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card37, cardName39);
    org.cs362.dominion.Card.CardName cardName41 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card42 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card37, cardName41);
    org.cs362.dominion.GameState gameState43 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card37);
    java.util.List<org.cs362.dominion.Card> list_card44 = null;
    org.cs362.dominion.GameState gameState45 = new org.cs362.dominion.GameState(list_card44);
    java.util.List<org.cs362.dominion.Card> list_card46 = gameState45.cards;
    java.util.List<org.cs362.dominion.Card> list_card47 = gameState45.cards;
    java.util.List<org.cs362.dominion.Player> list_player48 = gameState45.players;
    gameState43.players = list_player48;
    org.cs362.dominion.Player player51 = new org.cs362.dominion.Player(gameState43, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player53 = new org.cs362.dominion.Player(gameState43, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.lang.String str54 = gameState43.toString();
    java.util.List<org.cs362.dominion.Card> list_card55 = null;
    org.cs362.dominion.GameState gameState56 = new org.cs362.dominion.GameState(list_card55);
    java.util.List<org.cs362.dominion.Card> list_card57 = gameState56.cards;
    java.util.List<org.cs362.dominion.Card> list_card58 = gameState56.cards;
    java.util.List<org.cs362.dominion.Player> list_player59 = gameState56.players;
    java.lang.String str60 = gameState56.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i61 = gameState56.getWinners();
    org.cs362.dominion.Card[] card_array62 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card63 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b64 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card63, card_array62);
    org.cs362.dominion.Card.CardName cardName65 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card66 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card63, cardName65);
    org.cs362.dominion.Card.CardName cardName67 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card68 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card63, cardName67);
    org.cs362.dominion.GameState gameState69 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card63);
    java.util.List<org.cs362.dominion.Card> list_card70 = null;
    org.cs362.dominion.GameState gameState71 = new org.cs362.dominion.GameState(list_card70);
    java.util.List<org.cs362.dominion.Card> list_card72 = gameState71.cards;
    java.util.List<org.cs362.dominion.Card> list_card73 = gameState71.cards;
    java.util.List<org.cs362.dominion.Player> list_player74 = gameState71.players;
    gameState69.players = list_player74;
    org.cs362.dominion.Player player77 = new org.cs362.dominion.Player(gameState69, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player79 = new org.cs362.dominion.Player(gameState69, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.List<org.cs362.dominion.Player> list_player80 = gameState69.players;
    gameState56.players = list_player80;
    gameState43.players = list_player80;
    gameState26.players = list_player80;
    gameState23.players = list_player80;
    boolean b85 = gameState23.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str9.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Curse + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName39.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);
    org.junit.Assert.assertTrue("'" + cardName41 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName41.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str54.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str60.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    org.junit.Assert.assertTrue("'" + cardName65 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName65.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card66);
    org.junit.Assert.assertTrue("'" + cardName67 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName67.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test288"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    boolean b8 = gameState7.isGameOver();
    java.lang.String str9 = gameState7.toString();
    java.util.List<org.cs362.dominion.Card> list_card10 = null;
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState(list_card10);
    java.util.List<org.cs362.dominion.Card> list_card12 = gameState11.cards;
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState11.cards;
    java.util.List<org.cs362.dominion.Player> list_player14 = gameState11.players;
    org.cs362.dominion.Player player16 = new org.cs362.dominion.Player(gameState11, "hi!");
    player16.buyCard();
    player16.buyCard();
    player16.printStateGame();
    gameState7.addPlayer(player16);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState7.play();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    org.cs362.dominion.Card.CardName cardName25 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card26 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card23, cardName25);
    org.cs362.dominion.Card.CardName cardName27 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card28 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card23, cardName27);
    org.cs362.dominion.GameState gameState29 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card23);
    java.util.List<org.cs362.dominion.Card> list_card30 = null;
    org.cs362.dominion.GameState gameState31 = new org.cs362.dominion.GameState(list_card30);
    java.util.List<org.cs362.dominion.Card> list_card32 = gameState31.cards;
    java.util.List<org.cs362.dominion.Card> list_card33 = gameState31.cards;
    java.util.List<org.cs362.dominion.Player> list_player34 = gameState31.players;
    gameState29.players = list_player34;
    org.cs362.dominion.Player player37 = new org.cs362.dominion.Player(gameState29, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player39 = new org.cs362.dominion.Player(gameState29, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.List<org.cs362.dominion.Player> list_player40 = gameState29.players;
    gameState7.players = list_player40;
    org.cs362.dominion.GameState gameState42 = gameState7.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str9.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName25.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName27.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState42);

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test289"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState1, "hi!");
    player6.buyCard();
    java.lang.String str8 = player6.toString();
    java.lang.String str9 = player6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str8.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str9.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test290"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card7 = null;
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card7);
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState8.cards;
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState8.cards;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState8.players;
    gameState1.players = list_player11;
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState1, "The board game is embty you need to intialize the game!!!!");
    java.util.List<org.cs362.dominion.Card> list_card15 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i16 = gameState1.gameBoard;
    org.cs362.dominion.Player player18 = new org.cs362.dominion.Player(gameState1, " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    org.cs362.dominion.Card.CardName cardName22 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card23 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card20, cardName22);
    org.cs362.dominion.Card.CardName cardName24 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card25 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card20, cardName24);
    org.cs362.dominion.GameState gameState26 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card20);
    java.util.List<org.cs362.dominion.Card> list_card27 = null;
    org.cs362.dominion.GameState gameState28 = new org.cs362.dominion.GameState(list_card27);
    java.util.List<org.cs362.dominion.Card> list_card29 = gameState28.cards;
    java.util.List<org.cs362.dominion.Card> list_card30 = gameState28.cards;
    java.util.List<org.cs362.dominion.Player> list_player31 = gameState28.players;
    gameState26.players = list_player31;
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState26, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    gameState1.addPlayer(player34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName22.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName24.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test291"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i6 = null;
    gameState1.gameBoard = hashmap_card_i6;
    java.util.List<org.cs362.dominion.Card> list_card8 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player9 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card10 = null;
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState(list_card10);
    java.util.List<org.cs362.dominion.Card> list_card12 = gameState11.cards;
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState11.cards;
    java.util.List<org.cs362.dominion.Player> list_player14 = gameState11.players;
    java.util.List<org.cs362.dominion.Player> list_player15 = gameState11.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i16 = null;
    gameState11.gameBoard = hashmap_card_i16;
    java.util.List<org.cs362.dominion.Card> list_card18 = null;
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState(list_card18);
    java.util.List<org.cs362.dominion.Card> list_card20 = gameState19.cards;
    java.util.List<org.cs362.dominion.Card> list_card21 = gameState19.cards;
    java.util.List<org.cs362.dominion.Player> list_player22 = gameState19.players;
    java.util.List<org.cs362.dominion.Card> list_card23 = gameState19.cards;
    java.util.List<org.cs362.dominion.Card> list_card24 = null;
    org.cs362.dominion.GameState gameState25 = new org.cs362.dominion.GameState(list_card24);
    java.util.List<org.cs362.dominion.Card> list_card26 = gameState25.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i27 = gameState25.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player28 = gameState25.players;
    gameState19.players = list_player28;
    gameState11.players = list_player28;
    org.cs362.dominion.Player player32 = new org.cs362.dominion.Player(gameState11, "");
    org.cs362.dominion.Card[] card_array33 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card34 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card34, card_array33);
    org.cs362.dominion.Card.CardName cardName36 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card37 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card34, cardName36);
    org.cs362.dominion.Card.CardName cardName38 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card39 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card34, cardName38);
    org.cs362.dominion.GameState gameState40 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card34);
    gameState40.initializeGame();
    java.lang.String str42 = gameState40.toString();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i43 = gameState40.gameBoard;
    gameState11.gameBoard = hashmap_card_i43;
    gameState1.gameBoard = hashmap_card_i43;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName36.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName38.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str42.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i43);

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test292"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    org.cs362.dominion.Player player11 = new org.cs362.dominion.Player(gameState7, "hi!");
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState7, "hi!");
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState7, " ---  --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test293"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card7 = null;
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card7);
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState8.cards;
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState8.cards;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState8.players;
    gameState1.players = list_player11;
    gameState1.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i14 = gameState1.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i14);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test294"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    gameState7.players = list_player12;
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.lang.String str18 = gameState7.toString();
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    org.cs362.dominion.Card.CardName cardName22 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card23 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card20, cardName22);
    org.cs362.dominion.Card.CardName cardName24 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card25 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card20, cardName24);
    org.cs362.dominion.Card.Type type26 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card27 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card20, type26);
    org.cs362.dominion.Card.Type type28 = org.cs362.dominion.Card.Type.ACTION;
    java.util.List<org.cs362.dominion.Card> list_card29 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card27, type28);
    gameState7.cards = list_card27;
    org.cs362.dominion.Card[] card_array31 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card32 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b33 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card32, card_array31);
    org.cs362.dominion.Card.CardName cardName34 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card35 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card32, cardName34);
    org.cs362.dominion.Card.Type type36 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card37 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card32, type36);
    org.cs362.dominion.Card.Type type38 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card39 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card32, type38);
    org.cs362.dominion.Card.Type type40 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card41 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card39, type40);
    org.cs362.dominion.GameState gameState42 = new org.cs362.dominion.GameState(list_card41);
    org.cs362.dominion.GameState gameState43 = new org.cs362.dominion.GameState(list_card41);
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card48 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card.CardName cardName49 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card50 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName49);
    org.cs362.dominion.GameState gameState51 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card45);
    org.cs362.dominion.Card.Type type52 = null;
    java.util.List<org.cs362.dominion.Card> list_card53 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card45, type52);
    org.cs362.dominion.Card.CardName cardName54 = org.cs362.dominion.Card.CardName.Cooper;
    org.cs362.dominion.Card card55 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName54);
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard(list_card41, cardName54);
    org.cs362.dominion.Card card57 = org.cs362.dominion.Card.getCard(list_card27, cardName54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str18.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName22.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName24.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type26.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.cs362.dominion.Card.Type.ACTION + "'", type28.equals(org.cs362.dominion.Card.Type.ACTION));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName34.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card35);
    org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type36.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type38.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type40.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card48);
    org.junit.Assert.assertTrue("'" + cardName49 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName49.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + org.cs362.dominion.Card.CardName.Cooper + "'", cardName54.equals(org.cs362.dominion.Card.CardName.Cooper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card57);

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test295"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    org.cs362.dominion.Player player11 = new org.cs362.dominion.Player(gameState7, "hi!");
    boolean b12 = gameState7.isGameOver();
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState7, "");
    java.util.List<org.cs362.dominion.Card> list_card15 = gameState7.cards;
    org.cs362.dominion.Card[] card_array16 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card17 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card17, card_array16);
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    org.cs362.dominion.GameState gameState22 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card20);
    boolean b23 = gameState22.isGameOver();
    org.cs362.dominion.Card[] card_array24 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card25 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card25, card_array24);
    org.cs362.dominion.Card.CardName cardName27 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card28 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card25, cardName27);
    org.cs362.dominion.Card.Type type29 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card30 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card25, type29);
    org.cs362.dominion.Card[] card_array31 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card32 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b33 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card32, card_array31);
    org.cs362.dominion.Card.CardName cardName34 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card35 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card32, cardName34);
    org.cs362.dominion.Card.Type type36 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card37 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card32, type36);
    java.util.List<org.cs362.dominion.Card> list_card38 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card30, type36);
    gameState22.cards = list_card30;
    org.cs362.dominion.Card[] card_array40 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card41 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card41, card_array40);
    org.cs362.dominion.Card.CardName cardName43 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card44 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card41, cardName43);
    org.cs362.dominion.Card card45 = org.cs362.dominion.Card.getCard(list_card30, cardName43);
    org.cs362.dominion.Card card46 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card17, cardName43);
    org.cs362.dominion.Card card47 = org.cs362.dominion.Card.getCard(list_card15, cardName43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName27.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type29.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName34.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card35);
    org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type36.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    org.junit.Assert.assertTrue("'" + cardName43 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName43.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card47);

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test296"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = null;
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    java.util.List<org.cs362.dominion.Card> list_card8 = gameState7.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card10 = null;
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState(list_card10);
    java.util.List<org.cs362.dominion.Card> list_card12 = gameState11.cards;
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState11.cards;
    java.util.List<org.cs362.dominion.Player> list_player14 = gameState11.players;
    java.util.List<org.cs362.dominion.Player> list_player15 = gameState11.players;
    gameState7.players = list_player15;
    gameState1.players = list_player15;
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card19, cardName21);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card19);
    gameState1.cards = arraylist_card19;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test297"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    boolean b4 = gameState3.isGameOver();
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card.Type type10 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card11 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card6, type10);
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    org.cs362.dominion.Card.CardName cardName15 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card16 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card13, cardName15);
    org.cs362.dominion.Card.Type type17 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card18 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card13, type17);
    java.util.List<org.cs362.dominion.Card> list_card19 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card11, type17);
    gameState3.cards = list_card11;
    org.cs362.dominion.GameState gameState21 = new org.cs362.dominion.GameState(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type10.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName15.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type17.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test298"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    org.cs362.dominion.Player player5 = new org.cs362.dominion.Player(gameState1, "");
    org.cs362.dominion.Player player7 = new org.cs362.dominion.Player(gameState1, " --- The board game is embty you need to intialize the game!!!! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test299"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test300"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.lang.String str5 = gameState1.toString();
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card7 = null;
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card7);
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState8.cards;
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState8.cards;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState8.players;
    gameState1.players = list_player11;
    java.util.List<org.cs362.dominion.Card> list_card13 = null;
    org.cs362.dominion.GameState gameState14 = new org.cs362.dominion.GameState(list_card13);
    java.util.List<org.cs362.dominion.Card> list_card15 = gameState14.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i16 = gameState14.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player17 = gameState14.players;
    java.util.List<org.cs362.dominion.Card> list_card18 = null;
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState(list_card18);
    java.util.List<org.cs362.dominion.Card> list_card20 = gameState19.cards;
    java.util.List<org.cs362.dominion.Card> list_card21 = gameState19.cards;
    java.util.List<org.cs362.dominion.Player> list_player22 = gameState19.players;
    java.util.List<org.cs362.dominion.Player> list_player23 = gameState19.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i24 = null;
    gameState19.gameBoard = hashmap_card_i24;
    java.util.List<org.cs362.dominion.Card> list_card26 = null;
    org.cs362.dominion.GameState gameState27 = new org.cs362.dominion.GameState(list_card26);
    java.util.List<org.cs362.dominion.Card> list_card28 = gameState27.cards;
    java.util.List<org.cs362.dominion.Card> list_card29 = gameState27.cards;
    java.util.List<org.cs362.dominion.Player> list_player30 = gameState27.players;
    java.util.List<org.cs362.dominion.Card> list_card31 = gameState27.cards;
    java.util.List<org.cs362.dominion.Card> list_card32 = null;
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState(list_card32);
    java.util.List<org.cs362.dominion.Card> list_card34 = gameState33.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i35 = gameState33.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player36 = gameState33.players;
    gameState27.players = list_player36;
    gameState19.players = list_player36;
    gameState14.players = list_player36;
    gameState1.players = list_player36;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test301"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card.Type type7 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card8 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type7);
    org.cs362.dominion.Card.Type type9 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card10 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card8, type9);
    org.cs362.dominion.Card[] card_array11 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card12, card_array11);
    org.cs362.dominion.Card.CardName cardName14 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card15 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card12, cardName14);
    org.cs362.dominion.Card.Type type16 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card17 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card12, type16);
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card19, cardName21);
    org.cs362.dominion.Card.Type type23 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card24 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card19, type23);
    java.util.List<org.cs362.dominion.Card> list_card25 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card17, type23);
    java.util.List<org.cs362.dominion.Card> list_card26 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card10, type23);
    org.cs362.dominion.GameState gameState27 = new org.cs362.dominion.GameState(list_card26);
    org.cs362.dominion.Card[] card_array28 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card29, card_array28);
    org.cs362.dominion.Card.CardName cardName31 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card32 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card29, cardName31);
    org.cs362.dominion.Card.CardName cardName33 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card34 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card29, cardName33);
    org.cs362.dominion.GameState gameState35 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card29);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i36 = gameState35.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i37 = gameState35.play();
    org.cs362.dominion.Player player39 = new org.cs362.dominion.Player(gameState35, "hi!");
    boolean b40 = gameState35.isGameOver();
    org.cs362.dominion.Player player42 = new org.cs362.dominion.Player(gameState35, "");
    java.util.List<org.cs362.dominion.Card> list_card43 = gameState35.cards;
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card48 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card45, cardName47);
    org.cs362.dominion.Card card49 = org.cs362.dominion.Card.getCard(list_card43, cardName47);
    org.cs362.dominion.Card card50 = org.cs362.dominion.Card.getCard(list_card26, cardName47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type7.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + type9 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type9.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type16.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type23.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName31.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName33.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card50);

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test302"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = null;
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    java.util.List<org.cs362.dominion.Card> list_card8 = gameState7.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card10 = null;
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState(list_card10);
    java.util.List<org.cs362.dominion.Card> list_card12 = gameState11.cards;
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState11.cards;
    java.util.List<org.cs362.dominion.Player> list_player14 = gameState11.players;
    java.util.List<org.cs362.dominion.Player> list_player15 = gameState11.players;
    gameState7.players = list_player15;
    gameState1.players = list_player15;
    java.util.List<org.cs362.dominion.Card> list_card18 = gameState1.cards;
    org.cs362.dominion.Player player20 = new org.cs362.dominion.Player(gameState1, " ---  ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.List<org.cs362.dominion.Player> list_player21 = null;
    gameState1.players = list_player21;
    java.lang.String str23 = gameState1.toString();
    org.cs362.dominion.Card[] card_array24 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card25 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card25, card_array24);
    org.cs362.dominion.Card.CardName cardName27 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card28 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card25, cardName27);
    org.cs362.dominion.Card.CardName cardName29 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card30 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card25, cardName29);
    org.cs362.dominion.GameState gameState31 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card25);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i32 = gameState31.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i33 = gameState31.play();
    org.cs362.dominion.Player player35 = new org.cs362.dominion.Player(gameState31, "hi!");
    // The following exception was thrown during execution in test generation
    try {
    gameState1.addPlayer(player35);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str23.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName27.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName29.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i33);

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test303"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card4 = null;
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState(list_card4);
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState5.cards;
    java.util.List<org.cs362.dominion.Card> list_card7 = gameState5.cards;
    java.util.List<org.cs362.dominion.Player> list_player8 = gameState5.players;
    java.util.List<org.cs362.dominion.Player> list_player9 = gameState5.players;
    gameState1.players = list_player9;
    org.cs362.dominion.Player player12 = new org.cs362.dominion.Player(gameState1, "");
    // The following exception was thrown during execution in test generation
    try {
    boolean b13 = gameState1.isGameOver();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test304"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.Card.Type type7 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card8 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type7);
    org.cs362.dominion.Card.CardName cardName9 = null;
    org.cs362.dominion.Card card10 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName9);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Minion;
    org.cs362.dominion.Card card12 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName11);
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Estate;
    org.cs362.dominion.Card card14 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName13);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card16, cardName18);
    org.cs362.dominion.Card.Type type20 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card21 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card16, type20);
    org.cs362.dominion.Card.Type type22 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card23 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card16, type22);
    java.util.List<org.cs362.dominion.Card> list_card24 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type22);
    org.cs362.dominion.Card[] card_array25 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card26 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card26, card_array25);
    org.cs362.dominion.Card.CardName cardName28 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card29 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card26, cardName28);
    org.cs362.dominion.Card.Type type30 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card31 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card26, type30);
    org.cs362.dominion.Card.Type type32 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card33 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card26, type32);
    org.cs362.dominion.Card[] card_array34 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card35 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card35, card_array34);
    org.cs362.dominion.Card.CardName cardName37 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card38 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card35, cardName37);
    org.cs362.dominion.Card card39 = org.cs362.dominion.Card.getCard(list_card33, cardName37);
    org.cs362.dominion.Card[] card_array40 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card41 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card41, card_array40);
    org.cs362.dominion.Card.CardName cardName43 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card44 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card41, cardName43);
    org.cs362.dominion.Card.Type type45 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card46 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card41, type45);
    java.util.List<org.cs362.dominion.Card> list_card47 = null;
    org.cs362.dominion.GameState gameState48 = new org.cs362.dominion.GameState(list_card47);
    java.util.List<org.cs362.dominion.Card> list_card49 = gameState48.cards;
    java.util.List<org.cs362.dominion.Card> list_card50 = gameState48.cards;
    java.util.List<org.cs362.dominion.Player> list_player51 = gameState48.players;
    java.lang.String str52 = gameState48.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i53 = gameState48.getWinners();
    org.cs362.dominion.Card[] card_array54 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card55 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card55, card_array54);
    org.cs362.dominion.Card.CardName cardName57 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card58 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card55, cardName57);
    org.cs362.dominion.Card.CardName cardName59 = org.cs362.dominion.Card.CardName.Curse;
    org.cs362.dominion.Card card60 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card55, cardName59);
    gameState48.cards = arraylist_card55;
    org.cs362.dominion.Card[] card_array62 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card63 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b64 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card63, card_array62);
    org.cs362.dominion.Card.CardName cardName65 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card66 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card63, cardName65);
    org.cs362.dominion.Card.Type type67 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card68 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card63, type67);
    org.cs362.dominion.Card.Type type69 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card70 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card63, type69);
    org.cs362.dominion.Card.Type type71 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card72 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card70, type71);
    org.cs362.dominion.Card.Type type73 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card74 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card72, type73);
    org.cs362.dominion.Card.CardName cardName75 = org.cs362.dominion.Card.CardName.GreatHall;
    org.cs362.dominion.Card card76 = org.cs362.dominion.Card.getCard(list_card72, cardName75);
    org.cs362.dominion.Card card77 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card55, cardName75);
    org.cs362.dominion.Card card78 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card41, cardName75);
    org.cs362.dominion.Card card79 = org.cs362.dominion.Card.getCard(list_card33, cardName75);
    org.cs362.dominion.Card card80 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type7.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Minion + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Minion));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Estate + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type20.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type22.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName28.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type30.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type32.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName37.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    org.junit.Assert.assertTrue("'" + cardName43 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName43.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card44);
    org.junit.Assert.assertTrue("'" + type45 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type45.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str52.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    org.junit.Assert.assertTrue("'" + cardName57 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName57.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card58);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + org.cs362.dominion.Card.CardName.Curse + "'", cardName59.equals(org.cs362.dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    org.junit.Assert.assertTrue("'" + cardName65 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName65.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card66);
    org.junit.Assert.assertTrue("'" + type67 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type67.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card68);
    org.junit.Assert.assertTrue("'" + type69 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type69.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card70);
    org.junit.Assert.assertTrue("'" + type71 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type71.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card72);
    org.junit.Assert.assertTrue("'" + type73 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type73.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card74);
    org.junit.Assert.assertTrue("'" + cardName75 + "' != '" + org.cs362.dominion.Card.CardName.GreatHall + "'", cardName75.equals(org.cs362.dominion.Card.CardName.GreatHall));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card80);

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test305"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    gameState7.players = list_player12;
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.List<org.cs362.dominion.Player> list_player18 = gameState7.players;
    boolean b19 = gameState7.isGameOver();
    java.util.List<org.cs362.dominion.Card> list_card20 = null;
    org.cs362.dominion.GameState gameState21 = new org.cs362.dominion.GameState(list_card20);
    java.util.List<org.cs362.dominion.Card> list_card22 = gameState21.cards;
    java.util.List<org.cs362.dominion.Card> list_card23 = null;
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState(list_card23);
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState24.cards;
    java.util.List<org.cs362.dominion.Card> list_card26 = gameState24.cards;
    java.util.List<org.cs362.dominion.Player> list_player27 = gameState24.players;
    org.cs362.dominion.Player player29 = new org.cs362.dominion.Player(gameState24, "hi!");
    gameState21.addPlayer(player29);
    java.lang.String str31 = player29.toString();
    gameState7.addPlayer(player29);
    java.lang.String str33 = player29.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str31.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str33.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test306"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    boolean b8 = gameState7.isGameOver();
    org.cs362.dominion.Player player10 = new org.cs362.dominion.Player(gameState7, "");
    gameState7.initializeGame();
    java.util.List<org.cs362.dominion.Card> list_card12 = null;
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState(list_card12);
    java.util.List<org.cs362.dominion.Card> list_card14 = gameState13.cards;
    java.util.List<org.cs362.dominion.Card> list_card15 = null;
    org.cs362.dominion.GameState gameState16 = new org.cs362.dominion.GameState(list_card15);
    java.util.List<org.cs362.dominion.Card> list_card17 = gameState16.cards;
    java.util.List<org.cs362.dominion.Card> list_card18 = gameState16.cards;
    java.util.List<org.cs362.dominion.Player> list_player19 = gameState16.players;
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState16, "hi!");
    gameState13.addPlayer(player21);
    org.cs362.dominion.Card card23 = null;
    player21.discard(card23);
    gameState7.addPlayer(player21);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i26 = gameState7.gameBoard;
    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i27 = gameState7.getWinners();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i26);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test307"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card5 = null;
    org.cs362.dominion.GameState gameState6 = new org.cs362.dominion.GameState(list_card5);
    java.util.List<org.cs362.dominion.Card> list_card7 = gameState6.cards;
    java.util.List<org.cs362.dominion.Card> list_card8 = gameState6.cards;
    java.util.List<org.cs362.dominion.Player> list_player9 = gameState6.players;
    org.cs362.dominion.Player player11 = new org.cs362.dominion.Player(gameState6, "hi!");
    player11.buyCard();
    gameState1.addPlayer(player11);
    player11.printStateGame();
    player11.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test308"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card5 = null;
    org.cs362.dominion.GameState gameState6 = new org.cs362.dominion.GameState(list_card5);
    java.util.List<org.cs362.dominion.Card> list_card7 = gameState6.cards;
    java.util.List<org.cs362.dominion.Card> list_card8 = gameState6.cards;
    java.util.List<org.cs362.dominion.Player> list_player9 = gameState6.players;
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card14 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card11, cardName13);
    org.cs362.dominion.Card.Type type15 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card16 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card11, type15);
    gameState6.cards = arraylist_card11;
    java.util.List<org.cs362.dominion.Card> list_card18 = gameState6.cards;
    java.util.List<org.cs362.dominion.Player> list_player19 = gameState6.players;
    gameState6.initializeGame();
    java.util.List<org.cs362.dominion.Card> list_card21 = null;
    org.cs362.dominion.GameState gameState22 = new org.cs362.dominion.GameState(list_card21);
    gameState22.initializeGame();
    java.util.List<org.cs362.dominion.Card> list_card24 = null;
    org.cs362.dominion.GameState gameState25 = new org.cs362.dominion.GameState(list_card24);
    java.util.List<org.cs362.dominion.Card> list_card26 = gameState25.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i27 = gameState25.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card28 = null;
    org.cs362.dominion.GameState gameState29 = new org.cs362.dominion.GameState(list_card28);
    java.util.List<org.cs362.dominion.Card> list_card30 = gameState29.cards;
    java.util.List<org.cs362.dominion.Card> list_card31 = gameState29.cards;
    java.util.List<org.cs362.dominion.Player> list_player32 = gameState29.players;
    java.util.List<org.cs362.dominion.Player> list_player33 = gameState29.players;
    gameState25.players = list_player33;
    java.util.List<org.cs362.dominion.Card> list_card35 = null;
    org.cs362.dominion.GameState gameState36 = new org.cs362.dominion.GameState(list_card35);
    java.util.List<org.cs362.dominion.Card> list_card37 = gameState36.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i38 = gameState36.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player39 = gameState36.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i40 = gameState36.gameBoard;
    gameState25.gameBoard = hashmap_card_i40;
    gameState22.gameBoard = hashmap_card_i40;
    gameState6.gameBoard = hashmap_card_i40;
    gameState1.gameBoard = hashmap_card_i40;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type15.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i40);

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test309"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.Card.Type type7 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card8 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type7);
    org.cs362.dominion.Card.CardName cardName9 = null;
    org.cs362.dominion.Card card10 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName9);
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState11.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type7.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test310"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.lang.String str9 = gameState7.toString();
    gameState7.initializeGame();
    org.cs362.dominion.Player player12 = new org.cs362.dominion.Player(gameState7, "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str9.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test311"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card8, type12);
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type12);
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState(list_card14);
    java.util.List<org.cs362.dominion.Player> list_player16 = gameState15.players;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState15.play();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i18 = gameState15.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type12.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i18);

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test312"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card.Type type10 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card11 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card6, type10);
    gameState1.cards = arraylist_card6;
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player14 = gameState1.players;
    gameState1.initializeGame();
    gameState1.initializeGame();
    java.util.List<org.cs362.dominion.Player> list_player17 = gameState1.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type10.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player17);

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test313"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.lang.String str5 = gameState1.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i6 = gameState1.getWinners();
    gameState1.initializeGame();
    java.util.List<org.cs362.dominion.Player> list_player8 = gameState1.players;
    org.cs362.dominion.Card[] card_array9 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card10 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card10, card_array9);
    org.cs362.dominion.Card.CardName cardName12 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card13 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card10, cardName12);
    org.cs362.dominion.Card.CardName cardName14 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card15 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card10, cardName14);
    org.cs362.dominion.Card.Type type16 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card17 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card10, type16);
    gameState1.cards = list_card17;
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    org.cs362.dominion.Card.CardName cardName22 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card23 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card20, cardName22);
    org.cs362.dominion.Card.CardName cardName24 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card25 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card20, cardName24);
    org.cs362.dominion.GameState gameState26 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card20);
    org.cs362.dominion.Card[] card_array27 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card28 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card28, card_array27);
    org.cs362.dominion.Card.CardName cardName30 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card31 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card28, cardName30);
    org.cs362.dominion.Card.CardName cardName32 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card33 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card28, cardName32);
    org.cs362.dominion.GameState gameState34 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card28);
    org.cs362.dominion.Card.CardName cardName35 = org.cs362.dominion.Card.CardName.Adventurer;
    org.cs362.dominion.Card card36 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card28, cardName35);
    org.cs362.dominion.Card.CardName cardName37 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card38 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card28, cardName37);
    org.cs362.dominion.Card card39 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card20, cardName37);
    gameState1.cards = arraylist_card20;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName12.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type16.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName22.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName24.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName30.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName32.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + org.cs362.dominion.Card.CardName.Adventurer + "'", cardName35.equals(org.cs362.dominion.Card.CardName.Adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName37.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card39);

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test314"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState1, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState1.getWinners();
    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState1.play();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test315"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState1, "hi!");
    player6.buyCard();
    player6.buyCard();
    player6.printStateGame();
    player6.printStateGame();
    player6.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test316"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.lang.String str5 = gameState1.toString();
    java.lang.String str6 = gameState1.toString();
    java.util.List<org.cs362.dominion.Card> list_card7 = null;
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card7);
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState8.cards;
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState8.cards;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState8.players;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState8, "hi!");
    org.cs362.dominion.Card card14 = null;
    player13.discard(card14);
    player13.printStateGame();
    gameState1.addPlayer(player13);
    gameState1.initializeGame();
    org.cs362.dominion.Player player19 = null;
    gameState1.addPlayer(player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str6.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test317"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card7 = null;
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card7);
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState8.cards;
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState8.cards;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState8.players;
    gameState1.players = list_player11;
    java.lang.String str13 = gameState1.toString();
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState1, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str13.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test318"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = null;
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState(list_card3);
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState4.cards;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState4.cards;
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState4.players;
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState4, "hi!");
    gameState1.addPlayer(player9);
    org.cs362.dominion.Card card11 = null;
    player9.discard(card11);
    player9.printStateGame();
    java.lang.String str14 = player9.toString();
    player9.playKingdomCard();
    player9.printStateGame();
    player9.buyCard();
    java.lang.String str18 = player9.toString();
    player9.playKingdomCard();
    player9.printStateGame();
    player9.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str14.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str18.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test319"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card8, type12);
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type12);
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState(list_card14);
    java.util.List<org.cs362.dominion.Player> list_player16 = gameState15.players;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState15.getWinners();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i18 = gameState15.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type12.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i18);

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test320"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card7 = null;
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card7);
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState8.cards;
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState8.cards;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState8.players;
    gameState1.players = list_player11;
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState1, "The board game is embty you need to intialize the game!!!!");
    java.lang.String str15 = player14.toString();
    org.cs362.dominion.Card card16 = null;
    player14.discard(card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + " --- The board game is embty you need to intialize the game!!!! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str15.equals(" --- The board game is embty you need to intialize the game!!!! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test321"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i6 = null;
    gameState1.gameBoard = hashmap_card_i6;
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card14 = null;
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState(list_card14);
    java.util.List<org.cs362.dominion.Card> list_card16 = gameState15.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState15.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player18 = gameState15.players;
    gameState9.players = list_player18;
    gameState1.players = list_player18;
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState1, "");
    org.cs362.dominion.Card[] card_array23 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card24 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card24, card_array23);
    org.cs362.dominion.Card.CardName cardName26 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card27 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card24, cardName26);
    org.cs362.dominion.Card.CardName cardName28 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card29 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card24, cardName28);
    org.cs362.dominion.GameState gameState30 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card24);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i31 = gameState30.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i32 = gameState30.play();
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState30, "hi!");
    boolean b35 = gameState30.isGameOver();
    org.cs362.dominion.Player player37 = new org.cs362.dominion.Player(gameState30, "");
    java.util.List<org.cs362.dominion.Card> list_card38 = gameState30.cards;
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card43 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card40, cardName42);
    org.cs362.dominion.Card card44 = org.cs362.dominion.Card.getCard(list_card38, cardName42);
    gameState1.cards = list_card38;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str46 = gameState1.toString();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName26.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName28.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card44);

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test322"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card8, type12);
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card6, type12);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card16, cardName18);
    org.cs362.dominion.Card.Type type20 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card21 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card16, type20);
    org.cs362.dominion.Card.Type type22 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card23 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card16, type22);
    org.cs362.dominion.Card.Type type24 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card25 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card23, type24);
    java.util.List<org.cs362.dominion.Card> list_card26 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card14, type24);
    org.cs362.dominion.Card[] card_array27 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card28 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card28, card_array27);
    org.cs362.dominion.Card.CardName cardName30 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card31 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card28, cardName30);
    org.cs362.dominion.Card.CardName cardName32 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card33 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card28, cardName32);
    org.cs362.dominion.Card.Type type34 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card35 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card28, type34);
    java.util.List<org.cs362.dominion.Card> list_card36 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card26, type34);
    org.cs362.dominion.GameState gameState37 = new org.cs362.dominion.GameState(list_card26);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i38 = gameState37.play();
    org.cs362.dominion.Player player40 = new org.cs362.dominion.Player(gameState37, "The board game is embty you need to intialize the game!!!!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type12.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type20.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type22.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type24.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName30.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card31);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName32.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type34.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i38);

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test323"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    org.cs362.dominion.Player player11 = new org.cs362.dominion.Player(gameState7, "hi!");
    boolean b12 = gameState7.isGameOver();
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState7, "");
    java.util.List<org.cs362.dominion.Card> list_card15 = gameState7.cards;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState7, "The board game is embty you need to intialize the game!!!!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test324"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card6, cardName8);
    org.cs362.dominion.Card.Type type10 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card11 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card6, type10);
    gameState1.cards = arraylist_card6;
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player14 = gameState1.players;
    gameState1.initializeGame();
    org.cs362.dominion.Card[] card_array16 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card17 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card17, card_array16);
    org.cs362.dominion.Card.CardName cardName19 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card20 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card17, cardName19);
    org.cs362.dominion.Card.Type type21 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card22 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card17, type21);
    org.cs362.dominion.Card[] card_array23 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card24 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card24, card_array23);
    org.cs362.dominion.Card.CardName cardName26 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card27 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card24, cardName26);
    org.cs362.dominion.Card.Type type28 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card29 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card24, type28);
    java.util.List<org.cs362.dominion.Card> list_card30 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card17, type28);
    org.cs362.dominion.GameState gameState31 = new org.cs362.dominion.GameState(list_card30);
    gameState1.cards = list_card30;
    org.cs362.dominion.Card[] card_array33 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card34 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card34, card_array33);
    org.cs362.dominion.Card.CardName cardName36 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card37 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card34, cardName36);
    org.cs362.dominion.Card.CardName cardName38 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card39 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card34, cardName38);
    org.cs362.dominion.GameState gameState40 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card34);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i41 = gameState40.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i42 = gameState40.play();
    org.cs362.dominion.Player player44 = new org.cs362.dominion.Player(gameState40, "hi!");
    boolean b45 = gameState40.isGameOver();
    org.cs362.dominion.Player player47 = new org.cs362.dominion.Player(gameState40, "");
    java.util.List<org.cs362.dominion.Card> list_card48 = gameState40.cards;
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    org.cs362.dominion.Card.CardName cardName52 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card53 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card50, cardName52);
    org.cs362.dominion.Card card54 = org.cs362.dominion.Card.getCard(list_card48, cardName52);
    org.cs362.dominion.Card[] card_array55 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card56 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card56, card_array55);
    org.cs362.dominion.Card.CardName cardName58 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card59 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card56, cardName58);
    org.cs362.dominion.Card.CardName cardName60 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card61 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card56, cardName60);
    org.cs362.dominion.GameState gameState62 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card56);
    org.cs362.dominion.Card[] card_array63 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card64 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b65 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card64, card_array63);
    org.cs362.dominion.Card.CardName cardName66 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card67 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card64, cardName66);
    org.cs362.dominion.Card.CardName cardName68 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card69 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card64, cardName68);
    org.cs362.dominion.GameState gameState70 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card64);
    org.cs362.dominion.Card.CardName cardName71 = org.cs362.dominion.Card.CardName.Adventurer;
    org.cs362.dominion.Card card72 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card64, cardName71);
    org.cs362.dominion.Card.CardName cardName73 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card74 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card64, cardName73);
    org.cs362.dominion.Card card75 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card56, cardName73);
    org.cs362.dominion.Card card76 = org.cs362.dominion.Card.getCard(list_card48, cardName73);
    org.cs362.dominion.Card.Type type77 = org.cs362.dominion.Card.Type.ACTION_ATTACK;
    java.util.List<org.cs362.dominion.Card> list_card78 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card48, type77);
    org.cs362.dominion.Card[] card_array79 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card80 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b81 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card80, card_array79);
    org.cs362.dominion.Card.CardName cardName82 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card83 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card80, cardName82);
    org.cs362.dominion.Card.CardName cardName84 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card85 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card80, cardName84);
    org.cs362.dominion.GameState gameState86 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card80);
    org.cs362.dominion.Card.Type type87 = null;
    java.util.List<org.cs362.dominion.Card> list_card88 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card80, type87);
    org.cs362.dominion.Card.CardName cardName89 = org.cs362.dominion.Card.CardName.Cooper;
    org.cs362.dominion.Card card90 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card80, cardName89);
    org.cs362.dominion.Card card91 = org.cs362.dominion.Card.getCard(list_card48, cardName89);
    gameState1.cards = list_card48;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type10.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName19.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type21.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName26.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type28.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName36.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName38.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName52.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName58.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card59);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName60.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    org.junit.Assert.assertTrue("'" + cardName66 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName66.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card67);
    org.junit.Assert.assertTrue("'" + cardName68 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName68.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card69);
    org.junit.Assert.assertTrue("'" + cardName71 + "' != '" + org.cs362.dominion.Card.CardName.Adventurer + "'", cardName71.equals(org.cs362.dominion.Card.CardName.Adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card72);
    org.junit.Assert.assertTrue("'" + cardName73 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName73.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card76);
    org.junit.Assert.assertTrue("'" + type77 + "' != '" + org.cs362.dominion.Card.Type.ACTION_ATTACK + "'", type77.equals(org.cs362.dominion.Card.Type.ACTION_ATTACK));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    org.junit.Assert.assertTrue("'" + cardName82 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName82.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card83);
    org.junit.Assert.assertTrue("'" + cardName84 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName84.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card88);
    org.junit.Assert.assertTrue("'" + cardName89 + "' != '" + org.cs362.dominion.Card.CardName.Cooper + "'", cardName89.equals(org.cs362.dominion.Card.CardName.Cooper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card91);

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test325"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    boolean b8 = gameState7.isGameOver();
    org.cs362.dominion.Player player10 = new org.cs362.dominion.Player(gameState7, "");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i11 = gameState7.getWinners();
    org.cs362.dominion.GameState gameState12 = gameState7.clone();
    java.util.List<org.cs362.dominion.Player> list_player13 = gameState12.players;
    org.cs362.dominion.Card[] card_array14 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card15 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card15, card_array14);
    org.cs362.dominion.Card.CardName cardName17 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card18 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card15, cardName17);
    org.cs362.dominion.Card.CardName cardName19 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card20 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card15, cardName19);
    org.cs362.dominion.Card.Type type21 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card22 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card15, type21);
    org.cs362.dominion.Card.CardName cardName23 = null;
    org.cs362.dominion.Card card24 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card15, cardName23);
    gameState12.cards = arraylist_card15;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName17.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName19.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type21.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test326"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    gameState7.initializeGame();
    java.lang.String str9 = gameState7.toString();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState7.gameBoard;
    org.cs362.dominion.GameState gameState11 = gameState7.clone();
    org.cs362.dominion.GameState gameState12 = gameState7.clone();
    java.lang.String str13 = gameState12.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str9.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str13.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test327"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card4 = null;
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState(list_card4);
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState5.cards;
    java.util.List<org.cs362.dominion.Card> list_card7 = gameState5.cards;
    java.util.List<org.cs362.dominion.Player> list_player8 = gameState5.players;
    java.lang.String str9 = gameState5.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i10 = gameState5.getWinners();
    org.cs362.dominion.Card[] card_array11 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card12, card_array11);
    org.cs362.dominion.Card.CardName cardName14 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card15 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card12, cardName14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Curse;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card12, cardName16);
    gameState5.cards = arraylist_card12;
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card12);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState19.gameBoard;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i21 = gameState19.gameBoard;
    gameState3.gameBoard = hashmap_card_i21;
    org.cs362.dominion.GameState gameState23 = gameState3.clone();
    gameState23.initializeGame();
    java.util.List<org.cs362.dominion.Card> list_card25 = null;
    org.cs362.dominion.GameState gameState26 = new org.cs362.dominion.GameState(list_card25);
    java.util.List<org.cs362.dominion.Card> list_card27 = gameState26.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i28 = gameState26.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card29 = null;
    org.cs362.dominion.GameState gameState30 = new org.cs362.dominion.GameState(list_card29);
    java.util.List<org.cs362.dominion.Card> list_card31 = gameState30.cards;
    java.util.List<org.cs362.dominion.Card> list_card32 = gameState30.cards;
    java.util.List<org.cs362.dominion.Player> list_player33 = gameState30.players;
    java.util.List<org.cs362.dominion.Player> list_player34 = gameState30.players;
    gameState26.players = list_player34;
    org.cs362.dominion.Card[] card_array36 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card37 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card37, card_array36);
    org.cs362.dominion.Card.CardName cardName39 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card40 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card37, cardName39);
    org.cs362.dominion.Card.CardName cardName41 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card42 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card37, cardName41);
    org.cs362.dominion.GameState gameState43 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card37);
    java.util.List<org.cs362.dominion.Card> list_card44 = null;
    org.cs362.dominion.GameState gameState45 = new org.cs362.dominion.GameState(list_card44);
    java.util.List<org.cs362.dominion.Card> list_card46 = gameState45.cards;
    java.util.List<org.cs362.dominion.Card> list_card47 = gameState45.cards;
    java.util.List<org.cs362.dominion.Player> list_player48 = gameState45.players;
    gameState43.players = list_player48;
    org.cs362.dominion.Player player51 = new org.cs362.dominion.Player(gameState43, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player53 = new org.cs362.dominion.Player(gameState43, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.lang.String str54 = gameState43.toString();
    java.util.List<org.cs362.dominion.Card> list_card55 = null;
    org.cs362.dominion.GameState gameState56 = new org.cs362.dominion.GameState(list_card55);
    java.util.List<org.cs362.dominion.Card> list_card57 = gameState56.cards;
    java.util.List<org.cs362.dominion.Card> list_card58 = gameState56.cards;
    java.util.List<org.cs362.dominion.Player> list_player59 = gameState56.players;
    java.lang.String str60 = gameState56.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i61 = gameState56.getWinners();
    org.cs362.dominion.Card[] card_array62 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card63 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b64 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card63, card_array62);
    org.cs362.dominion.Card.CardName cardName65 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card66 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card63, cardName65);
    org.cs362.dominion.Card.CardName cardName67 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card68 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card63, cardName67);
    org.cs362.dominion.GameState gameState69 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card63);
    java.util.List<org.cs362.dominion.Card> list_card70 = null;
    org.cs362.dominion.GameState gameState71 = new org.cs362.dominion.GameState(list_card70);
    java.util.List<org.cs362.dominion.Card> list_card72 = gameState71.cards;
    java.util.List<org.cs362.dominion.Card> list_card73 = gameState71.cards;
    java.util.List<org.cs362.dominion.Player> list_player74 = gameState71.players;
    gameState69.players = list_player74;
    org.cs362.dominion.Player player77 = new org.cs362.dominion.Player(gameState69, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player79 = new org.cs362.dominion.Player(gameState69, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.List<org.cs362.dominion.Player> list_player80 = gameState69.players;
    gameState56.players = list_player80;
    gameState43.players = list_player80;
    gameState26.players = list_player80;
    gameState23.players = list_player80;
    org.cs362.dominion.GameState gameState85 = gameState23.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str9.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Curse + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName39.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);
    org.junit.Assert.assertTrue("'" + cardName41 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName41.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str54.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str60.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    org.junit.Assert.assertTrue("'" + cardName65 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName65.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card66);
    org.junit.Assert.assertTrue("'" + cardName67 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName67.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState85);

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test328"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card8, type12);
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type12);
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card16 = null;
    org.cs362.dominion.GameState gameState17 = new org.cs362.dominion.GameState(list_card16);
    java.util.List<org.cs362.dominion.Card> list_card18 = gameState17.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i19 = gameState17.getWinners();
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState17, "");
    org.cs362.dominion.Card card22 = null;
    player21.discard(card22);
    gameState15.addPlayer(player21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type12.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i19);

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test329"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Curse;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    boolean b8 = gameState7.isGameOver();
    org.cs362.dominion.Player player10 = new org.cs362.dominion.Player(gameState7, "");
    org.cs362.dominion.Card[] card_array11 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card12, card_array11);
    org.cs362.dominion.Card.CardName cardName14 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card15 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card12, cardName14);
    org.cs362.dominion.Card.Type type16 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card17 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card12, type16);
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    org.cs362.dominion.Card.CardName cardName21 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card19, cardName21);
    org.cs362.dominion.Card.Type type23 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card24 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card19, type23);
    java.util.List<org.cs362.dominion.Card> list_card25 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card17, type23);
    gameState7.cards = list_card17;
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState7, " --- The board game is embty you need to intialize the game!!!! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Curse + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type16.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName21.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type23.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test330"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.Card.Type type7 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card8 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type7);
    org.cs362.dominion.Card.CardName cardName9 = null;
    org.cs362.dominion.Card card10 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName9);
    org.cs362.dominion.Card.CardName cardName11 = org.cs362.dominion.Card.CardName.Cooper;
    org.cs362.dominion.Card card12 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type7.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Cooper + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Cooper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test331"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card8, type12);
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type12);
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState(list_card14);
    java.util.List<org.cs362.dominion.Player> list_player16 = gameState15.players;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState15.getWinners();
    org.cs362.dominion.Player player19 = new org.cs362.dominion.Player(gameState15, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    boolean b20 = gameState15.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type12.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test332"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i6 = null;
    gameState1.gameBoard = hashmap_card_i6;
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card14 = null;
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState(list_card14);
    java.util.List<org.cs362.dominion.Card> list_card16 = gameState15.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState15.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player18 = gameState15.players;
    gameState9.players = list_player18;
    gameState1.players = list_player18;
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState1, "");
    org.cs362.dominion.Card[] card_array23 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card24 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card24, card_array23);
    org.cs362.dominion.Card.CardName cardName26 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card27 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card24, cardName26);
    org.cs362.dominion.Card.CardName cardName28 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card29 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card24, cardName28);
    org.cs362.dominion.GameState gameState30 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card24);
    gameState30.initializeGame();
    java.lang.String str32 = gameState30.toString();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i33 = gameState30.gameBoard;
    gameState1.gameBoard = hashmap_card_i33;
    java.util.List<org.cs362.dominion.Card> list_card35 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card36 = gameState1.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName26.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName28.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str32.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card36);

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test333"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = null;
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState(list_card3);
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState4.cards;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState4.cards;
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState4.players;
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState4, "hi!");
    gameState1.addPlayer(player9);
    org.cs362.dominion.Card card11 = null;
    player9.discard(card11);
    org.cs362.dominion.Card card13 = null;
    player9.discard(card13);
    player9.buyCard();
    org.cs362.dominion.Card card16 = null;
    player9.discard(card16);
    player9.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test334"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.lang.String str5 = gameState1.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i6 = gameState1.getWinners();
    java.lang.String str7 = gameState1.toString();
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    java.util.List<org.cs362.dominion.Player> list_player13 = gameState9.players;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i14 = null;
    gameState9.gameBoard = hashmap_card_i14;
    java.util.List<org.cs362.dominion.Card> list_card16 = null;
    org.cs362.dominion.GameState gameState17 = new org.cs362.dominion.GameState(list_card16);
    java.util.List<org.cs362.dominion.Card> list_card18 = gameState17.cards;
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState17.cards;
    java.util.List<org.cs362.dominion.Player> list_player20 = gameState17.players;
    java.util.List<org.cs362.dominion.Card> list_card21 = gameState17.cards;
    java.util.List<org.cs362.dominion.Card> list_card22 = null;
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState(list_card22);
    java.util.List<org.cs362.dominion.Card> list_card24 = gameState23.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i25 = gameState23.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player26 = gameState23.players;
    gameState17.players = list_player26;
    gameState9.players = list_player26;
    org.cs362.dominion.Player player30 = new org.cs362.dominion.Player(gameState9, "");
    java.util.List<org.cs362.dominion.Player> list_player31 = gameState9.players;
    gameState1.players = list_player31;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i33 = gameState1.gameBoard;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i34 = gameState1.gameBoard;
    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i35 = gameState1.play();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str7.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i34);

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test335"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Player> list_player5 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card7 = gameState1.cards;
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState1, "hi!");
    player9.printStateGame();
    player9.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card7);

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test336"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type5);
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card8, cardName10);
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card8, type12);
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card6, type12);
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card16, cardName18);
    org.cs362.dominion.Card.CardName cardName20 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card21 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card16, cardName20);
    org.cs362.dominion.Card.Type type22 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card23 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card16, type22);
    org.cs362.dominion.Card.CardName cardName24 = null;
    org.cs362.dominion.Card card25 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card16, cardName24);
    org.cs362.dominion.Card.CardName cardName26 = org.cs362.dominion.Card.CardName.Minion;
    org.cs362.dominion.Card card27 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card16, cardName26);
    org.cs362.dominion.Card.CardName cardName28 = org.cs362.dominion.Card.CardName.Estate;
    org.cs362.dominion.Card card29 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card16, cardName28);
    org.cs362.dominion.Card[] card_array30 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card31 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card31, card_array30);
    org.cs362.dominion.Card.CardName cardName33 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card34 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card31, cardName33);
    org.cs362.dominion.Card.Type type35 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card36 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card31, type35);
    org.cs362.dominion.Card.Type type37 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card38 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card31, type37);
    java.util.List<org.cs362.dominion.Card> list_card39 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card16, type37);
    java.util.List<org.cs362.dominion.Card> list_card40 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card6, type37);
    org.cs362.dominion.Card.CardName cardName41 = org.cs362.dominion.Card.CardName.Cooper;
    org.cs362.dominion.Card card42 = org.cs362.dominion.Card.getCard(list_card6, cardName41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type12.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName20.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type22.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + org.cs362.dominion.Card.CardName.Minion + "'", cardName26.equals(org.cs362.dominion.Card.CardName.Minion));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + org.cs362.dominion.Card.CardName.Estate + "'", cardName28.equals(org.cs362.dominion.Card.CardName.Estate));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName33.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type35.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type37.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    org.junit.Assert.assertTrue("'" + cardName41 + "' != '" + org.cs362.dominion.Card.CardName.Cooper + "'", cardName41.equals(org.cs362.dominion.Card.CardName.Cooper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card42);

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test337"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i6 = gameState1.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card7 = null;
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card7);
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState8.cards;
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState8.cards;
    java.util.List<org.cs362.dominion.Player> list_player11 = gameState8.players;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState8, "hi!");
    player13.buyCard();
    player13.buyCard();
    player13.printStateGame();
    player13.printStateGame();
    java.lang.String str18 = player13.toString();
    gameState1.addPlayer(player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str18.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test338"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState6 = gameState5.clone();
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState6.players;
    org.cs362.dominion.GameState gameState8 = gameState6.clone();
    org.cs362.dominion.GameState gameState9 = gameState6.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState9);

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test339"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = gameState1.cards;
    java.util.List<org.cs362.dominion.Player> list_player4 = gameState1.players;
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card6 = null;
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    java.util.List<org.cs362.dominion.Card> list_card8 = gameState7.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player10 = gameState7.players;
    gameState1.players = list_player10;
    java.lang.String str12 = gameState1.toString();
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState1.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str12.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card13);

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test340"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.List<org.cs362.dominion.Card> list_card3 = null;
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState(list_card3);
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState4.cards;
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState4.cards;
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState4.players;
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState4, "hi!");
    gameState1.addPlayer(player9);
    org.cs362.dominion.Card card11 = null;
    player9.discard(card11);
    player9.printStateGame();
    java.lang.String str14 = player9.toString();
    player9.playKingdomCard();
    player9.printStateGame();
    player9.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str14.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test341"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.gameBoard;
    java.lang.String str9 = gameState7.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i10 = gameState7.play();
    org.cs362.dominion.GameState gameState11 = gameState7.clone();
    gameState11.initializeGame();
    org.cs362.dominion.GameState gameState13 = gameState11.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str9.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState13);

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test342"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    org.cs362.dominion.GameState gameState10 = gameState7.clone();
    org.cs362.dominion.Card[] card_array11 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card12, card_array11);
    org.cs362.dominion.Card.CardName cardName14 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card15 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card12, cardName14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card12, cardName16);
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card12);
    java.util.List<org.cs362.dominion.Card> list_card19 = null;
    org.cs362.dominion.GameState gameState20 = new org.cs362.dominion.GameState(list_card19);
    java.util.List<org.cs362.dominion.Card> list_card21 = gameState20.cards;
    java.util.List<org.cs362.dominion.Card> list_card22 = gameState20.cards;
    java.util.List<org.cs362.dominion.Player> list_player23 = gameState20.players;
    gameState18.players = list_player23;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState18, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState18, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.lang.String str29 = gameState18.toString();
    java.util.List<org.cs362.dominion.Card> list_card30 = null;
    org.cs362.dominion.GameState gameState31 = new org.cs362.dominion.GameState(list_card30);
    java.util.List<org.cs362.dominion.Card> list_card32 = gameState31.cards;
    java.util.List<org.cs362.dominion.Card> list_card33 = gameState31.cards;
    java.util.List<org.cs362.dominion.Player> list_player34 = gameState31.players;
    java.lang.String str35 = gameState31.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i36 = gameState31.getWinners();
    org.cs362.dominion.Card[] card_array37 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card38 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card38, card_array37);
    org.cs362.dominion.Card.CardName cardName40 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card41 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card38, cardName40);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card43 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card38, cardName42);
    org.cs362.dominion.GameState gameState44 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card38);
    java.util.List<org.cs362.dominion.Card> list_card45 = null;
    org.cs362.dominion.GameState gameState46 = new org.cs362.dominion.GameState(list_card45);
    java.util.List<org.cs362.dominion.Card> list_card47 = gameState46.cards;
    java.util.List<org.cs362.dominion.Card> list_card48 = gameState46.cards;
    java.util.List<org.cs362.dominion.Player> list_player49 = gameState46.players;
    gameState44.players = list_player49;
    org.cs362.dominion.Player player52 = new org.cs362.dominion.Player(gameState44, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player54 = new org.cs362.dominion.Player(gameState44, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.List<org.cs362.dominion.Player> list_player55 = gameState44.players;
    gameState31.players = list_player55;
    gameState18.players = list_player55;
    org.cs362.dominion.GameState gameState58 = gameState18.clone();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i59 = gameState18.gameBoard;
    gameState7.gameBoard = hashmap_card_i59;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str29.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str35.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    org.junit.Assert.assertTrue("'" + cardName40 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName40.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card41);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i59);

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test343"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState7.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState7.play();
    org.cs362.dominion.GameState gameState10 = gameState7.clone();
    org.cs362.dominion.GameState gameState11 = gameState7.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test344"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    java.util.List<org.cs362.dominion.Card> list_card2 = gameState1.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card4 = null;
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState(list_card4);
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState5.cards;
    java.util.List<org.cs362.dominion.Card> list_card7 = gameState5.cards;
    java.util.List<org.cs362.dominion.Player> list_player8 = gameState5.players;
    java.util.List<org.cs362.dominion.Player> list_player9 = gameState5.players;
    gameState1.players = list_player9;
    org.cs362.dominion.Player player12 = new org.cs362.dominion.Player(gameState1, "");
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState1, " ---  --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test345"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.Card.CardName cardName3 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card4 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName3);
    org.cs362.dominion.Card.CardName cardName5 = org.cs362.dominion.Card.CardName.Ambassador;
    org.cs362.dominion.Card card6 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName5);
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.List<org.cs362.dominion.Card> list_card8 = null;
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState9.cards;
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    java.util.List<org.cs362.dominion.Player> list_player12 = gameState9.players;
    gameState7.players = list_player12;
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState7, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.lang.String str18 = gameState7.toString();
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    org.cs362.dominion.Card.CardName cardName22 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card23 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card20, cardName22);
    org.cs362.dominion.Card.CardName cardName24 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card25 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card20, cardName24);
    org.cs362.dominion.Card.Type type26 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card27 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card20, type26);
    org.cs362.dominion.Card.Type type28 = org.cs362.dominion.Card.Type.ACTION;
    java.util.List<org.cs362.dominion.Card> list_card29 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card27, type28);
    gameState7.cards = list_card27;
    java.util.List<org.cs362.dominion.Card> list_card31 = null;
    org.cs362.dominion.GameState gameState32 = new org.cs362.dominion.GameState(list_card31);
    java.util.List<org.cs362.dominion.Card> list_card33 = gameState32.cards;
    java.util.List<org.cs362.dominion.Card> list_card34 = gameState32.cards;
    java.util.List<org.cs362.dominion.Player> list_player35 = gameState32.players;
    org.cs362.dominion.Card[] card_array36 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card37 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card37, card_array36);
    org.cs362.dominion.Card.CardName cardName39 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card40 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card37, cardName39);
    org.cs362.dominion.Card.Type type41 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card42 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card37, type41);
    gameState32.cards = arraylist_card37;
    java.util.List<org.cs362.dominion.Card> list_card44 = gameState32.cards;
    org.cs362.dominion.Card[] card_array45 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card46 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card46, card_array45);
    org.cs362.dominion.Card.CardName cardName48 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card49 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card46, cardName48);
    org.cs362.dominion.Card.Type type50 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card51 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card46, type50);
    org.cs362.dominion.Card[] card_array52 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card53 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card53, card_array52);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card53, cardName55);
    org.cs362.dominion.Card.Type type57 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card58 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card53, type57);
    java.util.List<org.cs362.dominion.Card> list_card59 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card51, type57);
    org.cs362.dominion.Card[] card_array60 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card61 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b62 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card61, card_array60);
    org.cs362.dominion.Card.CardName cardName63 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card64 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card61, cardName63);
    org.cs362.dominion.Card.Type type65 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card66 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card61, type65);
    org.cs362.dominion.Card.Type type67 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card68 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card61, type67);
    org.cs362.dominion.Card.Type type69 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card70 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card68, type69);
    java.util.List<org.cs362.dominion.Card> list_card71 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card59, type69);
    org.cs362.dominion.Card[] card_array72 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card73 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b74 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card73, card_array72);
    org.cs362.dominion.Card.CardName cardName75 = org.cs362.dominion.Card.CardName.Province;
    org.cs362.dominion.Card card76 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card73, cardName75);
    org.cs362.dominion.Card.CardName cardName77 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card78 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card73, cardName77);
    org.cs362.dominion.Card.Type type79 = org.cs362.dominion.Card.Type.ACTION_VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card80 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card73, type79);
    java.util.List<org.cs362.dominion.Card> list_card81 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card71, type79);
    java.util.List<org.cs362.dominion.Card> list_card82 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card44, type79);
    gameState7.cards = list_card82;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName3.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + org.cs362.dominion.Card.CardName.Ambassador + "'", cardName5.equals(org.cs362.dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str18.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName22.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName24.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type26.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.cs362.dominion.Card.Type.ACTION + "'", type28.equals(org.cs362.dominion.Card.Type.ACTION));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName39.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);
    org.junit.Assert.assertTrue("'" + type41 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type41.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName48.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card49);
    org.junit.Assert.assertTrue("'" + type50 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type50.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    org.junit.Assert.assertTrue("'" + type57 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type57.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    org.junit.Assert.assertTrue("'" + cardName63 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName63.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card64);
    org.junit.Assert.assertTrue("'" + type65 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type65.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card66);
    org.junit.Assert.assertTrue("'" + type67 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type67.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card68);
    org.junit.Assert.assertTrue("'" + type69 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type69.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    org.junit.Assert.assertTrue("'" + cardName75 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName75.equals(org.cs362.dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card76);
    org.junit.Assert.assertTrue("'" + cardName77 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName77.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card78);
    org.junit.Assert.assertTrue("'" + type79 + "' != '" + org.cs362.dominion.Card.Type.ACTION_VICTORY + "'", type79.equals(org.cs362.dominion.Card.Type.ACTION_VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card82);

  }

}
