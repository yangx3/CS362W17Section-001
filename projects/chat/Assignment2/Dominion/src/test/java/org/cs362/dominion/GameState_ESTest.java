/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 01 10:21:17 GMT 2017
 */

package org.cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.cs362.dominion.Card;
import org.cs362.dominion.GameState;
import org.cs362.dominion.Player;
import org.cs362.dominion.Randomness;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.TooManyResourcesException;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class GameState_ESTest extends GameState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      stack0.clone();
      GameState gameState0 = new GameState((List<Card>) stack0);
      gameState0.initializeGame();
      gameState0.isGameOver();
      Random.setNextRandom(1000000000);
      ArrayList<Player> arrayList0 = new ArrayList<Player>();
      Player player0 = new Player(gameState0, "");
      stack0.containsAll(gameState0.cards);
      arrayList0.add(player0);
      gameState0.players = (List<Player>) arrayList0;
      gameState0.isGameOver();
      stack0.trimToSize();
      gameState0.cards = (List<Card>) stack0;
      Randomness.random = null;
      Random.setNextRandom(1000000000);
      Card.Type.values();
      Randomness.random = null;
      gameState0.initializeGame();
      gameState0.initializeGame();
      gameState0.getWinners();
      arrayList0.add(player0);
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Card.Type.values();
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) null);
      gameState0.players = null;
      // Undeclared exception!
      try { 
        gameState0.getWinners();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Randomness.reset((-2747L));
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      gameState0.gameBoard = hashMap0;
      GameState gameState1 = gameState0.clone();
      gameState0.isGameOver();
      gameState1.getWinners();
      Card.CardName card_CardName0 = Card.CardName.Gardens;
      Player player0 = new Player(gameState1, "s*^{h");
      player0.drawCard();
      Integer integer0 = new Integer((-23));
      hashMap0.put((Card) null, integer0);
      Card.getCard(gameState0.cards, card_CardName0);
      Integer integer1 = new Integer(1);
      Integer.getInteger("s*^{h", (-23));
      gameState0.initializeGame();
      gameState0.play();
      gameState1.isGameOver();
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      Card.CardName.values();
      Randomness.reset(135L);
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      gameState1.cards = (List<Card>) arrayList0;
      // Undeclared exception!
      try { 
        Card.CardName.valueOf(" is playing");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.cs362.dominion.Card.CardName. is playing
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      Player player1 = player0.clone();
      player0.endTurn();
      List<Card> list0 = player1.hand;
      GameState gameState0 = new GameState(list0);
      gameState0.addPlayer(player1);
      GameState gameState1 = gameState0.clone();
      gameState1.addPlayer(player0);
      // Undeclared exception!
      try { 
        gameState1.initializeGame();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Card.Type.values();
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "");
      Player player1 = player0.clone();
      gameState0.addPlayer(player1);
      gameState0.getWinners();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      // Undeclared exception!
      try { 
        gameState0.isGameOver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      gameState0.toString();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long long0 = 2513L;
      Randomness.reset(2513L);
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      gameState0.play();
      Player player0 = new Player(gameState0, "|U#^Eu_r:? E;$3SAs");
      gameState0.cards = list0;
      gameState0.addPlayer(player0);
      gameState0.cards = list0;
      String string0 = "";
      Player player1 = new Player(gameState0, "");
      Player player2 = player1.clone();
      player2.playKingdomCard();
      gameState0.addPlayer(player2);
      int int0 = 10;
      Random.setNextRandom(10);
      gameState0.play();
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      gameState0.gameBoard = gameState0.gameBoard;
      gameState0.isGameOver();
      gameState0.getWinners();
      Player player0 = new Player(gameState0, "s1q{");
      player0.drawCard();
      Integer integer0 = new Integer(1);
      gameState0.gameBoard.put((Card) null, integer0);
      gameState0.initializeGame();
      gameState0.play();
      gameState0.isGameOver();
      // Undeclared exception!
      try { 
        gameState0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      gameState0.gameBoard = gameState0.gameBoard;
      gameState0.isGameOver();
      gameState0.getWinners();
      Card.CardName card_CardName0 = Card.CardName.Gardens;
      Player player0 = new Player(gameState0, "ZK\"b^&p|;1N+PDq=");
      Player player1 = player0.clone();
      player1.endTurn();
      gameState0.addPlayer(player1);
      String string0 = "s1q";
      Player player2 = new Player(gameState0, "s1q");
      player2.printStateGame();
      player2.drawCard();
      Card.getCard(gameState0.cards, card_CardName0);
      Integer integer0 = new Integer(1);
      gameState0.gameBoard.put((Card) null, integer0);
      gameState0.initializeGame();
      // Undeclared exception!
      try { 
        gameState0.play();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "";
      Player player0 = new Player((GameState) null, "");
      Player player1 = player0.clone();
      player0.endTurn();
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      gameState0.addPlayer(player1);
      GameState gameState1 = gameState0.clone();
      gameState1.addPlayer(player0);
      gameState1.addPlayer(player0);
      gameState1.addPlayer(player0);
      // Undeclared exception!
      try { 
        gameState1.initializeGame();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, "The board game is embty you need to intialize the game!!!!");
      Player player1 = player0.clone();
      player1.drawCard();
      String string0 = "Mine";
      Integer.getInteger("Mine");
      gameState0.gameBoard.put((Card) null, (Integer) null);
      gameState0.addPlayer(player0);
      gameState0.initializeGame();
      // Undeclared exception!
      try { 
        gameState0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
