/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 01 10:16:47 GMT 2017
 */

package org.cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import java.util.function.BiFunction;
import org.cs362.dominion.Card;
import org.cs362.dominion.GameState;
import org.cs362.dominion.Player;
import org.cs362.dominion.Randomness;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.TooManyResourcesException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "K6");
      player0.toString();
      player0.playTreasureCard();
      player0.discard = gameState0.cards;
      player0.playKingdomCard();
      player0.drawCard();
      Card card0 = player0.drawCard();
      player0.discard(card0);
      int int0 = player0.numBuys;
      Stack<Player> stack0 = new Stack<Player>();
      gameState0.players = (List<Player>) stack0;
      player0.initializePlayerTurn();
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      stack0.removeAll(gameState0.players);
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card.getCard(gameState0.cards, card_CardName0);
      Integer integer0 = new Integer((-2488));
      hashMap0.put((Card) null, integer0);
      gameState0.gameBoard = hashMap0;
      String string0 = player0.player_username;
      gameState0.cards = list0;
      player0.playTreasureCard();
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "K6");
      player0.toString();
      player0.playTreasureCard();
      player0.discard = gameState0.cards;
      player0.playKingdomCard();
      Card card0 = player0.drawCard();
      player0.discard(card0);
      int int0 = player0.numBuys;
      Stack<Player> stack0 = new Stack<Player>();
      gameState0.players = (List<Player>) stack0;
      player0.initializePlayerTurn();
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      stack0.removeAll(gameState0.players);
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card.getCard(gameState0.cards, card_CardName0);
      Integer integer0 = new Integer((-2488));
      hashMap0.put((Card) null, integer0);
      gameState0.gameBoard = hashMap0;
      String string0 = player0.player_username;
      gameState0.cards = list0;
      player0.coins = 1724;
      player0.playTreasureCard();
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      player0.numActions = 9;
      player0.buyCard();
      player0.player_username = "q4|N.#\u0004$Q6x~C";
      player0.coins = (-3332);
      List<Card> list0 = player0.playedCards;
      List<Card> list1 = Card.createCards();
      player0.hand = list1;
      player0.numActions = 9;
      player0.discard = list0;
      // Undeclared exception!
      try { 
        player0.playKingdomCard();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "K6");
      player0.toString();
      player0.playTreasureCard();
      player0.discard = gameState0.cards;
      player0.playKingdomCard();
      int int0 = player0.numBuys;
      Stack<Player> stack0 = new Stack<Player>();
      gameState0.players = (List<Player>) stack0;
      player0.initializePlayerTurn();
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      gameState0.gameBoard = hashMap0;
      Integer integer0 = new Integer(1477);
      hashMap0.put((Card) null, integer0);
      String string0 = player0.player_username;
      gameState0.cards = list0;
      player0.playTreasureCard();
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "K6");
      gameState0.toString();
      player0.playTreasureCard();
      player0.discard = gameState0.cards;
      player0.playKingdomCard();
      player0.coins = 3;
      int int0 = player0.numBuys;
      Stack<Player> stack0 = new Stack<Player>();
      gameState0.players = (List<Player>) stack0;
      Card card0 = player0.drawCard();
      stack0.remove((Object) card0);
      player0.playTreasureCard();
      player0.initializePlayerTurn();
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      gameState0.gameBoard = hashMap0;
      Player player1 = new Player(gameState0, "The board game is embty you need to intialize the game!!!!");
      String string0 = player1.player_username;
      player0.playTreasureCard();
      player0.scoreFor();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "K6");
      player0.toString();
      player0.playTreasureCard();
      player0.discard = gameState0.cards;
      player0.playKingdomCard();
      int int0 = player0.numBuys;
      Stack<Player> stack0 = new Stack<Player>();
      gameState0.players = (List<Player>) stack0;
      player0.initializePlayerTurn();
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      Card card0 = player0.drawCard();
      hashMap0.put(card0, (Integer) null);
      gameState0.gameBoard = hashMap0;
      Card card1 = player0.drawCard();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        hashMap0.merge(card1, integer0, (BiFunction<? super Integer, ? super Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      player0.numActions = 0;
      player0.buyCard();
      player0.player_username = "q|N.#\u0004$Q6x~C";
      player0.coins = (-3332);
      List<Card> list0 = player0.hand;
      player0.discard = list0;
      player0.playKingdomCard();
      player0.clone();
      player0.playTreasureCard();
      player0.initializePlayerTurn();
      // Undeclared exception!
      try { 
        player0.endTurn();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>(1933, (-1742));
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "gCRGm+MK[");
      player0.drawCard();
      player0.coins = 1933;
      Card.CardName card_CardName0 = Card.CardName.Cutpurse;
      Card.CardName card_CardName1 = Card.CardName.Silver;
      Card.getCard(gameState0.cards, card_CardName1);
      Card.getCard(vector0, card_CardName0);
      vector0.add((Card) null);
      Player player1 = new Player(gameState0, "");
      player1.endTurn();
      Player player2 = player1.clone();
      player2.playedCards = gameState0.cards;
      player2.playKingdomCard();
      Random.setNextRandom(1933);
      // Undeclared exception!
      try { 
        player0.scoreFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Card.Type.values();
      Card.CardName.values();
      Randomness.totalCallsToRandom = (-2511);
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "");
      gameState1.play();
      player0.coins = (-2511);
      player0.discard = gameState1.cards;
      player0.endTurn();
      gameState0.isGameOver();
      gameState1.addPlayer(player0);
      player0.numBuys = (-863);
      player0.scoreFor();
      player0.endTurn();
      Card card0 = player0.drawCard();
      player0.gain(card0);
      Player player1 = new Player(gameState1, "");
      player1.playTreasureCard();
      Randomness.random = null;
      player1.printStateGame();
      // Undeclared exception!
      try { 
        Card.Type.valueOf("gt*vXgAub,O]g|k&h{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.cs362.dominion.Card.Type.gt*vXgAub,O]g|k&h{
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "TooLarge");
      player0.discard = list0;
      player0.numBuys = 1783;
      player0.initializePlayerTurn();
      player0.drawCard();
      player0.playTreasureCard();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      player0.numActions = (-26);
      player0.buyCard();
      player0.player_username = "q4|N.#\u0004$Q6x~C";
      List<Card> list0 = player0.hand;
      player0.numActions = (-26);
      player0.discard = list0;
      player0.playKingdomCard();
      player0.clone();
      player0.playTreasureCard();
      player0.initializePlayerTurn();
      Player player1 = new Player((GameState) null, "\"4<e5,<@oI bA[#d+I");
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      gameState0.toString();
      gameState0.initializeGame();
      Player player0 = new Player(gameState0, "");
      player0.endTurn();
      int int0 = player0.numActions;
      player0.clone();
      int int1 = player0.coins;
      player0.drawCard();
      // Undeclared exception!
      try { 
        player0.scoreFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      gameState0.cards = (List<Card>) arrayList0;
      Player player0 = new Player(gameState0, (String) null);
      gameState0.cards = (List<Card>) arrayList0;
      player0.numBuys = 414;
      player0.clone();
      player0.drawCard();
      arrayList0.add((Card) null);
      // Undeclared exception!
      try { 
        player0.scoreFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      gameState0.toString();
      gameState0.initializeGame();
      Player player0 = new Player(gameState0, "");
      Player player1 = player0.clone();
      player1.endTurn();
      int int0 = player1.numActions;
      player0.deck = null;
      // Undeclared exception!
      try { 
        player0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Randomness.nextRandomInt(104);
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, ";{WExT!j<_L-V2IIBv");
      player0.coins = 854;
      Player player1 = player0.clone();
      player0.playKingdomCard();
      player1.gain((Card) null);
      player0.scoreFor();
      player1.endTurn();
      player0.gain((Card) null);
      player1.endTurn();
      player1.discard((Card) null);
      Randomness.nextRandomInt(854);
      player0.buyCard();
      Card.Type.values();
      // Undeclared exception!
      try { 
        Randomness.nextRandomInt(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      GameState gameState1 = gameState0.clone();
      gameState1.gameBoard = gameState0.gameBoard;
      gameState0.clone();
      Player player0 = new Player(gameState1, "9.AaS&Y9EnNpZvKsq|+");
      gameState0.isGameOver();
      Player player1 = player0.clone();
      player1.numActions = (-1671);
      player0.player_username = "9.AaS&Y9EnNpZvKsq|+";
      player0.hand = (List<Card>) arrayList0;
      player1.toString();
      gameState0.getWinners();
      player0.toString();
      // Undeclared exception!
      try { 
        Card.Type.valueOf("Deck: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.cs362.dominion.Card.Type.Deck: 
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>(1933, (-1742));
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "");
      player0.drawCard();
      vector0.add((Card) null);
      player0.endTurn();
      Player player1 = player0.clone();
      player1.playedCards = gameState0.cards;
      player1.playKingdomCard();
      player0.toString();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      Card.CardName card_CardName0 = Card.CardName.Silver;
      Card.getCard(vector0, card_CardName0);
      Card.CardName card_CardName1 = Card.CardName.Cutpurse;
      Card.getCard(vector0, card_CardName1);
      vector0.add((Card) null);
      GameState gameState0 = new GameState((List<Card>) vector0);
      vector0.add((Card) null);
      Player player0 = new Player(gameState0, "0@6kO=/F=gr&%69t");
      player0.hand = (List<Card>) vector0;
      player0.endTurn();
      Randomness.random = null;
      // Undeclared exception!
      try { 
        player0.scoreFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      Player player1 = player0.clone();
      List<Card> list0 = Card.createCards();
      player1.playedCards = list0;
      player1.endTurn();
      player0.buyCard();
      // Undeclared exception!
      try { 
        player0.printStateGame();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      player0.drawCard();
      player0.gain((Card) null);
      int int0 = player0.numBuys;
      Card.Type.values();
      // Undeclared exception!
      try { 
        player0.drawCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      player0.drawCard();
      player0.numActions = 0;
      player0.buyCard();
      player0.player_username = "q4|N.#\u0004$Q6x~C";
      player0.coins = (-3332);
      List<Card> list0 = player0.hand;
      player0.numActions = 0;
      player0.discard = list0;
      player0.playKingdomCard();
      player0.clone();
      // Undeclared exception!
      try { 
        player0.playTreasureCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player((GameState) null, "GySMt%a$q");
      // Undeclared exception!
      try { 
        player0.initializePlayerTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "TooLarge");
      LinkedList<Card> linkedList0 = player0.deck;
      Card.CardName card_CardName0 = Card.CardName.Mine;
      gameState1.play();
      Card.getCard(linkedList0, card_CardName0);
      Card.createCards();
      linkedList0.add((Card) null);
      player0.playTreasureCard();
      // Undeclared exception!
      try { 
        player0.scoreFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      GameState gameState1 = gameState0.clone();
      String string0 = "H/m1zb-cD{?e";
      Player player0 = new Player(gameState1, "H/m1zb-cD{?e");
      player0.drawCard();
      player0.discard((Card) null);
      Player player1 = player0.clone();
      gameState0.addPlayer(player1);
      GameState gameState2 = gameState0.clone();
      Player player2 = new Player(gameState2, "H/m1zb-cD{?e");
      gameState0.players = gameState2.players;
      gameState0.toString();
      player2.numActions = (-634);
      player2.numActions = (-634);
      player2.player_username = "H/m1zb-cD{?e";
      Card.Type.values();
      // Undeclared exception!
      try { 
        gameState0.play();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "K6");
      player0.toString();
      player0.playTreasureCard();
      player0.discard = gameState0.cards;
      player0.playKingdomCard();
      int int0 = player0.numBuys;
      Stack<Player> stack0 = new Stack<Player>();
      gameState0.players = (List<Player>) stack0;
      player0.initializePlayerTurn();
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      stack0.removeAll(gameState0.players);
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card.getCard(gameState0.cards, card_CardName0);
      Integer integer0 = new Integer(0);
      hashMap0.put((Card) null, integer0);
      gameState0.gameBoard = hashMap0;
      String string0 = player0.player_username;
      gameState0.cards = list0;
      player0.playTreasureCard();
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      String string0 = "K6";
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "K6");
      player0.toString();
      player0.playTreasureCard();
      player0.discard = gameState0.cards;
      player0.playKingdomCard();
      Card card0 = player0.drawCard();
      int int0 = player0.numBuys;
      Stack<Player> stack0 = new Stack<Player>();
      gameState0.players = (List<Player>) stack0;
      player0.initializePlayerTurn();
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      stack0.removeAll(gameState0.players);
      Integer integer0 = new Integer(880);
      hashMap0.put(card0, integer0);
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card.getCard(gameState0.cards, card_CardName0);
      Integer integer1 = new Integer((-2488));
      hashMap0.put((Card) null, integer1);
      gameState0.gameBoard = hashMap0;
      String string1 = player0.player_username;
      gameState0.cards = list0;
      player0.playTreasureCard();
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      String string0 = "K6";
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "K6");
      player0.toString();
      player0.playTreasureCard();
      player0.discard = gameState0.cards;
      player0.playKingdomCard();
      Card card0 = player0.drawCard();
      player0.discard(card0);
      int int0 = player0.numBuys;
      Stack<Player> stack0 = new Stack<Player>();
      gameState0.players = (List<Player>) stack0;
      player0.initializePlayerTurn();
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      stack0.removeAll(gameState0.players);
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card.getCard(gameState0.cards, card_CardName0);
      Integer integer0 = new Integer((-2488));
      hashMap0.put((Card) null, integer0);
      gameState0.gameBoard = hashMap0;
      String string1 = player0.player_username;
      gameState0.cards = list0;
      player0.playTreasureCard();
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      String string0 = "K6";
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "K6");
      player0.toString();
      player0.playTreasureCard();
      player0.discard = gameState0.cards;
      player0.playKingdomCard();
      player0.drawCard();
      int int0 = player0.numBuys;
      Stack<Player> stack0 = new Stack<Player>();
      gameState0.players = (List<Player>) stack0;
      player0.initializePlayerTurn();
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      stack0.removeAll(gameState0.players);
      Integer integer0 = new Integer(880);
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card.getCard(gameState0.cards, card_CardName0);
      Integer integer1 = new Integer((-2488));
      hashMap0.put((Card) null, integer1);
      gameState0.gameBoard = hashMap0;
      String string1 = player0.player_username;
      gameState0.cards = list0;
      player0.playTreasureCard();
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      String string0 = "K6";
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "K6");
      player0.toString();
      player0.playTreasureCard();
      player0.discard = gameState0.cards;
      player0.playKingdomCard();
      Card card0 = player0.drawCard();
      player0.discard(card0);
      int int0 = player0.numBuys;
      Stack<Player> stack0 = new Stack<Player>();
      gameState0.players = (List<Player>) stack0;
      player0.initializePlayerTurn();
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      stack0.removeAll(gameState0.players);
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card.getCard(gameState0.cards, card_CardName0);
      Integer integer0 = new Integer(43);
      hashMap0.put((Card) null, integer0);
      gameState0.gameBoard = hashMap0;
      String string1 = player0.player_username;
      gameState0.cards = list0;
      player0.playTreasureCard();
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      String string0 = "K";
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "K");
      player0.toString();
      player0.playTreasureCard();
      player0.discard = gameState0.cards;
      player0.playKingdomCard();
      Card card0 = player0.drawCard();
      player0.discard(card0);
      int int0 = player0.numBuys;
      Stack<Player> stack0 = new Stack<Player>();
      gameState0.players = (List<Player>) stack0;
      player0.initializePlayerTurn();
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      stack0.removeAll(gameState0.players);
      Card.CardName card_CardName0 = Card.CardName.Feast;
      Card.getCard(gameState0.cards, card_CardName0);
      Integer integer0 = new Integer((-2488));
      Integer integer1 = new Integer((-2488));
      gameState0.gameBoard = hashMap0;
      String string1 = player0.player_username;
      gameState0.cards = list0;
      player0.playTreasureCard();
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "K6");
      player0.toString();
      player0.playTreasureCard();
      player0.discard = list0;
      player0.playKingdomCard();
      int int0 = player0.numBuys;
      Stack<Player> stack0 = new Stack<Player>();
      gameState0.players = (List<Player>) stack0;
      player0.initializePlayerTurn();
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      stack0.removeAll(gameState0.players);
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card.getCard(gameState0.cards, card_CardName0);
      Integer integer0 = new Integer((-2493));
      hashMap0.put((Card) null, integer0);
      gameState0.gameBoard = hashMap0;
      String string0 = player0.player_username;
      gameState0.cards = list0;
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "K6");
      player0.toString();
      player0.playTreasureCard();
      player0.discard = gameState0.cards;
      player0.playKingdomCard();
      int int0 = player0.numBuys;
      Stack<Player> stack0 = new Stack<Player>();
      gameState0.players = (List<Player>) stack0;
      player0.initializePlayerTurn();
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      stack0.removeAll(gameState0.players);
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card.getCard(gameState0.cards, card_CardName0);
      Integer integer0 = new Integer(0);
      hashMap0.put((Card) null, integer0);
      gameState0.gameBoard = hashMap0;
      String string0 = player0.player_username;
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Card.Type.values();
      Card.CardName.values();
      Randomness.totalCallsToRandom = (-2511);
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "");
      gameState1.play();
      player0.coins = (-2511);
      player0.endTurn();
      gameState0.isGameOver();
      gameState1.addPlayer(player0);
      player0.playedCards = gameState0.cards;
      player0.numBuys = (-863);
      player0.scoreFor();
      player0.endTurn();
      Card card0 = player0.drawCard();
      player0.gain(card0);
      Player player1 = new Player(gameState1, "^~Vkpj KPL,f'.");
      player1.playTreasureCard();
      Randomness.random = null;
      player1.printStateGame();
      // Undeclared exception!
      try { 
        Card.Type.valueOf("gt*vXgAub,O]g|k&h{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.cs362.dominion.Card.Type.gt*vXgAub,O]g|k&h{
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>(1933, 1933);
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "gCRGm+MK[");
      player0.drawCard();
      vector0.add((Card) null);
      Player player1 = player0.clone();
      player1.endTurn();
      Player player2 = player1.clone();
      player2.playedCards = gameState0.cards;
      player2.playKingdomCard();
      Random.setNextRandom(1933);
      // Undeclared exception!
      try { 
        player0.scoreFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GameState gameState0 = null;
      String string0 = "";
      Player player0 = new Player((GameState) null, "");
      player0.numActions = 9;
      player0.buyCard();
      player0.player_username = "q4|N.#\u0004$Q6x~C";
      int int0 = (-3332);
      player0.coins = (-3332);
      List<Card> list0 = Card.createCards();
      List<Card> list1 = Card.createCards();
      player0.hand = list1;
      player0.numActions = 9;
      player0.discard = list0;
      // Undeclared exception!
      try { 
        player0.playKingdomCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }
}
