/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 13 22:11:01 GMT 2017
 */

package org.cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.cs362.dominion.Card;
import org.cs362.dominion.Player;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player();
      player0.printHand();
      Vector<Card> vector0 = player0.getInPlay();
      player0.getHandSize();
      player0.inPlayCards = vector0;
      Vector<Card> vector1 = player0.playerHand;
      player0.initilizeDeck();
      Vector<Card> vector2 = player0.inPlayCards;
      player0.playerHand = vector0;
      player0.getHandSize();
      player0.clearPhase();
      player0.printHand();
      // Undeclared exception!
      try { 
        player0.clearPhase();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player();
      player0.playerHand = null;
      player0.getHand();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player();
      player0.shuffleDeck();
      player0.getInPlay();
      player0.initilizeDeck();
      player0.shuffleDeck();
      player0.getMonOnHand();
      Vector<Card> vector0 = player0.playerDeck;
      player0.printHand();
      player0.drawCard(0);
      player0.playAdventurer();
      player0.getVicPoints();
      player0.initilizeDeck();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player();
      player0.playerHand = null;
      // Undeclared exception!
      try { 
        player0.printHand();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player();
      Vector<Card> vector0 = player0.inPlayCards;
      player0.playerHand = vector0;
      player0.playerDiscard = null;
      player0.discard((Card) null);
      player0.getHand();
      player0.getMonOnHand();
      player0.inPlayCards = null;
      // Undeclared exception!
      try { 
        player0.initilizeDeck();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player();
      player0.initilizeDeck();
      // Undeclared exception!
      try { 
        player0.clearPhase();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player();
      // Undeclared exception!
      try { 
        player0.drawToDiscard(2056);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player();
      player0.playerDiscard = null;
      // Undeclared exception!
      try { 
        player0.clearPhase();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player();
      player0.initilizeDeck();
      player0.playAdventurer();
      player0.shuffleDeck();
      player0.drawToDiscard((-1181));
      player0.playAdventurer();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player();
      player0.getMonOnHand();
      player0.drawToDiscard((-564));
      player0.getVicPoints();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player();
      player0.getVicPoints();
      player0.getVicPoints();
      player0.initilizeDeck();
      player0.drawToDiscard(1084);
      // Undeclared exception!
      try { 
        player0.drawCard(1084);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player();
      player0.gain((Card) null);
      player0.gain((Card) null);
      player0.playerDiscard = null;
      player0.getMonOnHand();
      player0.gainToHand((Card) null);
      // Undeclared exception!
      try { 
        player0.gain((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player();
      Vector<Card> vector0 = player0.getInPlay();
      player0.inPlayCards = vector0;
      player0.drawToDiscard(0);
      player0.playerHand = vector0;
      player0.printHand();
      player0.getVicPoints();
      player0.gainToHand((Card) null);
      player0.getInPlay();
      // Undeclared exception!
      try { 
        player0.getVicPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player();
      player0.playerHand = null;
      // Undeclared exception!
      try { 
        player0.playAction();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player();
      player0.getMonOnHand();
      player0.getVicPoints();
      player0.playerDeck = null;
      // Undeclared exception!
      try { 
        player0.shuffleDeck();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player();
      player0.drawCard((-1040705295));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player();
      Vector<Card> vector0 = player0.getInPlay();
      player0.inPlayCards = vector0;
      player0.initilizeDeck();
      player0.getHand();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player();
      player0.getHandSize();
      player0.getMonOnHand();
      player0.playerDeck = null;
      player0.inPlayCards = null;
      Vector<Card> vector0 = player0.playerDiscard;
      player0.playerHand = vector0;
      player0.getMonOnHand();
      player0.playerHand = vector0;
      // Undeclared exception!
      try { 
        player0.playAction();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player();
      Vector<Card> vector0 = player0.playerDiscard;
      player0.getVicPoints();
      player0.playerDiscard = vector0;
      player0.playerHand = vector0;
      player0.playerDeck = vector0;
      Vector<Card> vector1 = player0.playerDiscard;
      player0.inPlayCards = vector1;
      player0.getHandSize();
      player0.playerDeck = vector0;
      player0.getVicPoints();
      player0.shuffleDeck();
      Vector<Card> vector2 = player0.playerDiscard;
      player0.initilizeDeck();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player();
      player0.printHand();
      // Undeclared exception!
      try { 
        player0.playAction();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player();
      player0.initilizeDeck();
      player0.playAdventurer();
      // Undeclared exception!
      try { 
        player0.playAction();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player();
      player0.getHandSize();
      player0.getHandSize();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player();
      player0.getHandSize();
      player0.drawCard(0);
      Vector<Card> vector0 = player0.getHand();
      player0.playerHand = vector0;
      player0.trash((Card) null, "actionvictory");
      player0.playerHand = vector0;
      // Undeclared exception!
      try { 
        player0.clearPhase();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player();
      Card card0 = new Card("");
      player0.gain(card0);
      player0.discard(card0);
      Vector<Card> vector0 = player0.inPlayCards;
      player0.playerHand = vector0;
      player0.initilizeDeck();
      player0.gainToHand(card0);
      player0.gain(card0);
      Player player1 = new Player();
      // Undeclared exception!
      try { 
        player0.getMonOnHand();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player();
      Card card0 = new Card("");
      // Undeclared exception!
      try { 
        player0.trash(card0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player();
      Vector<Card> vector0 = player0.inPlayCards;
      player0.playerDiscard = vector0;
      player0.getVicPoints();
      Card card0 = new Card("Adventurer");
      card0.getType();
      card0.getType();
      card0.getType();
      vector0.add(card0);
      vector0.add(0, card0);
      vector0.iterator();
      // Undeclared exception!
      try { 
        player0.clearPhase();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Player player0 = new Player();
      player0.shuffleDeck();
      player0.getInPlay();
      player0.initilizeDeck();
      player0.printHand();
      player0.shuffleDeck();
      player0.getMonOnHand();
      Vector<Card> vector0 = player0.playerDeck;
      player0.printHand();
      player0.drawCard(0);
      player0.getHandSize();
      player0.playAdventurer();
      player0.getVicPoints();
      player0.initilizeDeck();
      assertEquals(5, player0.getHandSize());
  }
}
