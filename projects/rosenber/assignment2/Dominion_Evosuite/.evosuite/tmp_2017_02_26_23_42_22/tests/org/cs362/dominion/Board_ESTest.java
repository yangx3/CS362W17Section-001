/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 07:57:36 GMT 2017
 */

package org.cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.cs362.dominion.Board;
import org.cs362.dominion.Card;
import org.cs362.dominion.Deck;
import org.cs362.dominion.Player;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Board_ESTest extends Board_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Board board0 = new Board();
      Player player0 = new Player(".Lf*c<}p&[9V", false);
      Card card0 = player0.playCard();
      board0.createDeck(card0, (-1686));
      assertEquals(0, card0.getCost());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Board board0 = new Board();
      int int0 = board0.numCardsInDeck("Trash");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Board board0 = new Board();
      board0.addToTrash((Card) null);
      int int0 = board0.numCardsInDeck("Trash");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Board board0 = new Board();
      int int0 = board0.numCardsInDeck(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Board board0 = new Board();
      Player player0 = new Player("c-_5b_|%L\"#\"_|'=~", false);
      Card card0 = player0.playCard();
      board0.createDeck(card0, 59);
      int int0 = board0.numCardsInDeck(1);
      assertEquals(59, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Board board0 = new Board();
      board0.addToDeck((Card) null, 0);
      Card card0 = board0.lookAtDeck(0);
      assertNull(card0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Board board0 = new Board();
      Player player0 = new Player("UI]`JUkpH2oEH.sTR", true);
      Card card0 = player0.playCard();
      board0.addToTrash(card0);
      Card card1 = board0.lookAtDeck(0);
      assertSame(card1, card0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Board board0 = new Board();
      String string0 = board0.getName(0);
      assertEquals("Trash", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Board board0 = new Board();
      Player player0 = new Player("*U", true);
      Card card0 = player0.playCard();
      board0.createDeck(card0, 1);
      String string0 = board0.getName(1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Board board0 = new Board();
      int int0 = board0.getDeckIdx("Trash");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Board board0 = new Board();
      Player player0 = new Player("*U", true);
      Card card0 = player0.playCard();
      board0.createDeck(card0, 1);
      Deck deck0 = board0.getDeck(1);
      assertEquals(1, deck0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Board board0 = new Board();
      Player player0 = new Player("*U", true);
      Card card0 = player0.playCard();
      board0.createDeck(card0, 1);
      Card card1 = board0.draw(1);
      assertNotSame(card1, card0);
      
      Deck deck0 = board0.getDeck(1);
      assertEquals(0, deck0.size());
      assertEquals("", deck0.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Board board0 = new Board();
      // Undeclared exception!
      try { 
        board0.numCardsInDeck(434);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 434, Size: 1
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Board board0 = new Board();
      // Undeclared exception!
      try { 
        board0.lookAtDeck(621);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 621, Size: 1
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Board board0 = new Board();
      // Undeclared exception!
      try { 
        board0.getName((-579));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Board board0 = new Board();
      // Undeclared exception!
      try { 
        board0.getDeck((-479));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Board board0 = new Board();
      // Undeclared exception!
      try { 
        board0.draw(477);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 477, Size: 1
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Board board0 = new Board();
      Player player0 = new Player("H]3k3s}F\">z6`V`-;", false);
      Card card0 = player0.playCard();
      // Undeclared exception!
      try { 
        board0.createDeck(card0, 1000000000);
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Board board0 = new Board();
      // Undeclared exception!
      try { 
        board0.createDeck((Card) null, 37);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Board board0 = new Board();
      // Undeclared exception!
      try { 
        board0.addToDeck((Card) null, (-2064));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Board board0 = new Board();
      // Undeclared exception!
      try { 
        board0.getDeckIdx((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Board board0 = new Board();
      Player player0 = new Player("", true);
      Card card0 = player0.playCard();
      // Undeclared exception!
      try { 
        board0.addToDeck(card0, 68);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 68, Size: 1
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Board board0 = new Board();
      Boolean boolean0 = board0.isDeck("Trash");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Board board0 = new Board();
      Boolean boolean0 = board0.isDeck("9tm0wMh{_");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Board board0 = new Board();
      Player player0 = new Player("M(yc", false);
      Card card0 = player0.playCard();
      board0.createDeck(card0, 2980);
      int int0 = board0.getDeckIdx("");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Board board0 = new Board();
      // Undeclared exception!
      try { 
        board0.lookAtDeck((-1156));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Board board0 = new Board();
      board0.print();
      assertEquals(1, board0.numDecks());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Board board0 = new Board();
      // Undeclared exception!
      try { 
        board0.getDeck(1732);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1732, Size: 1
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Board board0 = new Board();
      int int0 = board0.numDecks();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Board board0 = new Board();
      // Undeclared exception!
      try { 
        board0.numCardsInDeck((-2624));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Board board0 = new Board();
      // Undeclared exception!
      try { 
        board0.draw(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Board board0 = new Board();
      // Undeclared exception!
      try { 
        board0.numCardsInDeck("AllFieldsNull");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Board board0 = new Board();
      // Undeclared exception!
      try { 
        board0.getName(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Board board0 = new Board();
      board0.addToTrash((Card) null);
      Card card0 = board0.draw(0);
      assertNull(card0);
  }
}
