/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 07:53:51 GMT 2017
 */

package org.cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.cs362.dominion.Board;
import org.cs362.dominion.Card;
import org.cs362.dominion.Player;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player("", true);
      Card card0 = player0.playCard();
      player0.addToHand(card0);
      player0.discard = player0.deck;
      assertEquals("Deck", player0.discard.getName());
      
      player0.discardHand();
      player0.discard.addTop(card0);
      int int0 = player0.getVictoryPoints();
      assertEquals(0, int0);
      assertEquals(0, player0.getBuys());
      assertTrue(player0.checkAi());
      assertEquals(0, player0.getActions());
      assertEquals(0, player0.getMoney());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player("", true);
      Card card0 = player0.playCard();
      player0.deck.addTop(card0);
      int int0 = player0.getVictoryPoints();
      assertEquals(0, int0);
      assertEquals(0, player0.getMoney());
      assertTrue(player0.checkAi());
      assertEquals(0, player0.getBuys());
      assertEquals(0, player0.getActions());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player("", true);
      Card card0 = player0.playCard();
      player0.addToHand(card0);
      player0.addToHand(card0);
      int int0 = player0.getVictoryPoints();
      assertTrue(player0.checkAi());
      assertEquals(0, player0.getBuys());
      assertEquals(0, int0);
      assertEquals(0, player0.getActions());
      assertEquals(0, player0.getMoney());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player("", true);
      Card card0 = player0.playCard();
      player0.discard = player0.deck;
      assertEquals("Deck", player0.discard.getName());
      
      player0.discard.addTop(card0);
      int int0 = player0.numTotalCards();
      assertEquals(0, player0.getActions());
      assertEquals(2, int0);
      assertEquals(0, player0.getMoney());
      assertEquals(0, player0.getBuys());
      assertTrue(player0.checkAi());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player("", true);
      Card card0 = player0.playCard();
      player0.addToHand(card0);
      player0.discardCard(card0);
      assertEquals(0, player0.getActions());
      assertEquals(0, player0.getMoney());
      assertEquals(0, player0.getBuys());
      assertTrue(player0.checkAi());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player("", true);
      Card card0 = player0.playCard();
      player0.addToHand(card0);
      player0.playCard("");
      assertEquals(0, player0.getMoney());
      assertEquals(0, player0.getBuys());
      assertTrue(player0.checkAi());
      assertEquals(0, player0.getActions());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player("", false);
      player0.addToHand((Card) null);
      player0.playCard(0);
      assertEquals(0, player0.getBuys());
      assertFalse(player0.checkAi());
      assertEquals(0, player0.getMoney());
      assertEquals(0, player0.getActions());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player("", true);
      Card card0 = player0.playCard();
      player0.addToHand(card0);
      player0.playCard(0);
      assertEquals(0, player0.getMoney());
      assertEquals(0, player0.getBuys());
      assertTrue(player0.checkAi());
      assertEquals(0, player0.getActions());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player("", true);
      Card card0 = player0.playCard();
      player0.addToHand(card0);
      int int0 = player0.numTotalCards();
      assertEquals(1, int0);
      assertEquals(0, player0.getActions());
      assertEquals(0, player0.getMoney());
      assertEquals(0, player0.getBuys());
      assertTrue(player0.checkAi());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player("6{bXFb($", true);
      player0.hand.addCard((Card) null);
      player0.numCardsHand();
      assertTrue(player0.checkAi());
      assertEquals(0, player0.getBuys());
      assertEquals(0, player0.getActions());
      assertEquals(0, player0.getMoney());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player("", true);
      Card card0 = player0.playCard();
      player0.deck.deck.add(card0);
      player0.drawCard();
      player0.discardCard("");
      int int0 = player0.numCardsDiscard();
      assertEquals(1, int0);
      assertEquals(0, player0.getMoney());
      assertEquals(0, player0.getActions());
      assertEquals(0, player0.getBuys());
      assertTrue(player0.checkAi());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player("", true);
      Card card0 = player0.playCard();
      player0.discard = player0.deck;
      assertEquals("Deck", player0.discard.getName());
      
      player0.discard.addTop(card0);
      player0.numCardsDeck();
      assertTrue(player0.checkAi());
      assertEquals(0, player0.getActions());
      assertEquals(0, player0.getMoney());
      assertEquals(0, player0.getBuys());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player("", false);
      player0.addToHand((Card) null);
      player0.lookAtCard(0);
      assertFalse(player0.checkAi());
      assertEquals(0, player0.getActions());
      assertEquals(0, player0.getMoney());
      assertEquals(0, player0.getBuys());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player("", true);
      Card card0 = player0.playCard();
      player0.addToHand(card0);
      player0.lookAtCard(0);
      assertEquals(0, player0.getActions());
      assertEquals(0, player0.getMoney());
      assertEquals(0, player0.getBuys());
      assertTrue(player0.checkAi());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player("", false);
      Card card0 = player0.playCard();
      player0.giveCard(card0);
      player0.getTopCard();
      assertFalse(player0.checkAi());
      assertEquals(0, player0.getActions());
      assertEquals(0, player0.getMoney());
      assertEquals(0, player0.getBuys());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player((String) null, true);
      player0.getName();
      assertEquals(0, player0.getBuys());
      assertEquals(0, player0.getMoney());
      assertTrue(player0.checkAi());
      assertEquals(0, player0.getActions());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player("h$rz", false);
      player0.getName();
      assertEquals(0, player0.getBuys());
      assertFalse(player0.checkAi());
      assertEquals(0, player0.getMoney());
      assertEquals(0, player0.getActions());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player("", false);
      player0.setMoney(10);
      int int0 = player0.getMoney();
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player("Garden", false);
      player0.addMoney((-40));
      int int0 = player0.getMoney();
      assertEquals((-40), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player("h`!U", true);
      player0.addBuys(525);
      int int0 = player0.getBuys();
      assertEquals(525, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player((String) null, false);
      player0.setBuys((-3606));
      int int0 = player0.getBuys();
      assertEquals((-3606), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player("org.cs362.dominion.CardType", true);
      player0.addActions(28);
      int int0 = player0.getActions();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player("", true);
      boolean boolean0 = player0.checkAi();
      assertEquals(0, player0.getMoney());
      assertEquals(0, player0.getActions());
      assertEquals(0, player0.getBuys());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player("6{bXFb($", true);
      player0.hand.addCard((Card) null);
      // Undeclared exception!
      try { 
        player0.seeHand();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Hand", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player("", true);
      Card card0 = player0.playCard();
      player0.addToHand(card0);
      player0.discard = player0.deck;
      player0.discardHand();
      // Undeclared exception!
      try { 
        player0.reshuffleDeck();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player("Garden", true);
      player0.discard = null;
      // Undeclared exception!
      try { 
        player0.reshuffleDeck();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Player player0 = new Player("", false);
      player0.addToHand((Card) null);
      // Undeclared exception!
      try { 
        player0.playCard("\"le{nhOjoDhKb-Y1k");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Hand", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player(";/FVk( L", false);
      player0.hand = null;
      // Undeclared exception!
      try { 
        player0.playCard(80);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player("Garden", false);
      // Undeclared exception!
      try { 
        player0.playCard((-3301));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player("", true);
      player0.deck = null;
      // Undeclared exception!
      try { 
        player0.numTotalCards();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Player player0 = new Player("", false);
      player0.hand = null;
      // Undeclared exception!
      try { 
        player0.numCardsHand();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Player player0 = new Player("Hpv!n`0I;oF", false);
      player0.discard = null;
      // Undeclared exception!
      try { 
        player0.numCardsDiscard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = new Player("\n", true);
      player0.deck = null;
      // Undeclared exception!
      try { 
        player0.numCardsDeck();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player("", false);
      player0.hand = null;
      // Undeclared exception!
      try { 
        player0.lookAtCard(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Player player0 = new Player("", false);
      // Undeclared exception!
      try { 
        player0.lookAtCard((-1744));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Player player0 = new Player("XsUyaS*{$`,za7R]c", true);
      player0.giveCard((Card) null);
      // Undeclared exception!
      try { 
        player0.getVictoryPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Player player0 = new Player("", true);
      Card card0 = player0.playCard();
      player0.addToHand(card0);
      player0.discard.addTop(card0);
      player0.discardHand();
      // Undeclared exception!
      try { 
        player0.getTopCard();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Player player0 = new Player("NU", true);
      player0.deck = null;
      // Undeclared exception!
      try { 
        player0.getTopCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Player player0 = new Player("\n", false);
      player0.discard = null;
      // Undeclared exception!
      try { 
        player0.drawCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Player player0 = new Player("", true);
      player0.hand = null;
      // Undeclared exception!
      try { 
        player0.discardHand();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Player player0 = new Player("\n", true);
      Card card0 = player0.playCard();
      // Undeclared exception!
      try { 
        player0.discardCard(card0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Player player0 = new Player("x mfN&eWp", true);
      player0.hand = null;
      // Undeclared exception!
      try { 
        player0.discardCard("x mfN&eWp");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Player player0 = new Player("XsUyaS*{$`,za7R]c", true);
      player0.giveCard((Card) null);
      player0.drawCard();
      // Undeclared exception!
      try { 
        player0.computeMoney();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Player player0 = new Player("", false);
      Card card0 = player0.playCard();
      player0.hand = null;
      // Undeclared exception!
      try { 
        player0.addToHand(card0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Player player0 = new Player("", true);
      Card card0 = player0.playCard();
      player0.addToHand(card0);
      player0.computeMoney();
      assertEquals(0, player0.getMoney());
      assertEquals(0, player0.getActions());
      assertTrue(player0.checkAi());
      assertEquals(0, player0.getBuys());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Player player0 = new Player("", false);
      // Undeclared exception!
      try { 
        player0.getTopCard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Player player0 = new Player("XsUyaS*{$`,za7R]c", true);
      player0.giveCard((Card) null);
      player0.reshuffleDeck();
      player0.getTopCard();
      assertEquals(0, player0.getBuys());
      assertEquals(0, player0.getMoney());
      assertTrue(player0.checkAi());
      assertEquals(0, player0.getActions());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Player player0 = new Player("", false);
      // Undeclared exception!
      try { 
        player0.drawCard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Player player0 = new Player("", false);
      // Undeclared exception!
      try { 
        player0.lookAtCard(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Player player0 = new Player("", false);
      player0.discardCard();
      assertEquals(0, player0.getMoney());
      assertFalse(player0.checkAi());
      assertEquals(0, player0.getActions());
      assertEquals(0, player0.getBuys());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Player player0 = new Player("Hpv!n`0I;oF", false);
      player0.numCardsDeck();
      assertEquals(0, player0.getBuys());
      assertEquals(0, player0.getMoney());
      assertFalse(player0.checkAi());
      assertEquals(0, player0.getActions());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Player player0 = new Player("", false);
      // Undeclared exception!
      try { 
        player0.playCard("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Player player0 = new Player("", false);
      // Undeclared exception!
      try { 
        player0.playCard(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Player player0 = new Player("", true);
      player0.setActions((-1811));
      int int0 = player0.getActions();
      assertEquals((-1811), int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Player player0 = new Player("", false);
      int int0 = player0.getBuys();
      assertEquals(0, int0);
      assertFalse(player0.checkAi());
      assertEquals(0, player0.getMoney());
      assertEquals(0, player0.getActions());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Player player0 = new Player("", false);
      int int0 = player0.numTotalCards();
      assertEquals(0, player0.getBuys());
      assertEquals(0, player0.getActions());
      assertFalse(player0.checkAi());
      assertEquals(0, player0.getMoney());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Player player0 = new Player("", false);
      int int0 = player0.getMoney();
      assertEquals(0, int0);
      assertFalse(player0.checkAi());
      assertEquals(0, player0.getBuys());
      assertEquals(0, player0.getActions());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Player player0 = new Player("", true);
      // Undeclared exception!
      try { 
        player0.discardCard("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Player player0 = new Player("", false);
      player0.seeHand();
      assertFalse(player0.checkAi());
      assertEquals(0, player0.getActions());
      assertEquals(0, player0.getMoney());
      assertEquals(0, player0.getBuys());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Player player0 = new Player("", false);
      Card card0 = player0.playCard();
      player0.giveCard(card0);
      player0.giveCard(card0);
      // Undeclared exception!
      try { 
        player0.drawCard();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Player player0 = new Player("--%M--%z", false);
      // Undeclared exception!
      try { 
        player0.discardCard((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.cs362.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Player player0 = new Player("", false);
      Board board0 = new Board();
      player0.buyCard(board0);
      assertEquals(0, player0.getMoney());
      assertFalse(player0.checkAi());
      assertEquals(0, player0.getActions());
      assertEquals(0, player0.getBuys());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Player player0 = new Player("", false);
      int int0 = player0.getActions();
      assertEquals(0, int0);
      assertFalse(player0.checkAi());
      assertEquals(0, player0.getBuys());
      assertEquals(0, player0.getMoney());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Player player0 = new Player("", false);
      player0.numCardsHand();
      assertEquals(0, player0.getMoney());
      assertFalse(player0.checkAi());
      assertEquals(0, player0.getActions());
      assertEquals(0, player0.getBuys());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Player player0 = new Player("", false);
      player0.getName();
      assertFalse(player0.checkAi());
      assertEquals(0, player0.getMoney());
      assertEquals(0, player0.getBuys());
      assertEquals(0, player0.getActions());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Player player0 = new Player("", true);
      player0.numCardsDiscard();
      assertEquals(0, player0.getMoney());
      assertEquals(0, player0.getActions());
      assertTrue(player0.checkAi());
      assertEquals(0, player0.getBuys());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Player player0 = new Player("", false);
      boolean boolean0 = player0.checkAi();
      assertEquals(0, player0.getBuys());
      assertEquals(0, player0.getActions());
      assertFalse(boolean0);
      assertEquals(0, player0.getMoney());
  }
}
