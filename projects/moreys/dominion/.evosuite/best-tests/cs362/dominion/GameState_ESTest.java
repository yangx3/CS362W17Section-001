/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 06:26:51 GMT 2017
 */

package cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import cs362.dominion.Card;
import cs362.dominion.GameState;
import cs362.dominion.Player;
import cs362.dominion.Randomness;
import java.io.ObjectStreamConstants;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GameState_ESTest extends GameState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Card.CardName.values();
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      gameState0.getWinners();
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      gameState0.gameBoard = hashMap0;
      Integer integer0 = new Integer(2170);
      Player player0 = new Player(gameState0, "numActions: ");
      gameState0.toString();
      player0.drawCard();
      Card.CardName card_CardName0 = Card.CardName.Duchy;
      Card.getCard(vector0, card_CardName0);
      hashMap0.put((Card) null, integer0);
      gameState0.initializeGame();
      gameState0.gameBoard.getOrDefault(integer0, integer0);
      // Undeclared exception!
      gameState0.play();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Card.CardName.values();
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      gameState0.getWinners();
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      gameState0.gameBoard = hashMap0;
      Integer integer0 = new Integer((-1586));
      Player player0 = new Player(gameState0, "numActions: ");
      gameState0.toString();
      player0.drawCard();
      Card.CardName card_CardName0 = Card.CardName.Duchy;
      Card.getCard(vector0, card_CardName0);
      hashMap0.put((Card) null, integer0);
      gameState0.initializeGame();
      Integer integer1 = new Integer((-1586));
      gameState0.getWinners();
      gameState0.isGameOver();
      hashMap0.put((Card) null, integer0);
      Card.CardName.values();
      gameState0.Empty_Piles();
      // Undeclared exception!
      try { 
        Card.Type.valueOf("numActions: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant cs362.dominion.Card.Type.numActions: 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Card.CardName.values();
      Player player0 = new Player((GameState) null, "");
      List<Card> list0 = player0.discard;
      GameState gameState0 = new GameState(list0);
      gameState0.toString();
      gameState0.isGameOver();
      gameState0.toString();
      gameState0.toString();
      gameState0.addPlayer(player0);
      player0.numActions = 8;
      player0.hand = gameState0.cards;
      gameState0.getWinners();
      gameState0.addPlayer(player0);
      gameState0.addPlayer(player0);
      GameState gameState1 = new GameState(gameState0.cards);
      gameState1.toString();
      GameState gameState2 = new GameState(list0);
      GameState gameState3 = new GameState(gameState1.cards);
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Card.CardName.values();
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      gameState0.getWinners();
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      gameState0.gameBoard = hashMap0;
      Integer integer0 = new Integer((-1586));
      Card.CardName card_CardName0 = Card.CardName.Duchy;
      Card.getCard(vector0, card_CardName0);
      gameState0.initializeGame();
      hashMap0.getOrDefault(integer0, integer0);
      gameState0.isGameOver();
      hashMap0.put((Card) null, integer0);
      Card.CardName.values();
      gameState0.Empty_Piles();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      gameState0.getWinners();
      gameState0.getWinners();
      gameState0.Empty_Piles();
      gameState0.Empty_Piles();
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      gameState0.gameBoard = hashMap0;
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      Player player0 = new Player(gameState0, ".B3o!(4'wSb?)05j)1W");
      player0.drawCard();
      Integer integer0 = new Integer(0);
      hashMap0.replace((Card) null, integer0, integer0);
      gameState0.isGameOver();
      gameState0.toString();
      gameState0.play();
      Randomness.reset();
      gameState0.Empty_Piles();
      GameState gameState1 = new GameState(list0);
      MockRandom mockRandom1 = (MockRandom)Randomness.random;
      Randomness.reset();
      Integer integer1 = new Integer(0);
      hashMap0.put((Card) null, integer1);
      MockRandom mockRandom2 = (MockRandom)Randomness.random;
      // Undeclared exception!
      try { 
        gameState0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Card.CardName.values();
      Player player0 = new Player((GameState) null, "");
      List<Card> list0 = player0.discard;
      GameState gameState0 = new GameState(list0);
      gameState0.toString();
      gameState0.isGameOver();
      gameState0.toString();
      gameState0.toString();
      gameState0.addPlayer(player0);
      player0.numActions = 8;
      gameState0.isGameOver();
      player0.hand = gameState0.cards;
      gameState0.getWinners();
      gameState0.addPlayer(player0);
      GameState gameState1 = new GameState(gameState0.cards);
      gameState1.toString();
      GameState gameState2 = new GameState(list0);
      GameState gameState3 = new GameState(gameState1.cards);
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Card.CardName.valueOf("Curse");
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      gameState0.play();
      gameState0.toString();
      Randomness.random = null;
      gameState0.Empty_Piles();
      gameState0.isGameOver();
      Card.Type.values();
      Randomness.random = null;
      gameState0.addPlayer((Player) null);
      // Undeclared exception!
      try { 
        gameState0.getWinners();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cs362.dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "$#R.FrA");
      player0.drawCard();
      Card.CardName card_CardName0 = Card.CardName.Embargo;
      Card.Type card_Type0 = Card.Type.ACTION;
      gameState0.play();
      Card card0 = new Card(card_CardName0, card_Type0, (-4204), 3355, (-75));
      vector0.add(card0);
      vector0.add((Card) null);
      GameState gameState1 = new GameState((List<Card>) vector0);
      gameState1.getWinners();
      // Undeclared exception!
      try { 
        gameState1.isGameOver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Card.CardName.values();
      Vector<Card> vector0 = new Vector<Card>();
      vector0.clone();
      GameState gameState0 = new GameState((List<Card>) vector0);
      gameState0.gameBoard = null;
      // Undeclared exception!
      try { 
        gameState0.Empty_Piles();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cs362.dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Card.CardName.values();
      Player player0 = new Player((GameState) null, "u+n6e$Y9");
      List<Card> list0 = player0.hand;
      GameState gameState0 = new GameState(list0);
      gameState0.addPlayer(player0);
      gameState0.toString();
      Card.CardName.values();
      gameState0.Empty_Piles();
      gameState0.play();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      Card.CardName card_CardName0 = Card.CardName.Ambasador;
      Card.Type card_Type0 = Card.Type.ACTION;
      linkedList0.parallelStream();
      gameState0.play();
      Card card0 = new Card(card_CardName0, card_Type0, (-3867), (-3867), (-3867));
      linkedList0.add(card0);
      linkedList0.add(card0);
      gameState0.getWinners();
      Integer integer0 = new Integer((-3867));
      hashMap0.put(card0, integer0);
      gameState0.getWinners();
      gameState0.gameBoard = hashMap0;
      gameState0.toString();
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      gameState0.play();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Card.CardName.values();
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      gameState0.getWinners();
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      gameState0.gameBoard = hashMap0;
      Integer integer0 = new Integer((-1586));
      String string0 = "numActions: ";
      Player player0 = new Player(gameState0, "numActions: ");
      gameState0.toString();
      player0.drawCard();
      Card.CardName card_CardName0 = Card.CardName.Duchy;
      Card.getCard(vector0, card_CardName0);
      hashMap0.put((Card) null, integer0);
      gameState0.initializeGame();
      hashMap0.getOrDefault(integer0, integer0);
      // Undeclared exception!
      gameState0.play();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      // Undeclared exception!
      try { 
        Card.CardName.valueOf("\t ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant cs362.dominion.Card.CardName.\t 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Card.CardName.values();
      Player player0 = new Player((GameState) null, "");
      List<Card> list0 = player0.discard;
      Card.CardName card_CardName0 = Card.CardName.Cooper;
      Card.Type card_Type0 = Card.Type.TREASURE;
      Card card0 = new Card(card_CardName0, card_Type0, (-1586), (-1586), (-1586));
      player0.discard(card0);
      GameState gameState0 = new GameState(list0);
      gameState0.toString();
      gameState0.isGameOver();
      gameState0.toString();
      gameState0.toString();
      gameState0.addPlayer(player0);
      player0.numActions = 8;
      gameState0.isGameOver();
      player0.hand = gameState0.cards;
      gameState0.getWinners();
      gameState0.addPlayer(player0);
      GameState gameState1 = new GameState(gameState0.cards);
      gameState1.toString();
      GameState gameState2 = new GameState(list0);
      GameState gameState3 = new GameState(gameState1.cards);
      // Undeclared exception!
      gameState0.initializeGame();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Randomness.reset();
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      GameState gameState1 = new GameState((List<Card>) linkedList0);
      gameState1.isGameOver();
      Card.CardName card_CardName0 = Card.CardName.Great_Hall;
      Card.getCard(linkedList0, card_CardName0);
      linkedList0.offer((Card) null);
      gameState1.gameBoard = gameState0.gameBoard;
      Player player0 = new Player(gameState1, "Player: ");
      player0.drawCard();
      linkedList0.add((Card) null);
      linkedList0.add((Card) null);
      Card.createCards();
      // Undeclared exception!
      try { 
        gameState1.play();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      List<Card> list0 = null;
      GameState gameState0 = new GameState((List<Card>) null);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      // Undeclared exception!
      try { 
        gameState0.play();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cs362.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Card.CardName.values();
      Card.CardName.values();
      Vector<Card> vector0 = new Vector<Card>();
      Card.CardName card_CardName0 = Card.CardName.Smithy;
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card.CardName card_CardName1 = Card.CardName.Feast;
      Card card0 = new Card(card_CardName1, card_Type0, 0, 10, 0);
      vector0.add(card0);
      Card card1 = new Card(card_CardName0, card_Type0, 7, 10, 7);
      vector0.add(card1);
      GameState gameState0 = new GameState((List<Card>) vector0);
      gameState0.getWinners();
      gameState0.isGameOver();
      gameState0.play();
      gameState0.Empty_Piles();
      gameState0.Empty_Piles();
      vector0.add(card1);
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      MockRandom mockRandom1 = (MockRandom)Randomness.random;
      gameState0.isGameOver();
      // Undeclared exception!
      try { 
        Card.CardName.valueOf("2;^ia6#P<q;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant cs362.dominion.Card.CardName.2;^ia6#P<q;
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
