/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 18:41:02 GMT 2017
 */

package dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dominion.Player;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player();
      player0.drawHand();
      player0.drawHand();
      player0.discardHand();
      player0.discardToDraw();
      player0.drawHand();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player();
      player0.setNumBuys((-3958));
      player0.takeTurn();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player();
      player0.setNumActions(985);
      player0.takeTurn();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player();
      player0.setNumActions((-2517));
      player0.takeTurn();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player();
      player0.setVictory((-1366));
      player0.getVictory();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player();
      player0.takeTurn();
      player0.getNumBuys();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player();
      player0.setNumBuys((-3958));
      player0.getNumBuys();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player();
      player0.setNumActions((-1));
      player0.getNumActions();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player();
      player0.setCoins((-2680));
      player0.getCoins();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player();
      player0.setNumBuys(Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        player0.takeTurn();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player();
      player0.drawHand();
      player0.printHand();
      assertEquals(1, player0.getNumBuys());
      assertEquals(0, player0.getVictory());
      assertEquals(1, player0.getNumActions());
      assertEquals(0, player0.getCoins());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player();
      player0.drawHand();
      player0.totalCoins();
      assertEquals(0, player0.getVictory());
      assertEquals(1, player0.getNumActions());
      assertEquals(0, player0.getCoins());
      assertEquals(1, player0.getNumBuys());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player();
      player0.drawHand();
      player0.discardHand();
      player0.discardToDraw();
      player0.drawHand();
      assertEquals(1, player0.getNumActions());
      assertEquals(0, player0.getVictory());
      assertEquals(1, player0.getNumBuys());
      assertEquals(0, player0.getCoins());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player();
      player0.takeTurn();
      int int0 = player0.getNumActions();
      assertEquals(0, player0.getNumBuys());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player();
      player0.getDraw();
      assertEquals(1, player0.getNumActions());
      assertEquals(0, player0.getCoins());
      assertEquals(0, player0.getVictory());
      assertEquals(1, player0.getNumBuys());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player();
      int int0 = player0.getVictory();
      assertEquals(0, player0.getCoins());
      assertEquals(0, int0);
      assertEquals(1, player0.getNumBuys());
      assertEquals(1, player0.getNumActions());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player();
      player0.setVictory(54);
      int int0 = player0.getVictory();
      assertEquals(54, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player();
      int int0 = player0.getCoins();
      assertEquals(0, player0.getVictory());
      assertEquals(1, player0.getNumBuys());
      assertEquals(0, int0);
      assertEquals(1, player0.getNumActions());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player();
      int int0 = player0.getNumActions();
      assertEquals(1, int0);
      assertEquals(0, player0.getCoins());
      assertEquals(1, player0.getNumBuys());
      assertEquals(0, player0.getVictory());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player();
      assertEquals(0, player0.getCoins());
      
      player0.resetPlayer();
      int int0 = player0.getCoins();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player();
      player0.getHand();
      assertEquals(1, player0.getNumActions());
      assertEquals(0, player0.getVictory());
      assertEquals(1, player0.getNumBuys());
      assertEquals(0, player0.getCoins());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player();
      int int0 = player0.getNumBuys();
      assertEquals(0, player0.getVictory());
      assertEquals(1, player0.getNumActions());
      assertEquals(1, int0);
      assertEquals(0, player0.getCoins());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player();
      player0.getDiscard();
      assertEquals(1, player0.getNumActions());
      assertEquals(0, player0.getVictory());
      assertEquals(0, player0.getCoins());
      assertEquals(1, player0.getNumBuys());
  }
}
