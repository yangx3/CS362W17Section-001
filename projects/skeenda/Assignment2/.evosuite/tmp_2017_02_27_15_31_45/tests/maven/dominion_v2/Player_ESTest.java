/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 23:34:12 GMT 2017
 */

package maven.dominion_v2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import maven.dominion_v2.Card;
import maven.dominion_v2.GameState;
import maven.dominion_v2.Player;
import maven.dominion_v2.Randomness;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player((GameState) null, "!<3C84T3;s#lt!XDJo\"");
      player0.endTurn();
      player0.endTurn();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player((GameState) null, "DMwQE#lrO=I");
      player0.numBuys = (-28);
      player0.buyCard();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, (String) null);
      player0.numActions = (-1);
      player0.playKingdomCard();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      LinkedList<Card> linkedList0 = player0.deck;
      Card.CardName card_CardName0 = Card.CardName.Gold;
      Card.Type card_Type0 = Card.Type.Victory;
      Card card0 = new Card(card_CardName0, card_Type0, (-1242), (-1242), (-1242));
      linkedList0.add(card0);
      player0.endTurn();
      // Undeclared exception!
      try { 
        player0.scoreFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("maven.dominion_v2.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      player0.coins = 3329;
      player0.drawCard();
      // Undeclared exception!
      try { 
        player0.scoreFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("maven.dominion_v2.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player((GameState) null, "DM8wQE#lrO=<");
      List<Card> list0 = Card.createCards();
      player0.discard = list0;
      Card card0 = player0.drawCard();
      player0.playTreasureCard();
      GameState gameState0 = new GameState(player0.discard);
      card0.play(player0, gameState0);
      player0.numBuys = 5;
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("maven.dominion_v2.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player((GameState) null, "DM8wQE#lrO=<");
      List<Card> list0 = Card.createCards();
      player0.discard = list0;
      Card card0 = player0.drawCard();
      player0.drawCard();
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      card0.play(player0, gameState0);
      player0.discard(card0);
      player0.playTreasureCard();
      player0.numBuys = 8257536;
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("maven.dominion_v2.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Player player0 = new Player(gameState0, " ");
      player0.numBuys = 1;
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("maven.dominion_v2.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "");
      player0.scoreFor();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, "Iy0i#DLw}>ILWix");
      Card.CardName card_CardName0 = Card.CardName.Bureaucrat;
      Card.Type card_Type0 = Card.Type.Victory;
      Card card0 = new Card(card_CardName0, card_Type0, (-1571), (-1853), 1707);
      player0.discard(card0);
      player0.scoreFor();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player((GameState) null, "Cu+SKC,.");
      Card.CardName card_CardName0 = Card.CardName.Woodcutter;
      Card.Type card_Type0 = Card.Type.Treasure;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 0);
      player0.discard(card0);
      player0.drawCard();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player((GameState) null, "");
      LinkedList<Card> linkedList0 = player0.deck;
      Card.CardName card_CardName0 = Card.CardName.Gold;
      Card.Type card_Type0 = Card.Type.Victory;
      Card card0 = new Card(card_CardName0, card_Type0, (-1242), (-1242), (-1242));
      linkedList0.add(card0);
      player0.drawCard();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "");
      player0.endTurn();
      // Undeclared exception!
      try { 
        player0.playTreasureCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "");
      player0.discard = null;
      Card.CardName card_CardName0 = Card.CardName.Dutchy;
      Card.Type card_Type0 = Card.Type.Victory;
      Card card0 = new Card(card_CardName0, card_Type0, 4, 16, 16);
      // Undeclared exception!
      try { 
        player0.gain(card0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("maven.dominion_v2.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, "");
      player0.deck = null;
      // Undeclared exception!
      try { 
        player0.endTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("maven.dominion_v2.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Randomness.random = null;
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, (String) null);
      Card.CardName card_CardName0 = Card.CardName.Woodcutter;
      Card.Type card_Type0 = Card.Type.Action;
      Card card0 = new Card(card_CardName0, card_Type0, 6, 0, 0);
      player0.gain(card0);
      // Undeclared exception!
      try { 
        player0.drawCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("maven.dominion_v2.Randomness", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Card.CardName card_CardName0 = Card.CardName.Festival;
      Card.Type card_Type0 = Card.Type.Treasure;
      Card card0 = new Card(card_CardName0, card_Type0, 233, (-1180), (-2241));
      List<Card> list0 = card0.deck;
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "Draw until you have 7 cards in hand. You may set aside any Action cards drawn this way, as you draw them, discard the set aside cards after you finish drawing");
      player0.discard = null;
      // Undeclared exception!
      try { 
        player0.discard((Card) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("maven.dominion_v2.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player((GameState) null, "DM8wQE#lrO=<");
      List<Card> list0 = Card.createCards();
      player0.discard = list0;
      Card card0 = player0.drawCard();
      player0.drawCard();
      player0.playTreasureCard();
      card0.play(player0, (GameState) null);
      player0.numBuys = 5;
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("maven.dominion_v2.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player((GameState) null, "DM8wQE#lrO=<");
      List<Card> list0 = Card.createCards();
      player0.discard = list0;
      Card card0 = player0.drawCard();
      player0.playTreasureCard();
      card0.play(player0, (GameState) null);
      GameState gameState0 = new GameState(player0.discard);
      card0.play(player0, gameState0);
      player0.numBuys = 5;
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("maven.dominion_v2.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player((GameState) null, "DM8wQE#lrO=<");
      player0.coins = (-1);
      List<Card> list0 = Card.createCards();
      player0.discard = list0;
      player0.drawCard();
      player0.drawCard();
      player0.playTreasureCard();
      player0.numBuys = 5;
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("maven.dominion_v2.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player((GameState) null, "DM8wQE#lrO=<");
      List<Card> list0 = Card.createCards();
      player0.discard = list0;
      Card card0 = player0.drawCard();
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      card0.play(player0, gameState0);
      player0.numBuys = 8257536;
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("maven.dominion_v2.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player((GameState) null, "DMwQE#lrO=I");
      player0.buyCard();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "");
      player0.playTreasureCard();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player((GameState) null, "YKm[J}6nHOBWO");
      player0.numActions = 1044;
      player0.playKingdomCard();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player((GameState) null, "YKm[J}6nHOBWO");
      List<Card> list0 = Card.createCards();
      player0.numActions = 1044;
      player0.hand = list0;
      // Undeclared exception!
      try { 
        player0.playKingdomCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("maven.dominion_v2.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>(5530);
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "a");
      gameState0.addPlayer(player0);
      gameState0.initializeGame((-458));
      // Undeclared exception!
      try { 
        player0.playKingdomCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "");
      player0.playKingdomCard();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player((GameState) null, "DM8wQE#lrO=<");
      List<Card> list0 = Card.createCards();
      player0.discard = list0;
      Card card0 = player0.drawCard();
      assertNotNull(card0);
      
      int int0 = player0.scoreFor();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player((GameState) null, "DM8wQE#lrO=<");
      List<Card> list0 = Card.createCards();
      player0.discard = list0;
      int int0 = player0.scoreFor();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player((GameState) null, "DM8wQE#lrO=<");
      List<Card> list0 = Card.createCards();
      player0.discard = list0;
      Card card0 = player0.drawCard();
      player0.drawCard();
      player0.discard(card0);
      player0.playTreasureCard();
      player0.numBuys = 5;
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("maven.dominion_v2.Card", e);
      }
  }
}
