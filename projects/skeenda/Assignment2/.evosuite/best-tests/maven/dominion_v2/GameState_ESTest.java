/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 23:37:29 GMT 2017
 */

package maven.dominion_v2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import maven.dominion_v2.Card;
import maven.dominion_v2.GameState;
import maven.dominion_v2.Player;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class GameState_ESTest extends GameState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Card, Integer> hashMap0 = GameState.gameBoard;
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      gameState0.initializeGame((-764));
      Player player0 = new Player(gameState0, "D#2DT`");
      gameState0.addPlayer(player0);
      HashMap<Card, Integer> hashMap1 = GameState.gameBoard;
      gameState0.addPlayer(player0);
      gameState0.isGameOver();
      gameState0.initializeGame((-764));
      gameState0.play();
      gameState0.addPlayer(player0);
      player0.playTreasureCard();
      gameState0.addPlayer(player0);
      // Undeclared exception!
      try { 
        Card.Type.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant maven.dominion_v2.Card.Type.
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Player player0 = new Player(gameState0, "");
      player0.drawCard();
      gameState0.addPlayer(player0);
      GameState.gameBoard = gameState0.gameBoard;
      // Undeclared exception!
      try { 
        gameState0.getWinner();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("maven.dominion_v2.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      // Undeclared exception!
      try { 
        gameState0.initializeGame(1497);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Card, Integer> hashMap0 = GameState.gameBoard;
      HashMap<Card, Integer> hashMap1 = GameState.gameBoard;
      List<Card> list0 = Card.createCards();
      GameState.cards = list0;
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "GQ$d}\"7.Sgr[U");
      gameState0.addPlayer(player0);
      gameState0.getWinner();
      gameState0.play();
      List<Card> list1 = GameState.cards;
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      // Undeclared exception!
      try { 
        gameState0.initializeGame(30);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      // Undeclared exception!
      try { 
        gameState0.isGameOver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      Card.CardName.values();
      // Undeclared exception!
      try { 
        gameState0.play();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      gameState0.play();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      HashMap<Card, Integer> hashMap0 = GameState.gameBoard;
      gameState0.gameBoard = hashMap0;
      gameState0.initializeGame((-1965));
      Player player0 = new Player(gameState0, (String) null);
      player0.drawCard();
      Integer integer0 = new Integer((-1965));
      hashMap0.put((Card) null, integer0);
      Integer integer1 = Integer.valueOf((-1));
      hashMap0.put((Card) null, integer1);
      gameState0.isGameOver();
      gameState0.getWinner();
      // Undeclared exception!
      try { 
        gameState0.play();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>(8, 8);
      GameState gameState0 = new GameState((List<Card>) vector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Card, Integer> hashMap0 = GameState.gameBoard;
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "D#2DT`");
      gameState0.addPlayer(player0);
      HashMap<Card, Integer> hashMap1 = GameState.gameBoard;
      Player player1 = new Player(gameState0, "");
      player1.numActions = (-764);
      player1.playerName = "";
      gameState0.addPlayer(player1);
      gameState0.isGameOver();
      gameState0.initializeGame((-764));
      gameState0.play();
      player1.hand = gameState0.cards;
      gameState0.addPlayer(player1);
      player1.playTreasureCard();
      Card.Type card_Type0 = Card.Type.Action;
      Card.CardName.values();
      HashMap<Card, Integer> hashMap2 = GameState.gameBoard;
      // Undeclared exception!
      try { 
        gameState0.initializeGame(1);
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }
}
