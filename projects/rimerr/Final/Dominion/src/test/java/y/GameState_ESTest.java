/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 28 00:51:21 GMT 2017
 */

package dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dominion.Card;
import dominion.GameState;
import dominion.Player;
import dominion.Randomness;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GameState_ESTest extends GameState_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 30 covered goals:
   * Goal 1. dominion.GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 2. dominion.GameState.play()Ljava/util/HashMap;: I4 Branch 13 IFNE L92 - false
   * Goal 3. dominion.GameState.play()Ljava/util/HashMap;: I14 Branch 14 IFEQ L94 - true
   * Goal 4. dominion.GameState.isGameOver()Z: I9 Branch 53 IFNULL L271 - false
   * Goal 5. dominion.GameState.isGameOver()Z: I19 Branch 54 IFNE L271 - true
   * Goal 6. Branch dominion.GameState.<init>(Ljava/util/List;)V: root-Branch in context: dominion.GameState:<init>(Ljava/util/List;)V
   * Goal 7. Branch dominion.GameState.play()Ljava/util/HashMap;: I4 Branch 13 IFNE L92 - false in context: dominion.GameState:play()Ljava/util/HashMap;
   * Goal 8. Branch dominion.GameState.play()Ljava/util/HashMap;: I14 Branch 14 IFEQ L94 - true in context: dominion.GameState:play()Ljava/util/HashMap;
   * Goal 9. play()Ljava/util/HashMap;_org.evosuite.runtime.TooManyResourcesException_IMPLICIT
   * Goal 10. dominion.GameState.<init>(Ljava/util/List;)V: Line 15
   * Goal 11. dominion.GameState.<init>(Ljava/util/List;)V: Line 17
   * Goal 12. dominion.GameState.<init>(Ljava/util/List;)V: Line 20
   * Goal 13. dominion.GameState.<init>(Ljava/util/List;)V: Line 22
   * Goal 14. dominion.GameState.isGameOver()Z: Line 271
   * Goal 15. dominion.GameState.isGameOver()Z: Line 273
   * Goal 16. dominion.GameState.play()Ljava/util/HashMap;: Line 92
   * Goal 17. dominion.GameState.play()Ljava/util/HashMap;: Line 94
   * Goal 18. [METHOD] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 19. [METHOD] dominion.GameState.play()Ljava/util/HashMap;
   * Goal 20. [METHODNOEX] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 21. Weak Mutation 0: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> players
   * Goal 22. Weak Mutation 1: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> cards
   * Goal 23. Weak Mutation 101: dominion.GameState.play()Ljava/util/HashMap;:92 - ReplaceComparisonOperator != -> ==
   * Goal 24. Weak Mutation 102: dominion.GameState.play()Ljava/util/HashMap;:94 - ReplaceVariable players -> cards
   * Goal 25. Weak Mutation 103: dominion.GameState.play()Ljava/util/HashMap;:94 - ReplaceComparisonOperator == -> !=
   * Goal 26. Weak Mutation 179: dominion.GameState.isGameOver()Z:271 - ReplaceVariable cards -> players
   * Goal 27. Weak Mutation 180: dominion.GameState.isGameOver()Z:271 - ReplaceComparisonOperator = null -> != null
   * Goal 28. Weak Mutation 181: dominion.GameState.isGameOver()Z:271 - ReplaceVariable cards -> players
   * Goal 29. Weak Mutation 183: dominion.GameState.isGameOver()Z:271 - ReplaceComparisonOperator != -> <
   * Goal 30. Weak Mutation 186: dominion.GameState.isGameOver()Z:273 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Integer integer0 = new Integer(3);
      gameState0.gameBoard.put((Card) null, integer0);
      // Undeclared exception!
      try { 
        gameState0.play();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  //Test case number: 1
  /*
   * 20 covered goals:
   * Goal 1. dominion.GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 2. dominion.GameState.playKingdomCard(Ldominion/Player;)V: I4 Branch 20 IFLE L122 - true
   * Goal 3. Branch dominion.GameState.<init>(Ljava/util/List;)V: root-Branch in context: dominion.GameState:<init>(Ljava/util/List;)V
   * Goal 4. Branch dominion.GameState.playKingdomCard(Ldominion/Player;)V: I4 Branch 20 IFLE L122 - true in context: dominion.GameState:playKingdomCard(Ldominion/Player;)V
   * Goal 5. dominion.GameState.<init>(Ljava/util/List;)V: Line 15
   * Goal 6. dominion.GameState.<init>(Ljava/util/List;)V: Line 17
   * Goal 7. dominion.GameState.<init>(Ljava/util/List;)V: Line 20
   * Goal 8. dominion.GameState.<init>(Ljava/util/List;)V: Line 22
   * Goal 9. dominion.GameState.playKingdomCard(Ldominion/Player;)V: Line 122
   * Goal 10. dominion.GameState.playKingdomCard(Ldominion/Player;)V: Line 268
   * Goal 11. [METHOD] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 12. [METHOD] dominion.GameState.playKingdomCard(Ldominion/Player;)V
   * Goal 13. [METHODNOEX] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 14. [METHODNOEX] dominion.GameState.playKingdomCard(Ldominion/Player;)V
   * Goal 15. Weak Mutation 0: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> players
   * Goal 16. Weak Mutation 1: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> cards
   * Goal 17. Weak Mutation 134: dominion.GameState.playKingdomCard(Ldominion/Player;)V:122 - InsertUnaryOp Negation
   * Goal 18. Weak Mutation 135: dominion.GameState.playKingdomCard(Ldominion/Player;)V:122 - InsertUnaryOp +1
   * Goal 19. Weak Mutation 136: dominion.GameState.playKingdomCard(Ldominion/Player;)V:122 - InsertUnaryOp -1
   * Goal 20. Weak Mutation 138: dominion.GameState.playKingdomCard(Ldominion/Player;)V:122 - ReplaceComparisonOperator <= -> ==
   */

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, (String) null);
      player0.numActions = (-2167);
      gameState0.playKingdomCard(player0);
      assertNull(player0.getName());
  }

  //Test case number: 2
  /*
   * 47 covered goals:
   * Goal 1. dominion.GameState.addPlayer(Ldominion/Player;)V: root-Branch
   * Goal 2. dominion.GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 3. dominion.GameState.play()Ljava/util/HashMap;: I4 Branch 13 IFNE L92 - true
   * Goal 4. dominion.GameState.isGameOver()Z: I9 Branch 53 IFNULL L271 - true
   * Goal 5. dominion.GameState.getWinners()Ljava/util/HashMap;: I15 Branch 55 IFEQ L281 - true
   * Goal 6. dominion.GameState.getWinners()Ljava/util/HashMap;: I15 Branch 55 IFEQ L281 - false
   * Goal 7. Branch dominion.GameState.<init>(Ljava/util/List;)V: root-Branch in context: dominion.GameState:<init>(Ljava/util/List;)V
   * Goal 8. Branch dominion.GameState.addPlayer(Ldominion/Player;)V: root-Branch in context: dominion.GameState:addPlayer(Ldominion/Player;)V
   * Goal 9. Branch dominion.GameState.play()Ljava/util/HashMap;: I4 Branch 13 IFNE L92 - true in context: dominion.GameState:play()Ljava/util/HashMap;
   * Goal 10. [Output]: dominion.GameState.play()Ljava/util/HashMap;:NonNull:java.util.HashMap:isEmpty()Z:False
   * Goal 11. [Output]: dominion.GameState.play()Ljava/util/HashMap;:NonNull:java.util.HashMap:size()I:Positive
   * Goal 12. dominion.GameState.<init>(Ljava/util/List;)V: Line 15
   * Goal 13. dominion.GameState.<init>(Ljava/util/List;)V: Line 17
   * Goal 14. dominion.GameState.<init>(Ljava/util/List;)V: Line 20
   * Goal 15. dominion.GameState.<init>(Ljava/util/List;)V: Line 22
   * Goal 16. dominion.GameState.addPlayer(Ldominion/Player;)V: Line 24
   * Goal 17. dominion.GameState.addPlayer(Ldominion/Player;)V: Line 25
   * Goal 18. dominion.GameState.getWinners()Ljava/util/HashMap;: Line 278
   * Goal 19. dominion.GameState.getWinners()Ljava/util/HashMap;: Line 281
   * Goal 20. dominion.GameState.getWinners()Ljava/util/HashMap;: Line 282
   * Goal 21. dominion.GameState.getWinners()Ljava/util/HashMap;: Line 283
   * Goal 22. dominion.GameState.getWinners()Ljava/util/HashMap;: Line 284
   * Goal 23. dominion.GameState.getWinners()Ljava/util/HashMap;: Line 286
   * Goal 24. dominion.GameState.isGameOver()Z: Line 271
   * Goal 25. dominion.GameState.isGameOver()Z: Line 272
   * Goal 26. dominion.GameState.play()Ljava/util/HashMap;: Line 92
   * Goal 27. dominion.GameState.play()Ljava/util/HashMap;: Line 119
   * Goal 28. [METHOD] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 29. [METHOD] dominion.GameState.addPlayer(Ldominion/Player;)V
   * Goal 30. [METHOD] dominion.GameState.play()Ljava/util/HashMap;
   * Goal 31. [METHODNOEX] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 32. [METHODNOEX] dominion.GameState.addPlayer(Ldominion/Player;)V
   * Goal 33. [METHODNOEX] dominion.GameState.play()Ljava/util/HashMap;
   * Goal 34. Weak Mutation 0: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> players
   * Goal 35. Weak Mutation 1: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> cards
   * Goal 36. Weak Mutation 2: dominion.GameState.addPlayer(Ldominion/Player;)V:24 - ReplaceVariable players -> cards
   * Goal 37. Weak Mutation 101: dominion.GameState.play()Ljava/util/HashMap;:92 - ReplaceComparisonOperator != -> ==
   * Goal 38. Weak Mutation 179: dominion.GameState.isGameOver()Z:271 - ReplaceVariable cards -> players
   * Goal 39. Weak Mutation 180: dominion.GameState.isGameOver()Z:271 - ReplaceComparisonOperator = null -> != null
   * Goal 40. Weak Mutation 185: dominion.GameState.isGameOver()Z:272 - ReplaceConstant - 1 -> 0
   * Goal 41. Weak Mutation 187: dominion.GameState.getWinners()Ljava/util/HashMap;:281 - ReplaceVariable players -> cards
   * Goal 42. Weak Mutation 188: dominion.GameState.getWinners()Ljava/util/HashMap;:281 - ReplaceComparisonOperator == -> !=
   * Goal 43. Weak Mutation 189: dominion.GameState.getWinners()Ljava/util/HashMap;:283 - ReplaceVariable playerScore -> gameBoard
   * Goal 44. Weak Mutation 190: dominion.GameState.getWinners()Ljava/util/HashMap;:283 - InsertUnaryOp Negation of score
   * Goal 45. Weak Mutation 191: dominion.GameState.getWinners()Ljava/util/HashMap;:283 - InsertUnaryOp IINC 1 score
   * Goal 46. Weak Mutation 192: dominion.GameState.getWinners()Ljava/util/HashMap;:283 - InsertUnaryOp IINC -1 score
   * Goal 47. Weak Mutation 193: dominion.GameState.getWinners()Ljava/util/HashMap;:286 - ReplaceVariable playerScore -> gameBoard
   */

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, (String) null);
      gameState0.addPlayer(player0);
      assertEquals("[]", vector0.toString());
      
      HashMap<Player, Integer> hashMap0 = gameState0.play();
      assertEquals(1, hashMap0.size());
  }

  //Test case number: 3
  /*
   * 22 covered goals:
   * Goal 1. dominion.GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 2. dominion.GameState.getWinners()Ljava/util/HashMap;: I15 Branch 55 IFEQ L281 - true
   * Goal 3. Branch dominion.GameState.<init>(Ljava/util/List;)V: root-Branch in context: dominion.GameState:<init>(Ljava/util/List;)V
   * Goal 4. Branch dominion.GameState.getWinners()Ljava/util/HashMap;: I15 Branch 55 IFEQ L281 - true in context: dominion.GameState:getWinners()Ljava/util/HashMap;
   * Goal 5. [Output]: dominion.GameState.getWinners()Ljava/util/HashMap;:NonNull:java.util.HashMap:isEmpty()Z:True
   * Goal 6. [Output]: dominion.GameState.getWinners()Ljava/util/HashMap;:NonNull:java.util.HashMap:size()I:Zero
   * Goal 7. dominion.GameState.<init>(Ljava/util/List;)V: Line 15
   * Goal 8. dominion.GameState.<init>(Ljava/util/List;)V: Line 17
   * Goal 9. dominion.GameState.<init>(Ljava/util/List;)V: Line 20
   * Goal 10. dominion.GameState.<init>(Ljava/util/List;)V: Line 22
   * Goal 11. dominion.GameState.getWinners()Ljava/util/HashMap;: Line 278
   * Goal 12. dominion.GameState.getWinners()Ljava/util/HashMap;: Line 281
   * Goal 13. dominion.GameState.getWinners()Ljava/util/HashMap;: Line 286
   * Goal 14. [METHOD] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 15. [METHOD] dominion.GameState.getWinners()Ljava/util/HashMap;
   * Goal 16. [METHODNOEX] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 17. [METHODNOEX] dominion.GameState.getWinners()Ljava/util/HashMap;
   * Goal 18. Weak Mutation 0: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> players
   * Goal 19. Weak Mutation 1: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> cards
   * Goal 20. Weak Mutation 187: dominion.GameState.getWinners()Ljava/util/HashMap;:281 - ReplaceVariable players -> cards
   * Goal 21. Weak Mutation 188: dominion.GameState.getWinners()Ljava/util/HashMap;:281 - ReplaceComparisonOperator == -> !=
   * Goal 22. Weak Mutation 193: dominion.GameState.getWinners()Ljava/util/HashMap;:286 - ReplaceVariable playerScore -> gameBoard
   */

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      HashMap<Player, Integer> hashMap0 = gameState0.getWinners();
      assertEquals(0, hashMap0.size());
  }

  //Test case number: 4
  /*
   * 56 covered goals:
   * Goal 1. dominion.GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 2. dominion.GameState.getRandCard()Ldominion/Card;: I10 Branch 9 IFNE L73 - false
   * Goal 3. dominion.GameState.getRandCard()Ldominion/Card;: I13 Branch 10 IF_ICMPGE L73 - false
   * Goal 4. dominion.GameState.getRandCard()Ldominion/Card;: I69 Branch 11 IFEQ L80 - false
   * Goal 5. dominion.GameState.getRandCard()Ldominion/Card;: I78 Branch 12 IFLE L81 - false
   * Goal 6. Branch dominion.GameState.<init>(Ljava/util/List;)V: root-Branch in context: dominion.GameState:<init>(Ljava/util/List;)V
   * Goal 7. Branch dominion.GameState.getRandCard()Ldominion/Card;: I13 Branch 10 IF_ICMPGE L73 - false in context: dominion.GameState:getRandCard()Ldominion/Card;
   * Goal 8. Branch dominion.GameState.getRandCard()Ldominion/Card;: I10 Branch 9 IFNE L73 - false in context: dominion.GameState:getRandCard()Ldominion/Card;
   * Goal 9. Branch dominion.GameState.getRandCard()Ldominion/Card;: I69 Branch 11 IFEQ L80 - false in context: dominion.GameState:getRandCard()Ldominion/Card;
   * Goal 10. Branch dominion.GameState.getRandCard()Ldominion/Card;: I78 Branch 12 IFLE L81 - false in context: dominion.GameState:getRandCard()Ldominion/Card;
   * Goal 11. [Output]: dominion.GameState.getRandCard()Ldominion/Card;:NonNull:dominion.Card:getCost()I:Negative
   * Goal 12. [Output]: dominion.GameState.getRandCard()Ldominion/Card;:NonNull:dominion.Card:getTreasureValue()I:Negative
   * Goal 13. dominion.GameState.<init>(Ljava/util/List;)V: Line 15
   * Goal 14. dominion.GameState.<init>(Ljava/util/List;)V: Line 17
   * Goal 15. dominion.GameState.<init>(Ljava/util/List;)V: Line 20
   * Goal 16. dominion.GameState.<init>(Ljava/util/List;)V: Line 22
   * Goal 17. dominion.GameState.getRandCard()Ldominion/Card;: Line 72
   * Goal 18. dominion.GameState.getRandCard()Ldominion/Card;: Line 73
   * Goal 19. dominion.GameState.getRandCard()Ldominion/Card;: Line 74
   * Goal 20. dominion.GameState.getRandCard()Ldominion/Card;: Line 75
   * Goal 21. dominion.GameState.getRandCard()Ldominion/Card;: Line 77
   * Goal 22. dominion.GameState.getRandCard()Ldominion/Card;: Line 78
   * Goal 23. dominion.GameState.getRandCard()Ldominion/Card;: Line 79
   * Goal 24. dominion.GameState.getRandCard()Ldominion/Card;: Line 80
   * Goal 25. dominion.GameState.getRandCard()Ldominion/Card;: Line 81
   * Goal 26. dominion.GameState.getRandCard()Ldominion/Card;: Line 82
   * Goal 27. dominion.GameState.getRandCard()Ldominion/Card;: Line 83
   * Goal 28. [METHOD] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 29. [METHOD] dominion.GameState.getRandCard()Ldominion/Card;
   * Goal 30. [METHODNOEX] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 31. [METHODNOEX] dominion.GameState.getRandCard()Ldominion/Card;
   * Goal 32. Weak Mutation 0: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> players
   * Goal 33. Weak Mutation 1: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> cards
   * Goal 34. Weak Mutation 72: dominion.GameState.getRandCard()Ldominion/Card;:72 - ReplaceConstant - 0 -> 1
   * Goal 35. Weak Mutation 73: dominion.GameState.getRandCard()Ldominion/Card;:72 - ReplaceConstant - 0 -> 1
   * Goal 36. Weak Mutation 75: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp Negation of found
   * Goal 37. Weak Mutation 76: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp IINC 1 found
   * Goal 38. Weak Mutation 77: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp IINC -1 found
   * Goal 39. Weak Mutation 78: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceComparisonOperator != -> ==
   * Goal 40. Weak Mutation 80: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp Negation of l
   * Goal 41. Weak Mutation 81: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp IINC 1 l
   * Goal 42. Weak Mutation 82: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp IINC -1 l
   * Goal 43. Weak Mutation 83: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceConstant - 15 -> 0
   * Goal 44. Weak Mutation 84: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceConstant - 15 -> 1
   * Goal 45. Weak Mutation 85: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceConstant - 15 -> -1
   * Goal 46. Weak Mutation 86: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceConstant - 15 -> 14
   * Goal 47. Weak Mutation 87: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceConstant - 15 -> 16
   * Goal 48. Weak Mutation 88: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceComparisonOperator >= -> -1
   * Goal 49. Weak Mutation 91: dominion.GameState.getRandCard()Ldominion/Card;:74 - ReplaceVariable l -> found
   * Goal 50. Weak Mutation 92: dominion.GameState.getRandCard()Ldominion/Card;:75 - ReplaceComparisonOperator == -> !=
   * Goal 51. Weak Mutation 93: dominion.GameState.getRandCard()Ldominion/Card;:77 - ReplaceComparisonOperator == -> !=
   * Goal 52. Weak Mutation 94: dominion.GameState.getRandCard()Ldominion/Card;:78 - ReplaceVariable cards -> players
   * Goal 53. Weak Mutation 95: dominion.GameState.getRandCard()Ldominion/Card;:78 - ReplaceVariable cards -> players
   * Goal 54. Weak Mutation 96: dominion.GameState.getRandCard()Ldominion/Card;:80 - ReplaceComparisonOperator == -> !=
   * Goal 55. Weak Mutation 97: dominion.GameState.getRandCard()Ldominion/Card;:81 - ReplaceComparisonOperator <= -> -1
   * Goal 56. Weak Mutation 100: dominion.GameState.getRandCard()Ldominion/Card;:82 - ReplaceConstant - 1 -> 0
   */

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Card.CardName card_CardName0 = Card.CardName.Baron;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, (-1004), 40, (-1004));
      vector0.add(card0);
      Integer integer0 = new Integer(9);
      gameState0.gameBoard.put(card0, integer0);
      Card card1 = gameState0.getRandCard();
      assertSame(card1, card0);
  }

  //Test case number: 5
  /*
   * 29 covered goals:
   * Goal 1. dominion.GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 2. dominion.GameState.toString()Ljava/lang/String;: I11 Branch 56 IFEQ L293 - true
   * Goal 3. dominion.GameState.toString()Ljava/lang/String;: I28 Branch 57 IFEQ L296 - true
   * Goal 4. Branch dominion.GameState.<init>(Ljava/util/List;)V: root-Branch in context: dominion.GameState:<init>(Ljava/util/List;)V
   * Goal 5. Branch dominion.GameState.toString()Ljava/lang/String;: I11 Branch 56 IFEQ L293 - true in context: dominion.GameState:toString()Ljava/lang/String;
   * Goal 6. Branch dominion.GameState.toString()Ljava/lang/String;: I28 Branch 57 IFEQ L296 - true in context: dominion.GameState:toString()Ljava/lang/String;
   * Goal 7. toString()Ljava/lang/String;_java.lang.NullPointerException_IMPLICIT
   * Goal 8. dominion.GameState.<init>(Ljava/util/List;)V: Line 15
   * Goal 9. dominion.GameState.<init>(Ljava/util/List;)V: Line 17
   * Goal 10. dominion.GameState.<init>(Ljava/util/List;)V: Line 20
   * Goal 11. dominion.GameState.<init>(Ljava/util/List;)V: Line 22
   * Goal 12. dominion.GameState.toString()Ljava/lang/String;: Line 292
   * Goal 13. dominion.GameState.toString()Ljava/lang/String;: Line 293
   * Goal 14. dominion.GameState.toString()Ljava/lang/String;: Line 296
   * Goal 15. dominion.GameState.toString()Ljava/lang/String;: Line 298
   * Goal 16. dominion.GameState.toString()Ljava/lang/String;: Line 299
   * Goal 17. dominion.GameState.toString()Ljava/lang/String;: Line 300
   * Goal 18. dominion.GameState.toString()Ljava/lang/String;: Line 301
   * Goal 19. [METHOD] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 20. [METHOD] dominion.GameState.toString()Ljava/lang/String;
   * Goal 21. [METHODNOEX] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 22. Weak Mutation 0: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> players
   * Goal 23. Weak Mutation 1: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> cards
   * Goal 24. Weak Mutation 194: dominion.GameState.toString()Ljava/lang/String;:293 - ReplaceComparisonOperator == -> !=
   * Goal 25. Weak Mutation 196: dominion.GameState.toString()Ljava/lang/String;:296 - ReplaceVariable players -> cards
   * Goal 26. Weak Mutation 197: dominion.GameState.toString()Ljava/lang/String;:296 - ReplaceComparisonOperator == -> !=
   * Goal 27. Weak Mutation 200: dominion.GameState.toString()Ljava/lang/String;:298 - ReplaceConstant -  --- gameBoard --- 
 -> 
   * Goal 28. Weak Mutation 201: dominion.GameState.toString()Ljava/lang/String;:299 - ReplaceConstant - Cards on the table: 
 -> 
   * Goal 29. Weak Mutation 202: dominion.GameState.toString()Ljava/lang/String;:300 - ReplaceConstant - Card Name 		 NumberCards: 
 -> 
   */

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Integer integer0 = new Integer(5);
      gameState0.gameBoard.put((Card) null, integer0);
      // Undeclared exception!
      try { 
        gameState0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 6
  /*
   * 16 covered goals:
   * Goal 1. dominion.GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 2. Branch dominion.GameState.<init>(Ljava/util/List;)V: root-Branch in context: dominion.GameState:<init>(Ljava/util/List;)V
   * Goal 3. playKingdomCard(Ldominion/Player;)V_java.lang.NullPointerException_IMPLICIT
   * Goal 4. dominion.GameState.<init>(Ljava/util/List;)V: Line 15
   * Goal 5. dominion.GameState.<init>(Ljava/util/List;)V: Line 17
   * Goal 6. dominion.GameState.<init>(Ljava/util/List;)V: Line 20
   * Goal 7. dominion.GameState.<init>(Ljava/util/List;)V: Line 22
   * Goal 8. dominion.GameState.playKingdomCard(Ldominion/Player;)V: Line 122
   * Goal 9. [METHOD] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 10. [METHOD] dominion.GameState.playKingdomCard(Ldominion/Player;)V
   * Goal 11. [METHODNOEX] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 12. Weak Mutation 0: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> players
   * Goal 13. Weak Mutation 1: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> cards
   * Goal 14. Weak Mutation 134: dominion.GameState.playKingdomCard(Ldominion/Player;)V:122 - InsertUnaryOp Negation
   * Goal 15. Weak Mutation 135: dominion.GameState.playKingdomCard(Ldominion/Player;)V:122 - InsertUnaryOp +1
   * Goal 16. Weak Mutation 136: dominion.GameState.playKingdomCard(Ldominion/Player;)V:122 - InsertUnaryOp -1
   */

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      // Undeclared exception!
      try { 
        gameState0.playKingdomCard((Player) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.GameState", e);
      }
  }

  //Test case number: 7
  /*
   * 36 covered goals:
   * Goal 1. dominion.GameState.addPlayer(Ldominion/Player;)V: root-Branch
   * Goal 2. dominion.GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 3. dominion.GameState.play()Ljava/util/HashMap;: I4 Branch 13 IFNE L92 - true
   * Goal 4. dominion.GameState.isGameOver()Z: I9 Branch 53 IFNULL L271 - true
   * Goal 5. dominion.GameState.getWinners()Ljava/util/HashMap;: I15 Branch 55 IFEQ L281 - false
   * Goal 6. Branch dominion.GameState.<init>(Ljava/util/List;)V: root-Branch in context: dominion.GameState:<init>(Ljava/util/List;)V
   * Goal 7. Branch dominion.GameState.addPlayer(Ldominion/Player;)V: root-Branch in context: dominion.GameState:addPlayer(Ldominion/Player;)V
   * Goal 8. Branch dominion.GameState.play()Ljava/util/HashMap;: I4 Branch 13 IFNE L92 - true in context: dominion.GameState:play()Ljava/util/HashMap;
   * Goal 9. play()Ljava/util/HashMap;_java.lang.NullPointerException_IMPLICIT
   * Goal 10. dominion.GameState.<init>(Ljava/util/List;)V: Line 15
   * Goal 11. dominion.GameState.<init>(Ljava/util/List;)V: Line 17
   * Goal 12. dominion.GameState.<init>(Ljava/util/List;)V: Line 20
   * Goal 13. dominion.GameState.<init>(Ljava/util/List;)V: Line 22
   * Goal 14. dominion.GameState.addPlayer(Ldominion/Player;)V: Line 24
   * Goal 15. dominion.GameState.addPlayer(Ldominion/Player;)V: Line 25
   * Goal 16. dominion.GameState.getWinners()Ljava/util/HashMap;: Line 278
   * Goal 17. dominion.GameState.getWinners()Ljava/util/HashMap;: Line 281
   * Goal 18. dominion.GameState.getWinners()Ljava/util/HashMap;: Line 282
   * Goal 19. dominion.GameState.isGameOver()Z: Line 271
   * Goal 20. dominion.GameState.isGameOver()Z: Line 272
   * Goal 21. dominion.GameState.play()Ljava/util/HashMap;: Line 92
   * Goal 22. dominion.GameState.play()Ljava/util/HashMap;: Line 119
   * Goal 23. [METHOD] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 24. [METHOD] dominion.GameState.addPlayer(Ldominion/Player;)V
   * Goal 25. [METHOD] dominion.GameState.play()Ljava/util/HashMap;
   * Goal 26. [METHODNOEX] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 27. [METHODNOEX] dominion.GameState.addPlayer(Ldominion/Player;)V
   * Goal 28. Weak Mutation 0: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> players
   * Goal 29. Weak Mutation 1: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> cards
   * Goal 30. Weak Mutation 2: dominion.GameState.addPlayer(Ldominion/Player;)V:24 - ReplaceVariable players -> cards
   * Goal 31. Weak Mutation 101: dominion.GameState.play()Ljava/util/HashMap;:92 - ReplaceComparisonOperator != -> ==
   * Goal 32. Weak Mutation 179: dominion.GameState.isGameOver()Z:271 - ReplaceVariable cards -> players
   * Goal 33. Weak Mutation 180: dominion.GameState.isGameOver()Z:271 - ReplaceComparisonOperator = null -> != null
   * Goal 34. Weak Mutation 185: dominion.GameState.isGameOver()Z:272 - ReplaceConstant - 1 -> 0
   * Goal 35. Weak Mutation 187: dominion.GameState.getWinners()Ljava/util/HashMap;:281 - ReplaceVariable players -> cards
   * Goal 36. Weak Mutation 188: dominion.GameState.getWinners()Ljava/util/HashMap;:281 - ReplaceComparisonOperator == -> !=
   */

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      gameState0.addPlayer((Player) null);
      // Undeclared exception!
      try { 
        gameState0.play();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.GameState", e);
      }
  }

  //Test case number: 8
  /*
   * 13 covered goals:
   * Goal 1. dominion.GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 2. Branch dominion.GameState.<init>(Ljava/util/List;)V: root-Branch in context: dominion.GameState:<init>(Ljava/util/List;)V
   * Goal 3. isGameOver()Z_java.lang.NullPointerException_IMPLICIT
   * Goal 4. dominion.GameState.<init>(Ljava/util/List;)V: Line 15
   * Goal 5. dominion.GameState.<init>(Ljava/util/List;)V: Line 17
   * Goal 6. dominion.GameState.<init>(Ljava/util/List;)V: Line 20
   * Goal 7. dominion.GameState.<init>(Ljava/util/List;)V: Line 22
   * Goal 8. dominion.GameState.isGameOver()Z: Line 271
   * Goal 9. [METHOD] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 10. [METHOD] dominion.GameState.isGameOver()Z
   * Goal 11. [METHODNOEX] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 12. Weak Mutation 0: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> players
   * Goal 13. Weak Mutation 179: dominion.GameState.isGameOver()Z:271 - ReplaceVariable cards -> players
   */

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      // Undeclared exception!
      try { 
        gameState0.isGameOver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 9
  /*
   * 59 covered goals:
   * Goal 1. dominion.GameState.addPlayer(Ldominion/Player;)V: root-Branch
   * Goal 2. dominion.GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 3. dominion.GameState.initializeGame()V: I6 Branch 1 IF_ICMPGT L35 - false
   * Goal 4. dominion.GameState.initializeGame()V: I11 Branch 2 IF_ICMPGE L35 - true
   * Goal 5. dominion.GameState.initializeGame()V: I32 Branch 3 IF_ICMPGE L43 - false
   * Goal 6. Branch dominion.GameState.<init>(Ljava/util/List;)V: root-Branch in context: dominion.GameState:<init>(Ljava/util/List;)V
   * Goal 7. Branch dominion.GameState.addPlayer(Ldominion/Player;)V: root-Branch in context: dominion.GameState:addPlayer(Ldominion/Player;)V
   * Goal 8. Branch dominion.GameState.initializeGame()V: I11 Branch 2 IF_ICMPGE L35 - true in context: dominion.GameState:initializeGame()V
   * Goal 9. Branch dominion.GameState.initializeGame()V: I6 Branch 1 IF_ICMPGT L35 - false in context: dominion.GameState:initializeGame()V
   * Goal 10. Branch dominion.GameState.initializeGame()V: I32 Branch 3 IF_ICMPGE L43 - false in context: dominion.GameState:initializeGame()V
   * Goal 11. initializeGame()V_java.lang.NullPointerException_IMPLICIT
   * Goal 12. dominion.GameState.<init>(Ljava/util/List;)V: Line 15
   * Goal 13. dominion.GameState.<init>(Ljava/util/List;)V: Line 17
   * Goal 14. dominion.GameState.<init>(Ljava/util/List;)V: Line 20
   * Goal 15. dominion.GameState.<init>(Ljava/util/List;)V: Line 22
   * Goal 16. dominion.GameState.addPlayer(Ldominion/Player;)V: Line 24
   * Goal 17. dominion.GameState.addPlayer(Ldominion/Player;)V: Line 25
   * Goal 18. dominion.GameState.initializeGame()V: Line 35
   * Goal 19. dominion.GameState.initializeGame()V: Line 41
   * Goal 20. dominion.GameState.initializeGame()V: Line 42
   * Goal 21. dominion.GameState.initializeGame()V: Line 43
   * Goal 22. dominion.GameState.initializeGame()V: Line 44
   * Goal 23. [METHOD] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 24. [METHOD] dominion.GameState.addPlayer(Ldominion/Player;)V
   * Goal 25. [METHOD] dominion.GameState.initializeGame()V
   * Goal 26. [METHODNOEX] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 27. [METHODNOEX] dominion.GameState.addPlayer(Ldominion/Player;)V
   * Goal 28. Weak Mutation 0: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> players
   * Goal 29. Weak Mutation 1: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> cards
   * Goal 30. Weak Mutation 2: dominion.GameState.addPlayer(Ldominion/Player;)V:24 - ReplaceVariable players -> cards
   * Goal 31. Weak Mutation 3: dominion.GameState.initializeGame()V:35 - ReplaceVariable players -> cards
   * Goal 32. Weak Mutation 4: dominion.GameState.initializeGame()V:35 - ReplaceConstant - 4 -> 0
   * Goal 33. Weak Mutation 5: dominion.GameState.initializeGame()V:35 - ReplaceConstant - 4 -> 1
   * Goal 34. Weak Mutation 6: dominion.GameState.initializeGame()V:35 - ReplaceConstant - 4 -> -1
   * Goal 35. Weak Mutation 7: dominion.GameState.initializeGame()V:35 - ReplaceConstant - 4 -> 3
   * Goal 36. Weak Mutation 8: dominion.GameState.initializeGame()V:35 - ReplaceConstant - 4 -> 5
   * Goal 37. Weak Mutation 9: dominion.GameState.initializeGame()V:35 - ReplaceComparisonOperator > -> !=
   * Goal 38. Weak Mutation 12: dominion.GameState.initializeGame()V:35 - ReplaceVariable players -> cards
   * Goal 39. Weak Mutation 13: dominion.GameState.initializeGame()V:35 - ReplaceConstant - 2 -> 0
   * Goal 40. Weak Mutation 14: dominion.GameState.initializeGame()V:35 - ReplaceConstant - 2 -> 1
   * Goal 41. Weak Mutation 15: dominion.GameState.initializeGame()V:35 - ReplaceConstant - 2 -> -1
   * Goal 42. Weak Mutation 16: dominion.GameState.initializeGame()V:35 - ReplaceConstant - 2 -> 3
   * Goal 43. Weak Mutation 18: dominion.GameState.initializeGame()V:35 - ReplaceComparisonOperator >= -> >
   * Goal 44. Weak Mutation 21: dominion.GameState.initializeGame()V:41 - ReplaceConstant - 0 -> 1
   * Goal 45. Weak Mutation 22: dominion.GameState.initializeGame()V:42 - ReplaceConstant - 10 -> 0
   * Goal 46. Weak Mutation 23: dominion.GameState.initializeGame()V:42 - ReplaceConstant - 10 -> 1
   * Goal 47. Weak Mutation 24: dominion.GameState.initializeGame()V:42 - ReplaceConstant - 10 -> -1
   * Goal 48. Weak Mutation 25: dominion.GameState.initializeGame()V:42 - ReplaceConstant - 10 -> 9
   * Goal 49. Weak Mutation 26: dominion.GameState.initializeGame()V:42 - ReplaceConstant - 10 -> 11
   * Goal 50. Weak Mutation 27: dominion.GameState.initializeGame()V:43 - ReplaceVariable selectedKindom -> Kingdom_Cards_Selected
   * Goal 51. Weak Mutation 28: dominion.GameState.initializeGame()V:43 - InsertUnaryOp Negation of selectedKindom
   * Goal 52. Weak Mutation 29: dominion.GameState.initializeGame()V:43 - InsertUnaryOp IINC 1 selectedKindom
   * Goal 53. Weak Mutation 30: dominion.GameState.initializeGame()V:43 - InsertUnaryOp IINC -1 selectedKindom
   * Goal 54. Weak Mutation 31: dominion.GameState.initializeGame()V:43 - ReplaceVariable Kingdom_Cards_Selected -> selectedKindom
   * Goal 55. Weak Mutation 32: dominion.GameState.initializeGame()V:43 - InsertUnaryOp Negation of Kingdom_Cards_Selected
   * Goal 56. Weak Mutation 33: dominion.GameState.initializeGame()V:43 - InsertUnaryOp IINC 1 Kingdom_Cards_Selected
   * Goal 57. Weak Mutation 34: dominion.GameState.initializeGame()V:43 - InsertUnaryOp IINC -1 Kingdom_Cards_Selected
   * Goal 58. Weak Mutation 35: dominion.GameState.initializeGame()V:43 - ReplaceComparisonOperator >= -> -1
   * Goal 59. Weak Mutation 38: dominion.GameState.initializeGame()V:44 - ReplaceVariable cards -> players
   */

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "hdb<[]");
      gameState0.addPlayer(player0);
      gameState0.addPlayer(player0);
      Randomness.random = null;
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.GameState", e);
      }
  }

  //Test case number: 10
  /*
   * 25 covered goals:
   * Goal 1. dominion.GameState.addPlayer(Ldominion/Player;)V: root-Branch
   * Goal 2. dominion.GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 3. dominion.GameState.getWinners()Ljava/util/HashMap;: I15 Branch 55 IFEQ L281 - false
   * Goal 4. Branch dominion.GameState.<init>(Ljava/util/List;)V: root-Branch in context: dominion.GameState:<init>(Ljava/util/List;)V
   * Goal 5. Branch dominion.GameState.addPlayer(Ldominion/Player;)V: root-Branch in context: dominion.GameState:addPlayer(Ldominion/Player;)V
   * Goal 6. Branch dominion.GameState.getWinners()Ljava/util/HashMap;: I15 Branch 55 IFEQ L281 - false in context: dominion.GameState:getWinners()Ljava/util/HashMap;
   * Goal 7. getWinners()Ljava/util/HashMap;_java.lang.NullPointerException_IMPLICIT
   * Goal 8. dominion.GameState.<init>(Ljava/util/List;)V: Line 15
   * Goal 9. dominion.GameState.<init>(Ljava/util/List;)V: Line 17
   * Goal 10. dominion.GameState.<init>(Ljava/util/List;)V: Line 20
   * Goal 11. dominion.GameState.<init>(Ljava/util/List;)V: Line 22
   * Goal 12. dominion.GameState.addPlayer(Ldominion/Player;)V: Line 24
   * Goal 13. dominion.GameState.addPlayer(Ldominion/Player;)V: Line 25
   * Goal 14. dominion.GameState.getWinners()Ljava/util/HashMap;: Line 278
   * Goal 15. dominion.GameState.getWinners()Ljava/util/HashMap;: Line 281
   * Goal 16. dominion.GameState.getWinners()Ljava/util/HashMap;: Line 282
   * Goal 17. [METHOD] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 18. [METHOD] dominion.GameState.addPlayer(Ldominion/Player;)V
   * Goal 19. [METHOD] dominion.GameState.getWinners()Ljava/util/HashMap;
   * Goal 20. [METHODNOEX] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 21. [METHODNOEX] dominion.GameState.addPlayer(Ldominion/Player;)V
   * Goal 22. Weak Mutation 0: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> players
   * Goal 23. Weak Mutation 2: dominion.GameState.addPlayer(Ldominion/Player;)V:24 - ReplaceVariable players -> cards
   * Goal 24. Weak Mutation 187: dominion.GameState.getWinners()Ljava/util/HashMap;:281 - ReplaceVariable players -> cards
   * Goal 25. Weak Mutation 188: dominion.GameState.getWinners()Ljava/util/HashMap;:281 - ReplaceComparisonOperator == -> !=
   */

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player((GameState) null, "GreatHall");
      player0.discard = null;
      GameState gameState0 = new GameState(player0.discard);
      gameState0.addPlayer(player0);
      // Undeclared exception!
      try { 
        gameState0.getWinners();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.Player", e);
      }
  }

  //Test case number: 11
  /*
   * 48 covered goals:
   * Goal 1. dominion.GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 2. dominion.GameState.getRandCard()Ldominion/Card;: I10 Branch 9 IFNE L73 - false
   * Goal 3. dominion.GameState.getRandCard()Ldominion/Card;: I13 Branch 10 IF_ICMPGE L73 - false
   * Goal 4. dominion.GameState.getRandCard()Ldominion/Card;: I69 Branch 11 IFEQ L80 - false
   * Goal 5. Branch dominion.GameState.<init>(Ljava/util/List;)V: root-Branch in context: dominion.GameState:<init>(Ljava/util/List;)V
   * Goal 6. Branch dominion.GameState.getRandCard()Ldominion/Card;: I13 Branch 10 IF_ICMPGE L73 - false in context: dominion.GameState:getRandCard()Ldominion/Card;
   * Goal 7. Branch dominion.GameState.getRandCard()Ldominion/Card;: I10 Branch 9 IFNE L73 - false in context: dominion.GameState:getRandCard()Ldominion/Card;
   * Goal 8. Branch dominion.GameState.getRandCard()Ldominion/Card;: I69 Branch 11 IFEQ L80 - false in context: dominion.GameState:getRandCard()Ldominion/Card;
   * Goal 9. getRandCard()Ldominion/Card;_java.lang.NullPointerException_IMPLICIT
   * Goal 10. dominion.GameState.<init>(Ljava/util/List;)V: Line 15
   * Goal 11. dominion.GameState.<init>(Ljava/util/List;)V: Line 17
   * Goal 12. dominion.GameState.<init>(Ljava/util/List;)V: Line 20
   * Goal 13. dominion.GameState.<init>(Ljava/util/List;)V: Line 22
   * Goal 14. dominion.GameState.getRandCard()Ldominion/Card;: Line 72
   * Goal 15. dominion.GameState.getRandCard()Ldominion/Card;: Line 73
   * Goal 16. dominion.GameState.getRandCard()Ldominion/Card;: Line 74
   * Goal 17. dominion.GameState.getRandCard()Ldominion/Card;: Line 75
   * Goal 18. dominion.GameState.getRandCard()Ldominion/Card;: Line 77
   * Goal 19. dominion.GameState.getRandCard()Ldominion/Card;: Line 78
   * Goal 20. dominion.GameState.getRandCard()Ldominion/Card;: Line 79
   * Goal 21. dominion.GameState.getRandCard()Ldominion/Card;: Line 80
   * Goal 22. dominion.GameState.getRandCard()Ldominion/Card;: Line 81
   * Goal 23. [METHOD] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 24. [METHOD] dominion.GameState.getRandCard()Ldominion/Card;
   * Goal 25. [METHODNOEX] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 26. Weak Mutation 0: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> players
   * Goal 27. Weak Mutation 1: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> cards
   * Goal 28. Weak Mutation 72: dominion.GameState.getRandCard()Ldominion/Card;:72 - ReplaceConstant - 0 -> 1
   * Goal 29. Weak Mutation 73: dominion.GameState.getRandCard()Ldominion/Card;:72 - ReplaceConstant - 0 -> 1
   * Goal 30. Weak Mutation 75: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp Negation of found
   * Goal 31. Weak Mutation 76: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp IINC 1 found
   * Goal 32. Weak Mutation 77: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp IINC -1 found
   * Goal 33. Weak Mutation 78: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceComparisonOperator != -> ==
   * Goal 34. Weak Mutation 80: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp Negation of l
   * Goal 35. Weak Mutation 81: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp IINC 1 l
   * Goal 36. Weak Mutation 82: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp IINC -1 l
   * Goal 37. Weak Mutation 83: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceConstant - 15 -> 0
   * Goal 38. Weak Mutation 84: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceConstant - 15 -> 1
   * Goal 39. Weak Mutation 85: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceConstant - 15 -> -1
   * Goal 40. Weak Mutation 86: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceConstant - 15 -> 14
   * Goal 41. Weak Mutation 87: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceConstant - 15 -> 16
   * Goal 42. Weak Mutation 88: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceComparisonOperator >= -> -1
   * Goal 43. Weak Mutation 91: dominion.GameState.getRandCard()Ldominion/Card;:74 - ReplaceVariable l -> found
   * Goal 44. Weak Mutation 92: dominion.GameState.getRandCard()Ldominion/Card;:75 - ReplaceComparisonOperator == -> !=
   * Goal 45. Weak Mutation 93: dominion.GameState.getRandCard()Ldominion/Card;:77 - ReplaceComparisonOperator == -> !=
   * Goal 46. Weak Mutation 94: dominion.GameState.getRandCard()Ldominion/Card;:78 - ReplaceVariable cards -> players
   * Goal 47. Weak Mutation 95: dominion.GameState.getRandCard()Ldominion/Card;:78 - ReplaceVariable cards -> players
   * Goal 48. Weak Mutation 96: dominion.GameState.getRandCard()Ldominion/Card;:80 - ReplaceComparisonOperator == -> !=
   */

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Card.CardName card_CardName0 = Card.CardName.Baron;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, (-1004), 40, (-1004));
      vector0.add(card0);
      gameState0.gameBoard.put(card0, (Integer) null);
      // Undeclared exception!
      try { 
        gameState0.getRandCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("dominion.GameState", e);
      }
  }

  //Test case number: 12
  /*
   * 20 covered goals:
   * Goal 1. dominion.GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 2. dominion.GameState.isGameOver()Z: I9 Branch 53 IFNULL L271 - true
   * Goal 3. Branch dominion.GameState.<init>(Ljava/util/List;)V: root-Branch in context: dominion.GameState:<init>(Ljava/util/List;)V
   * Goal 4. Branch dominion.GameState.isGameOver()Z: I9 Branch 53 IFNULL L271 - true in context: dominion.GameState:isGameOver()Z
   * Goal 5. [Output]: dominion.GameState.isGameOver()Z:True
   * Goal 6. dominion.GameState.<init>(Ljava/util/List;)V: Line 15
   * Goal 7. dominion.GameState.<init>(Ljava/util/List;)V: Line 17
   * Goal 8. dominion.GameState.<init>(Ljava/util/List;)V: Line 20
   * Goal 9. dominion.GameState.<init>(Ljava/util/List;)V: Line 22
   * Goal 10. dominion.GameState.isGameOver()Z: Line 271
   * Goal 11. dominion.GameState.isGameOver()Z: Line 272
   * Goal 12. [METHOD] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 13. [METHOD] dominion.GameState.isGameOver()Z
   * Goal 14. [METHODNOEX] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 15. [METHODNOEX] dominion.GameState.isGameOver()Z
   * Goal 16. Weak Mutation 0: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> players
   * Goal 17. Weak Mutation 1: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> cards
   * Goal 18. Weak Mutation 179: dominion.GameState.isGameOver()Z:271 - ReplaceVariable cards -> players
   * Goal 19. Weak Mutation 180: dominion.GameState.isGameOver()Z:271 - ReplaceComparisonOperator = null -> != null
   * Goal 20. Weak Mutation 185: dominion.GameState.isGameOver()Z:272 - ReplaceConstant - 1 -> 0
   */

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      boolean boolean0 = gameState0.isGameOver();
      assertTrue(boolean0);
  }

  //Test case number: 13
  /*
   * 54 covered goals:
   * Goal 1. dominion.GameState.addPlayer(Ldominion/Player;)V: root-Branch
   * Goal 2. dominion.GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 3. dominion.GameState.toString()Ljava/lang/String;: I11 Branch 56 IFEQ L293 - true
   * Goal 4. dominion.GameState.toString()Ljava/lang/String;: I28 Branch 57 IFEQ L296 - true
   * Goal 5. dominion.GameState.toString()Ljava/lang/String;: I28 Branch 57 IFEQ L296 - false
   * Goal 6. dominion.GameState.toString()Ljava/lang/String;: I86 Branch 58 IFEQ L302 - true
   * Goal 7. dominion.GameState.toString()Ljava/lang/String;: I86 Branch 58 IFEQ L302 - false
   * Goal 8. Branch dominion.GameState.<init>(Ljava/util/List;)V: root-Branch in context: dominion.GameState:<init>(Ljava/util/List;)V
   * Goal 9. Branch dominion.GameState.addPlayer(Ldominion/Player;)V: root-Branch in context: dominion.GameState:addPlayer(Ldominion/Player;)V
   * Goal 10. Branch dominion.GameState.toString()Ljava/lang/String;: I11 Branch 56 IFEQ L293 - true in context: dominion.GameState:toString()Ljava/lang/String;
   * Goal 11. Branch dominion.GameState.toString()Ljava/lang/String;: I28 Branch 57 IFEQ L296 - false in context: dominion.GameState:toString()Ljava/lang/String;
   * Goal 12. Branch dominion.GameState.toString()Ljava/lang/String;: I28 Branch 57 IFEQ L296 - true in context: dominion.GameState:toString()Ljava/lang/String;
   * Goal 13. Branch dominion.GameState.toString()Ljava/lang/String;: I86 Branch 58 IFEQ L302 - true in context: dominion.GameState:toString()Ljava/lang/String;
   * Goal 14. Branch dominion.GameState.toString()Ljava/lang/String;: I86 Branch 58 IFEQ L302 - false in context: dominion.GameState:toString()Ljava/lang/String;
   * Goal 15. [Output]: dominion.GameState.toString()Ljava/lang/String;:NonEmptyString
   * Goal 16. dominion.GameState.<init>(Ljava/util/List;)V: Line 15
   * Goal 17. dominion.GameState.<init>(Ljava/util/List;)V: Line 17
   * Goal 18. dominion.GameState.<init>(Ljava/util/List;)V: Line 20
   * Goal 19. dominion.GameState.<init>(Ljava/util/List;)V: Line 22
   * Goal 20. dominion.GameState.addPlayer(Ldominion/Player;)V: Line 24
   * Goal 21. dominion.GameState.addPlayer(Ldominion/Player;)V: Line 25
   * Goal 22. dominion.GameState.toString()Ljava/lang/String;: Line 292
   * Goal 23. dominion.GameState.toString()Ljava/lang/String;: Line 293
   * Goal 24. dominion.GameState.toString()Ljava/lang/String;: Line 296
   * Goal 25. dominion.GameState.toString()Ljava/lang/String;: Line 297
   * Goal 26. dominion.GameState.toString()Ljava/lang/String;: Line 298
   * Goal 27. dominion.GameState.toString()Ljava/lang/String;: Line 299
   * Goal 28. dominion.GameState.toString()Ljava/lang/String;: Line 300
   * Goal 29. dominion.GameState.toString()Ljava/lang/String;: Line 301
   * Goal 30. dominion.GameState.toString()Ljava/lang/String;: Line 302
   * Goal 31. dominion.GameState.toString()Ljava/lang/String;: Line 303
   * Goal 32. dominion.GameState.toString()Ljava/lang/String;: Line 304
   * Goal 33. dominion.GameState.toString()Ljava/lang/String;: Line 306
   * Goal 34. [METHOD] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 35. [METHOD] dominion.GameState.addPlayer(Ldominion/Player;)V
   * Goal 36. [METHOD] dominion.GameState.toString()Ljava/lang/String;
   * Goal 37. [METHODNOEX] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 38. [METHODNOEX] dominion.GameState.addPlayer(Ldominion/Player;)V
   * Goal 39. [METHODNOEX] dominion.GameState.toString()Ljava/lang/String;
   * Goal 40. Weak Mutation 0: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> players
   * Goal 41. Weak Mutation 1: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> cards
   * Goal 42. Weak Mutation 2: dominion.GameState.addPlayer(Ldominion/Player;)V:24 - ReplaceVariable players -> cards
   * Goal 43. Weak Mutation 194: dominion.GameState.toString()Ljava/lang/String;:293 - ReplaceComparisonOperator == -> !=
   * Goal 44. Weak Mutation 196: dominion.GameState.toString()Ljava/lang/String;:296 - ReplaceVariable players -> cards
   * Goal 45. Weak Mutation 197: dominion.GameState.toString()Ljava/lang/String;:296 - ReplaceComparisonOperator == -> !=
   * Goal 46. Weak Mutation 198: dominion.GameState.toString()Ljava/lang/String;:297 - ReplaceConstant -  ---  -> 
   * Goal 47. Weak Mutation 199: dominion.GameState.toString()Ljava/lang/String;:297 - ReplaceConstant - 
 -> 
   * Goal 48. Weak Mutation 200: dominion.GameState.toString()Ljava/lang/String;:298 - ReplaceConstant -  --- gameBoard --- 
 -> 
   * Goal 49. Weak Mutation 201: dominion.GameState.toString()Ljava/lang/String;:299 - ReplaceConstant - Cards on the table: 
 -> 
   * Goal 50. Weak Mutation 202: dominion.GameState.toString()Ljava/lang/String;:300 - ReplaceConstant - Card Name 		 NumberCards: 
 -> 
   * Goal 51. Weak Mutation 203: dominion.GameState.toString()Ljava/lang/String;:302 - ReplaceComparisonOperator == -> !=
   * Goal 52. Weak Mutation 204: dominion.GameState.toString()Ljava/lang/String;:303 - ReplaceConstant - 	  -> 
   * Goal 53. Weak Mutation 205: dominion.GameState.toString()Ljava/lang/String;:303 - ReplaceConstant - 		  -> 
   * Goal 54. Weak Mutation 206: dominion.GameState.toString()Ljava/lang/String;:304 - ReplaceConstant - 
 -> 
   */

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Card.CardName card_CardName0 = Card.CardName.Smithy;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 8);
      Integer integer0 = new Integer(2238);
      gameState0.gameBoard.put(card0, integer0);
      Player player0 = new Player(gameState0, "hdb<[]");
      gameState0.addPlayer(player0);
      String string0 = gameState0.toString();
      assertEquals(" ---  --- hdb<[] ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coins: 0numBuys: 0\n\n --- gameBoard --- \nCards on the table: \nCard Name \t\t NumberCards: \n\t Smithy\t\t 2238\n", string0);
  }

  //Test case number: 14
  /*
   * 21 covered goals:
   * Goal 1. dominion.GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 2. dominion.GameState.toString()Ljava/lang/String;: I11 Branch 56 IFEQ L293 - false
   * Goal 3. Branch dominion.GameState.<init>(Ljava/util/List;)V: root-Branch in context: dominion.GameState:<init>(Ljava/util/List;)V
   * Goal 4. Branch dominion.GameState.toString()Ljava/lang/String;: I11 Branch 56 IFEQ L293 - false in context: dominion.GameState:toString()Ljava/lang/String;
   * Goal 5. [Output]: dominion.GameState.toString()Ljava/lang/String;:NonEmptyString
   * Goal 6. dominion.GameState.<init>(Ljava/util/List;)V: Line 15
   * Goal 7. dominion.GameState.<init>(Ljava/util/List;)V: Line 17
   * Goal 8. dominion.GameState.<init>(Ljava/util/List;)V: Line 20
   * Goal 9. dominion.GameState.<init>(Ljava/util/List;)V: Line 22
   * Goal 10. dominion.GameState.toString()Ljava/lang/String;: Line 292
   * Goal 11. dominion.GameState.toString()Ljava/lang/String;: Line 293
   * Goal 12. dominion.GameState.toString()Ljava/lang/String;: Line 294
   * Goal 13. dominion.GameState.toString()Ljava/lang/String;: Line 306
   * Goal 14. [METHOD] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 15. [METHOD] dominion.GameState.toString()Ljava/lang/String;
   * Goal 16. [METHODNOEX] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 17. [METHODNOEX] dominion.GameState.toString()Ljava/lang/String;
   * Goal 18. Weak Mutation 0: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> players
   * Goal 19. Weak Mutation 1: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> cards
   * Goal 20. Weak Mutation 194: dominion.GameState.toString()Ljava/lang/String;:293 - ReplaceComparisonOperator == -> !=
   * Goal 21. Weak Mutation 195: dominion.GameState.toString()Ljava/lang/String;:294 - ReplaceConstant - The board game is embty you need to intialize the game!!!! -> 
   */

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      String string0 = gameState0.toString();
      assertEquals("The board game is embty you need to intialize the game!!!!", string0);
  }

  //Test case number: 15
  /*
   * 38 covered goals:
   * Goal 1. dominion.GameState.addPlayer(Ldominion/Player;)V: root-Branch
   * Goal 2. dominion.GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 3. dominion.GameState.getWinners()Ljava/util/HashMap;: I15 Branch 55 IFEQ L281 - true
   * Goal 4. dominion.GameState.getWinners()Ljava/util/HashMap;: I15 Branch 55 IFEQ L281 - false
   * Goal 5. Branch dominion.GameState.<init>(Ljava/util/List;)V: root-Branch in context: dominion.GameState:<init>(Ljava/util/List;)V
   * Goal 6. Branch dominion.GameState.addPlayer(Ldominion/Player;)V: root-Branch in context: dominion.GameState:addPlayer(Ldominion/Player;)V
   * Goal 7. Branch dominion.GameState.getWinners()Ljava/util/HashMap;: I15 Branch 55 IFEQ L281 - false in context: dominion.GameState:getWinners()Ljava/util/HashMap;
   * Goal 8. Branch dominion.GameState.getWinners()Ljava/util/HashMap;: I15 Branch 55 IFEQ L281 - true in context: dominion.GameState:getWinners()Ljava/util/HashMap;
   * Goal 9. [Output]: dominion.GameState.getWinners()Ljava/util/HashMap;:NonNull:java.util.HashMap:isEmpty()Z:False
   * Goal 10. [Output]: dominion.GameState.getWinners()Ljava/util/HashMap;:NonNull:java.util.HashMap:size()I:Positive
   * Goal 11. dominion.GameState.<init>(Ljava/util/List;)V: Line 15
   * Goal 12. dominion.GameState.<init>(Ljava/util/List;)V: Line 17
   * Goal 13. dominion.GameState.<init>(Ljava/util/List;)V: Line 20
   * Goal 14. dominion.GameState.<init>(Ljava/util/List;)V: Line 22
   * Goal 15. dominion.GameState.addPlayer(Ldominion/Player;)V: Line 24
   * Goal 16. dominion.GameState.addPlayer(Ldominion/Player;)V: Line 25
   * Goal 17. dominion.GameState.getWinners()Ljava/util/HashMap;: Line 278
   * Goal 18. dominion.GameState.getWinners()Ljava/util/HashMap;: Line 281
   * Goal 19. dominion.GameState.getWinners()Ljava/util/HashMap;: Line 282
   * Goal 20. dominion.GameState.getWinners()Ljava/util/HashMap;: Line 283
   * Goal 21. dominion.GameState.getWinners()Ljava/util/HashMap;: Line 284
   * Goal 22. dominion.GameState.getWinners()Ljava/util/HashMap;: Line 286
   * Goal 23. [METHOD] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 24. [METHOD] dominion.GameState.addPlayer(Ldominion/Player;)V
   * Goal 25. [METHOD] dominion.GameState.getWinners()Ljava/util/HashMap;
   * Goal 26. [METHODNOEX] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 27. [METHODNOEX] dominion.GameState.addPlayer(Ldominion/Player;)V
   * Goal 28. [METHODNOEX] dominion.GameState.getWinners()Ljava/util/HashMap;
   * Goal 29. Weak Mutation 0: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> players
   * Goal 30. Weak Mutation 1: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> cards
   * Goal 31. Weak Mutation 2: dominion.GameState.addPlayer(Ldominion/Player;)V:24 - ReplaceVariable players -> cards
   * Goal 32. Weak Mutation 187: dominion.GameState.getWinners()Ljava/util/HashMap;:281 - ReplaceVariable players -> cards
   * Goal 33. Weak Mutation 188: dominion.GameState.getWinners()Ljava/util/HashMap;:281 - ReplaceComparisonOperator == -> !=
   * Goal 34. Weak Mutation 189: dominion.GameState.getWinners()Ljava/util/HashMap;:283 - ReplaceVariable playerScore -> gameBoard
   * Goal 35. Weak Mutation 190: dominion.GameState.getWinners()Ljava/util/HashMap;:283 - InsertUnaryOp Negation of score
   * Goal 36. Weak Mutation 191: dominion.GameState.getWinners()Ljava/util/HashMap;:283 - InsertUnaryOp IINC 1 score
   * Goal 37. Weak Mutation 192: dominion.GameState.getWinners()Ljava/util/HashMap;:283 - InsertUnaryOp IINC -1 score
   * Goal 38. Weak Mutation 193: dominion.GameState.getWinners()Ljava/util/HashMap;:286 - ReplaceVariable playerScore -> gameBoard
   */

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "hdb<[]");
      gameState0.addPlayer(player0);
      HashMap<Player, Integer> hashMap0 = gameState0.getWinners();
      assertEquals(1, hashMap0.size());
  }

  //Test case number: 16
  /*
   * 27 covered goals:
   * Goal 1. dominion.GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 2. dominion.GameState.playKingdomCard(Ldominion/Player;)V: I4 Branch 20 IFLE L122 - false
   * Goal 3. dominion.GameState.playKingdomCard(Ldominion/Player;)V: I16 Branch 21 IFNE L125 - false
   * Goal 4. Branch dominion.GameState.<init>(Ljava/util/List;)V: root-Branch in context: dominion.GameState:<init>(Ljava/util/List;)V
   * Goal 5. Branch dominion.GameState.playKingdomCard(Ldominion/Player;)V: I4 Branch 20 IFLE L122 - false in context: dominion.GameState:playKingdomCard(Ldominion/Player;)V
   * Goal 6. Branch dominion.GameState.playKingdomCard(Ldominion/Player;)V: I16 Branch 21 IFNE L125 - false in context: dominion.GameState:playKingdomCard(Ldominion/Player;)V
   * Goal 7. dominion.GameState.<init>(Ljava/util/List;)V: Line 15
   * Goal 8. dominion.GameState.<init>(Ljava/util/List;)V: Line 17
   * Goal 9. dominion.GameState.<init>(Ljava/util/List;)V: Line 20
   * Goal 10. dominion.GameState.<init>(Ljava/util/List;)V: Line 22
   * Goal 11. dominion.GameState.playKingdomCard(Ldominion/Player;)V: Line 122
   * Goal 12. dominion.GameState.playKingdomCard(Ldominion/Player;)V: Line 123
   * Goal 13. dominion.GameState.playKingdomCard(Ldominion/Player;)V: Line 125
   * Goal 14. dominion.GameState.playKingdomCard(Ldominion/Player;)V: Line 126
   * Goal 15. [METHOD] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 16. [METHOD] dominion.GameState.playKingdomCard(Ldominion/Player;)V
   * Goal 17. [METHODNOEX] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 18. [METHODNOEX] dominion.GameState.playKingdomCard(Ldominion/Player;)V
   * Goal 19. Weak Mutation 0: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> players
   * Goal 20. Weak Mutation 1: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> cards
   * Goal 21. Weak Mutation 134: dominion.GameState.playKingdomCard(Ldominion/Player;)V:122 - InsertUnaryOp Negation
   * Goal 22. Weak Mutation 135: dominion.GameState.playKingdomCard(Ldominion/Player;)V:122 - InsertUnaryOp +1
   * Goal 23. Weak Mutation 136: dominion.GameState.playKingdomCard(Ldominion/Player;)V:122 - InsertUnaryOp -1
   * Goal 24. Weak Mutation 137: dominion.GameState.playKingdomCard(Ldominion/Player;)V:122 - ReplaceComparisonOperator <= -> -1
   * Goal 25. Weak Mutation 140: dominion.GameState.playKingdomCard(Ldominion/Player;)V:125 - ReplaceVariable actionCards -> players
   * Goal 26. Weak Mutation 141: dominion.GameState.playKingdomCard(Ldominion/Player;)V:125 - ReplaceVariable actionCards -> cards
   * Goal 27. Weak Mutation 142: dominion.GameState.playKingdomCard(Ldominion/Player;)V:125 - ReplaceComparisonOperator != -> -1
   */

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, "");
      player0.numActions = 14;
      gameState0.playKingdomCard(player0);
      assertEquals("", player0.getName());
  }

  //Test case number: 17
  /*
   * 20 covered goals:
   * Goal 1. dominion.GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 2. dominion.GameState.playKingdomCard(Ldominion/Player;)V: I4 Branch 20 IFLE L122 - true
   * Goal 3. Branch dominion.GameState.<init>(Ljava/util/List;)V: root-Branch in context: dominion.GameState:<init>(Ljava/util/List;)V
   * Goal 4. Branch dominion.GameState.playKingdomCard(Ldominion/Player;)V: I4 Branch 20 IFLE L122 - true in context: dominion.GameState:playKingdomCard(Ldominion/Player;)V
   * Goal 5. dominion.GameState.<init>(Ljava/util/List;)V: Line 15
   * Goal 6. dominion.GameState.<init>(Ljava/util/List;)V: Line 17
   * Goal 7. dominion.GameState.<init>(Ljava/util/List;)V: Line 20
   * Goal 8. dominion.GameState.<init>(Ljava/util/List;)V: Line 22
   * Goal 9. dominion.GameState.playKingdomCard(Ldominion/Player;)V: Line 122
   * Goal 10. dominion.GameState.playKingdomCard(Ldominion/Player;)V: Line 268
   * Goal 11. [METHOD] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 12. [METHOD] dominion.GameState.playKingdomCard(Ldominion/Player;)V
   * Goal 13. [METHODNOEX] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 14. [METHODNOEX] dominion.GameState.playKingdomCard(Ldominion/Player;)V
   * Goal 15. Weak Mutation 0: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> players
   * Goal 16. Weak Mutation 1: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> cards
   * Goal 17. Weak Mutation 134: dominion.GameState.playKingdomCard(Ldominion/Player;)V:122 - InsertUnaryOp Negation
   * Goal 18. Weak Mutation 135: dominion.GameState.playKingdomCard(Ldominion/Player;)V:122 - InsertUnaryOp +1
   * Goal 19. Weak Mutation 136: dominion.GameState.playKingdomCard(Ldominion/Player;)V:122 - InsertUnaryOp -1
   * Goal 20. Weak Mutation 139: dominion.GameState.playKingdomCard(Ldominion/Player;)V:122 - ReplaceComparisonOperator <= -> <
   */

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, (String) null);
      gameState0.playKingdomCard(player0);
      assertNull(player0.getName());
  }

  //Test case number: 18
  /*
   * 30 covered goals:
   * Goal 1. dominion.GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 2. dominion.GameState.play()Ljava/util/HashMap;: I4 Branch 13 IFNE L92 - false
   * Goal 3. dominion.GameState.play()Ljava/util/HashMap;: I14 Branch 14 IFEQ L94 - true
   * Goal 4. dominion.GameState.isGameOver()Z: I9 Branch 53 IFNULL L271 - false
   * Goal 5. dominion.GameState.isGameOver()Z: I19 Branch 54 IFNE L271 - true
   * Goal 6. Branch dominion.GameState.<init>(Ljava/util/List;)V: root-Branch in context: dominion.GameState:<init>(Ljava/util/List;)V
   * Goal 7. Branch dominion.GameState.play()Ljava/util/HashMap;: I4 Branch 13 IFNE L92 - false in context: dominion.GameState:play()Ljava/util/HashMap;
   * Goal 8. Branch dominion.GameState.play()Ljava/util/HashMap;: I14 Branch 14 IFEQ L94 - true in context: dominion.GameState:play()Ljava/util/HashMap;
   * Goal 9. play()Ljava/util/HashMap;_org.evosuite.runtime.TooManyResourcesException_IMPLICIT
   * Goal 10. dominion.GameState.<init>(Ljava/util/List;)V: Line 15
   * Goal 11. dominion.GameState.<init>(Ljava/util/List;)V: Line 17
   * Goal 12. dominion.GameState.<init>(Ljava/util/List;)V: Line 20
   * Goal 13. dominion.GameState.<init>(Ljava/util/List;)V: Line 22
   * Goal 14. dominion.GameState.isGameOver()Z: Line 271
   * Goal 15. dominion.GameState.isGameOver()Z: Line 273
   * Goal 16. dominion.GameState.play()Ljava/util/HashMap;: Line 92
   * Goal 17. dominion.GameState.play()Ljava/util/HashMap;: Line 94
   * Goal 18. [METHOD] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 19. [METHOD] dominion.GameState.play()Ljava/util/HashMap;
   * Goal 20. [METHODNOEX] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 21. Weak Mutation 0: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> players
   * Goal 22. Weak Mutation 1: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> cards
   * Goal 23. Weak Mutation 101: dominion.GameState.play()Ljava/util/HashMap;:92 - ReplaceComparisonOperator != -> ==
   * Goal 24. Weak Mutation 102: dominion.GameState.play()Ljava/util/HashMap;:94 - ReplaceVariable players -> cards
   * Goal 25. Weak Mutation 103: dominion.GameState.play()Ljava/util/HashMap;:94 - ReplaceComparisonOperator == -> !=
   * Goal 26. Weak Mutation 179: dominion.GameState.isGameOver()Z:271 - ReplaceVariable cards -> players
   * Goal 27. Weak Mutation 180: dominion.GameState.isGameOver()Z:271 - ReplaceComparisonOperator = null -> != null
   * Goal 28. Weak Mutation 181: dominion.GameState.isGameOver()Z:271 - ReplaceVariable cards -> players
   * Goal 29. Weak Mutation 184: dominion.GameState.isGameOver()Z:271 - ReplaceComparisonOperator != -> >
   * Goal 30. Weak Mutation 186: dominion.GameState.isGameOver()Z:273 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Integer integer0 = new Integer((-1004));
      gameState0.gameBoard.put((Card) null, integer0);
      // Undeclared exception!
      try { 
        gameState0.play();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  //Test case number: 19
  /*
   * 32 covered goals:
   * Goal 1. dominion.GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 2. dominion.GameState.play()Ljava/util/HashMap;: I4 Branch 13 IFNE L92 - true
   * Goal 3. dominion.GameState.isGameOver()Z: I9 Branch 53 IFNULL L271 - true
   * Goal 4. dominion.GameState.getWinners()Ljava/util/HashMap;: I15 Branch 55 IFEQ L281 - true
   * Goal 5. Branch dominion.GameState.<init>(Ljava/util/List;)V: root-Branch in context: dominion.GameState:<init>(Ljava/util/List;)V
   * Goal 6. Branch dominion.GameState.play()Ljava/util/HashMap;: I4 Branch 13 IFNE L92 - true in context: dominion.GameState:play()Ljava/util/HashMap;
   * Goal 7. [Output]: dominion.GameState.play()Ljava/util/HashMap;:NonNull:java.util.HashMap:isEmpty()Z:True
   * Goal 8. [Output]: dominion.GameState.play()Ljava/util/HashMap;:NonNull:java.util.HashMap:size()I:Zero
   * Goal 9. dominion.GameState.<init>(Ljava/util/List;)V: Line 15
   * Goal 10. dominion.GameState.<init>(Ljava/util/List;)V: Line 17
   * Goal 11. dominion.GameState.<init>(Ljava/util/List;)V: Line 20
   * Goal 12. dominion.GameState.<init>(Ljava/util/List;)V: Line 22
   * Goal 13. dominion.GameState.getWinners()Ljava/util/HashMap;: Line 278
   * Goal 14. dominion.GameState.getWinners()Ljava/util/HashMap;: Line 281
   * Goal 15. dominion.GameState.getWinners()Ljava/util/HashMap;: Line 286
   * Goal 16. dominion.GameState.isGameOver()Z: Line 271
   * Goal 17. dominion.GameState.isGameOver()Z: Line 272
   * Goal 18. dominion.GameState.play()Ljava/util/HashMap;: Line 92
   * Goal 19. dominion.GameState.play()Ljava/util/HashMap;: Line 119
   * Goal 20. [METHOD] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 21. [METHOD] dominion.GameState.play()Ljava/util/HashMap;
   * Goal 22. [METHODNOEX] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 23. [METHODNOEX] dominion.GameState.play()Ljava/util/HashMap;
   * Goal 24. Weak Mutation 0: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> players
   * Goal 25. Weak Mutation 1: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> cards
   * Goal 26. Weak Mutation 101: dominion.GameState.play()Ljava/util/HashMap;:92 - ReplaceComparisonOperator != -> ==
   * Goal 27. Weak Mutation 179: dominion.GameState.isGameOver()Z:271 - ReplaceVariable cards -> players
   * Goal 28. Weak Mutation 180: dominion.GameState.isGameOver()Z:271 - ReplaceComparisonOperator = null -> != null
   * Goal 29. Weak Mutation 185: dominion.GameState.isGameOver()Z:272 - ReplaceConstant - 1 -> 0
   * Goal 30. Weak Mutation 187: dominion.GameState.getWinners()Ljava/util/HashMap;:281 - ReplaceVariable players -> cards
   * Goal 31. Weak Mutation 188: dominion.GameState.getWinners()Ljava/util/HashMap;:281 - ReplaceComparisonOperator == -> !=
   * Goal 32. Weak Mutation 193: dominion.GameState.getWinners()Ljava/util/HashMap;:286 - ReplaceVariable playerScore -> gameBoard
   */

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      HashMap<Player, Integer> hashMap0 = gameState0.play();
      assertTrue(hashMap0.isEmpty());
  }

  //Test case number: 20
  /*
   * 59 covered goals:
   * Goal 1. dominion.GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 2. dominion.GameState.getRandCard()Ldominion/Card;: I10 Branch 9 IFNE L73 - false
   * Goal 3. dominion.GameState.getRandCard()Ldominion/Card;: I13 Branch 10 IF_ICMPGE L73 - true
   * Goal 4. dominion.GameState.getRandCard()Ldominion/Card;: I13 Branch 10 IF_ICMPGE L73 - false
   * Goal 5. dominion.GameState.getRandCard()Ldominion/Card;: I69 Branch 11 IFEQ L80 - false
   * Goal 6. dominion.GameState.getRandCard()Ldominion/Card;: I78 Branch 12 IFLE L81 - true
   * Goal 7. Branch dominion.GameState.<init>(Ljava/util/List;)V: root-Branch in context: dominion.GameState:<init>(Ljava/util/List;)V
   * Goal 8. Branch dominion.GameState.getRandCard()Ldominion/Card;: I13 Branch 10 IF_ICMPGE L73 - true in context: dominion.GameState:getRandCard()Ldominion/Card;
   * Goal 9. Branch dominion.GameState.getRandCard()Ldominion/Card;: I13 Branch 10 IF_ICMPGE L73 - false in context: dominion.GameState:getRandCard()Ldominion/Card;
   * Goal 10. Branch dominion.GameState.getRandCard()Ldominion/Card;: I10 Branch 9 IFNE L73 - false in context: dominion.GameState:getRandCard()Ldominion/Card;
   * Goal 11. Branch dominion.GameState.getRandCard()Ldominion/Card;: I69 Branch 11 IFEQ L80 - false in context: dominion.GameState:getRandCard()Ldominion/Card;
   * Goal 12. Branch dominion.GameState.getRandCard()Ldominion/Card;: I78 Branch 12 IFLE L81 - true in context: dominion.GameState:getRandCard()Ldominion/Card;
   * Goal 13. [Output]: dominion.GameState.getRandCard()Ldominion/Card;:Null
   * Goal 14. dominion.GameState.<init>(Ljava/util/List;)V: Line 15
   * Goal 15. dominion.GameState.<init>(Ljava/util/List;)V: Line 17
   * Goal 16. dominion.GameState.<init>(Ljava/util/List;)V: Line 20
   * Goal 17. dominion.GameState.<init>(Ljava/util/List;)V: Line 22
   * Goal 18. dominion.GameState.getRandCard()Ldominion/Card;: Line 72
   * Goal 19. dominion.GameState.getRandCard()Ldominion/Card;: Line 73
   * Goal 20. dominion.GameState.getRandCard()Ldominion/Card;: Line 74
   * Goal 21. dominion.GameState.getRandCard()Ldominion/Card;: Line 75
   * Goal 22. dominion.GameState.getRandCard()Ldominion/Card;: Line 77
   * Goal 23. dominion.GameState.getRandCard()Ldominion/Card;: Line 78
   * Goal 24. dominion.GameState.getRandCard()Ldominion/Card;: Line 79
   * Goal 25. dominion.GameState.getRandCard()Ldominion/Card;: Line 80
   * Goal 26. dominion.GameState.getRandCard()Ldominion/Card;: Line 81
   * Goal 27. dominion.GameState.getRandCard()Ldominion/Card;: Line 86
   * Goal 28. dominion.GameState.getRandCard()Ldominion/Card;: Line 87
   * Goal 29. [METHOD] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 30. [METHOD] dominion.GameState.getRandCard()Ldominion/Card;
   * Goal 31. [METHODNOEX] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 32. [METHODNOEX] dominion.GameState.getRandCard()Ldominion/Card;
   * Goal 33. Weak Mutation 0: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> players
   * Goal 34. Weak Mutation 1: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> cards
   * Goal 35. Weak Mutation 72: dominion.GameState.getRandCard()Ldominion/Card;:72 - ReplaceConstant - 0 -> 1
   * Goal 36. Weak Mutation 73: dominion.GameState.getRandCard()Ldominion/Card;:72 - ReplaceConstant - 0 -> 1
   * Goal 37. Weak Mutation 74: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceVariable found -> l
   * Goal 38. Weak Mutation 75: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp Negation of found
   * Goal 39. Weak Mutation 76: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp IINC 1 found
   * Goal 40. Weak Mutation 77: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp IINC -1 found
   * Goal 41. Weak Mutation 78: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceComparisonOperator != -> ==
   * Goal 42. Weak Mutation 79: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceVariable l -> found
   * Goal 43. Weak Mutation 80: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp Negation of l
   * Goal 44. Weak Mutation 81: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp IINC 1 l
   * Goal 45. Weak Mutation 82: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp IINC -1 l
   * Goal 46. Weak Mutation 83: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceConstant - 15 -> 0
   * Goal 47. Weak Mutation 84: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceConstant - 15 -> 1
   * Goal 48. Weak Mutation 85: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceConstant - 15 -> -1
   * Goal 49. Weak Mutation 86: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceConstant - 15 -> 14
   * Goal 50. Weak Mutation 87: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceConstant - 15 -> 16
   * Goal 51. Weak Mutation 88: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceComparisonOperator >= -> -1
   * Goal 52. Weak Mutation 89: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceComparisonOperator >= -> >
   * Goal 53. Weak Mutation 91: dominion.GameState.getRandCard()Ldominion/Card;:74 - ReplaceVariable l -> found
   * Goal 54. Weak Mutation 92: dominion.GameState.getRandCard()Ldominion/Card;:75 - ReplaceComparisonOperator == -> !=
   * Goal 55. Weak Mutation 93: dominion.GameState.getRandCard()Ldominion/Card;:77 - ReplaceComparisonOperator == -> !=
   * Goal 56. Weak Mutation 94: dominion.GameState.getRandCard()Ldominion/Card;:78 - ReplaceVariable cards -> players
   * Goal 57. Weak Mutation 95: dominion.GameState.getRandCard()Ldominion/Card;:78 - ReplaceVariable cards -> players
   * Goal 58. Weak Mutation 96: dominion.GameState.getRandCard()Ldominion/Card;:80 - ReplaceComparisonOperator == -> !=
   * Goal 59. Weak Mutation 98: dominion.GameState.getRandCard()Ldominion/Card;:81 - ReplaceComparisonOperator <= -> ==
   */

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Card.CardName card_CardName0 = Card.CardName.Baron;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, (-1004), 40, (-1004));
      vector0.add(card0);
      Integer integer0 = new Integer((-1004));
      gameState0.gameBoard.put(card0, integer0);
      Card card1 = gameState0.getRandCard();
      assertNull(card1);
  }

  //Test case number: 21
  /*
   * 56 covered goals:
   * Goal 1. dominion.GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 2. dominion.GameState.getRandCard()Ldominion/Card;: I10 Branch 9 IFNE L73 - false
   * Goal 3. dominion.GameState.getRandCard()Ldominion/Card;: I13 Branch 10 IF_ICMPGE L73 - false
   * Goal 4. dominion.GameState.getRandCard()Ldominion/Card;: I69 Branch 11 IFEQ L80 - false
   * Goal 5. dominion.GameState.getRandCard()Ldominion/Card;: I78 Branch 12 IFLE L81 - false
   * Goal 6. Branch dominion.GameState.<init>(Ljava/util/List;)V: root-Branch in context: dominion.GameState:<init>(Ljava/util/List;)V
   * Goal 7. Branch dominion.GameState.getRandCard()Ldominion/Card;: I13 Branch 10 IF_ICMPGE L73 - false in context: dominion.GameState:getRandCard()Ldominion/Card;
   * Goal 8. Branch dominion.GameState.getRandCard()Ldominion/Card;: I10 Branch 9 IFNE L73 - false in context: dominion.GameState:getRandCard()Ldominion/Card;
   * Goal 9. Branch dominion.GameState.getRandCard()Ldominion/Card;: I69 Branch 11 IFEQ L80 - false in context: dominion.GameState:getRandCard()Ldominion/Card;
   * Goal 10. Branch dominion.GameState.getRandCard()Ldominion/Card;: I78 Branch 12 IFLE L81 - false in context: dominion.GameState:getRandCard()Ldominion/Card;
   * Goal 11. [Output]: dominion.GameState.getRandCard()Ldominion/Card;:NonNull:dominion.Card:getCost()I:Zero
   * Goal 12. [Output]: dominion.GameState.getRandCard()Ldominion/Card;:NonNull:dominion.Card:getTreasureValue()I:Positive
   * Goal 13. dominion.GameState.<init>(Ljava/util/List;)V: Line 15
   * Goal 14. dominion.GameState.<init>(Ljava/util/List;)V: Line 17
   * Goal 15. dominion.GameState.<init>(Ljava/util/List;)V: Line 20
   * Goal 16. dominion.GameState.<init>(Ljava/util/List;)V: Line 22
   * Goal 17. dominion.GameState.getRandCard()Ldominion/Card;: Line 72
   * Goal 18. dominion.GameState.getRandCard()Ldominion/Card;: Line 73
   * Goal 19. dominion.GameState.getRandCard()Ldominion/Card;: Line 74
   * Goal 20. dominion.GameState.getRandCard()Ldominion/Card;: Line 75
   * Goal 21. dominion.GameState.getRandCard()Ldominion/Card;: Line 77
   * Goal 22. dominion.GameState.getRandCard()Ldominion/Card;: Line 78
   * Goal 23. dominion.GameState.getRandCard()Ldominion/Card;: Line 79
   * Goal 24. dominion.GameState.getRandCard()Ldominion/Card;: Line 80
   * Goal 25. dominion.GameState.getRandCard()Ldominion/Card;: Line 81
   * Goal 26. dominion.GameState.getRandCard()Ldominion/Card;: Line 82
   * Goal 27. dominion.GameState.getRandCard()Ldominion/Card;: Line 83
   * Goal 28. [METHOD] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 29. [METHOD] dominion.GameState.getRandCard()Ldominion/Card;
   * Goal 30. [METHODNOEX] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 31. [METHODNOEX] dominion.GameState.getRandCard()Ldominion/Card;
   * Goal 32. Weak Mutation 0: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> players
   * Goal 33. Weak Mutation 1: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> cards
   * Goal 34. Weak Mutation 72: dominion.GameState.getRandCard()Ldominion/Card;:72 - ReplaceConstant - 0 -> 1
   * Goal 35. Weak Mutation 73: dominion.GameState.getRandCard()Ldominion/Card;:72 - ReplaceConstant - 0 -> 1
   * Goal 36. Weak Mutation 75: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp Negation of found
   * Goal 37. Weak Mutation 76: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp IINC 1 found
   * Goal 38. Weak Mutation 77: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp IINC -1 found
   * Goal 39. Weak Mutation 78: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceComparisonOperator != -> ==
   * Goal 40. Weak Mutation 80: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp Negation of l
   * Goal 41. Weak Mutation 81: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp IINC 1 l
   * Goal 42. Weak Mutation 82: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp IINC -1 l
   * Goal 43. Weak Mutation 83: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceConstant - 15 -> 0
   * Goal 44. Weak Mutation 84: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceConstant - 15 -> 1
   * Goal 45. Weak Mutation 85: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceConstant - 15 -> -1
   * Goal 46. Weak Mutation 86: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceConstant - 15 -> 14
   * Goal 47. Weak Mutation 87: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceConstant - 15 -> 16
   * Goal 48. Weak Mutation 88: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceComparisonOperator >= -> -1
   * Goal 49. Weak Mutation 91: dominion.GameState.getRandCard()Ldominion/Card;:74 - ReplaceVariable l -> found
   * Goal 50. Weak Mutation 92: dominion.GameState.getRandCard()Ldominion/Card;:75 - ReplaceComparisonOperator == -> !=
   * Goal 51. Weak Mutation 93: dominion.GameState.getRandCard()Ldominion/Card;:77 - ReplaceComparisonOperator == -> !=
   * Goal 52. Weak Mutation 94: dominion.GameState.getRandCard()Ldominion/Card;:78 - ReplaceVariable cards -> players
   * Goal 53. Weak Mutation 95: dominion.GameState.getRandCard()Ldominion/Card;:78 - ReplaceVariable cards -> players
   * Goal 54. Weak Mutation 96: dominion.GameState.getRandCard()Ldominion/Card;:80 - ReplaceComparisonOperator == -> !=
   * Goal 55. Weak Mutation 97: dominion.GameState.getRandCard()Ldominion/Card;:81 - ReplaceComparisonOperator <= -> -1
   * Goal 56. Weak Mutation 100: dominion.GameState.getRandCard()Ldominion/Card;:82 - ReplaceConstant - 1 -> 0
   */

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Card.CardName card_CardName0 = Card.CardName.Smithy;
      Card.Type card_Type0 = Card.Type.ACTION;
      Card card0 = new Card(card_CardName0, card_Type0, 0, 0, 8);
      Integer integer0 = new Integer(2238);
      gameState0.gameBoard.put(card0, integer0);
      vector0.add(card0);
      Card card1 = gameState0.getRandCard();
      assertSame(card1, card0);
  }

  //Test case number: 22
  /*
   * 55 covered goals:
   * Goal 1. dominion.GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 2. dominion.GameState.getRandCard()Ldominion/Card;: I10 Branch 9 IFNE L73 - false
   * Goal 3. dominion.GameState.getRandCard()Ldominion/Card;: I13 Branch 10 IF_ICMPGE L73 - true
   * Goal 4. dominion.GameState.getRandCard()Ldominion/Card;: I13 Branch 10 IF_ICMPGE L73 - false
   * Goal 5. dominion.GameState.getRandCard()Ldominion/Card;: I69 Branch 11 IFEQ L80 - true
   * Goal 6. Branch dominion.GameState.<init>(Ljava/util/List;)V: root-Branch in context: dominion.GameState:<init>(Ljava/util/List;)V
   * Goal 7. Branch dominion.GameState.getRandCard()Ldominion/Card;: I13 Branch 10 IF_ICMPGE L73 - true in context: dominion.GameState:getRandCard()Ldominion/Card;
   * Goal 8. Branch dominion.GameState.getRandCard()Ldominion/Card;: I13 Branch 10 IF_ICMPGE L73 - false in context: dominion.GameState:getRandCard()Ldominion/Card;
   * Goal 9. Branch dominion.GameState.getRandCard()Ldominion/Card;: I10 Branch 9 IFNE L73 - false in context: dominion.GameState:getRandCard()Ldominion/Card;
   * Goal 10. Branch dominion.GameState.getRandCard()Ldominion/Card;: I69 Branch 11 IFEQ L80 - true in context: dominion.GameState:getRandCard()Ldominion/Card;
   * Goal 11. [Output]: dominion.GameState.getRandCard()Ldominion/Card;:Null
   * Goal 12. dominion.GameState.<init>(Ljava/util/List;)V: Line 15
   * Goal 13. dominion.GameState.<init>(Ljava/util/List;)V: Line 17
   * Goal 14. dominion.GameState.<init>(Ljava/util/List;)V: Line 20
   * Goal 15. dominion.GameState.<init>(Ljava/util/List;)V: Line 22
   * Goal 16. dominion.GameState.getRandCard()Ldominion/Card;: Line 72
   * Goal 17. dominion.GameState.getRandCard()Ldominion/Card;: Line 73
   * Goal 18. dominion.GameState.getRandCard()Ldominion/Card;: Line 74
   * Goal 19. dominion.GameState.getRandCard()Ldominion/Card;: Line 75
   * Goal 20. dominion.GameState.getRandCard()Ldominion/Card;: Line 77
   * Goal 21. dominion.GameState.getRandCard()Ldominion/Card;: Line 78
   * Goal 22. dominion.GameState.getRandCard()Ldominion/Card;: Line 79
   * Goal 23. dominion.GameState.getRandCard()Ldominion/Card;: Line 80
   * Goal 24. dominion.GameState.getRandCard()Ldominion/Card;: Line 86
   * Goal 25. dominion.GameState.getRandCard()Ldominion/Card;: Line 87
   * Goal 26. [METHOD] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 27. [METHOD] dominion.GameState.getRandCard()Ldominion/Card;
   * Goal 28. [METHODNOEX] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 29. [METHODNOEX] dominion.GameState.getRandCard()Ldominion/Card;
   * Goal 30. Weak Mutation 0: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> players
   * Goal 31. Weak Mutation 1: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> cards
   * Goal 32. Weak Mutation 72: dominion.GameState.getRandCard()Ldominion/Card;:72 - ReplaceConstant - 0 -> 1
   * Goal 33. Weak Mutation 73: dominion.GameState.getRandCard()Ldominion/Card;:72 - ReplaceConstant - 0 -> 1
   * Goal 34. Weak Mutation 74: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceVariable found -> l
   * Goal 35. Weak Mutation 75: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp Negation of found
   * Goal 36. Weak Mutation 76: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp IINC 1 found
   * Goal 37. Weak Mutation 77: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp IINC -1 found
   * Goal 38. Weak Mutation 78: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceComparisonOperator != -> ==
   * Goal 39. Weak Mutation 79: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceVariable l -> found
   * Goal 40. Weak Mutation 80: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp Negation of l
   * Goal 41. Weak Mutation 81: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp IINC 1 l
   * Goal 42. Weak Mutation 82: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp IINC -1 l
   * Goal 43. Weak Mutation 83: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceConstant - 15 -> 0
   * Goal 44. Weak Mutation 84: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceConstant - 15 -> 1
   * Goal 45. Weak Mutation 85: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceConstant - 15 -> -1
   * Goal 46. Weak Mutation 86: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceConstant - 15 -> 14
   * Goal 47. Weak Mutation 87: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceConstant - 15 -> 16
   * Goal 48. Weak Mutation 88: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceComparisonOperator >= -> -1
   * Goal 49. Weak Mutation 89: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceComparisonOperator >= -> >
   * Goal 50. Weak Mutation 91: dominion.GameState.getRandCard()Ldominion/Card;:74 - ReplaceVariable l -> found
   * Goal 51. Weak Mutation 92: dominion.GameState.getRandCard()Ldominion/Card;:75 - ReplaceComparisonOperator == -> !=
   * Goal 52. Weak Mutation 93: dominion.GameState.getRandCard()Ldominion/Card;:77 - ReplaceComparisonOperator == -> !=
   * Goal 53. Weak Mutation 94: dominion.GameState.getRandCard()Ldominion/Card;:78 - ReplaceVariable cards -> players
   * Goal 54. Weak Mutation 95: dominion.GameState.getRandCard()Ldominion/Card;:78 - ReplaceVariable cards -> players
   * Goal 55. Weak Mutation 96: dominion.GameState.getRandCard()Ldominion/Card;:80 - ReplaceComparisonOperator == -> !=
   */

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      vector0.setSize(5);
      Card card0 = gameState0.getRandCard();
      assertNull(card0);
  }

  //Test case number: 23
  /*
   * 42 covered goals:
   * Goal 1. dominion.GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 2. dominion.GameState.getRandCard()Ldominion/Card;: I10 Branch 9 IFNE L73 - false
   * Goal 3. dominion.GameState.getRandCard()Ldominion/Card;: I13 Branch 10 IF_ICMPGE L73 - false
   * Goal 4. Branch dominion.GameState.<init>(Ljava/util/List;)V: root-Branch in context: dominion.GameState:<init>(Ljava/util/List;)V
   * Goal 5. Branch dominion.GameState.getRandCard()Ldominion/Card;: I13 Branch 10 IF_ICMPGE L73 - false in context: dominion.GameState:getRandCard()Ldominion/Card;
   * Goal 6. Branch dominion.GameState.getRandCard()Ldominion/Card;: I10 Branch 9 IFNE L73 - false in context: dominion.GameState:getRandCard()Ldominion/Card;
   * Goal 7. getRandCard()Ldominion/Card;_java.lang.ArithmeticException_IMPLICIT
   * Goal 8. dominion.GameState.<init>(Ljava/util/List;)V: Line 15
   * Goal 9. dominion.GameState.<init>(Ljava/util/List;)V: Line 17
   * Goal 10. dominion.GameState.<init>(Ljava/util/List;)V: Line 20
   * Goal 11. dominion.GameState.<init>(Ljava/util/List;)V: Line 22
   * Goal 12. dominion.GameState.getRandCard()Ldominion/Card;: Line 72
   * Goal 13. dominion.GameState.getRandCard()Ldominion/Card;: Line 73
   * Goal 14. dominion.GameState.getRandCard()Ldominion/Card;: Line 74
   * Goal 15. dominion.GameState.getRandCard()Ldominion/Card;: Line 75
   * Goal 16. dominion.GameState.getRandCard()Ldominion/Card;: Line 77
   * Goal 17. dominion.GameState.getRandCard()Ldominion/Card;: Line 78
   * Goal 18. [METHOD] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 19. [METHOD] dominion.GameState.getRandCard()Ldominion/Card;
   * Goal 20. [METHODNOEX] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 21. Weak Mutation 0: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> players
   * Goal 22. Weak Mutation 1: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> cards
   * Goal 23. Weak Mutation 72: dominion.GameState.getRandCard()Ldominion/Card;:72 - ReplaceConstant - 0 -> 1
   * Goal 24. Weak Mutation 73: dominion.GameState.getRandCard()Ldominion/Card;:72 - ReplaceConstant - 0 -> 1
   * Goal 25. Weak Mutation 75: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp Negation of found
   * Goal 26. Weak Mutation 76: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp IINC 1 found
   * Goal 27. Weak Mutation 77: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp IINC -1 found
   * Goal 28. Weak Mutation 78: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceComparisonOperator != -> ==
   * Goal 29. Weak Mutation 80: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp Negation of l
   * Goal 30. Weak Mutation 81: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp IINC 1 l
   * Goal 31. Weak Mutation 82: dominion.GameState.getRandCard()Ldominion/Card;:73 - InsertUnaryOp IINC -1 l
   * Goal 32. Weak Mutation 83: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceConstant - 15 -> 0
   * Goal 33. Weak Mutation 84: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceConstant - 15 -> 1
   * Goal 34. Weak Mutation 85: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceConstant - 15 -> -1
   * Goal 35. Weak Mutation 86: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceConstant - 15 -> 14
   * Goal 36. Weak Mutation 87: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceConstant - 15 -> 16
   * Goal 37. Weak Mutation 88: dominion.GameState.getRandCard()Ldominion/Card;:73 - ReplaceComparisonOperator >= -> -1
   * Goal 38. Weak Mutation 91: dominion.GameState.getRandCard()Ldominion/Card;:74 - ReplaceVariable l -> found
   * Goal 39. Weak Mutation 92: dominion.GameState.getRandCard()Ldominion/Card;:75 - ReplaceComparisonOperator == -> !=
   * Goal 40. Weak Mutation 93: dominion.GameState.getRandCard()Ldominion/Card;:77 - ReplaceComparisonOperator == -> !=
   * Goal 41. Weak Mutation 94: dominion.GameState.getRandCard()Ldominion/Card;:78 - ReplaceVariable cards -> players
   * Goal 42. Weak Mutation 95: dominion.GameState.getRandCard()Ldominion/Card;:78 - ReplaceVariable cards -> players
   */

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      // Undeclared exception!
      try { 
        gameState0.getRandCard();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 24
  /*
   * 33 covered goals:
   * Goal 1. dominion.GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 2. dominion.GameState.initializeGame()V: I6 Branch 1 IF_ICMPGT L35 - false
   * Goal 3. dominion.GameState.initializeGame()V: I11 Branch 2 IF_ICMPGE L35 - false
   * Goal 4. Branch dominion.GameState.<init>(Ljava/util/List;)V: root-Branch in context: dominion.GameState:<init>(Ljava/util/List;)V
   * Goal 5. Branch dominion.GameState.initializeGame()V: I11 Branch 2 IF_ICMPGE L35 - false in context: dominion.GameState:initializeGame()V
   * Goal 6. Branch dominion.GameState.initializeGame()V: I6 Branch 1 IF_ICMPGT L35 - false in context: dominion.GameState:initializeGame()V
   * Goal 7. dominion.GameState.<init>(Ljava/util/List;)V: Line 15
   * Goal 8. dominion.GameState.<init>(Ljava/util/List;)V: Line 17
   * Goal 9. dominion.GameState.<init>(Ljava/util/List;)V: Line 20
   * Goal 10. dominion.GameState.<init>(Ljava/util/List;)V: Line 22
   * Goal 11. dominion.GameState.initializeGame()V: Line 35
   * Goal 12. dominion.GameState.initializeGame()V: Line 37
   * Goal 13. dominion.GameState.initializeGame()V: Line 38
   * Goal 14. [METHOD] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 15. [METHOD] dominion.GameState.initializeGame()V
   * Goal 16. [METHODNOEX] dominion.GameState.<init>(Ljava/util/List;)V
   * Goal 17. [METHODNOEX] dominion.GameState.initializeGame()V
   * Goal 18. Weak Mutation 0: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> players
   * Goal 19. Weak Mutation 1: dominion.GameState.<init>(Ljava/util/List;)V:20 - ReplaceVariable cards -> cards
   * Goal 20. Weak Mutation 3: dominion.GameState.initializeGame()V:35 - ReplaceVariable players -> cards
   * Goal 21. Weak Mutation 4: dominion.GameState.initializeGame()V:35 - ReplaceConstant - 4 -> 0
   * Goal 22. Weak Mutation 5: dominion.GameState.initializeGame()V:35 - ReplaceConstant - 4 -> 1
   * Goal 23. Weak Mutation 6: dominion.GameState.initializeGame()V:35 - ReplaceConstant - 4 -> -1
   * Goal 24. Weak Mutation 7: dominion.GameState.initializeGame()V:35 - ReplaceConstant - 4 -> 3
   * Goal 25. Weak Mutation 8: dominion.GameState.initializeGame()V:35 - ReplaceConstant - 4 -> 5
   * Goal 26. Weak Mutation 9: dominion.GameState.initializeGame()V:35 - ReplaceComparisonOperator > -> !=
   * Goal 27. Weak Mutation 12: dominion.GameState.initializeGame()V:35 - ReplaceVariable players -> cards
   * Goal 28. Weak Mutation 13: dominion.GameState.initializeGame()V:35 - ReplaceConstant - 2 -> 0
   * Goal 29. Weak Mutation 14: dominion.GameState.initializeGame()V:35 - ReplaceConstant - 2 -> 1
   * Goal 30. Weak Mutation 15: dominion.GameState.initializeGame()V:35 - ReplaceConstant - 2 -> -1
   * Goal 31. Weak Mutation 16: dominion.GameState.initializeGame()V:35 - ReplaceConstant - 2 -> 3
   * Goal 32. Weak Mutation 17: dominion.GameState.initializeGame()V:35 - ReplaceComparisonOperator >= -> -1
   * Goal 33. Weak Mutation 20: dominion.GameState.initializeGame()V:37 - ReplaceConstant - the number of players mus be between 2 and 4  -> 
   */

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      gameState0.initializeGame();
  }
}
