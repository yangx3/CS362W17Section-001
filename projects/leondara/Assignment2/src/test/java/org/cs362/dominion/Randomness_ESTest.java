/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 03:51:50 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Randomness_ESTest extends Randomness_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 71 covered goals:
   * Goal 1. Randomness.nextRandomInt(I)I: root-Branch
   * Goal 2. Randomness.reset(J)V: root-Branch
   * Goal 3. Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: I3 Branch 1 IFNULL L30 - false
   * Goal 4. Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: I6 Branch 2 IFLE L30 - true
   * Goal 5. Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: I12 Branch 3 IFEQ L30 - true
   * Goal 6. Randomness.main([Ljava/lang/String;)V: I11 Branch 4 IF_ICMPGE L39 - true
   * Goal 7. Randomness.main([Ljava/lang/String;)V: I11 Branch 4 IF_ICMPGE L39 - false
   * Goal 8. Branch Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: I3 Branch 1 IFNULL L30 - false in context: Randomness:randomMember(Ljava/util/List;)Ljava/lang/Object;
   * Goal 9. Branch Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: I12 Branch 3 IFEQ L30 - true in context: Randomness:randomMember(Ljava/util/List;)Ljava/lang/Object;
   * Goal 10. Branch Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: I6 Branch 2 IFLE L30 - true in context: Randomness:randomMember(Ljava/util/List;)Ljava/lang/Object;
   * Goal 11. Branch Randomness.main([Ljava/lang/String;)V: I11 Branch 4 IF_ICMPGE L39 - false in context: Randomness:main([Ljava/lang/String;)V
   * Goal 12. Branch Randomness.main([Ljava/lang/String;)V: I11 Branch 4 IF_ICMPGE L39 - true in context: Randomness:main([Ljava/lang/String;)V
   * Goal 13. main([Ljava/lang/String;)V_org.evosuite.runtime.System$SystemExitException_IMPLICIT
   * Goal 14. [Output]: Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;:NonNull
   * Goal 15. Randomness.main([Ljava/lang/String;)V: Line 37
   * Goal 16. Randomness.main([Ljava/lang/String;)V: Line 39
   * Goal 17. Randomness.main([Ljava/lang/String;)V: Line 40
   * Goal 18. Randomness.main([Ljava/lang/String;)V: Line 42
   * Goal 19. Randomness.nextRandomInt(I)I: Line 26
   * Goal 20. Randomness.nextRandomInt(I)I: Line 27
   * Goal 21. Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: Line 30
   * Goal 22. Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: Line 32
   * Goal 23. Randomness.reset(J)V: Line 16
   * Goal 24. Randomness.reset(J)V: Line 17
   * Goal 25. [METHOD] Randomness.main([Ljava/lang/String;)V
   * Goal 26. [METHOD] Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;
   * Goal 27. [METHODNOEX] Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;
   * Goal 28. Weak Mutation 0: Randomness.reset(J)V:16 - ReplaceVariable newSeed -> SEED
   * Goal 29. Weak Mutation 1: Randomness.reset(J)V:16 - InsertUnaryOp Negation of newSeed
   * Goal 30. Weak Mutation 2: Randomness.reset(J)V:16 - ReplaceComparisonOperator == -> !=
   * Goal 31. Weak Mutation 3: Randomness.nextRandomInt(I)I:26 - InsertUnaryOp Negation
   * Goal 32. Weak Mutation 4: Randomness.nextRandomInt(I)I:26 - InsertUnaryOp +1
   * Goal 33. Weak Mutation 5: Randomness.nextRandomInt(I)I:26 - InsertUnaryOp -1
   * Goal 34. Weak Mutation 6: Randomness.nextRandomInt(I)I:26 - ReplaceConstant - 1 -> 0
   * Goal 35. Weak Mutation 7: Randomness.nextRandomInt(I)I:26 - ReplaceArithmeticOperator + -> %
   * Goal 36. Weak Mutation 8: Randomness.nextRandomInt(I)I:26 - ReplaceArithmeticOperator + -> -
   * Goal 37. Weak Mutation 9: Randomness.nextRandomInt(I)I:26 - ReplaceArithmeticOperator + -> *
   * Goal 38. Weak Mutation 10: Randomness.nextRandomInt(I)I:26 - ReplaceArithmeticOperator + -> /
   * Goal 39. Weak Mutation 11: Randomness.nextRandomInt(I)I:27 - ReplaceVariable i -> totalCallsToRandom
   * Goal 40. Weak Mutation 12: Randomness.nextRandomInt(I)I:27 - InsertUnaryOp Negation of i
   * Goal 41. Weak Mutation 13: Randomness.nextRandomInt(I)I:27 - InsertUnaryOp IINC 1 i
   * Goal 42. Weak Mutation 14: Randomness.nextRandomInt(I)I:27 - InsertUnaryOp IINC -1 i
   * Goal 43. Weak Mutation 15: Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;:30 - ReplaceComparisonOperator = null -> != null
   * Goal 44. Weak Mutation 17: Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;:30 - ReplaceComparisonOperator <= -> ==
   * Goal 45. Weak Mutation 20: Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;:30 - ReplaceConstant - 0 -> 1
   * Goal 46. Weak Mutation 21: Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;:30 - ReplaceComparisonOperator == -> !=
   * Goal 47. Weak Mutation 24: Randomness.main([Ljava/lang/String;)V:37 - ReplaceConstant - 10 -> 0
   * Goal 48. Weak Mutation 25: Randomness.main([Ljava/lang/String;)V:37 - ReplaceConstant - 10 -> 1
   * Goal 49. Weak Mutation 26: Randomness.main([Ljava/lang/String;)V:37 - ReplaceConstant - 10 -> -1
   * Goal 50. Weak Mutation 27: Randomness.main([Ljava/lang/String;)V:37 - ReplaceConstant - 10 -> 9
   * Goal 51. Weak Mutation 28: Randomness.main([Ljava/lang/String;)V:37 - ReplaceConstant - 10 -> 11
   * Goal 52. Weak Mutation 29: Randomness.main([Ljava/lang/String;)V:39 - ReplaceConstant - 0 -> 1
   * Goal 53. Weak Mutation 30: Randomness.main([Ljava/lang/String;)V:39 - ReplaceVariable i -> totalCallsToRandom
   * Goal 54. Weak Mutation 31: Randomness.main([Ljava/lang/String;)V:39 - InsertUnaryOp Negation of i
   * Goal 55. Weak Mutation 32: Randomness.main([Ljava/lang/String;)V:39 - InsertUnaryOp IINC 1 i
   * Goal 56. Weak Mutation 33: Randomness.main([Ljava/lang/String;)V:39 - InsertUnaryOp IINC -1 i
   * Goal 57. Weak Mutation 34: Randomness.main([Ljava/lang/String;)V:39 - ReplaceConstant - 10 -> 0
   * Goal 58. Weak Mutation 35: Randomness.main([Ljava/lang/String;)V:39 - ReplaceConstant - 10 -> 1
   * Goal 59. Weak Mutation 36: Randomness.main([Ljava/lang/String;)V:39 - ReplaceConstant - 10 -> -1
   * Goal 60. Weak Mutation 37: Randomness.main([Ljava/lang/String;)V:39 - ReplaceConstant - 10 -> 9
   * Goal 61. Weak Mutation 38: Randomness.main([Ljava/lang/String;)V:39 - ReplaceConstant - 10 -> 11
   * Goal 62. Weak Mutation 39: Randomness.main([Ljava/lang/String;)V:39 - ReplaceComparisonOperator >= -> -1
   * Goal 63. Weak Mutation 40: Randomness.main([Ljava/lang/String;)V:39 - ReplaceComparisonOperator >= -> >
   * Goal 64. Weak Mutation 42: Randomness.main([Ljava/lang/String;)V:40 - ReplaceConstant - value=:  -> 
   * Goal 65. Weak Mutation 43: Randomness.main([Ljava/lang/String;)V:40 - ReplaceConstant - 10 -> 0
   * Goal 66. Weak Mutation 44: Randomness.main([Ljava/lang/String;)V:40 - ReplaceConstant - 10 -> 1
   * Goal 67. Weak Mutation 45: Randomness.main([Ljava/lang/String;)V:40 - ReplaceConstant - 10 -> -1
   * Goal 68. Weak Mutation 46: Randomness.main([Ljava/lang/String;)V:40 - ReplaceConstant - 10 -> 9
   * Goal 69. Weak Mutation 47: Randomness.main([Ljava/lang/String;)V:40 - ReplaceConstant - 10 -> 11
   * Goal 70. Weak Mutation 48: Randomness.main([Ljava/lang/String;)V:42 - ReplaceConstant - 0 -> 1
   * Goal 71. Weak Mutation 49: Randomness.main([Ljava/lang/String;)V:42 - ReplaceComparisonOperator == -> !=
   */

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1));
      linkedList0.add(integer0);
      Randomness.randomMember((List<Integer>) linkedList0);
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        Randomness.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.evosuite.runtime.System", e);
      }
  }

  //Test case number: 1
  /*
   * 29 covered goals:
   * Goal 1. Randomness.nextRandomInt(I)I: root-Branch
   * Goal 2. Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: I3 Branch 1 IFNULL L30 - false
   * Goal 3. Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: I6 Branch 2 IFLE L30 - true
   * Goal 4. Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: I12 Branch 3 IFEQ L30 - true
   * Goal 5. Branch Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: I3 Branch 1 IFNULL L30 - false in context: Randomness:randomMember(Ljava/util/List;)Ljava/lang/Object;
   * Goal 6. Branch Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: I12 Branch 3 IFEQ L30 - true in context: Randomness:randomMember(Ljava/util/List;)Ljava/lang/Object;
   * Goal 7. Branch Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: I6 Branch 2 IFLE L30 - true in context: Randomness:randomMember(Ljava/util/List;)Ljava/lang/Object;
   * Goal 8. [Output]: Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;:Null
   * Goal 9. Randomness.nextRandomInt(I)I: Line 26
   * Goal 10. Randomness.nextRandomInt(I)I: Line 27
   * Goal 11. Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: Line 30
   * Goal 12. Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: Line 32
   * Goal 13. [METHOD] Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;
   * Goal 14. [METHODNOEX] Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;
   * Goal 15. Weak Mutation 3: Randomness.nextRandomInt(I)I:26 - InsertUnaryOp Negation
   * Goal 16. Weak Mutation 4: Randomness.nextRandomInt(I)I:26 - InsertUnaryOp +1
   * Goal 17. Weak Mutation 5: Randomness.nextRandomInt(I)I:26 - InsertUnaryOp -1
   * Goal 18. Weak Mutation 6: Randomness.nextRandomInt(I)I:26 - ReplaceConstant - 1 -> 0
   * Goal 19. Weak Mutation 7: Randomness.nextRandomInt(I)I:26 - ReplaceArithmeticOperator + -> %
   * Goal 20. Weak Mutation 8: Randomness.nextRandomInt(I)I:26 - ReplaceArithmeticOperator + -> -
   * Goal 21. Weak Mutation 9: Randomness.nextRandomInt(I)I:26 - ReplaceArithmeticOperator + -> *
   * Goal 22. Weak Mutation 10: Randomness.nextRandomInt(I)I:26 - ReplaceArithmeticOperator + -> /
   * Goal 23. Weak Mutation 12: Randomness.nextRandomInt(I)I:27 - InsertUnaryOp Negation of i
   * Goal 24. Weak Mutation 13: Randomness.nextRandomInt(I)I:27 - InsertUnaryOp IINC 1 i
   * Goal 25. Weak Mutation 14: Randomness.nextRandomInt(I)I:27 - InsertUnaryOp IINC -1 i
   * Goal 26. Weak Mutation 15: Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;:30 - ReplaceComparisonOperator = null -> != null
   * Goal 27. Weak Mutation 17: Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;:30 - ReplaceComparisonOperator <= -> ==
   * Goal 28. Weak Mutation 20: Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;:30 - ReplaceConstant - 0 -> 1
   * Goal 29. Weak Mutation 21: Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;:30 - ReplaceComparisonOperator == -> !=
   */

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      Object object0 = Randomness.randomMember((List<Object>) linkedList0);
      assertNull(object0);
  }

  //Test case number: 2
  /*
   * 19 covered goals:
   * Goal 1. Randomness.nextRandomInt(I)I: root-Branch
   * Goal 2. Branch Randomness.nextRandomInt(I)I: root-Branch in context: Randomness:nextRandomInt(I)I
   * Goal 3. [Output]: Randomness.nextRandomInt(I)I:Positive
   * Goal 4. Randomness.nextRandomInt(I)I: Line 26
   * Goal 5. Randomness.nextRandomInt(I)I: Line 27
   * Goal 6. [METHOD] Randomness.nextRandomInt(I)I
   * Goal 7. [METHODNOEX] Randomness.nextRandomInt(I)I
   * Goal 8. Weak Mutation 3: Randomness.nextRandomInt(I)I:26 - InsertUnaryOp Negation
   * Goal 9. Weak Mutation 4: Randomness.nextRandomInt(I)I:26 - InsertUnaryOp +1
   * Goal 10. Weak Mutation 5: Randomness.nextRandomInt(I)I:26 - InsertUnaryOp -1
   * Goal 11. Weak Mutation 6: Randomness.nextRandomInt(I)I:26 - ReplaceConstant - 1 -> 0
   * Goal 12. Weak Mutation 7: Randomness.nextRandomInt(I)I:26 - ReplaceArithmeticOperator + -> %
   * Goal 13. Weak Mutation 8: Randomness.nextRandomInt(I)I:26 - ReplaceArithmeticOperator + -> -
   * Goal 14. Weak Mutation 9: Randomness.nextRandomInt(I)I:26 - ReplaceArithmeticOperator + -> *
   * Goal 15. Weak Mutation 10: Randomness.nextRandomInt(I)I:26 - ReplaceArithmeticOperator + -> /
   * Goal 16. Weak Mutation 11: Randomness.nextRandomInt(I)I:27 - ReplaceVariable i -> totalCallsToRandom
   * Goal 17. Weak Mutation 12: Randomness.nextRandomInt(I)I:27 - InsertUnaryOp Negation of i
   * Goal 18. Weak Mutation 13: Randomness.nextRandomInt(I)I:27 - InsertUnaryOp IINC 1 i
   * Goal 19. Weak Mutation 14: Randomness.nextRandomInt(I)I:27 - InsertUnaryOp IINC -1 i
   */

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      int int0 = Randomness.nextRandomInt((-693));
      assertEquals(1, int0);
  }

  //Test case number: 3
  /*
   * 28 covered goals:
   * Goal 1. Randomness.nextRandomInt(I)I: root-Branch
   * Goal 2. Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: I3 Branch 1 IFNULL L30 - false
   * Goal 3. Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: I6 Branch 2 IFLE L30 - true
   * Goal 4. Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: I12 Branch 3 IFEQ L30 - true
   * Goal 5. Branch Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: I3 Branch 1 IFNULL L30 - false in context: Randomness:randomMember(Ljava/util/List;)Ljava/lang/Object;
   * Goal 6. Branch Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: I12 Branch 3 IFEQ L30 - true in context: Randomness:randomMember(Ljava/util/List;)Ljava/lang/Object;
   * Goal 7. Branch Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: I6 Branch 2 IFLE L30 - true in context: Randomness:randomMember(Ljava/util/List;)Ljava/lang/Object;
   * Goal 8. randomMember(Ljava/util/List;)Ljava/lang/Object;_java.lang.NullPointerException_IMPLICIT
   * Goal 9. Randomness.nextRandomInt(I)I: Line 26
   * Goal 10. Randomness.nextRandomInt(I)I: Line 27
   * Goal 11. Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: Line 30
   * Goal 12. Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: Line 32
   * Goal 13. [METHOD] Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;
   * Goal 14. Weak Mutation 3: Randomness.nextRandomInt(I)I:26 - InsertUnaryOp Negation
   * Goal 15. Weak Mutation 4: Randomness.nextRandomInt(I)I:26 - InsertUnaryOp +1
   * Goal 16. Weak Mutation 5: Randomness.nextRandomInt(I)I:26 - InsertUnaryOp -1
   * Goal 17. Weak Mutation 6: Randomness.nextRandomInt(I)I:26 - ReplaceConstant - 1 -> 0
   * Goal 18. Weak Mutation 7: Randomness.nextRandomInt(I)I:26 - ReplaceArithmeticOperator + -> %
   * Goal 19. Weak Mutation 8: Randomness.nextRandomInt(I)I:26 - ReplaceArithmeticOperator + -> -
   * Goal 20. Weak Mutation 9: Randomness.nextRandomInt(I)I:26 - ReplaceArithmeticOperator + -> *
   * Goal 21. Weak Mutation 10: Randomness.nextRandomInt(I)I:26 - ReplaceArithmeticOperator + -> /
   * Goal 22. Weak Mutation 12: Randomness.nextRandomInt(I)I:27 - InsertUnaryOp Negation of i
   * Goal 23. Weak Mutation 13: Randomness.nextRandomInt(I)I:27 - InsertUnaryOp IINC 1 i
   * Goal 24. Weak Mutation 14: Randomness.nextRandomInt(I)I:27 - InsertUnaryOp IINC -1 i
   * Goal 25. Weak Mutation 15: Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;:30 - ReplaceComparisonOperator = null -> != null
   * Goal 26. Weak Mutation 17: Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;:30 - ReplaceComparisonOperator <= -> ==
   * Goal 27. Weak Mutation 20: Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;:30 - ReplaceConstant - 0 -> 1
   * Goal 28. Weak Mutation 21: Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;:30 - ReplaceComparisonOperator == -> !=
   */

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Randomness.random = null;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      // Undeclared exception!
      try { 
        Randomness.randomMember((List<String>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Randomness", e);
      }
  }

  //Test case number: 4
  /*
   * 18 covered goals:
   * Goal 1. Randomness.nextRandomInt(I)I: root-Branch
   * Goal 2. Branch Randomness.nextRandomInt(I)I: root-Branch in context: Randomness:nextRandomInt(I)I
   * Goal 3. nextRandomInt(I)I_java.lang.NullPointerException_IMPLICIT
   * Goal 4. Randomness.nextRandomInt(I)I: Line 26
   * Goal 5. Randomness.nextRandomInt(I)I: Line 27
   * Goal 6. [METHOD] Randomness.nextRandomInt(I)I
   * Goal 7. Weak Mutation 3: Randomness.nextRandomInt(I)I:26 - InsertUnaryOp Negation
   * Goal 8. Weak Mutation 4: Randomness.nextRandomInt(I)I:26 - InsertUnaryOp +1
   * Goal 9. Weak Mutation 5: Randomness.nextRandomInt(I)I:26 - InsertUnaryOp -1
   * Goal 10. Weak Mutation 6: Randomness.nextRandomInt(I)I:26 - ReplaceConstant - 1 -> 0
   * Goal 11. Weak Mutation 7: Randomness.nextRandomInt(I)I:26 - ReplaceArithmeticOperator + -> %
   * Goal 12. Weak Mutation 8: Randomness.nextRandomInt(I)I:26 - ReplaceArithmeticOperator + -> -
   * Goal 13. Weak Mutation 9: Randomness.nextRandomInt(I)I:26 - ReplaceArithmeticOperator + -> *
   * Goal 14. Weak Mutation 10: Randomness.nextRandomInt(I)I:26 - ReplaceArithmeticOperator + -> /
   * Goal 15. Weak Mutation 11: Randomness.nextRandomInt(I)I:27 - ReplaceVariable i -> totalCallsToRandom
   * Goal 16. Weak Mutation 12: Randomness.nextRandomInt(I)I:27 - InsertUnaryOp Negation of i
   * Goal 17. Weak Mutation 13: Randomness.nextRandomInt(I)I:27 - InsertUnaryOp IINC 1 i
   * Goal 18. Weak Mutation 14: Randomness.nextRandomInt(I)I:27 - InsertUnaryOp IINC -1 i
   */

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Randomness.random = null;
      // Undeclared exception!
      try { 
        Randomness.nextRandomInt(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Randomness", e);
      }
  }

  //Test case number: 5
  /*
   * 19 covered goals:
   * Goal 1. Randomness.nextRandomInt(I)I: root-Branch
   * Goal 2. Branch Randomness.nextRandomInt(I)I: root-Branch in context: Randomness:nextRandomInt(I)I
   * Goal 3. [Output]: Randomness.nextRandomInt(I)I:Zero
   * Goal 4. Randomness.nextRandomInt(I)I: Line 26
   * Goal 5. Randomness.nextRandomInt(I)I: Line 27
   * Goal 6. [METHOD] Randomness.nextRandomInt(I)I
   * Goal 7. [METHODNOEX] Randomness.nextRandomInt(I)I
   * Goal 8. Weak Mutation 3: Randomness.nextRandomInt(I)I:26 - InsertUnaryOp Negation
   * Goal 9. Weak Mutation 4: Randomness.nextRandomInt(I)I:26 - InsertUnaryOp +1
   * Goal 10. Weak Mutation 5: Randomness.nextRandomInt(I)I:26 - InsertUnaryOp -1
   * Goal 11. Weak Mutation 6: Randomness.nextRandomInt(I)I:26 - ReplaceConstant - 1 -> 0
   * Goal 12. Weak Mutation 7: Randomness.nextRandomInt(I)I:26 - ReplaceArithmeticOperator + -> %
   * Goal 13. Weak Mutation 8: Randomness.nextRandomInt(I)I:26 - ReplaceArithmeticOperator + -> -
   * Goal 14. Weak Mutation 9: Randomness.nextRandomInt(I)I:26 - ReplaceArithmeticOperator + -> *
   * Goal 15. Weak Mutation 10: Randomness.nextRandomInt(I)I:26 - ReplaceArithmeticOperator + -> /
   * Goal 16. Weak Mutation 11: Randomness.nextRandomInt(I)I:27 - ReplaceVariable i -> totalCallsToRandom
   * Goal 17. Weak Mutation 12: Randomness.nextRandomInt(I)I:27 - InsertUnaryOp Negation of i
   * Goal 18. Weak Mutation 13: Randomness.nextRandomInt(I)I:27 - InsertUnaryOp IINC 1 i
   * Goal 19. Weak Mutation 14: Randomness.nextRandomInt(I)I:27 - InsertUnaryOp IINC -1 i
   */

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int int0 = Randomness.nextRandomInt((-693));
      assertEquals(0, int0);
  }

  //Test case number: 6
  /*
   * 16 covered goals:
   * Goal 1. Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: I3 Branch 1 IFNULL L30 - false
   * Goal 2. Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: I6 Branch 2 IFLE L30 - false
   * Goal 3. Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: I12 Branch 3 IFEQ L30 - false
   * Goal 4. Branch Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: I3 Branch 1 IFNULL L30 - false in context: Randomness:randomMember(Ljava/util/List;)Ljava/lang/Object;
   * Goal 5. Branch Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: I6 Branch 2 IFLE L30 - false in context: Randomness:randomMember(Ljava/util/List;)Ljava/lang/Object;
   * Goal 6. Branch Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: I12 Branch 3 IFEQ L30 - false in context: Randomness:randomMember(Ljava/util/List;)Ljava/lang/Object;
   * Goal 7. randomMember(Ljava/util/List;)Ljava/lang/Object;_java.lang.IllegalArgumentException_EXPLICIT
   * Goal 8. Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: Line 30
   * Goal 9. Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: Line 31
   * Goal 10. [METHOD] Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;
   * Goal 11. Weak Mutation 15: Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;:30 - ReplaceComparisonOperator = null -> != null
   * Goal 12. Weak Mutation 16: Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;:30 - ReplaceComparisonOperator <= -> -1
   * Goal 13. Weak Mutation 19: Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;:30 - ReplaceConstant - 1 -> 0
   * Goal 14. Weak Mutation 21: Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;:30 - ReplaceComparisonOperator == -> !=
   * Goal 15. Weak Mutation 22: Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;:31 - ReplaceConstant - Expected non-empty list -> 
   * Goal 16. Weak Mutation 23: Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;:31 - ReplaceComparisonOperator == -> !=
   */

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        Randomness.randomMember((List<Object>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected non-empty list
         //
         assertThrownBy("Randomness", e);
      }
  }

  //Test case number: 7
  /*
   * 9 covered goals:
   * Goal 1. Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: I3 Branch 1 IFNULL L30 - true
   * Goal 2. Branch Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: I3 Branch 1 IFNULL L30 - true in context: Randomness:randomMember(Ljava/util/List;)Ljava/lang/Object;
   * Goal 3. randomMember(Ljava/util/List;)Ljava/lang/Object;_java.lang.IllegalArgumentException_EXPLICIT
   * Goal 4. Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: Line 30
   * Goal 5. Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;: Line 31
   * Goal 6. [METHOD] Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;
   * Goal 7. Weak Mutation 15: Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;:30 - ReplaceComparisonOperator = null -> != null
   * Goal 8. Weak Mutation 22: Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;:31 - ReplaceConstant - Expected non-empty list -> 
   * Goal 9. Weak Mutation 23: Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;:31 - ReplaceComparisonOperator == -> !=
   */

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try { 
        Randomness.randomMember((List<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected non-empty list
         //
         assertThrownBy("Randomness", e);
      }
  }

  //Test case number: 8
  /*
   * 8 covered goals:
   * Goal 1. Randomness.reset(J)V: root-Branch
   * Goal 2. Branch Randomness.reset(J)V: root-Branch in context: Randomness:reset(J)V
   * Goal 3. Randomness.reset(J)V: Line 16
   * Goal 4. Randomness.reset(J)V: Line 17
   * Goal 5. [METHOD] Randomness.reset(J)V
   * Goal 6. [METHODNOEX] Randomness.reset(J)V
   * Goal 7. Weak Mutation 1: Randomness.reset(J)V:16 - InsertUnaryOp Negation of newSeed
   * Goal 8. Weak Mutation 2: Randomness.reset(J)V:16 - ReplaceComparisonOperator == -> !=
   */

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Randomness.reset(0L);
  }
}
