/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 00:34:35 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GameState_ESTest extends GameState_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 62 covered goals:
   * Goal 1. GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 2. GameState.isGameOver()Z: I9 Branch 12 IFNULL L85 - false
   * Goal 3. GameState.isGameOver()Z: I19 Branch 13 IFNE L85 - true
   * Goal 4. GameState.isGameOver()Z: I38 Branch 14 IFEQ L89 - true
   * Goal 5. GameState.isGameOver()Z: I38 Branch 14 IFEQ L89 - false
   * Goal 6. GameState.isGameOver()Z: I47 Branch 15 IFNE L90 - true
   * Goal 7. GameState.isGameOver()Z: I55 Branch 16 IF_ICMPLT L92 - true
   * Goal 8. Branch GameState.<init>(Ljava/util/List;)V: root-Branch in context: GameState:<init>(Ljava/util/List;)V
   * Goal 9. Branch GameState.isGameOver()Z: I9 Branch 12 IFNULL L85 - false in context: GameState:isGameOver()Z
   * Goal 10. Branch GameState.isGameOver()Z: I19 Branch 13 IFNE L85 - true in context: GameState:isGameOver()Z
   * Goal 11. Branch GameState.isGameOver()Z: I38 Branch 14 IFEQ L89 - true in context: GameState:isGameOver()Z
   * Goal 12. Branch GameState.isGameOver()Z: I38 Branch 14 IFEQ L89 - false in context: GameState:isGameOver()Z
   * Goal 13. Branch GameState.isGameOver()Z: I47 Branch 15 IFNE L90 - true in context: GameState:isGameOver()Z
   * Goal 14. Branch GameState.isGameOver()Z: I55 Branch 16 IF_ICMPLT L92 - true in context: GameState:isGameOver()Z
   * Goal 15. [Output]: GameState.isGameOver()Z:False
   * Goal 16. GameState.<init>(Ljava/util/List;)V: Line 5
   * Goal 17. GameState.<init>(Ljava/util/List;)V: Line 7
   * Goal 18. GameState.<init>(Ljava/util/List;)V: Line 9
   * Goal 19. GameState.<init>(Ljava/util/List;)V: Line 12
   * Goal 20. GameState.<init>(Ljava/util/List;)V: Line 14
   * Goal 21. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 5
   * Goal 22. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 7
   * Goal 23. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 9
   * Goal 24. GameState.isGameOver()Z: Line 85
   * Goal 25. GameState.isGameOver()Z: Line 88
   * Goal 26. GameState.isGameOver()Z: Line 89
   * Goal 27. GameState.isGameOver()Z: Line 90
   * Goal 28. GameState.isGameOver()Z: Line 92
   * Goal 29. GameState.isGameOver()Z: Line 95
   * Goal 30. GameState.isGameOver()Z: Line 96
   * Goal 31. [METHOD] GameState.<init>(Ljava/util/List;)V
   * Goal 32. [METHOD] GameState.isGameOver()Z
   * Goal 33. [METHODNOEX] GameState.<init>(Ljava/util/List;)V
   * Goal 34. [METHODNOEX] GameState.isGameOver()Z
   * Goal 35. Weak Mutation 0: GameState.<init>(Ljava/util/List;)V:9 - ReplaceComparisonOperator == -> !=
   * Goal 36. Weak Mutation 1: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> cards
   * Goal 37. Weak Mutation 2: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> embargoTokens
   * Goal 38. Weak Mutation 3: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> players
   * Goal 39. Weak Mutation 100: GameState.isGameOver()Z:85 - ReplaceVariable cards -> embargoTokens
   * Goal 40. Weak Mutation 101: GameState.isGameOver()Z:85 - ReplaceVariable cards -> players
   * Goal 41. Weak Mutation 102: GameState.isGameOver()Z:85 - ReplaceComparisonOperator = null -> != null
   * Goal 42. Weak Mutation 103: GameState.isGameOver()Z:85 - ReplaceVariable cards -> embargoTokens
   * Goal 43. Weak Mutation 104: GameState.isGameOver()Z:85 - ReplaceVariable cards -> players
   * Goal 44. Weak Mutation 107: GameState.isGameOver()Z:85 - ReplaceComparisonOperator != -> >
   * Goal 45. Weak Mutation 109: GameState.isGameOver()Z:88 - ReplaceConstant - 0 -> 1
   * Goal 46. Weak Mutation 110: GameState.isGameOver()Z:89 - ReplaceComparisonOperator == -> !=
   * Goal 47. Weak Mutation 111: GameState.isGameOver()Z:90 - ReplaceVariable i -> emptySupplyPile
   * Goal 48. Weak Mutation 112: GameState.isGameOver()Z:90 - InsertUnaryOp Negation of i
   * Goal 49. Weak Mutation 113: GameState.isGameOver()Z:90 - InsertUnaryOp IINC 1 i
   * Goal 50. Weak Mutation 114: GameState.isGameOver()Z:90 - InsertUnaryOp IINC -1 i
   * Goal 51. Weak Mutation 117: GameState.isGameOver()Z:90 - ReplaceComparisonOperator != -> >
   * Goal 52. Weak Mutation 119: GameState.isGameOver()Z:92 - ReplaceVariable emptySupplyPile -> i
   * Goal 53. Weak Mutation 120: GameState.isGameOver()Z:92 - InsertUnaryOp Negation of emptySupplyPile
   * Goal 54. Weak Mutation 121: GameState.isGameOver()Z:92 - InsertUnaryOp IINC 1 emptySupplyPile
   * Goal 55. Weak Mutation 122: GameState.isGameOver()Z:92 - InsertUnaryOp IINC -1 emptySupplyPile
   * Goal 56. Weak Mutation 123: GameState.isGameOver()Z:92 - ReplaceConstant - 3 -> 0
   * Goal 57. Weak Mutation 124: GameState.isGameOver()Z:92 - ReplaceConstant - 3 -> 1
   * Goal 58. Weak Mutation 125: GameState.isGameOver()Z:92 - ReplaceConstant - 3 -> -1
   * Goal 59. Weak Mutation 126: GameState.isGameOver()Z:92 - ReplaceConstant - 3 -> 2
   * Goal 60. Weak Mutation 127: GameState.isGameOver()Z:92 - ReplaceConstant - 3 -> 4
   * Goal 61. Weak Mutation 129: GameState.isGameOver()Z:92 - ReplaceComparisonOperator < -> -2
   * Goal 62. Weak Mutation 132: GameState.isGameOver()Z:96 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Integer integer0 = new Integer((-1));
      gameState0.gameBoard.put((Card) null, integer0);
      boolean boolean0 = gameState0.isGameOver();
      assertFalse(boolean0);
  }

  //Test case number: 1
  /*
   * 73 covered goals:
   * Goal 1. GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 2. GameState.initializeGame()V: I6 Branch 1 IF_ICMPGT L22 - false
   * Goal 3. GameState.initializeGame()V: I11 Branch 2 IF_ICMPGE L22 - true
   * Goal 4. GameState.initializeGame()V: I32 Branch 3 IF_ICMPGE L29 - false
   * Goal 5. GameState.initializeGame()V: I54 Branch 4 IF_ACMPEQ L32 - false
   * Goal 6. Branch GameState.<init>(Ljava/util/List;)V: root-Branch in context: GameState:<init>(Ljava/util/List;)V
   * Goal 7. Branch GameState.initializeGame()V: I6 Branch 1 IF_ICMPGT L22 - false in context: GameState:initializeGame()V
   * Goal 8. Branch GameState.initializeGame()V: I11 Branch 2 IF_ICMPGE L22 - true in context: GameState:initializeGame()V
   * Goal 9. Branch GameState.initializeGame()V: I32 Branch 3 IF_ICMPGE L29 - false in context: GameState:initializeGame()V
   * Goal 10. Branch GameState.initializeGame()V: I54 Branch 4 IF_ACMPEQ L32 - false in context: GameState:initializeGame()V
   * Goal 11. initializeGame()V_org.evosuite.runtime.TooManyResourcesException_IMPLICIT
   * Goal 12. GameState.<init>(Ljava/util/List;)V: Line 5
   * Goal 13. GameState.<init>(Ljava/util/List;)V: Line 7
   * Goal 14. GameState.<init>(Ljava/util/List;)V: Line 9
   * Goal 15. GameState.<init>(Ljava/util/List;)V: Line 12
   * Goal 16. GameState.<init>(Ljava/util/List;)V: Line 14
   * Goal 17. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 5
   * Goal 18. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 7
   * Goal 19. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 9
   * Goal 20. GameState.initializeGame()V: Line 22
   * Goal 21. GameState.initializeGame()V: Line 27
   * Goal 22. GameState.initializeGame()V: Line 28
   * Goal 23. GameState.initializeGame()V: Line 29
   * Goal 24. GameState.initializeGame()V: Line 30
   * Goal 25. GameState.initializeGame()V: Line 31
   * Goal 26. GameState.initializeGame()V: Line 32
   * Goal 27. GameState.initializeGame()V: Line 33
   * Goal 28. [METHOD] GameState.<init>(Ljava/util/List;)V
   * Goal 29. [METHOD] GameState.initializeGame()V
   * Goal 30. [METHODNOEX] GameState.<init>(Ljava/util/List;)V
   * Goal 31. Weak Mutation 0: GameState.<init>(Ljava/util/List;)V:9 - ReplaceComparisonOperator == -> !=
   * Goal 32. Weak Mutation 1: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> cards
   * Goal 33. Weak Mutation 2: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> embargoTokens
   * Goal 34. Weak Mutation 3: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> players
   * Goal 35. Weak Mutation 6: GameState.initializeGame()V:22 - ReplaceVariable players -> embargoTokens
   * Goal 36. Weak Mutation 7: GameState.initializeGame()V:22 - ReplaceVariable players -> cards
   * Goal 37. Weak Mutation 8: GameState.initializeGame()V:22 - ReplaceConstant - 4 -> 0
   * Goal 38. Weak Mutation 9: GameState.initializeGame()V:22 - ReplaceConstant - 4 -> 1
   * Goal 39. Weak Mutation 10: GameState.initializeGame()V:22 - ReplaceConstant - 4 -> -1
   * Goal 40. Weak Mutation 11: GameState.initializeGame()V:22 - ReplaceConstant - 4 -> 3
   * Goal 41. Weak Mutation 12: GameState.initializeGame()V:22 - ReplaceConstant - 4 -> 5
   * Goal 42. Weak Mutation 15: GameState.initializeGame()V:22 - ReplaceComparisonOperator > -> >=
   * Goal 43. Weak Mutation 16: GameState.initializeGame()V:22 - ReplaceVariable players -> embargoTokens
   * Goal 44. Weak Mutation 17: GameState.initializeGame()V:22 - ReplaceVariable players -> cards
   * Goal 45. Weak Mutation 18: GameState.initializeGame()V:22 - ReplaceConstant - 2 -> 0
   * Goal 46. Weak Mutation 19: GameState.initializeGame()V:22 - ReplaceConstant - 2 -> 1
   * Goal 47. Weak Mutation 20: GameState.initializeGame()V:22 - ReplaceConstant - 2 -> -1
   * Goal 48. Weak Mutation 21: GameState.initializeGame()V:22 - ReplaceConstant - 2 -> 3
   * Goal 49. Weak Mutation 24: GameState.initializeGame()V:22 - ReplaceComparisonOperator >= -> ==
   * Goal 50. Weak Mutation 26: GameState.initializeGame()V:27 - ReplaceConstant - 0 -> 1
   * Goal 51. Weak Mutation 27: GameState.initializeGame()V:28 - ReplaceConstant - 10 -> 0
   * Goal 52. Weak Mutation 28: GameState.initializeGame()V:28 - ReplaceConstant - 10 -> 1
   * Goal 53. Weak Mutation 29: GameState.initializeGame()V:28 - ReplaceConstant - 10 -> -1
   * Goal 54. Weak Mutation 30: GameState.initializeGame()V:28 - ReplaceConstant - 10 -> 9
   * Goal 55. Weak Mutation 31: GameState.initializeGame()V:28 - ReplaceConstant - 10 -> 11
   * Goal 56. Weak Mutation 32: GameState.initializeGame()V:29 - ReplaceVariable selectedKindom -> Kingdom_Cards_Selected
   * Goal 57. Weak Mutation 33: GameState.initializeGame()V:29 - InsertUnaryOp Negation of selectedKindom
   * Goal 58. Weak Mutation 34: GameState.initializeGame()V:29 - InsertUnaryOp IINC 1 selectedKindom
   * Goal 59. Weak Mutation 35: GameState.initializeGame()V:29 - InsertUnaryOp IINC -1 selectedKindom
   * Goal 60. Weak Mutation 36: GameState.initializeGame()V:29 - ReplaceVariable Kingdom_Cards_Selected -> selectedKindom
   * Goal 61. Weak Mutation 37: GameState.initializeGame()V:29 - InsertUnaryOp Negation of Kingdom_Cards_Selected
   * Goal 62. Weak Mutation 38: GameState.initializeGame()V:29 - InsertUnaryOp IINC 1 Kingdom_Cards_Selected
   * Goal 63. Weak Mutation 39: GameState.initializeGame()V:29 - InsertUnaryOp IINC -1 Kingdom_Cards_Selected
   * Goal 64. Weak Mutation 40: GameState.initializeGame()V:29 - ReplaceComparisonOperator >= -> -1
   * Goal 65. Weak Mutation 43: GameState.initializeGame()V:30 - ReplaceVariable cards -> embargoTokens
   * Goal 66. Weak Mutation 44: GameState.initializeGame()V:30 - ReplaceVariable cards -> players
   * Goal 67. Weak Mutation 45: GameState.initializeGame()V:31 - ReplaceVariable cards -> embargoTokens
   * Goal 68. Weak Mutation 46: GameState.initializeGame()V:31 - ReplaceVariable cards -> players
   * Goal 69. Weak Mutation 47: GameState.initializeGame()V:31 - ReplaceVariable random -> Kingdom_Cards_Selected
   * Goal 70. Weak Mutation 49: GameState.initializeGame()V:31 - InsertUnaryOp Negation of random
   * Goal 71. Weak Mutation 50: GameState.initializeGame()V:31 - InsertUnaryOp IINC 1 random
   * Goal 72. Weak Mutation 51: GameState.initializeGame()V:31 - InsertUnaryOp IINC -1 random
   * Goal 73. Weak Mutation 52: GameState.initializeGame()V:32 - ReplaceComparisonOperator == -> !=
   */

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Vector<Player> vector0 = new Vector<Player>();
      Player player0 = new Player(gameState0, "LIA' x");
      vector0.add(player0);
      vector0.add(player0);
      vector0.add(player0);
      gameState0.players = (List<Player>) vector0;
      vector0.add(player0);
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  //Test case number: 2
  /*
   * 58 covered goals:
   * Goal 1. GameState.addPlayer(LPlayer;)V: root-Branch
   * Goal 2. GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 3. GameState.play()Ljava/util/HashMap;: I8 Branch 9 IFNE L64 - true
   * Goal 4. GameState.isGameOver()Z: I9 Branch 12 IFNULL L85 - true
   * Goal 5. GameState.getWinners()Ljava/util/HashMap;: I15 Branch 17 IFEQ L104 - true
   * Goal 6. GameState.getWinners()Ljava/util/HashMap;: I15 Branch 17 IFEQ L104 - false
   * Goal 7. Branch GameState.addPlayer(LPlayer;)V: root-Branch in context: GameState:addPlayer(LPlayer;)V
   * Goal 8. Branch GameState.<init>(Ljava/util/List;)V: root-Branch in context: GameState:<init>(Ljava/util/List;)V
   * Goal 9. Branch GameState.play()Ljava/util/HashMap;: I8 Branch 9 IFNE L64 - true in context: GameState:play()Ljava/util/HashMap;
   * Goal 10. [Output]: GameState.play()Ljava/util/HashMap;:NonNull:java.util.HashMap:isEmpty()Z:False
   * Goal 11. [Output]: GameState.play()Ljava/util/HashMap;:NonNull:java.util.HashMap:size()I:Positive
   * Goal 12. GameState.<init>(Ljava/util/List;)V: Line 5
   * Goal 13. GameState.<init>(Ljava/util/List;)V: Line 7
   * Goal 14. GameState.<init>(Ljava/util/List;)V: Line 9
   * Goal 15. GameState.<init>(Ljava/util/List;)V: Line 12
   * Goal 16. GameState.<init>(Ljava/util/List;)V: Line 14
   * Goal 17. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 5
   * Goal 18. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 7
   * Goal 19. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 9
   * Goal 20. GameState.addPlayer(LPlayer;)V: Line 16
   * Goal 21. GameState.addPlayer(LPlayer;)V: Line 17
   * Goal 22. GameState.getWinners()Ljava/util/HashMap;: Line 101
   * Goal 23. GameState.getWinners()Ljava/util/HashMap;: Line 104
   * Goal 24. GameState.getWinners()Ljava/util/HashMap;: Line 105
   * Goal 25. GameState.getWinners()Ljava/util/HashMap;: Line 106
   * Goal 26. GameState.getWinners()Ljava/util/HashMap;: Line 107
   * Goal 27. GameState.getWinners()Ljava/util/HashMap;: Line 108
   * Goal 28. GameState.isGameOver()Z: Line 85
   * Goal 29. GameState.isGameOver()Z: Line 86
   * Goal 30. GameState.play()Ljava/util/HashMap;: Line 63
   * Goal 31. GameState.play()Ljava/util/HashMap;: Line 64
   * Goal 32. GameState.play()Ljava/util/HashMap;: Line 81
   * Goal 33. [METHOD] GameState.<init>(Ljava/util/List;)V
   * Goal 34. [METHOD] GameState.addPlayer(LPlayer;)V
   * Goal 35. [METHOD] GameState.play()Ljava/util/HashMap;
   * Goal 36. [METHODNOEX] GameState.<init>(Ljava/util/List;)V
   * Goal 37. [METHODNOEX] GameState.addPlayer(LPlayer;)V
   * Goal 38. [METHODNOEX] GameState.play()Ljava/util/HashMap;
   * Goal 39. Weak Mutation 0: GameState.<init>(Ljava/util/List;)V:9 - ReplaceComparisonOperator == -> !=
   * Goal 40. Weak Mutation 1: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> cards
   * Goal 41. Weak Mutation 2: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> embargoTokens
   * Goal 42. Weak Mutation 3: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> players
   * Goal 43. Weak Mutation 4: GameState.addPlayer(LPlayer;)V:16 - ReplaceVariable players -> embargoTokens
   * Goal 44. Weak Mutation 5: GameState.addPlayer(LPlayer;)V:16 - ReplaceVariable players -> cards
   * Goal 45. Weak Mutation 82: GameState.play()Ljava/util/HashMap;:63 - ReplaceConstant - 0 -> 1
   * Goal 46. Weak Mutation 83: GameState.play()Ljava/util/HashMap;:64 - ReplaceComparisonOperator != -> ==
   * Goal 47. Weak Mutation 100: GameState.isGameOver()Z:85 - ReplaceVariable cards -> embargoTokens
   * Goal 48. Weak Mutation 101: GameState.isGameOver()Z:85 - ReplaceVariable cards -> players
   * Goal 49. Weak Mutation 102: GameState.isGameOver()Z:85 - ReplaceComparisonOperator = null -> != null
   * Goal 50. Weak Mutation 108: GameState.isGameOver()Z:86 - ReplaceConstant - 1 -> 0
   * Goal 51. Weak Mutation 133: GameState.getWinners()Ljava/util/HashMap;:104 - ReplaceVariable players -> embargoTokens
   * Goal 52. Weak Mutation 134: GameState.getWinners()Ljava/util/HashMap;:104 - ReplaceVariable players -> cards
   * Goal 53. Weak Mutation 135: GameState.getWinners()Ljava/util/HashMap;:104 - ReplaceComparisonOperator == -> !=
   * Goal 54. Weak Mutation 136: GameState.getWinners()Ljava/util/HashMap;:106 - ReplaceVariable playerScore -> gameBoard
   * Goal 55. Weak Mutation 137: GameState.getWinners()Ljava/util/HashMap;:106 - InsertUnaryOp Negation of score
   * Goal 56. Weak Mutation 138: GameState.getWinners()Ljava/util/HashMap;:106 - InsertUnaryOp IINC 1 score
   * Goal 57. Weak Mutation 139: GameState.getWinners()Ljava/util/HashMap;:106 - InsertUnaryOp IINC -1 score
   * Goal 58. Weak Mutation 140: GameState.getWinners()Ljava/util/HashMap;:108 - ReplaceVariable playerScore -> gameBoard
   */

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Player player0 = new Player(gameState0, "\"");
      gameState0.addPlayer(player0);
      HashMap<Player, Integer> hashMap0 = gameState0.play();
      assertFalse(hashMap0.isEmpty());
  }

  //Test case number: 3
  /*
   * 27 covered goals:
   * Goal 1. GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 2. GameState.getWinners()Ljava/util/HashMap;: I15 Branch 17 IFEQ L104 - true
   * Goal 3. Branch GameState.<init>(Ljava/util/List;)V: root-Branch in context: GameState:<init>(Ljava/util/List;)V
   * Goal 4. Branch GameState.getWinners()Ljava/util/HashMap;: I15 Branch 17 IFEQ L104 - true in context: GameState:getWinners()Ljava/util/HashMap;
   * Goal 5. [Output]: GameState.getWinners()Ljava/util/HashMap;:NonNull:java.util.HashMap:isEmpty()Z:True
   * Goal 6. [Output]: GameState.getWinners()Ljava/util/HashMap;:NonNull:java.util.HashMap:size()I:Zero
   * Goal 7. GameState.<init>(Ljava/util/List;)V: Line 5
   * Goal 8. GameState.<init>(Ljava/util/List;)V: Line 7
   * Goal 9. GameState.<init>(Ljava/util/List;)V: Line 9
   * Goal 10. GameState.<init>(Ljava/util/List;)V: Line 12
   * Goal 11. GameState.<init>(Ljava/util/List;)V: Line 14
   * Goal 12. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 5
   * Goal 13. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 7
   * Goal 14. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 9
   * Goal 15. GameState.getWinners()Ljava/util/HashMap;: Line 101
   * Goal 16. GameState.getWinners()Ljava/util/HashMap;: Line 104
   * Goal 17. GameState.getWinners()Ljava/util/HashMap;: Line 108
   * Goal 18. [METHOD] GameState.<init>(Ljava/util/List;)V
   * Goal 19. [METHOD] GameState.getWinners()Ljava/util/HashMap;
   * Goal 20. [METHODNOEX] GameState.<init>(Ljava/util/List;)V
   * Goal 21. [METHODNOEX] GameState.getWinners()Ljava/util/HashMap;
   * Goal 22. Weak Mutation 0: GameState.<init>(Ljava/util/List;)V:9 - ReplaceComparisonOperator == -> !=
   * Goal 23. Weak Mutation 3: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> players
   * Goal 24. Weak Mutation 133: GameState.getWinners()Ljava/util/HashMap;:104 - ReplaceVariable players -> embargoTokens
   * Goal 25. Weak Mutation 134: GameState.getWinners()Ljava/util/HashMap;:104 - ReplaceVariable players -> cards
   * Goal 26. Weak Mutation 135: GameState.getWinners()Ljava/util/HashMap;:104 - ReplaceComparisonOperator == -> !=
   * Goal 27. Weak Mutation 140: GameState.getWinners()Ljava/util/HashMap;:108 - ReplaceVariable playerScore -> gameBoard
   */

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      HashMap<Player, Integer> hashMap0 = gameState0.getWinners();
      assertTrue(hashMap0.isEmpty());
  }

  //Test case number: 4
  /*
   * 47 covered goals:
   * Goal 1. GameState.addPlayer(LPlayer;)V: root-Branch
   * Goal 2. GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 3. GameState.play()Ljava/util/HashMap;: I8 Branch 9 IFNE L64 - true
   * Goal 4. GameState.isGameOver()Z: I9 Branch 12 IFNULL L85 - true
   * Goal 5. GameState.getWinners()Ljava/util/HashMap;: I15 Branch 17 IFEQ L104 - false
   * Goal 6. Branch GameState.addPlayer(LPlayer;)V: root-Branch in context: GameState:addPlayer(LPlayer;)V
   * Goal 7. Branch GameState.<init>(Ljava/util/List;)V: root-Branch in context: GameState:<init>(Ljava/util/List;)V
   * Goal 8. Branch GameState.play()Ljava/util/HashMap;: I8 Branch 9 IFNE L64 - true in context: GameState:play()Ljava/util/HashMap;
   * Goal 9. play()Ljava/util/HashMap;_java.lang.NullPointerException_IMPLICIT
   * Goal 10. GameState.<init>(Ljava/util/List;)V: Line 5
   * Goal 11. GameState.<init>(Ljava/util/List;)V: Line 7
   * Goal 12. GameState.<init>(Ljava/util/List;)V: Line 9
   * Goal 13. GameState.<init>(Ljava/util/List;)V: Line 12
   * Goal 14. GameState.<init>(Ljava/util/List;)V: Line 14
   * Goal 15. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 5
   * Goal 16. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 7
   * Goal 17. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 9
   * Goal 18. GameState.addPlayer(LPlayer;)V: Line 16
   * Goal 19. GameState.addPlayer(LPlayer;)V: Line 17
   * Goal 20. GameState.getWinners()Ljava/util/HashMap;: Line 101
   * Goal 21. GameState.getWinners()Ljava/util/HashMap;: Line 104
   * Goal 22. GameState.getWinners()Ljava/util/HashMap;: Line 105
   * Goal 23. GameState.isGameOver()Z: Line 85
   * Goal 24. GameState.isGameOver()Z: Line 86
   * Goal 25. GameState.play()Ljava/util/HashMap;: Line 63
   * Goal 26. GameState.play()Ljava/util/HashMap;: Line 64
   * Goal 27. GameState.play()Ljava/util/HashMap;: Line 81
   * Goal 28. [METHOD] GameState.<init>(Ljava/util/List;)V
   * Goal 29. [METHOD] GameState.addPlayer(LPlayer;)V
   * Goal 30. [METHOD] GameState.play()Ljava/util/HashMap;
   * Goal 31. [METHODNOEX] GameState.<init>(Ljava/util/List;)V
   * Goal 32. [METHODNOEX] GameState.addPlayer(LPlayer;)V
   * Goal 33. Weak Mutation 0: GameState.<init>(Ljava/util/List;)V:9 - ReplaceComparisonOperator == -> !=
   * Goal 34. Weak Mutation 1: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> cards
   * Goal 35. Weak Mutation 2: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> embargoTokens
   * Goal 36. Weak Mutation 3: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> players
   * Goal 37. Weak Mutation 4: GameState.addPlayer(LPlayer;)V:16 - ReplaceVariable players -> embargoTokens
   * Goal 38. Weak Mutation 5: GameState.addPlayer(LPlayer;)V:16 - ReplaceVariable players -> cards
   * Goal 39. Weak Mutation 82: GameState.play()Ljava/util/HashMap;:63 - ReplaceConstant - 0 -> 1
   * Goal 40. Weak Mutation 83: GameState.play()Ljava/util/HashMap;:64 - ReplaceComparisonOperator != -> ==
   * Goal 41. Weak Mutation 100: GameState.isGameOver()Z:85 - ReplaceVariable cards -> embargoTokens
   * Goal 42. Weak Mutation 101: GameState.isGameOver()Z:85 - ReplaceVariable cards -> players
   * Goal 43. Weak Mutation 102: GameState.isGameOver()Z:85 - ReplaceComparisonOperator = null -> != null
   * Goal 44. Weak Mutation 108: GameState.isGameOver()Z:86 - ReplaceConstant - 1 -> 0
   * Goal 45. Weak Mutation 133: GameState.getWinners()Ljava/util/HashMap;:104 - ReplaceVariable players -> embargoTokens
   * Goal 46. Weak Mutation 134: GameState.getWinners()Ljava/util/HashMap;:104 - ReplaceVariable players -> cards
   * Goal 47. Weak Mutation 135: GameState.getWinners()Ljava/util/HashMap;:104 - ReplaceComparisonOperator == -> !=
   */

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      gameState0.addPlayer((Player) null);
      // Undeclared exception!
      try { 
        gameState0.play();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("GameState", e);
      }
  }

  //Test case number: 5
  /*
   * 18 covered goals:
   * Goal 1. GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 2. Branch GameState.<init>(Ljava/util/List;)V: root-Branch in context: GameState:<init>(Ljava/util/List;)V
   * Goal 3. isGameOver()Z_java.lang.NullPointerException_IMPLICIT
   * Goal 4. GameState.<init>(Ljava/util/List;)V: Line 5
   * Goal 5. GameState.<init>(Ljava/util/List;)V: Line 7
   * Goal 6. GameState.<init>(Ljava/util/List;)V: Line 9
   * Goal 7. GameState.<init>(Ljava/util/List;)V: Line 12
   * Goal 8. GameState.<init>(Ljava/util/List;)V: Line 14
   * Goal 9. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 5
   * Goal 10. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 7
   * Goal 11. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 9
   * Goal 12. GameState.isGameOver()Z: Line 85
   * Goal 13. [METHOD] GameState.<init>(Ljava/util/List;)V
   * Goal 14. [METHOD] GameState.isGameOver()Z
   * Goal 15. [METHODNOEX] GameState.<init>(Ljava/util/List;)V
   * Goal 16. Weak Mutation 0: GameState.<init>(Ljava/util/List;)V:9 - ReplaceComparisonOperator == -> !=
   * Goal 17. Weak Mutation 3: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> players
   * Goal 18. Weak Mutation 101: GameState.isGameOver()Z:85 - ReplaceVariable cards -> players
   */

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      // Undeclared exception!
      try { 
        gameState0.isGameOver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Card", e);
      }
  }

  //Test case number: 6
  /*
   * 20 covered goals:
   * Goal 1. GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 2. Branch GameState.<init>(Ljava/util/List;)V: root-Branch in context: GameState:<init>(Ljava/util/List;)V
   * Goal 3. initializeGame()V_java.lang.NullPointerException_IMPLICIT
   * Goal 4. GameState.<init>(Ljava/util/List;)V: Line 5
   * Goal 5. GameState.<init>(Ljava/util/List;)V: Line 7
   * Goal 6. GameState.<init>(Ljava/util/List;)V: Line 9
   * Goal 7. GameState.<init>(Ljava/util/List;)V: Line 12
   * Goal 8. GameState.<init>(Ljava/util/List;)V: Line 14
   * Goal 9. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 5
   * Goal 10. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 7
   * Goal 11. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 9
   * Goal 12. GameState.initializeGame()V: Line 22
   * Goal 13. [METHOD] GameState.<init>(Ljava/util/List;)V
   * Goal 14. [METHOD] GameState.initializeGame()V
   * Goal 15. [METHODNOEX] GameState.<init>(Ljava/util/List;)V
   * Goal 16. Weak Mutation 0: GameState.<init>(Ljava/util/List;)V:9 - ReplaceComparisonOperator == -> !=
   * Goal 17. Weak Mutation 1: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> cards
   * Goal 18. Weak Mutation 2: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> embargoTokens
   * Goal 19. Weak Mutation 3: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> players
   * Goal 20. Weak Mutation 7: GameState.initializeGame()V:22 - ReplaceVariable players -> cards
   */

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player((GameState) null, "Gain 2 Coins.");
      LinkedList<Card> linkedList0 = player0.deck;
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      gameState0.players = null;
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 7
  /*
   * 61 covered goals:
   * Goal 1. GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 2. GameState.initializeGame()V: I6 Branch 1 IF_ICMPGT L22 - false
   * Goal 3. GameState.initializeGame()V: I11 Branch 2 IF_ICMPGE L22 - true
   * Goal 4. GameState.initializeGame()V: I32 Branch 3 IF_ICMPGE L29 - false
   * Goal 5. Branch GameState.<init>(Ljava/util/List;)V: root-Branch in context: GameState:<init>(Ljava/util/List;)V
   * Goal 6. Branch GameState.initializeGame()V: I6 Branch 1 IF_ICMPGT L22 - false in context: GameState:initializeGame()V
   * Goal 7. Branch GameState.initializeGame()V: I11 Branch 2 IF_ICMPGE L22 - true in context: GameState:initializeGame()V
   * Goal 8. Branch GameState.initializeGame()V: I32 Branch 3 IF_ICMPGE L29 - false in context: GameState:initializeGame()V
   * Goal 9. initializeGame()V_java.lang.ArithmeticException_IMPLICIT
   * Goal 10. GameState.<init>(Ljava/util/List;)V: Line 5
   * Goal 11. GameState.<init>(Ljava/util/List;)V: Line 7
   * Goal 12. GameState.<init>(Ljava/util/List;)V: Line 9
   * Goal 13. GameState.<init>(Ljava/util/List;)V: Line 12
   * Goal 14. GameState.<init>(Ljava/util/List;)V: Line 14
   * Goal 15. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 5
   * Goal 16. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 7
   * Goal 17. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 9
   * Goal 18. GameState.initializeGame()V: Line 22
   * Goal 19. GameState.initializeGame()V: Line 27
   * Goal 20. GameState.initializeGame()V: Line 28
   * Goal 21. GameState.initializeGame()V: Line 29
   * Goal 22. GameState.initializeGame()V: Line 30
   * Goal 23. [METHOD] GameState.<init>(Ljava/util/List;)V
   * Goal 24. [METHOD] GameState.initializeGame()V
   * Goal 25. [METHODNOEX] GameState.<init>(Ljava/util/List;)V
   * Goal 26. Weak Mutation 0: GameState.<init>(Ljava/util/List;)V:9 - ReplaceComparisonOperator == -> !=
   * Goal 27. Weak Mutation 1: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> cards
   * Goal 28. Weak Mutation 2: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> embargoTokens
   * Goal 29. Weak Mutation 3: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> players
   * Goal 30. Weak Mutation 6: GameState.initializeGame()V:22 - ReplaceVariable players -> embargoTokens
   * Goal 31. Weak Mutation 7: GameState.initializeGame()V:22 - ReplaceVariable players -> cards
   * Goal 32. Weak Mutation 8: GameState.initializeGame()V:22 - ReplaceConstant - 4 -> 0
   * Goal 33. Weak Mutation 9: GameState.initializeGame()V:22 - ReplaceConstant - 4 -> 1
   * Goal 34. Weak Mutation 10: GameState.initializeGame()V:22 - ReplaceConstant - 4 -> -1
   * Goal 35. Weak Mutation 11: GameState.initializeGame()V:22 - ReplaceConstant - 4 -> 3
   * Goal 36. Weak Mutation 12: GameState.initializeGame()V:22 - ReplaceConstant - 4 -> 5
   * Goal 37. Weak Mutation 13: GameState.initializeGame()V:22 - ReplaceComparisonOperator > -> !=
   * Goal 38. Weak Mutation 16: GameState.initializeGame()V:22 - ReplaceVariable players -> embargoTokens
   * Goal 39. Weak Mutation 17: GameState.initializeGame()V:22 - ReplaceVariable players -> cards
   * Goal 40. Weak Mutation 18: GameState.initializeGame()V:22 - ReplaceConstant - 2 -> 0
   * Goal 41. Weak Mutation 19: GameState.initializeGame()V:22 - ReplaceConstant - 2 -> 1
   * Goal 42. Weak Mutation 20: GameState.initializeGame()V:22 - ReplaceConstant - 2 -> -1
   * Goal 43. Weak Mutation 21: GameState.initializeGame()V:22 - ReplaceConstant - 2 -> 3
   * Goal 44. Weak Mutation 23: GameState.initializeGame()V:22 - ReplaceComparisonOperator >= -> >
   * Goal 45. Weak Mutation 26: GameState.initializeGame()V:27 - ReplaceConstant - 0 -> 1
   * Goal 46. Weak Mutation 27: GameState.initializeGame()V:28 - ReplaceConstant - 10 -> 0
   * Goal 47. Weak Mutation 28: GameState.initializeGame()V:28 - ReplaceConstant - 10 -> 1
   * Goal 48. Weak Mutation 29: GameState.initializeGame()V:28 - ReplaceConstant - 10 -> -1
   * Goal 49. Weak Mutation 30: GameState.initializeGame()V:28 - ReplaceConstant - 10 -> 9
   * Goal 50. Weak Mutation 31: GameState.initializeGame()V:28 - ReplaceConstant - 10 -> 11
   * Goal 51. Weak Mutation 32: GameState.initializeGame()V:29 - ReplaceVariable selectedKindom -> Kingdom_Cards_Selected
   * Goal 52. Weak Mutation 33: GameState.initializeGame()V:29 - InsertUnaryOp Negation of selectedKindom
   * Goal 53. Weak Mutation 34: GameState.initializeGame()V:29 - InsertUnaryOp IINC 1 selectedKindom
   * Goal 54. Weak Mutation 35: GameState.initializeGame()V:29 - InsertUnaryOp IINC -1 selectedKindom
   * Goal 55. Weak Mutation 36: GameState.initializeGame()V:29 - ReplaceVariable Kingdom_Cards_Selected -> selectedKindom
   * Goal 56. Weak Mutation 37: GameState.initializeGame()V:29 - InsertUnaryOp Negation of Kingdom_Cards_Selected
   * Goal 57. Weak Mutation 38: GameState.initializeGame()V:29 - InsertUnaryOp IINC 1 Kingdom_Cards_Selected
   * Goal 58. Weak Mutation 39: GameState.initializeGame()V:29 - InsertUnaryOp IINC -1 Kingdom_Cards_Selected
   * Goal 59. Weak Mutation 40: GameState.initializeGame()V:29 - ReplaceComparisonOperator >= -> -1
   * Goal 60. Weak Mutation 43: GameState.initializeGame()V:30 - ReplaceVariable cards -> embargoTokens
   * Goal 61. Weak Mutation 44: GameState.initializeGame()V:30 - ReplaceVariable cards -> players
   */

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Vector<Player> vector1 = new Vector<Player>();
      Player player0 = new Player(gameState0, "LIA' x");
      vector1.add(player0);
      vector1.add(player0);
      gameState0.players = (List<Player>) vector1;
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //Test case number: 8
  /*
   * 32 covered goals:
   * Goal 1. GameState.addPlayer(LPlayer;)V: root-Branch
   * Goal 2. GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 3. GameState.getWinners()Ljava/util/HashMap;: I15 Branch 17 IFEQ L104 - false
   * Goal 4. Branch GameState.addPlayer(LPlayer;)V: root-Branch in context: GameState:addPlayer(LPlayer;)V
   * Goal 5. Branch GameState.<init>(Ljava/util/List;)V: root-Branch in context: GameState:<init>(Ljava/util/List;)V
   * Goal 6. Branch GameState.getWinners()Ljava/util/HashMap;: I15 Branch 17 IFEQ L104 - false in context: GameState:getWinners()Ljava/util/HashMap;
   * Goal 7. getWinners()Ljava/util/HashMap;_java.lang.NullPointerException_IMPLICIT
   * Goal 8. GameState.<init>(Ljava/util/List;)V: Line 5
   * Goal 9. GameState.<init>(Ljava/util/List;)V: Line 7
   * Goal 10. GameState.<init>(Ljava/util/List;)V: Line 9
   * Goal 11. GameState.<init>(Ljava/util/List;)V: Line 12
   * Goal 12. GameState.<init>(Ljava/util/List;)V: Line 14
   * Goal 13. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 5
   * Goal 14. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 7
   * Goal 15. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 9
   * Goal 16. GameState.addPlayer(LPlayer;)V: Line 16
   * Goal 17. GameState.addPlayer(LPlayer;)V: Line 17
   * Goal 18. GameState.getWinners()Ljava/util/HashMap;: Line 101
   * Goal 19. GameState.getWinners()Ljava/util/HashMap;: Line 104
   * Goal 20. GameState.getWinners()Ljava/util/HashMap;: Line 105
   * Goal 21. [METHOD] GameState.<init>(Ljava/util/List;)V
   * Goal 22. [METHOD] GameState.addPlayer(LPlayer;)V
   * Goal 23. [METHOD] GameState.getWinners()Ljava/util/HashMap;
   * Goal 24. [METHODNOEX] GameState.<init>(Ljava/util/List;)V
   * Goal 25. [METHODNOEX] GameState.addPlayer(LPlayer;)V
   * Goal 26. Weak Mutation 0: GameState.<init>(Ljava/util/List;)V:9 - ReplaceComparisonOperator == -> !=
   * Goal 27. Weak Mutation 3: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> players
   * Goal 28. Weak Mutation 4: GameState.addPlayer(LPlayer;)V:16 - ReplaceVariable players -> embargoTokens
   * Goal 29. Weak Mutation 5: GameState.addPlayer(LPlayer;)V:16 - ReplaceVariable players -> cards
   * Goal 30. Weak Mutation 133: GameState.getWinners()Ljava/util/HashMap;:104 - ReplaceVariable players -> embargoTokens
   * Goal 31. Weak Mutation 134: GameState.getWinners()Ljava/util/HashMap;:104 - ReplaceVariable players -> cards
   * Goal 32. Weak Mutation 135: GameState.getWinners()Ljava/util/HashMap;:104 - ReplaceComparisonOperator == -> !=
   */

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      gameState0.addPlayer((Player) null);
      // Undeclared exception!
      try { 
        gameState0.getWinners();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("GameState", e);
      }
  }

  //Test case number: 9
  /*
   * 22 covered goals:
   * Goal 1. GameState.addPlayer(LPlayer;)V: root-Branch
   * Goal 2. GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 3. Branch GameState.addPlayer(LPlayer;)V: root-Branch in context: GameState:addPlayer(LPlayer;)V
   * Goal 4. Branch GameState.<init>(Ljava/util/List;)V: root-Branch in context: GameState:<init>(Ljava/util/List;)V
   * Goal 5. addPlayer(LPlayer;)V_java.lang.NullPointerException_IMPLICIT
   * Goal 6. GameState.<init>(Ljava/util/List;)V: Line 5
   * Goal 7. GameState.<init>(Ljava/util/List;)V: Line 7
   * Goal 8. GameState.<init>(Ljava/util/List;)V: Line 9
   * Goal 9. GameState.<init>(Ljava/util/List;)V: Line 12
   * Goal 10. GameState.<init>(Ljava/util/List;)V: Line 14
   * Goal 11. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 5
   * Goal 12. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 7
   * Goal 13. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 9
   * Goal 14. GameState.addPlayer(LPlayer;)V: Line 16
   * Goal 15. [METHOD] GameState.<init>(Ljava/util/List;)V
   * Goal 16. [METHOD] GameState.addPlayer(LPlayer;)V
   * Goal 17. [METHODNOEX] GameState.<init>(Ljava/util/List;)V
   * Goal 18. Weak Mutation 0: GameState.<init>(Ljava/util/List;)V:9 - ReplaceComparisonOperator == -> !=
   * Goal 19. Weak Mutation 1: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> cards
   * Goal 20. Weak Mutation 2: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> embargoTokens
   * Goal 21. Weak Mutation 3: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> players
   * Goal 22. Weak Mutation 5: GameState.addPlayer(LPlayer;)V:16 - ReplaceVariable players -> cards
   */

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      gameState0.players = null;
      Player player0 = new Player(gameState0, "U#`))#'`H@,XuFLh*");
      // Undeclared exception!
      try { 
        gameState0.addPlayer(player0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("GameState", e);
      }
  }

  //Test case number: 10
  /*
   * 27 covered goals:
   * Goal 1. GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 2. GameState.isGameOver()Z: I9 Branch 12 IFNULL L85 - true
   * Goal 3. Branch GameState.<init>(Ljava/util/List;)V: root-Branch in context: GameState:<init>(Ljava/util/List;)V
   * Goal 4. Branch GameState.isGameOver()Z: I9 Branch 12 IFNULL L85 - true in context: GameState:isGameOver()Z
   * Goal 5. [Output]: GameState.isGameOver()Z:True
   * Goal 6. GameState.<init>(Ljava/util/List;)V: Line 5
   * Goal 7. GameState.<init>(Ljava/util/List;)V: Line 7
   * Goal 8. GameState.<init>(Ljava/util/List;)V: Line 9
   * Goal 9. GameState.<init>(Ljava/util/List;)V: Line 12
   * Goal 10. GameState.<init>(Ljava/util/List;)V: Line 14
   * Goal 11. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 5
   * Goal 12. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 7
   * Goal 13. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 9
   * Goal 14. GameState.isGameOver()Z: Line 85
   * Goal 15. GameState.isGameOver()Z: Line 86
   * Goal 16. [METHOD] GameState.<init>(Ljava/util/List;)V
   * Goal 17. [METHOD] GameState.isGameOver()Z
   * Goal 18. [METHODNOEX] GameState.<init>(Ljava/util/List;)V
   * Goal 19. [METHODNOEX] GameState.isGameOver()Z
   * Goal 20. Weak Mutation 0: GameState.<init>(Ljava/util/List;)V:9 - ReplaceComparisonOperator == -> !=
   * Goal 21. Weak Mutation 1: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> cards
   * Goal 22. Weak Mutation 2: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> embargoTokens
   * Goal 23. Weak Mutation 3: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> players
   * Goal 24. Weak Mutation 100: GameState.isGameOver()Z:85 - ReplaceVariable cards -> embargoTokens
   * Goal 25. Weak Mutation 101: GameState.isGameOver()Z:85 - ReplaceVariable cards -> players
   * Goal 26. Weak Mutation 102: GameState.isGameOver()Z:85 - ReplaceComparisonOperator = null -> != null
   * Goal 27. Weak Mutation 108: GameState.isGameOver()Z:86 - ReplaceConstant - 1 -> 0
   */

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      boolean boolean0 = gameState0.isGameOver();
      assertTrue(boolean0);
  }

  //Test case number: 11
  /*
   * 62 covered goals:
   * Goal 1. GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 2. GameState.isGameOver()Z: I9 Branch 12 IFNULL L85 - false
   * Goal 3. GameState.isGameOver()Z: I19 Branch 13 IFNE L85 - true
   * Goal 4. GameState.isGameOver()Z: I38 Branch 14 IFEQ L89 - true
   * Goal 5. GameState.isGameOver()Z: I38 Branch 14 IFEQ L89 - false
   * Goal 6. GameState.isGameOver()Z: I47 Branch 15 IFNE L90 - true
   * Goal 7. GameState.isGameOver()Z: I55 Branch 16 IF_ICMPLT L92 - true
   * Goal 8. Branch GameState.<init>(Ljava/util/List;)V: root-Branch in context: GameState:<init>(Ljava/util/List;)V
   * Goal 9. Branch GameState.isGameOver()Z: I9 Branch 12 IFNULL L85 - false in context: GameState:isGameOver()Z
   * Goal 10. Branch GameState.isGameOver()Z: I19 Branch 13 IFNE L85 - true in context: GameState:isGameOver()Z
   * Goal 11. Branch GameState.isGameOver()Z: I38 Branch 14 IFEQ L89 - true in context: GameState:isGameOver()Z
   * Goal 12. Branch GameState.isGameOver()Z: I38 Branch 14 IFEQ L89 - false in context: GameState:isGameOver()Z
   * Goal 13. Branch GameState.isGameOver()Z: I47 Branch 15 IFNE L90 - true in context: GameState:isGameOver()Z
   * Goal 14. Branch GameState.isGameOver()Z: I55 Branch 16 IF_ICMPLT L92 - true in context: GameState:isGameOver()Z
   * Goal 15. [Output]: GameState.isGameOver()Z:False
   * Goal 16. GameState.<init>(Ljava/util/List;)V: Line 5
   * Goal 17. GameState.<init>(Ljava/util/List;)V: Line 7
   * Goal 18. GameState.<init>(Ljava/util/List;)V: Line 9
   * Goal 19. GameState.<init>(Ljava/util/List;)V: Line 12
   * Goal 20. GameState.<init>(Ljava/util/List;)V: Line 14
   * Goal 21. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 5
   * Goal 22. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 7
   * Goal 23. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 9
   * Goal 24. GameState.isGameOver()Z: Line 85
   * Goal 25. GameState.isGameOver()Z: Line 88
   * Goal 26. GameState.isGameOver()Z: Line 89
   * Goal 27. GameState.isGameOver()Z: Line 90
   * Goal 28. GameState.isGameOver()Z: Line 92
   * Goal 29. GameState.isGameOver()Z: Line 95
   * Goal 30. GameState.isGameOver()Z: Line 96
   * Goal 31. [METHOD] GameState.<init>(Ljava/util/List;)V
   * Goal 32. [METHOD] GameState.isGameOver()Z
   * Goal 33. [METHODNOEX] GameState.<init>(Ljava/util/List;)V
   * Goal 34. [METHODNOEX] GameState.isGameOver()Z
   * Goal 35. Weak Mutation 0: GameState.<init>(Ljava/util/List;)V:9 - ReplaceComparisonOperator == -> !=
   * Goal 36. Weak Mutation 1: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> cards
   * Goal 37. Weak Mutation 2: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> embargoTokens
   * Goal 38. Weak Mutation 3: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> players
   * Goal 39. Weak Mutation 100: GameState.isGameOver()Z:85 - ReplaceVariable cards -> embargoTokens
   * Goal 40. Weak Mutation 101: GameState.isGameOver()Z:85 - ReplaceVariable cards -> players
   * Goal 41. Weak Mutation 102: GameState.isGameOver()Z:85 - ReplaceComparisonOperator = null -> != null
   * Goal 42. Weak Mutation 103: GameState.isGameOver()Z:85 - ReplaceVariable cards -> embargoTokens
   * Goal 43. Weak Mutation 104: GameState.isGameOver()Z:85 - ReplaceVariable cards -> players
   * Goal 44. Weak Mutation 106: GameState.isGameOver()Z:85 - ReplaceComparisonOperator != -> <
   * Goal 45. Weak Mutation 109: GameState.isGameOver()Z:88 - ReplaceConstant - 0 -> 1
   * Goal 46. Weak Mutation 110: GameState.isGameOver()Z:89 - ReplaceComparisonOperator == -> !=
   * Goal 47. Weak Mutation 111: GameState.isGameOver()Z:90 - ReplaceVariable i -> emptySupplyPile
   * Goal 48. Weak Mutation 112: GameState.isGameOver()Z:90 - InsertUnaryOp Negation of i
   * Goal 49. Weak Mutation 113: GameState.isGameOver()Z:90 - InsertUnaryOp IINC 1 i
   * Goal 50. Weak Mutation 114: GameState.isGameOver()Z:90 - InsertUnaryOp IINC -1 i
   * Goal 51. Weak Mutation 116: GameState.isGameOver()Z:90 - ReplaceComparisonOperator != -> <
   * Goal 52. Weak Mutation 119: GameState.isGameOver()Z:92 - ReplaceVariable emptySupplyPile -> i
   * Goal 53. Weak Mutation 120: GameState.isGameOver()Z:92 - InsertUnaryOp Negation of emptySupplyPile
   * Goal 54. Weak Mutation 121: GameState.isGameOver()Z:92 - InsertUnaryOp IINC 1 emptySupplyPile
   * Goal 55. Weak Mutation 122: GameState.isGameOver()Z:92 - InsertUnaryOp IINC -1 emptySupplyPile
   * Goal 56. Weak Mutation 123: GameState.isGameOver()Z:92 - ReplaceConstant - 3 -> 0
   * Goal 57. Weak Mutation 124: GameState.isGameOver()Z:92 - ReplaceConstant - 3 -> 1
   * Goal 58. Weak Mutation 125: GameState.isGameOver()Z:92 - ReplaceConstant - 3 -> -1
   * Goal 59. Weak Mutation 126: GameState.isGameOver()Z:92 - ReplaceConstant - 3 -> 2
   * Goal 60. Weak Mutation 127: GameState.isGameOver()Z:92 - ReplaceConstant - 3 -> 4
   * Goal 61. Weak Mutation 129: GameState.isGameOver()Z:92 - ReplaceComparisonOperator < -> -2
   * Goal 62. Weak Mutation 132: GameState.isGameOver()Z:96 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Integer integer0 = new Integer(11);
      gameState0.gameBoard.put((Card) null, integer0);
      boolean boolean0 = gameState0.isGameOver();
      assertFalse(boolean0);
  }

  //Test case number: 12
  /*
   * 41 covered goals:
   * Goal 1. GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 2. GameState.toString()Ljava/lang/String;: I11 Branch 18 IFEQ L119 - true
   * Goal 3. GameState.toString()Ljava/lang/String;: I28 Branch 19 IFEQ L122 - true
   * Goal 4. GameState.toString()Ljava/lang/String;: I28 Branch 19 IFEQ L122 - false
   * Goal 5. Branch GameState.<init>(Ljava/util/List;)V: root-Branch in context: GameState:<init>(Ljava/util/List;)V
   * Goal 6. Branch GameState.toString()Ljava/lang/String;: I11 Branch 18 IFEQ L119 - true in context: GameState:toString()Ljava/lang/String;
   * Goal 7. Branch GameState.toString()Ljava/lang/String;: I28 Branch 19 IFEQ L122 - false in context: GameState:toString()Ljava/lang/String;
   * Goal 8. Branch GameState.toString()Ljava/lang/String;: I28 Branch 19 IFEQ L122 - true in context: GameState:toString()Ljava/lang/String;
   * Goal 9. toString()Ljava/lang/String;_java.lang.NullPointerException_IMPLICIT
   * Goal 10. GameState.<init>(Ljava/util/List;)V: Line 5
   * Goal 11. GameState.<init>(Ljava/util/List;)V: Line 7
   * Goal 12. GameState.<init>(Ljava/util/List;)V: Line 9
   * Goal 13. GameState.<init>(Ljava/util/List;)V: Line 12
   * Goal 14. GameState.<init>(Ljava/util/List;)V: Line 14
   * Goal 15. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 5
   * Goal 16. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 7
   * Goal 17. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 9
   * Goal 18. GameState.toString()Ljava/lang/String;: Line 118
   * Goal 19. GameState.toString()Ljava/lang/String;: Line 119
   * Goal 20. GameState.toString()Ljava/lang/String;: Line 122
   * Goal 21. GameState.toString()Ljava/lang/String;: Line 123
   * Goal 22. GameState.toString()Ljava/lang/String;: Line 124
   * Goal 23. GameState.toString()Ljava/lang/String;: Line 125
   * Goal 24. GameState.toString()Ljava/lang/String;: Line 126
   * Goal 25. GameState.toString()Ljava/lang/String;: Line 127
   * Goal 26. [METHOD] GameState.<init>(Ljava/util/List;)V
   * Goal 27. [METHOD] GameState.toString()Ljava/lang/String;
   * Goal 28. [METHODNOEX] GameState.<init>(Ljava/util/List;)V
   * Goal 29. Weak Mutation 0: GameState.<init>(Ljava/util/List;)V:9 - ReplaceComparisonOperator == -> !=
   * Goal 30. Weak Mutation 1: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> cards
   * Goal 31. Weak Mutation 2: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> embargoTokens
   * Goal 32. Weak Mutation 3: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> players
   * Goal 33. Weak Mutation 142: GameState.toString()Ljava/lang/String;:119 - ReplaceComparisonOperator == -> !=
   * Goal 34. Weak Mutation 144: GameState.toString()Ljava/lang/String;:122 - ReplaceVariable players -> embargoTokens
   * Goal 35. Weak Mutation 145: GameState.toString()Ljava/lang/String;:122 - ReplaceVariable players -> cards
   * Goal 36. Weak Mutation 146: GameState.toString()Ljava/lang/String;:122 - ReplaceComparisonOperator == -> !=
   * Goal 37. Weak Mutation 147: GameState.toString()Ljava/lang/String;:123 - ReplaceConstant -  ---  -> 
   * Goal 38. Weak Mutation 148: GameState.toString()Ljava/lang/String;:123 - ReplaceConstant - 
 -> 
   * Goal 39. Weak Mutation 149: GameState.toString()Ljava/lang/String;:124 - ReplaceConstant -  --- gameBoard --- 
 -> 
   * Goal 40. Weak Mutation 150: GameState.toString()Ljava/lang/String;:125 - ReplaceConstant - Cards on the table: 
 -> 
   * Goal 41. Weak Mutation 151: GameState.toString()Ljava/lang/String;:126 - ReplaceConstant - Card Name 		 NumberCards: 
 -> 
   */

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Vector<Player> vector0 = new Vector<Player>();
      Integer integer0 = new Integer(1636);
      gameState0.gameBoard.put((Card) null, integer0);
      Player player0 = new Player(gameState0, "LIA' x");
      vector0.add(player0);
      gameState0.players = (List<Player>) vector0;
      // Undeclared exception!
      try { 
        gameState0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.TreeMap", e);
      }
  }

  //Test case number: 13
  /*
   * 27 covered goals:
   * Goal 1. GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 2. GameState.toString()Ljava/lang/String;: I11 Branch 18 IFEQ L119 - false
   * Goal 3. Branch GameState.<init>(Ljava/util/List;)V: root-Branch in context: GameState:<init>(Ljava/util/List;)V
   * Goal 4. Branch GameState.toString()Ljava/lang/String;: I11 Branch 18 IFEQ L119 - false in context: GameState:toString()Ljava/lang/String;
   * Goal 5. [Output]: GameState.toString()Ljava/lang/String;:NonEmptyString
   * Goal 6. GameState.<init>(Ljava/util/List;)V: Line 5
   * Goal 7. GameState.<init>(Ljava/util/List;)V: Line 7
   * Goal 8. GameState.<init>(Ljava/util/List;)V: Line 9
   * Goal 9. GameState.<init>(Ljava/util/List;)V: Line 12
   * Goal 10. GameState.<init>(Ljava/util/List;)V: Line 14
   * Goal 11. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 5
   * Goal 12. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 7
   * Goal 13. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 9
   * Goal 14. GameState.toString()Ljava/lang/String;: Line 118
   * Goal 15. GameState.toString()Ljava/lang/String;: Line 119
   * Goal 16. GameState.toString()Ljava/lang/String;: Line 120
   * Goal 17. GameState.toString()Ljava/lang/String;: Line 132
   * Goal 18. [METHOD] GameState.<init>(Ljava/util/List;)V
   * Goal 19. [METHOD] GameState.toString()Ljava/lang/String;
   * Goal 20. [METHODNOEX] GameState.<init>(Ljava/util/List;)V
   * Goal 21. [METHODNOEX] GameState.toString()Ljava/lang/String;
   * Goal 22. Weak Mutation 0: GameState.<init>(Ljava/util/List;)V:9 - ReplaceComparisonOperator == -> !=
   * Goal 23. Weak Mutation 1: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> cards
   * Goal 24. Weak Mutation 2: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> embargoTokens
   * Goal 25. Weak Mutation 3: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> players
   * Goal 26. Weak Mutation 142: GameState.toString()Ljava/lang/String;:119 - ReplaceComparisonOperator == -> !=
   * Goal 27. Weak Mutation 143: GameState.toString()Ljava/lang/String;:120 - ReplaceConstant - The board game is embty you need to intialize the game!!!! -> 
   */

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      String string0 = gameState0.toString();
      assertEquals("The board game is embty you need to intialize the game!!!!", string0);
  }

  //Test case number: 14
  /*
   * 95 covered goals:
   * Goal 1. GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 2. GameState.play()Ljava/util/HashMap;: I8 Branch 9 IFNE L64 - false
   * Goal 3. GameState.play()Ljava/util/HashMap;: I21 Branch 10 IFEQ L66 - true
   * Goal 4. GameState.play()Ljava/util/HashMap;: I69 Branch 11 IF_ICMPNE L78 - true
   * Goal 5. GameState.play()Ljava/util/HashMap;: I69 Branch 11 IF_ICMPNE L78 - false
   * Goal 6. GameState.isGameOver()Z: I9 Branch 12 IFNULL L85 - false
   * Goal 7. GameState.isGameOver()Z: I19 Branch 13 IFNE L85 - true
   * Goal 8. GameState.isGameOver()Z: I38 Branch 14 IFEQ L89 - true
   * Goal 9. GameState.isGameOver()Z: I38 Branch 14 IFEQ L89 - false
   * Goal 10. GameState.isGameOver()Z: I47 Branch 15 IFNE L90 - true
   * Goal 11. GameState.isGameOver()Z: I55 Branch 16 IF_ICMPLT L92 - true
   * Goal 12. GameState.getWinners()Ljava/util/HashMap;: I15 Branch 17 IFEQ L104 - true
   * Goal 13. Branch GameState.<init>(Ljava/util/List;)V: root-Branch in context: GameState:<init>(Ljava/util/List;)V
   * Goal 14. Branch GameState.play()Ljava/util/HashMap;: I8 Branch 9 IFNE L64 - false in context: GameState:play()Ljava/util/HashMap;
   * Goal 15. Branch GameState.play()Ljava/util/HashMap;: I21 Branch 10 IFEQ L66 - true in context: GameState:play()Ljava/util/HashMap;
   * Goal 16. Branch GameState.play()Ljava/util/HashMap;: I69 Branch 11 IF_ICMPNE L78 - true in context: GameState:play()Ljava/util/HashMap;
   * Goal 17. Branch GameState.play()Ljava/util/HashMap;: I69 Branch 11 IF_ICMPNE L78 - false in context: GameState:play()Ljava/util/HashMap;
   * Goal 18. [Output]: GameState.play()Ljava/util/HashMap;:NonNull:java.util.HashMap:isEmpty()Z:True
   * Goal 19. [Output]: GameState.play()Ljava/util/HashMap;:NonNull:java.util.HashMap:size()I:Zero
   * Goal 20. GameState.<init>(Ljava/util/List;)V: Line 5
   * Goal 21. GameState.<init>(Ljava/util/List;)V: Line 7
   * Goal 22. GameState.<init>(Ljava/util/List;)V: Line 9
   * Goal 23. GameState.<init>(Ljava/util/List;)V: Line 12
   * Goal 24. GameState.<init>(Ljava/util/List;)V: Line 14
   * Goal 25. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 5
   * Goal 26. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 7
   * Goal 27. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 9
   * Goal 28. GameState.getWinners()Ljava/util/HashMap;: Line 101
   * Goal 29. GameState.getWinners()Ljava/util/HashMap;: Line 104
   * Goal 30. GameState.getWinners()Ljava/util/HashMap;: Line 108
   * Goal 31. GameState.isGameOver()Z: Line 85
   * Goal 32. GameState.isGameOver()Z: Line 88
   * Goal 33. GameState.isGameOver()Z: Line 89
   * Goal 34. GameState.isGameOver()Z: Line 90
   * Goal 35. GameState.isGameOver()Z: Line 92
   * Goal 36. GameState.isGameOver()Z: Line 95
   * Goal 37. GameState.isGameOver()Z: Line 96
   * Goal 38. GameState.play()Ljava/util/HashMap;: Line 63
   * Goal 39. GameState.play()Ljava/util/HashMap;: Line 64
   * Goal 40. GameState.play()Ljava/util/HashMap;: Line 65
   * Goal 41. GameState.play()Ljava/util/HashMap;: Line 66
   * Goal 42. GameState.play()Ljava/util/HashMap;: Line 78
   * Goal 43. GameState.play()Ljava/util/HashMap;: Line 79
   * Goal 44. GameState.play()Ljava/util/HashMap;: Line 81
   * Goal 45. [METHOD] GameState.<init>(Ljava/util/List;)V
   * Goal 46. [METHOD] GameState.play()Ljava/util/HashMap;
   * Goal 47. [METHODNOEX] GameState.<init>(Ljava/util/List;)V
   * Goal 48. [METHODNOEX] GameState.play()Ljava/util/HashMap;
   * Goal 49. Weak Mutation 0: GameState.<init>(Ljava/util/List;)V:9 - ReplaceComparisonOperator == -> !=
   * Goal 50. Weak Mutation 1: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> cards
   * Goal 51. Weak Mutation 2: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> embargoTokens
   * Goal 52. Weak Mutation 3: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> players
   * Goal 53. Weak Mutation 82: GameState.play()Ljava/util/HashMap;:63 - ReplaceConstant - 0 -> 1
   * Goal 54. Weak Mutation 83: GameState.play()Ljava/util/HashMap;:64 - ReplaceComparisonOperator != -> ==
   * Goal 55. Weak Mutation 84: GameState.play()Ljava/util/HashMap;:66 - ReplaceVariable players -> embargoTokens
   * Goal 56. Weak Mutation 85: GameState.play()Ljava/util/HashMap;:66 - ReplaceVariable players -> cards
   * Goal 57. Weak Mutation 86: GameState.play()Ljava/util/HashMap;:66 - ReplaceComparisonOperator == -> !=
   * Goal 58. Weak Mutation 89: GameState.play()Ljava/util/HashMap;:78 - InsertUnaryOp Negation of turn
   * Goal 59. Weak Mutation 90: GameState.play()Ljava/util/HashMap;:78 - InsertUnaryOp IINC 1 turn
   * Goal 60. Weak Mutation 91: GameState.play()Ljava/util/HashMap;:78 - InsertUnaryOp IINC -1 turn
   * Goal 61. Weak Mutation 92: GameState.play()Ljava/util/HashMap;:78 - ReplaceConstant - 100 -> 0
   * Goal 62. Weak Mutation 93: GameState.play()Ljava/util/HashMap;:78 - ReplaceConstant - 100 -> 1
   * Goal 63. Weak Mutation 94: GameState.play()Ljava/util/HashMap;:78 - ReplaceConstant - 100 -> -1
   * Goal 64. Weak Mutation 95: GameState.play()Ljava/util/HashMap;:78 - ReplaceConstant - 100 -> 99
   * Goal 65. Weak Mutation 96: GameState.play()Ljava/util/HashMap;:78 - ReplaceConstant - 100 -> 101
   * Goal 66. Weak Mutation 97: GameState.play()Ljava/util/HashMap;:78 - ReplaceComparisonOperator != -> -1
   * Goal 67. Weak Mutation 99: GameState.play()Ljava/util/HashMap;:78 - ReplaceComparisonOperator != -> >
   * Goal 68. Weak Mutation 100: GameState.isGameOver()Z:85 - ReplaceVariable cards -> embargoTokens
   * Goal 69. Weak Mutation 101: GameState.isGameOver()Z:85 - ReplaceVariable cards -> players
   * Goal 70. Weak Mutation 102: GameState.isGameOver()Z:85 - ReplaceComparisonOperator = null -> != null
   * Goal 71. Weak Mutation 103: GameState.isGameOver()Z:85 - ReplaceVariable cards -> embargoTokens
   * Goal 72. Weak Mutation 104: GameState.isGameOver()Z:85 - ReplaceVariable cards -> players
   * Goal 73. Weak Mutation 106: GameState.isGameOver()Z:85 - ReplaceComparisonOperator != -> <
   * Goal 74. Weak Mutation 109: GameState.isGameOver()Z:88 - ReplaceConstant - 0 -> 1
   * Goal 75. Weak Mutation 110: GameState.isGameOver()Z:89 - ReplaceComparisonOperator == -> !=
   * Goal 76. Weak Mutation 111: GameState.isGameOver()Z:90 - ReplaceVariable i -> emptySupplyPile
   * Goal 77. Weak Mutation 112: GameState.isGameOver()Z:90 - InsertUnaryOp Negation of i
   * Goal 78. Weak Mutation 113: GameState.isGameOver()Z:90 - InsertUnaryOp IINC 1 i
   * Goal 79. Weak Mutation 114: GameState.isGameOver()Z:90 - InsertUnaryOp IINC -1 i
   * Goal 80. Weak Mutation 116: GameState.isGameOver()Z:90 - ReplaceComparisonOperator != -> <
   * Goal 81. Weak Mutation 119: GameState.isGameOver()Z:92 - ReplaceVariable emptySupplyPile -> i
   * Goal 82. Weak Mutation 120: GameState.isGameOver()Z:92 - InsertUnaryOp Negation of emptySupplyPile
   * Goal 83. Weak Mutation 121: GameState.isGameOver()Z:92 - InsertUnaryOp IINC 1 emptySupplyPile
   * Goal 84. Weak Mutation 122: GameState.isGameOver()Z:92 - InsertUnaryOp IINC -1 emptySupplyPile
   * Goal 85. Weak Mutation 123: GameState.isGameOver()Z:92 - ReplaceConstant - 3 -> 0
   * Goal 86. Weak Mutation 124: GameState.isGameOver()Z:92 - ReplaceConstant - 3 -> 1
   * Goal 87. Weak Mutation 125: GameState.isGameOver()Z:92 - ReplaceConstant - 3 -> -1
   * Goal 88. Weak Mutation 126: GameState.isGameOver()Z:92 - ReplaceConstant - 3 -> 2
   * Goal 89. Weak Mutation 127: GameState.isGameOver()Z:92 - ReplaceConstant - 3 -> 4
   * Goal 90. Weak Mutation 129: GameState.isGameOver()Z:92 - ReplaceComparisonOperator < -> -2
   * Goal 91. Weak Mutation 132: GameState.isGameOver()Z:96 - ReplaceConstant - 0 -> 1
   * Goal 92. Weak Mutation 133: GameState.getWinners()Ljava/util/HashMap;:104 - ReplaceVariable players -> embargoTokens
   * Goal 93. Weak Mutation 134: GameState.getWinners()Ljava/util/HashMap;:104 - ReplaceVariable players -> cards
   * Goal 94. Weak Mutation 135: GameState.getWinners()Ljava/util/HashMap;:104 - ReplaceComparisonOperator == -> !=
   * Goal 95. Weak Mutation 140: GameState.getWinners()Ljava/util/HashMap;:108 - ReplaceVariable playerScore -> gameBoard
   */

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Integer integer0 = new Integer(11);
      gameState0.gameBoard.put((Card) null, integer0);
      HashMap<Player, Integer> hashMap0 = gameState0.play();
      assertEquals(0, hashMap0.size());
  }

  //Test case number: 15
  /*
   * 41 covered goals:
   * Goal 1. GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 2. GameState.initializeGame()V: I6 Branch 1 IF_ICMPGT L22 - false
   * Goal 3. GameState.initializeGame()V: I11 Branch 2 IF_ICMPGE L22 - false
   * Goal 4. Branch GameState.<init>(Ljava/util/List;)V: root-Branch in context: GameState:<init>(Ljava/util/List;)V
   * Goal 5. Branch GameState.initializeGame()V: I6 Branch 1 IF_ICMPGT L22 - false in context: GameState:initializeGame()V
   * Goal 6. Branch GameState.initializeGame()V: I11 Branch 2 IF_ICMPGE L22 - false in context: GameState:initializeGame()V
   * Goal 7. GameState.<init>(Ljava/util/List;)V: Line 5
   * Goal 8. GameState.<init>(Ljava/util/List;)V: Line 7
   * Goal 9. GameState.<init>(Ljava/util/List;)V: Line 9
   * Goal 10. GameState.<init>(Ljava/util/List;)V: Line 12
   * Goal 11. GameState.<init>(Ljava/util/List;)V: Line 14
   * Goal 12. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 5
   * Goal 13. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 7
   * Goal 14. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 9
   * Goal 15. GameState.initializeGame()V: Line 22
   * Goal 16. GameState.initializeGame()V: Line 23
   * Goal 17. GameState.initializeGame()V: Line 24
   * Goal 18. [METHOD] GameState.<init>(Ljava/util/List;)V
   * Goal 19. [METHOD] GameState.initializeGame()V
   * Goal 20. [METHODNOEX] GameState.<init>(Ljava/util/List;)V
   * Goal 21. [METHODNOEX] GameState.initializeGame()V
   * Goal 22. Weak Mutation 0: GameState.<init>(Ljava/util/List;)V:9 - ReplaceComparisonOperator == -> !=
   * Goal 23. Weak Mutation 1: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> cards
   * Goal 24. Weak Mutation 2: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> embargoTokens
   * Goal 25. Weak Mutation 3: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> players
   * Goal 26. Weak Mutation 6: GameState.initializeGame()V:22 - ReplaceVariable players -> embargoTokens
   * Goal 27. Weak Mutation 7: GameState.initializeGame()V:22 - ReplaceVariable players -> cards
   * Goal 28. Weak Mutation 8: GameState.initializeGame()V:22 - ReplaceConstant - 4 -> 0
   * Goal 29. Weak Mutation 9: GameState.initializeGame()V:22 - ReplaceConstant - 4 -> 1
   * Goal 30. Weak Mutation 10: GameState.initializeGame()V:22 - ReplaceConstant - 4 -> -1
   * Goal 31. Weak Mutation 11: GameState.initializeGame()V:22 - ReplaceConstant - 4 -> 3
   * Goal 32. Weak Mutation 12: GameState.initializeGame()V:22 - ReplaceConstant - 4 -> 5
   * Goal 33. Weak Mutation 13: GameState.initializeGame()V:22 - ReplaceComparisonOperator > -> !=
   * Goal 34. Weak Mutation 16: GameState.initializeGame()V:22 - ReplaceVariable players -> embargoTokens
   * Goal 35. Weak Mutation 17: GameState.initializeGame()V:22 - ReplaceVariable players -> cards
   * Goal 36. Weak Mutation 18: GameState.initializeGame()V:22 - ReplaceConstant - 2 -> 0
   * Goal 37. Weak Mutation 19: GameState.initializeGame()V:22 - ReplaceConstant - 2 -> 1
   * Goal 38. Weak Mutation 20: GameState.initializeGame()V:22 - ReplaceConstant - 2 -> -1
   * Goal 39. Weak Mutation 21: GameState.initializeGame()V:22 - ReplaceConstant - 2 -> 3
   * Goal 40. Weak Mutation 22: GameState.initializeGame()V:22 - ReplaceComparisonOperator >= -> -1
   * Goal 41. Weak Mutation 25: GameState.initializeGame()V:23 - ReplaceConstant - the number of players mus be between 2 and 4  -> 
   */

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      gameState0.initializeGame();
  }

  //Test case number: 16
  /*
   * 44 covered goals:
   * Goal 1. GameState.addPlayer(LPlayer;)V: root-Branch
   * Goal 2. GameState.<init>(Ljava/util/List;)V: root-Branch
   * Goal 3. GameState.getWinners()Ljava/util/HashMap;: I15 Branch 17 IFEQ L104 - true
   * Goal 4. GameState.getWinners()Ljava/util/HashMap;: I15 Branch 17 IFEQ L104 - false
   * Goal 5. Branch GameState.addPlayer(LPlayer;)V: root-Branch in context: GameState:addPlayer(LPlayer;)V
   * Goal 6. Branch GameState.<init>(Ljava/util/List;)V: root-Branch in context: GameState:<init>(Ljava/util/List;)V
   * Goal 7. Branch GameState.getWinners()Ljava/util/HashMap;: I15 Branch 17 IFEQ L104 - true in context: GameState:getWinners()Ljava/util/HashMap;
   * Goal 8. Branch GameState.getWinners()Ljava/util/HashMap;: I15 Branch 17 IFEQ L104 - false in context: GameState:getWinners()Ljava/util/HashMap;
   * Goal 9. [Output]: GameState.getWinners()Ljava/util/HashMap;:NonNull:java.util.HashMap:isEmpty()Z:False
   * Goal 10. [Output]: GameState.getWinners()Ljava/util/HashMap;:NonNull:java.util.HashMap:size()I:Positive
   * Goal 11. GameState.<init>(Ljava/util/List;)V: Line 5
   * Goal 12. GameState.<init>(Ljava/util/List;)V: Line 7
   * Goal 13. GameState.<init>(Ljava/util/List;)V: Line 9
   * Goal 14. GameState.<init>(Ljava/util/List;)V: Line 12
   * Goal 15. GameState.<init>(Ljava/util/List;)V: Line 14
   * Goal 16. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 5
   * Goal 17. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 7
   * Goal 18. GameState.<init>(Ljava/util/List;Ljava/util/List;Ljava/util/HashMap;)V: Line 9
   * Goal 19. GameState.addPlayer(LPlayer;)V: Line 16
   * Goal 20. GameState.addPlayer(LPlayer;)V: Line 17
   * Goal 21. GameState.getWinners()Ljava/util/HashMap;: Line 101
   * Goal 22. GameState.getWinners()Ljava/util/HashMap;: Line 104
   * Goal 23. GameState.getWinners()Ljava/util/HashMap;: Line 105
   * Goal 24. GameState.getWinners()Ljava/util/HashMap;: Line 106
   * Goal 25. GameState.getWinners()Ljava/util/HashMap;: Line 107
   * Goal 26. GameState.getWinners()Ljava/util/HashMap;: Line 108
   * Goal 27. [METHOD] GameState.<init>(Ljava/util/List;)V
   * Goal 28. [METHOD] GameState.addPlayer(LPlayer;)V
   * Goal 29. [METHOD] GameState.getWinners()Ljava/util/HashMap;
   * Goal 30. [METHODNOEX] GameState.<init>(Ljava/util/List;)V
   * Goal 31. [METHODNOEX] GameState.addPlayer(LPlayer;)V
   * Goal 32. [METHODNOEX] GameState.getWinners()Ljava/util/HashMap;
   * Goal 33. Weak Mutation 0: GameState.<init>(Ljava/util/List;)V:9 - ReplaceComparisonOperator == -> !=
   * Goal 34. Weak Mutation 3: GameState.<init>(Ljava/util/List;)V:12 - ReplaceVariable cards -> players
   * Goal 35. Weak Mutation 4: GameState.addPlayer(LPlayer;)V:16 - ReplaceVariable players -> embargoTokens
   * Goal 36. Weak Mutation 5: GameState.addPlayer(LPlayer;)V:16 - ReplaceVariable players -> cards
   * Goal 37. Weak Mutation 133: GameState.getWinners()Ljava/util/HashMap;:104 - ReplaceVariable players -> embargoTokens
   * Goal 38. Weak Mutation 134: GameState.getWinners()Ljava/util/HashMap;:104 - ReplaceVariable players -> cards
   * Goal 39. Weak Mutation 135: GameState.getWinners()Ljava/util/HashMap;:104 - ReplaceComparisonOperator == -> !=
   * Goal 40. Weak Mutation 136: GameState.getWinners()Ljava/util/HashMap;:106 - ReplaceVariable playerScore -> gameBoard
   * Goal 41. Weak Mutation 137: GameState.getWinners()Ljava/util/HashMap;:106 - InsertUnaryOp Negation of score
   * Goal 42. Weak Mutation 138: GameState.getWinners()Ljava/util/HashMap;:106 - InsertUnaryOp IINC 1 score
   * Goal 43. Weak Mutation 139: GameState.getWinners()Ljava/util/HashMap;:106 - InsertUnaryOp IINC -1 score
   * Goal 44. Weak Mutation 140: GameState.getWinners()Ljava/util/HashMap;:108 - ReplaceVariable playerScore -> gameBoard
   */

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "");
      gameState0.addPlayer(player0);
      HashMap<Player, Integer> hashMap0 = gameState0.getWinners();
      assertEquals(1, hashMap0.size());
  }

  //Test case number: 17
  /*
   * 7 covered goals:
   * Goal 1. GameState.addEmbargo()V: root-Branch
   * Goal 2. Branch GameState.addEmbargo()V: root-Branch in context: GameState:addEmbargo()V
   * Goal 3. GameState.addEmbargo()V: Line 112
   * Goal 4. GameState.addEmbargo()V: Line 113
   * Goal 5. [METHOD] GameState.addEmbargo()V
   * Goal 6. [METHODNOEX] GameState.addEmbargo()V
   * Goal 7. Weak Mutation 141: GameState.addEmbargo()V:112 - ReplaceConstant - Token Added. -> 
   */

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GameState.addEmbargo();
  }
}
