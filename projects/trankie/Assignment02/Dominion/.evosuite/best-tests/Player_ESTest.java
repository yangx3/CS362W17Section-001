/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 28 04:40:42 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.TooManyResourcesException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player(">L[3CP4`1-{`4t<yS", 7, 7, 7);
      player0.setCoins(Integer.MIN_VALUE);
      player0.printInfo();
      assertEquals(-2147483641, player0.getCoins());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player(">L[3CP4`1-{`4t<yS", 7, 7, 7);
      player0.setBuys(Integer.MIN_VALUE);
      player0.printInfo();
      assertEquals(-2147483641, player0.getBuys());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player(">L[3CP4`1-{`4t<yS", 7, 7, 7);
      player0.setBuys(Integer.MIN_VALUE);
      int int0 = player0.getBuys();
      assertEquals((-2147483641), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player("/HOb2>e/j", 0, 0, 0);
      int int0 = player0.getCoins();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player("uxv[9", 2657, 0, 2657);
      int int0 = player0.getCoins();
      assertEquals(2657, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player("~qo=;Eq_9:gm", 0, 0, 0);
      int int0 = player0.getBuys();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player("Garden", (-62), (-62), (-62));
      player0.resetStats();
      int int0 = player0.getBuys();
      assertEquals(1, player0.getActions());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player("", 4248, 4248, 0);
      assertEquals(4248, player0.getActions());
      
      player0.Actions = 0;
      int int0 = player0.getActions();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player((String) null, (-2144), (-2144), 163);
      int int0 = player0.getActions();
      assertEquals((-2144), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player("WwFT`b", 3106, 3106, 3106);
      List<Card> list0 = Card.addAllCards();
      player0.hand = list0;
      int int0 = player0.checkTreasure();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player(">L[3CP4`1-{`4t<yS", 7, 7, 7);
      player0.buildDeck();
      List<Card> list0 = player0.hand;
      player0.discard = list0;
      player0.drawCard();
      // Undeclared exception!
      try { 
        player0.removeHand();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player("--%M%z", 3362, 3362, 7);
      player0.hand = null;
      // Undeclared exception!
      try { 
        player0.removeHand();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player("aZ=ad", (-1865), (-1865), 999);
      player0.hand = null;
      // Undeclared exception!
      try { 
        player0.printHand();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player("ESU", (-1691), 1853, (-1264));
      player0.deck = null;
      // Undeclared exception!
      try { 
        player0.drawCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player("Garden", (-62), (-62), (-62));
      player0.deck = null;
      player0.hand = (List<Card>) player0.deck;
      // Undeclared exception!
      try { 
        player0.cleanUp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player("", 77, (-1), 0);
      player0.deck = null;
      // Undeclared exception!
      try { 
        player0.checkVictory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player("LKWf3o!<L}", 1677, 1, (-379));
      player0.hand = null;
      // Undeclared exception!
      try { 
        player0.checkTypeAction(80);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player(">L[3CP4`1-{`4t<yS", 7, 7, 7);
      LinkedList<Card> linkedList0 = player0.deck;
      player0.hand = (List<Card>) linkedList0;
      // Undeclared exception!
      try { 
        player0.checkTypeAction(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         assertThrownBy("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player("8;hZ'u[#_c", (-94), (-1), (-1));
      // Undeclared exception!
      try { 
        player0.checkTypeAction((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Random.setNextRandom(953);
      Player player0 = new Player("", 953, 953, 0);
      // Undeclared exception!
      try { 
        player0.buildDeck();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player("", (-2), (-2), (-2));
      DominionBoard dominionBoard0 = new DominionBoard();
      // Undeclared exception!
      try { 
        player0.activateCard((Card) null, dominionBoard0, player0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player("LKWf3o!<L}", 1677, 1, (-379));
      player0.setActions((-1));
      assertEquals(1, player0.getBuys());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player("\nAdding silver to top of deck", 2, 2, 1521);
      player0.setCoins(1521);
      assertEquals(3042, player0.getCoins());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player("u6)K<v^}", 0, 0, 758);
      LinkedList<Card> linkedList0 = player0.deck;
      linkedList0.add((Card) null);
      player0.discard = (List<Card>) linkedList0;
      // Undeclared exception!
      try { 
        player0.cleanUp();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player((String) null, (-2144), (-2144), 163);
      List<Card> list0 = Card.addAllCards();
      player0.hand = list0;
      player0.cleanUp();
      assertEquals(163, player0.getCoins());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player(">L[3CP4`1-{`4t<yS", 7, 7, 7);
      player0.buildDeck();
      int int0 = player0.checkVictory();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Player player0 = new Player("", 953, 953, 0);
      int int0 = player0.checkVictory();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player("Chancellor", (-1006), (-1006), (-1435));
      List<Card> list0 = Card.addAllCards();
      Card.CardName card_CardName0 = Card.CardName.Village;
      Card card0 = Card.getCard(list0, card_CardName0);
      // Undeclared exception!
      try { 
        player0.activateCard(card0, (DominionBoard) null, player0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player("uxv[9", 2657, 0, 2657);
      List<Card> list0 = Card.addAllCards();
      Card.CardName card_CardName0 = Card.CardName.Market;
      Card card0 = Card.getCard(list0, card_CardName0);
      // Undeclared exception!
      try { 
        player0.activateCard(card0, (DominionBoard) null, player0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player("uxv[9", 2657, 0, 2657);
      List<Card> list0 = Card.addAllCards();
      Card.CardName card_CardName0 = Card.CardName.Smithy;
      Card card0 = Card.getCard(list0, card_CardName0);
      // Undeclared exception!
      try { 
        player0.activateCard(card0, (DominionBoard) null, player0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Player player0 = new Player("Chancellor", (-1006), (-1006), (-1435));
      List<Card> list0 = Card.addAllCards();
      Card.CardName card_CardName0 = Card.CardName.Library;
      Card card0 = Card.getCard(list0, card_CardName0);
      // Undeclared exception!
      try { 
        player0.activateCard(card0, (DominionBoard) null, player0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Player player0 = new Player("WwFT`b", 3106, 44, 948);
      List<Card> list0 = Card.addAllCards();
      Card.CardName card_CardName0 = Card.CardName.Feast;
      Card card0 = Card.getCard(list0, card_CardName0);
      DominionBoard dominionBoard0 = new DominionBoard();
      dominionBoard0.initialize();
      // Undeclared exception!
      try { 
        player0.activateCard(card0, dominionBoard0, player0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = new Player("8%%X)D)", 89, 8, 8);
      List<Card> list0 = Card.addAllCards();
      Card.CardName card_CardName0 = Card.CardName.Council_Room;
      Card card0 = Card.getCard(list0, card_CardName0);
      DominionBoard dominionBoard0 = new DominionBoard();
      // Undeclared exception!
      try { 
        player0.activateCard(card0, dominionBoard0, player0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player("8%%X)D)", 89, 8, 8);
      List<Card> list0 = Card.addAllCards();
      Card.CardName card_CardName0 = Card.CardName.Cooper;
      Card card0 = Card.getCard(list0, card_CardName0);
      DominionBoard dominionBoard0 = new DominionBoard();
      // Undeclared exception!
      try { 
        player0.activateCard(card0, dominionBoard0, player0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Player player0 = new Player("\nAdding silver to top of deck", 2, 2, 1521);
      List<Card> list0 = Card.addAllCards();
      player0.buildDeck();
      Card.CardName card_CardName0 = Card.CardName.Chancellor;
      Card card0 = Card.getCard(list0, card_CardName0);
      // Undeclared exception!
      try { 
        player0.activateCard(card0, (DominionBoard) null, player0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Player player0 = new Player("", 309, 309, 309);
      List<Card> list0 = Card.addAllCards();
      Card.CardName card_CardName0 = Card.CardName.Chapel;
      Card card0 = Card.getCard(list0, card_CardName0);
      DominionBoard dominionBoard0 = new DominionBoard();
      // Undeclared exception!
      try { 
        player0.activateCard(card0, dominionBoard0, player0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Player player0 = new Player("WwFT`b", 3106, 44, 948);
      List<Card> list0 = Card.addAllCards();
      Card.CardName card_CardName0 = Card.CardName.Cellar;
      Card card0 = Card.getCard(list0, card_CardName0);
      DominionBoard dominionBoard0 = new DominionBoard();
      // Undeclared exception!
      try { 
        player0.activateCard(card0, dominionBoard0, player0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Player player0 = new Player("WwFT`b", 3106, 3106, 3106);
      List<Card> list0 = Card.addAllCards();
      Card.CardName card_CardName0 = Card.CardName.Bureaucrat;
      Card card0 = Card.getCard(list0, card_CardName0);
      DominionBoard dominionBoard0 = new DominionBoard();
      player0.hand = list0;
      // Undeclared exception!
      try { 
        player0.activateCard(card0, dominionBoard0, player0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Player player0 = new Player("WwFT`b", 3106, 44, 948);
      List<Card> list0 = Card.addAllCards();
      Card.CardName card_CardName0 = Card.CardName.Bureaucrat;
      Card card0 = Card.getCard(list0, card_CardName0);
      DominionBoard dominionBoard0 = new DominionBoard();
      dominionBoard0.initialize();
      // Undeclared exception!
      try { 
        player0.activateCard(card0, dominionBoard0, player0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Player player0 = new Player("u2hWJN", 4, 1918, 1918);
      List<Card> list0 = Card.addAllCards();
      player0.discard = list0;
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Card card0 = Card.getCard(player0.discard, card_CardName0);
      // Undeclared exception!
      try { 
        player0.activateCard(card0, (DominionBoard) null, (Player) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Player player0 = new Player("Millisecond", (-1), (-1), 19);
      List<Card> list0 = Card.addAllCards();
      Card.CardName card_CardName0 = Card.CardName.Laboratory;
      Card card0 = Card.getCard(list0, card_CardName0);
      player0.buildDeck();
      DominionBoard dominionBoard0 = new DominionBoard();
      // Undeclared exception!
      try { 
        player0.activateCard(card0, dominionBoard0, player0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Player player0 = new Player(">L[3CP4`1-{`4t<yS", 7, 7, 7);
      player0.buildDeck();
      player0.drawCard();
      player0.removeHand();
      assertEquals(7, player0.getBuys());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Player player0 = new Player("", 19, 19, 400);
      Stack<Card> stack0 = new Stack<Card>();
      player0.hand = (List<Card>) stack0;
      stack0.add((Card) null);
      // Undeclared exception!
      try { 
        player0.checkTreasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Player player0 = new Player("Garden", (-62), (-62), (-62));
      int int0 = player0.checkTreasure();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Player player0 = new Player(">L[3CP4`1-{`4t<yS", 7, 7, 7);
      player0.buildDeck();
      LinkedList<Card> linkedList0 = player0.deck;
      player0.hand = (List<Card>) linkedList0;
      int int0 = player0.checkTypeAction(3);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Player player0 = new Player("Millisecond", (-1), (-1), 19);
      List<Card> list0 = Card.addAllCards();
      Card.CardName card_CardName0 = Card.CardName.Laboratory;
      Card card0 = Card.getCard(list0, card_CardName0);
      DominionBoard dominionBoard0 = new DominionBoard();
      player0.discard = list0;
      // Undeclared exception!
      try { 
        player0.activateCard(card0, dominionBoard0, player0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Player player0 = new Player("", 77, (-1), 0);
      player0.drawCard();
      assertEquals(77, player0.getActions());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Player player0 = new Player(">L[3CP4`1-{`4t<yS", 7, 7, 7);
      player0.buildDeck();
      player0.drawCard();
      player0.printHand();
      assertEquals(7, player0.getBuys());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Player player0 = new Player("", 3898, 3898, (-1272));
      int int0 = player0.getCoins();
      assertEquals((-1272), int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Player player0 = new Player("", 19, 19, 400);
      int int0 = player0.getActions();
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Player player0 = new Player("Millisecond", (-1), (-1), 19);
      List<Card> list0 = Card.addAllCards();
      Card.CardName card_CardName0 = Card.CardName.Laboratory;
      Card card0 = Card.getCard(list0, card_CardName0);
      DominionBoard dominionBoard0 = new DominionBoard();
      // Undeclared exception!
      try { 
        player0.activateCard(card0, dominionBoard0, player0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
      
      assertEquals(0, card0.getTreasureValue());
  }
}
