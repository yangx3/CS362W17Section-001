/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 22 23:54:48 GMT 2017
 */

package org.cs362.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import org.cs362.dominion.Card;
import org.cs362.dominion.Deck;
import org.cs362.dominion.Randomness;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Deck_ESTest extends Deck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Deck deck0 = new Deck();
      deck0.add((Card) null);
      deck0.take();
      assertEquals(0, deck0.embargo());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Card card0 = Card.CURSE;
      Deck deck0 = new Deck(card0, (-780));
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      linkedList0.add(card0);
      deck0.add((List<Card>) linkedList0);
      deck0.take();
      assertEquals(0, deck0.embargo());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Card card0 = Card.COPPER;
      Deck deck0 = new Deck(card0, 59);
      deck0.take();
      assertEquals(58, deck0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Deck deck0 = new Deck();
      Card card0 = Card.GREAT_HALL;
      deck0.add(card0);
      deck0.take();
      assertEquals(0, deck0.embargo());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Card card0 = Card.BARON;
      Deck deck0 = new Deck(card0, 0);
      LinkedList<Card> linkedList0 = deck0.getCards();
      linkedList0.add(card0);
      int int0 = deck0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Card card0 = Card.CURSE;
      Deck deck0 = new Deck(card0, (-780));
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      linkedList0.add(card0);
      deck0.add((List<Card>) linkedList0);
      deck0.peek();
      assertEquals(1, deck0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Card card0 = Card.BARON;
      Deck deck0 = new Deck(card0, 0);
      Card card1 = Card.COPPER;
      deck0.add(card1);
      deck0.peek();
      assertEquals(1, deck0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Card card0 = Card.GREAT_HALL;
      Deck deck0 = new Deck(card0, 31);
      deck0.peek();
      assertEquals(31, deck0.size());
      assertEquals(0, deck0.embargo());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Card card0 = Card.BARON;
      Deck deck0 = new Deck(card0, 0);
      LinkedList<Card> linkedList0 = deck0.getCards();
      linkedList0.add(card0);
      deck0.getCards();
      assertEquals(1, deck0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Deck deck0 = new Deck();
      deck0.addEmbargo();
      int int0 = deck0.embargo();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Randomness.random = null;
      Card card0 = Card.SEA_HAG;
      Deck deck0 = new Deck(card0, 464);
      // Undeclared exception!
      try { 
        deck0.shuffle();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Card card0 = Card.REMODEL;
      Deck deck0 = null;
      try {
        deck0 = new Deck(card0, 1000000000);
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Deck deck0 = new Deck();
      // Undeclared exception!
      try { 
        deck0.add((List<Card>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Card card0 = Card.CURSE;
      Deck deck0 = new Deck(card0, (-780));
      int int0 = deck0.embargo();
      assertEquals(0, int0);
      assertEquals(0, deck0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Card card0 = Card.SEA_HAG;
      Deck deck0 = new Deck(card0, 464);
      deck0.shuffle();
      assertEquals(0, deck0.embargo());
      assertEquals(464, deck0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Card card0 = Card.BARON;
      Deck deck0 = new Deck(card0, 0);
      deck0.peek();
      assertEquals(0, deck0.embargo());
      assertEquals(0, deck0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Card card0 = Card.BARON;
      Deck deck0 = new Deck(card0, 0);
      // Undeclared exception!
      try { 
        deck0.take();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Card card0 = Card.BARON;
      Deck deck0 = new Deck(card0, 0);
      int int0 = deck0.size();
      assertEquals(0, deck0.embargo());
      assertEquals(0, int0);
  }
}
