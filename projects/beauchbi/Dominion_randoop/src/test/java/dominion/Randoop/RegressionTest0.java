package dominion.Randoop;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test001"); }

    dominion.Card.CardName cardName0 = dominion.Card.CardName.Adventurer;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + dominion.Card.CardName.Adventurer + "'", cardName0.equals(dominion.Card.CardName.Adventurer));

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test002"); }

    dominion.Card.CardName cardName0 = dominion.Card.CardName.Silver;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + dominion.Card.CardName.Silver + "'", cardName0.equals(dominion.Card.CardName.Silver));

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test003"); }

    java.lang.Iterable<dominion.Card> iterable_card0 = null;
    dominion.Card.Type type1 = dominion.Card.Type.ACTION;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<dominion.Card> list_card2 = dominion.Card.filter(iterable_card0, type1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + type1 + "' != '" + dominion.Card.Type.ACTION + "'", type1.equals(dominion.Card.Type.ACTION));

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test004"); }

    dominion.Card.CardName cardName0 = dominion.Card.CardName.Mine;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + dominion.Card.CardName.Mine + "'", cardName0.equals(dominion.Card.CardName.Mine));

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test005"); }

    dominion.Card.CardName cardName0 = dominion.Card.CardName.Duchy;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + dominion.Card.CardName.Duchy + "'", cardName0.equals(dominion.Card.CardName.Duchy));

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test006"); }

    dominion.Card.CardName cardName0 = dominion.Card.CardName.Estate;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + dominion.Card.CardName.Estate + "'", cardName0.equals(dominion.Card.CardName.Estate));

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test007"); }

    dominion.Card.CardName cardName0 = dominion.Card.CardName.Village;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + dominion.Card.CardName.Village + "'", cardName0.equals(dominion.Card.CardName.Village));

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test008"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    dominion.GameState gameState5 = null;
    player2.buyCard(gameState5);
    dominion.GameState gameState7 = null;
    player2.buyCard(gameState7);

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test009"); }

    dominion.Card.CardName cardName0 = dominion.Card.CardName.Council_Room;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + dominion.Card.CardName.Council_Room + "'", cardName0.equals(dominion.Card.CardName.Council_Room));

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test010"); }

    dominion.Card.CardName cardName0 = dominion.Card.CardName.Copper;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + dominion.Card.CardName.Copper + "'", cardName0.equals(dominion.Card.CardName.Copper));

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test011"); }

    dominion.Card.CardName cardName0 = dominion.Card.CardName.Embargo;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + dominion.Card.CardName.Embargo + "'", cardName0.equals(dominion.Card.CardName.Embargo));

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test012"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    // The following exception was thrown during execution in test generation
    try {
    player2.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test013"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.lang.String str19 = gameState6.toString();
    gameState6.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str19.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test014"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i6 = gameState5.play();
    java.util.List<dominion.Player> list_player7 = gameState5.players;
    gameState5.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test015"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "hi!");
    dominion.Card card20 = null;
    player19.addHand(card20);
    player19.playKingdomCard();
    dominion.Card card23 = null;
    player19.discard(card23);
    player19.playTtreasureCard();
    dominion.Card card26 = null;
    player19.discard(card26);
    gameState6.addPlayer(player19);
    dominion.Card[] card_array29 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card30 = new java.util.ArrayList<dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card30, card_array29);
    dominion.Card.CardName cardName32 = dominion.Card.CardName.Smithy;
    dominion.Card card33 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card30, cardName32);
    dominion.GameState gameState34 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i36 = gameState35.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i37 = gameState35.play();
    dominion.GameState gameState38 = null;
    dominion.Player player40 = new dominion.Player(gameState38, "hi!");
    dominion.Card card41 = null;
    player40.addHand(card41);
    player40.playKingdomCard();
    player40.playKingdomCard();
    gameState35.addPlayer(player40);
    boolean b46 = gameState35.isGameOver();
    gameState35.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i48 = gameState35.gameBoard;
    gameState6.gameBoard = hashmap_card_i48;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName32.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i48);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test016"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    dominion.GameState gameState5 = null;
    player2.buyCard(gameState5);
    java.lang.String str7 = player2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test017"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    // The following exception was thrown during execution in test generation
    try {
    player2.playTtreasureCard();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test018"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState15.gameBoard;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState15.getWinners();
    java.util.List<dominion.Card> list_card21 = gameState15.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test019"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    // The following exception was thrown during execution in test generation
    try {
    player2.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test020"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState6.gameBoard;
    java.util.List<dominion.Card> list_card20 = gameState6.cards;
    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState6.play();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test021"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    player2.playKingdomCard();
    java.lang.String str7 = player2.toString();
    java.util.List<dominion.Card> list_card8 = dominion.Card.createCards();
    dominion.GameState gameState9 = new dominion.GameState(list_card8);
    dominion.GameState gameState10 = gameState9.clone();
    player2.buyCard(gameState9);
    dominion.GameState gameState12 = null;
    player2.buyCard(gameState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test022"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playTtreasureCard();
    dominion.Card card9 = null;
    player2.discard(card9);
    dominion.Card card11 = null;
    player2.addHand(card11);
    // The following exception was thrown during execution in test generation
    try {
    player2.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test023"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.GameState gameState1 = new dominion.GameState(list_card0);
    dominion.Card.CardName cardName2 = dominion.Card.CardName.Smithy;
    dominion.Card card3 = dominion.Card.getCard(list_card0, cardName2);
    dominion.GameState gameState4 = null;
    dominion.Player player6 = new dominion.Player(gameState4, "");
    dominion.Card card7 = null;
    player6.addHand(card7);
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i16 = gameState15.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState15.play();
    dominion.GameState gameState18 = null;
    dominion.Player player20 = new dominion.Player(gameState18, "hi!");
    dominion.Card card21 = null;
    player20.addHand(card21);
    player20.playKingdomCard();
    player20.playKingdomCard();
    gameState15.addPlayer(player20);
    java.util.List<dominion.Player> list_player26 = gameState15.players;
    dominion.GameState gameState27 = gameState15.clone();
    // The following exception was thrown during execution in test generation
    try {
    card3.play(player6, gameState15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName2.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState27);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test024"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "hi!");
    dominion.Card card20 = null;
    player19.addHand(card20);
    player19.playKingdomCard();
    dominion.Card card23 = null;
    player19.discard(card23);
    player19.playTtreasureCard();
    dominion.Card card26 = null;
    player19.discard(card26);
    gameState6.addPlayer(player19);
    java.util.List<dominion.Card> list_card29 = dominion.Card.createCards();
    dominion.GameState gameState30 = new dominion.GameState(list_card29);
    dominion.Card.CardName cardName31 = dominion.Card.CardName.Smithy;
    dominion.Card card32 = dominion.Card.getCard(list_card29, cardName31);
    java.lang.String str33 = card32.toString();
    dominion.Card.CardName cardName34 = card32.getCardName();
    player19.discard(card32);
    dominion.Card[] card_array36 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card37 = new java.util.ArrayList<dominion.Card>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card37, card_array36);
    dominion.Card.CardName cardName39 = dominion.Card.CardName.Smithy;
    dominion.Card card40 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card37, cardName39);
    dominion.GameState gameState41 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card37);
    dominion.GameState gameState42 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card37);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i43 = gameState42.play();
    dominion.Player player45 = new dominion.Player(gameState42, "hi!");
    dominion.Player player47 = new dominion.Player(gameState42, "hi!");
    dominion.GameState gameState48 = null;
    dominion.Player player50 = new dominion.Player(gameState48, "hi!");
    dominion.Card card51 = null;
    player50.addHand(card51);
    player50.playKingdomCard();
    dominion.Card card54 = null;
    player50.discard(card54);
    player50.playKingdomCard();
    dominion.Card[] card_array57 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card58 = new java.util.ArrayList<dominion.Card>();
    boolean b59 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card58, card_array57);
    dominion.Card.CardName cardName60 = dominion.Card.CardName.Smithy;
    dominion.Card card61 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card58, cardName60);
    dominion.GameState gameState62 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card58);
    dominion.GameState gameState63 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card58);
    dominion.Player player65 = new dominion.Player(gameState63, "");
    player50.buyCard(gameState63);
    gameState63.initializeGame();
    // The following exception was thrown during execution in test generation
    try {
    card32.play(player47, gameState63);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName31.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + " \n\tSmithy"+ "'", str33.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName34.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName39.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName60.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card61);

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test025"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.Card[] card_array1 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card2 = new java.util.ArrayList<dominion.Card>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card2, card_array1);
    dominion.Card.CardName cardName4 = dominion.Card.CardName.Smithy;
    dominion.Card card5 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card2, cardName4);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card2);
    dominion.Card.Type type7 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card8 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card2, type7);
    java.util.List<dominion.Card> list_card9 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card0, type7);
    dominion.Card.Type type10 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card11 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card9, type10);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Feast;
    dominion.Card card13 = dominion.Card.getCard(list_card11, cardName12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + cardName4 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName4.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card5);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + dominion.Card.Type.TREASURE + "'", type7.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    org.junit.Assert.assertTrue("'" + type10 + "' != '" + dominion.Card.Type.VICTORY + "'", type10.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Feast + "'", cardName12.equals(dominion.Card.CardName.Feast));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test026"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    java.lang.String str5 = player2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str5.equals(" --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test027"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    java.util.List<dominion.Player> list_player9 = gameState6.players;
    dominion.GameState gameState10 = null;
    dominion.Player player12 = new dominion.Player(gameState10, "hi!");
    dominion.Card card13 = null;
    player12.addHand(card13);
    player12.playKingdomCard();
    dominion.Card card16 = null;
    player12.discard(card16);
    gameState6.addPlayer(player12);
    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i19 = gameState6.play();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test028"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.GameState gameState1 = new dominion.GameState(list_card0);
    dominion.GameState gameState2 = gameState1.clone();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i3 = gameState2.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i3);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test029"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.Player player10 = new dominion.Player(gameState6, " --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.lang.String str11 = gameState6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str11.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test030"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState6.gameBoard;
    java.util.List<dominion.Player> list_player20 = gameState6.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player20);

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test031"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.GameState gameState1 = new dominion.GameState(list_card0);
    dominion.GameState gameState2 = null;
    dominion.Player player4 = new dominion.Player(gameState2, "hi!");
    dominion.Card card5 = null;
    player4.addHand(card5);
    player4.playKingdomCard();
    dominion.Card card8 = null;
    player4.discard(card8);
    gameState1.addPlayer(player4);
    java.util.List<dominion.Card> list_card11 = dominion.Card.createCards();
    dominion.GameState gameState12 = new dominion.GameState(list_card11);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Smithy;
    dominion.Card card14 = dominion.Card.getCard(list_card11, cardName13);
    java.lang.String str15 = card14.toString();
    player4.addHand(card14);
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "hi!");
    dominion.Card card20 = null;
    player19.addHand(card20);
    player19.playKingdomCard();
    dominion.Card card23 = null;
    player19.discard(card23);
    player19.playTtreasureCard();
    dominion.Card card26 = null;
    player19.discard(card26);
    dominion.Card card28 = null;
    player19.addHand(card28);
    java.util.List<dominion.Card> list_card30 = dominion.Card.createCards();
    dominion.GameState gameState31 = new dominion.GameState(list_card30);
    dominion.Card.CardName cardName32 = dominion.Card.CardName.Smithy;
    dominion.Card card33 = dominion.Card.getCard(list_card30, cardName32);
    player19.addHand(card33);
    player4.discard(card33);
    dominion.Card.CardName cardName36 = card33.getCardName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName13.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + " \n\tSmithy"+ "'", str15.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName32.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card33);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName36.equals(dominion.Card.CardName.Smithy));

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test032"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.GameState gameState1 = new dominion.GameState(list_card0);
    dominion.Card.CardName cardName2 = dominion.Card.CardName.Smithy;
    dominion.Card card3 = dominion.Card.getCard(list_card0, cardName2);
    dominion.Card.Type type4 = card3.getType();
    int i5 = card3.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName2.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    org.junit.Assert.assertTrue("'" + type4 + "' != '" + dominion.Card.Type.ACTION + "'", type4.equals(dominion.Card.Type.ACTION));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test033"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState15.gameBoard;
    dominion.GameState gameState20 = null;
    dominion.Player player22 = new dominion.Player(gameState20, "hi!");
    dominion.Card card23 = null;
    player22.addHand(card23);
    player22.playKingdomCard();
    dominion.Card card26 = null;
    player22.discard(card26);
    player22.playKingdomCard();
    dominion.Card[] card_array29 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card30 = new java.util.ArrayList<dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card30, card_array29);
    dominion.Card.CardName cardName32 = dominion.Card.CardName.Smithy;
    dominion.Card card33 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card30, cardName32);
    dominion.GameState gameState34 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.Player player37 = new dominion.Player(gameState35, "");
    player22.buyCard(gameState35);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i39 = gameState35.gameBoard;
    gameState15.gameBoard = hashmap_card_i39;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName32.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i39);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test034"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player8 = new dominion.Player(gameState6, "");
    dominion.Player player10 = new dominion.Player(gameState6, "The board game is embty you need to intialize the game!!!!");
    java.lang.String str11 = player10.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + " --- The board game is embty you need to intialize the game!!!! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str11.equals(" --- The board game is embty you need to intialize the game!!!! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test035"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "hi!");
    dominion.Card card20 = null;
    player19.addHand(card20);
    player19.playKingdomCard();
    dominion.Card card23 = null;
    player19.discard(card23);
    player19.playTtreasureCard();
    dominion.Card card26 = null;
    player19.discard(card26);
    gameState6.addPlayer(player19);
    dominion.GameState gameState29 = gameState6.clone();
    java.lang.String str30 = gameState29.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str30.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test036"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState15.gameBoard;
    dominion.GameState gameState20 = gameState15.clone();
    java.util.List<dominion.Card> list_card21 = dominion.Card.createCards();
    dominion.GameState gameState22 = new dominion.GameState(list_card21);
    gameState20.cards = list_card21;
    dominion.Card[] card_array24 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card25 = new java.util.ArrayList<dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card25, card_array24);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Smithy;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card25);
    dominion.Card.Type type30 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card31 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card25, type30);
    gameState20.cards = arraylist_card25;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i33 = gameState20.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = gameState20.gameBoard;
    boolean b35 = gameState20.isGameOver();
    boolean b36 = gameState20.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i37 = gameState20.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName27.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + dominion.Card.Type.TREASURE + "'", type30.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i37);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test037"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    java.util.List<dominion.Card> list_card19 = gameState15.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test038"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    java.util.List<dominion.Player> list_player17 = gameState6.players;
    dominion.GameState gameState18 = gameState6.clone();
    dominion.Card[] card_array19 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card20 = new java.util.ArrayList<dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card20, card_array19);
    dominion.Card.CardName cardName22 = dominion.Card.CardName.Smithy;
    dominion.Card card23 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card20, cardName22);
    dominion.GameState gameState24 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card20);
    dominion.Card.Type type25 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card26 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card20, type25);
    gameState6.cards = arraylist_card20;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName22.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + type25 + "' != '" + dominion.Card.Type.TREASURE + "'", type25.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test039"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState6.gameBoard;
    java.util.List<dominion.Card> list_card20 = gameState6.cards;
    dominion.GameState gameState21 = new dominion.GameState(list_card20);
    java.util.List<dominion.Card> list_card22 = dominion.Card.createCards();
    dominion.GameState gameState23 = new dominion.GameState(list_card22);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Smithy;
    dominion.Card card25 = dominion.Card.getCard(list_card22, cardName24);
    dominion.Card.Type type26 = card25.getType();
    java.util.List<dominion.Card> list_card27 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card20, type26);
    dominion.GameState gameState28 = new dominion.GameState(list_card20);
    boolean b29 = gameState28.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName24.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + dominion.Card.Type.ACTION + "'", type26.equals(dominion.Card.Type.ACTION));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test040"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.GameState gameState1 = new dominion.GameState(list_card0);
    dominion.Card.CardName cardName2 = dominion.Card.CardName.Smithy;
    dominion.Card card3 = dominion.Card.getCard(list_card0, cardName2);
    java.lang.String str4 = card3.toString();
    dominion.Card.CardName cardName5 = card3.getCardName();
    java.lang.String str6 = card3.toString();
    int i7 = card3.score();
    int i8 = card3.score();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName2.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " \n\tSmithy"+ "'", str4.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName5.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " \n\tSmithy"+ "'", str6.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test041"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    java.util.List<dominion.Player> list_player9 = gameState6.players;
    dominion.GameState gameState10 = null;
    dominion.Player player12 = new dominion.Player(gameState10, "hi!");
    dominion.Card card13 = null;
    player12.addHand(card13);
    player12.playKingdomCard();
    dominion.Card card16 = null;
    player12.discard(card16);
    gameState6.addPlayer(player12);
    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i19 = gameState6.getWinners();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test042"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.GameState gameState1 = new dominion.GameState(list_card0);
    dominion.Card.CardName cardName2 = dominion.Card.CardName.Smithy;
    dominion.Card card3 = dominion.Card.getCard(list_card0, cardName2);
    dominion.Card.CardName cardName4 = card3.getCardName();
    java.lang.String str5 = card3.toString();
    dominion.Card.CardName cardName6 = card3.getCardName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName2.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    org.junit.Assert.assertTrue("'" + cardName4 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName4.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " \n\tSmithy"+ "'", str5.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName6 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName6.equals(dominion.Card.CardName.Smithy));

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test043"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState15.gameBoard;
    dominion.GameState gameState20 = gameState15.clone();
    java.util.List<dominion.Card> list_card21 = dominion.Card.createCards();
    dominion.GameState gameState22 = new dominion.GameState(list_card21);
    gameState20.cards = list_card21;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i24 = gameState20.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i24);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test044"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    dominion.Player player9 = new dominion.Player(gameState6, "hi!");
    dominion.Player player11 = new dominion.Player(gameState6, "hi!");
    dominion.GameState gameState12 = null;
    dominion.Player player14 = new dominion.Player(gameState12, "hi!");
    dominion.Card card15 = null;
    player14.addHand(card15);
    player14.playKingdomCard();
    player14.playKingdomCard();
    java.lang.String str19 = player14.toString();
    gameState6.addPlayer(player14);
    // The following exception was thrown during execution in test generation
    try {
    player14.playTtreasureCard();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str19.equals(" --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test045"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState15.gameBoard;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState15.getWinners();
    gameState15.initializeGame();
    boolean b22 = gameState15.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i23 = gameState15.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i23);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test046"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    java.lang.String str8 = player2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str8.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test047"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.Card[] card_array1 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card2 = new java.util.ArrayList<dominion.Card>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card2, card_array1);
    dominion.Card.CardName cardName4 = dominion.Card.CardName.Smithy;
    dominion.Card card5 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card2, cardName4);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card2);
    dominion.Card.Type type7 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card8 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card2, type7);
    java.util.List<dominion.Card> list_card9 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card0, type7);
    dominion.Card.Type type10 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card11 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card9, type10);
    dominion.GameState gameState12 = new dominion.GameState(list_card11);
    java.util.List<dominion.Player> list_player13 = gameState12.players;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i14 = gameState12.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + cardName4 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName4.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card5);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + dominion.Card.Type.TREASURE + "'", type7.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    org.junit.Assert.assertTrue("'" + type10 + "' != '" + dominion.Card.Type.VICTORY + "'", type10.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i14);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test048"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playTtreasureCard();
    dominion.Card card9 = null;
    player2.discard(card9);
    dominion.Card card11 = null;
    player2.addHand(card11);
    java.util.List<dominion.Card> list_card13 = dominion.Card.createCards();
    dominion.GameState gameState14 = new dominion.GameState(list_card13);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Smithy;
    dominion.Card card16 = dominion.Card.getCard(list_card13, cardName15);
    player2.addHand(card16);
    dominion.Card[] card_array18 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card19 = new java.util.ArrayList<dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card19, card_array18);
    dominion.Card.CardName cardName21 = dominion.Card.CardName.Smithy;
    dominion.Card card22 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card19, cardName21);
    dominion.GameState gameState23 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card19);
    dominion.GameState gameState24 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card19);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i25 = gameState24.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i26 = gameState24.play();
    dominion.GameState gameState27 = null;
    dominion.Player player29 = new dominion.Player(gameState27, "hi!");
    dominion.Card card30 = null;
    player29.addHand(card30);
    player29.playKingdomCard();
    player29.playKingdomCard();
    gameState24.addPlayer(player29);
    dominion.GameState gameState35 = null;
    dominion.Player player37 = new dominion.Player(gameState35, "hi!");
    dominion.Card card38 = null;
    player37.addHand(card38);
    player37.playKingdomCard();
    dominion.Card card41 = null;
    player37.discard(card41);
    player37.playTtreasureCard();
    dominion.Card card44 = null;
    player37.discard(card44);
    gameState24.addPlayer(player37);
    java.util.List<dominion.Card> list_card47 = dominion.Card.createCards();
    dominion.GameState gameState48 = new dominion.GameState(list_card47);
    dominion.Card.CardName cardName49 = dominion.Card.CardName.Smithy;
    dominion.Card card50 = dominion.Card.getCard(list_card47, cardName49);
    java.lang.String str51 = card50.toString();
    dominion.Card.CardName cardName52 = card50.getCardName();
    player37.discard(card50);
    int i54 = card50.score();
    player2.addHand(card50);
    dominion.Card[] card_array56 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card57 = new java.util.ArrayList<dominion.Card>();
    boolean b58 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card57, card_array56);
    dominion.Card.CardName cardName59 = dominion.Card.CardName.Smithy;
    dominion.Card card60 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card57, cardName59);
    dominion.GameState gameState61 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card57);
    dominion.GameState gameState62 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card57);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i63 = gameState62.play();
    dominion.Player player65 = new dominion.Player(gameState62, "hi!");
    dominion.Player player67 = new dominion.Player(gameState62, "");
    dominion.Card[] card_array68 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card69 = new java.util.ArrayList<dominion.Card>();
    boolean b70 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card69, card_array68);
    dominion.Card.CardName cardName71 = dominion.Card.CardName.Smithy;
    dominion.Card card72 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card69, cardName71);
    dominion.GameState gameState73 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card69);
    dominion.GameState gameState74 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card69);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i75 = gameState74.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i76 = gameState74.play();
    dominion.GameState gameState77 = null;
    dominion.Player player79 = new dominion.Player(gameState77, "hi!");
    dominion.Card card80 = null;
    player79.addHand(card80);
    player79.playKingdomCard();
    player79.playKingdomCard();
    gameState74.addPlayer(player79);
    boolean b85 = gameState74.isGameOver();
    gameState74.initializeGame();
    // The following exception was thrown during execution in test generation
    try {
    card50.play(player67, gameState74);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName15.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName21.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    org.junit.Assert.assertTrue("'" + cardName49 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName49.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + " \n\tSmithy"+ "'", str51.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName52.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName59.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    org.junit.Assert.assertTrue("'" + cardName71 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName71.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test049"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "hi!");
    dominion.Card card20 = null;
    player19.addHand(card20);
    player19.playKingdomCard();
    dominion.Card card23 = null;
    player19.discard(card23);
    player19.playTtreasureCard();
    dominion.Card card26 = null;
    player19.discard(card26);
    gameState6.addPlayer(player19);
    java.util.List<dominion.Card> list_card29 = dominion.Card.createCards();
    dominion.GameState gameState30 = new dominion.GameState(list_card29);
    dominion.Card.CardName cardName31 = dominion.Card.CardName.Smithy;
    dominion.Card card32 = dominion.Card.getCard(list_card29, cardName31);
    java.lang.String str33 = card32.toString();
    dominion.Card.CardName cardName34 = card32.getCardName();
    player19.discard(card32);
    int i36 = card32.score();
    dominion.Card.CardName cardName37 = card32.getCardName();
    int i38 = card32.getTreasureValue();
    java.lang.String str39 = card32.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName31.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + " \n\tSmithy"+ "'", str33.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName34.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName37.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + " \n\tSmithy"+ "'", str39.equals(" \n\tSmithy"));

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test050"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i6 = gameState5.play();
    dominion.Player player8 = new dominion.Player(gameState5, " --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.lang.String str9 = gameState5.toString();
    dominion.Player player11 = new dominion.Player(gameState5, "");
    java.util.List<dominion.Card> list_card12 = gameState5.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str9.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test051"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    dominion.Player player9 = new dominion.Player(gameState6, "hi!");
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState6.gameBoard;
    dominion.GameState gameState11 = null;
    dominion.Player player13 = new dominion.Player(gameState11, "hi!");
    dominion.Card card14 = null;
    player13.addHand(card14);
    player13.playKingdomCard();
    dominion.Card card17 = null;
    player13.discard(card17);
    player13.playKingdomCard();
    dominion.Card[] card_array20 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card21 = new java.util.ArrayList<dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card21, card_array20);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Smithy;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName23);
    dominion.GameState gameState25 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    dominion.Player player28 = new dominion.Player(gameState26, "");
    player13.buyCard(gameState26);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i30 = gameState26.gameBoard;
    dominion.GameState gameState31 = gameState26.clone();
    java.util.List<dominion.Card> list_card32 = dominion.Card.createCards();
    dominion.GameState gameState33 = new dominion.GameState(list_card32);
    gameState31.cards = list_card32;
    dominion.Card[] card_array35 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card36 = new java.util.ArrayList<dominion.Card>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card36, card_array35);
    dominion.Card.CardName cardName38 = dominion.Card.CardName.Smithy;
    dominion.Card card39 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card36, cardName38);
    dominion.GameState gameState40 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card36);
    dominion.Card.Type type41 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card42 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card36, type41);
    gameState31.cards = arraylist_card36;
    dominion.Player player45 = new dominion.Player(gameState31, "The board game is embty you need to intialize the game!!!!");
    gameState6.addPlayer(player45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName23.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName38.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card39);
    org.junit.Assert.assertTrue("'" + type41 + "' != '" + dominion.Card.Type.TREASURE + "'", type41.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test052"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playTtreasureCard();
    dominion.Card card9 = null;
    player2.discard(card9);
    dominion.Card card11 = null;
    player2.addHand(card11);
    java.util.List<dominion.Card> list_card13 = dominion.Card.createCards();
    dominion.GameState gameState14 = new dominion.GameState(list_card13);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Smithy;
    dominion.Card card16 = dominion.Card.getCard(list_card13, cardName15);
    player2.addHand(card16);
    dominion.Card[] card_array18 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card19 = new java.util.ArrayList<dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card19, card_array18);
    dominion.Card.CardName cardName21 = dominion.Card.CardName.Smithy;
    dominion.Card card22 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card19, cardName21);
    dominion.GameState gameState23 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card19);
    dominion.GameState gameState24 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card19);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i25 = gameState24.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i26 = gameState24.play();
    dominion.GameState gameState27 = null;
    dominion.Player player29 = new dominion.Player(gameState27, "hi!");
    dominion.Card card30 = null;
    player29.addHand(card30);
    player29.playKingdomCard();
    player29.playKingdomCard();
    gameState24.addPlayer(player29);
    dominion.GameState gameState35 = null;
    dominion.Player player37 = new dominion.Player(gameState35, "hi!");
    dominion.Card card38 = null;
    player37.addHand(card38);
    player37.playKingdomCard();
    dominion.Card card41 = null;
    player37.discard(card41);
    player37.playTtreasureCard();
    dominion.Card card44 = null;
    player37.discard(card44);
    gameState24.addPlayer(player37);
    java.util.List<dominion.Card> list_card47 = dominion.Card.createCards();
    dominion.GameState gameState48 = new dominion.GameState(list_card47);
    dominion.Card.CardName cardName49 = dominion.Card.CardName.Smithy;
    dominion.Card card50 = dominion.Card.getCard(list_card47, cardName49);
    java.lang.String str51 = card50.toString();
    dominion.Card.CardName cardName52 = card50.getCardName();
    player37.discard(card50);
    int i54 = card50.score();
    player2.addHand(card50);
    // The following exception was thrown during execution in test generation
    try {
    player2.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName15.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName21.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    org.junit.Assert.assertTrue("'" + cardName49 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName49.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + " \n\tSmithy"+ "'", str51.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName52.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test053"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    player2.playKingdomCard();
    dominion.GameState gameState7 = null;
    player2.buyCard(gameState7);
    // The following exception was thrown during execution in test generation
    try {
    player2.playTtreasureCard();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test054"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    dominion.Player player9 = new dominion.Player(gameState6, "hi!");
    dominion.Player player11 = new dominion.Player(gameState6, "hi!");
    boolean b12 = gameState6.isGameOver();
    java.util.List<dominion.Card> list_card13 = gameState6.cards;
    dominion.GameState gameState14 = gameState6.clone();
    boolean b15 = gameState6.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test055"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.lang.String str19 = gameState6.toString();
    dominion.GameState gameState20 = null;
    dominion.Player player22 = new dominion.Player(gameState20, "hi!");
    dominion.Card card23 = null;
    player22.addHand(card23);
    player22.playKingdomCard();
    dominion.Card card26 = null;
    player22.discard(card26);
    player22.playKingdomCard();
    dominion.Card[] card_array29 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card30 = new java.util.ArrayList<dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card30, card_array29);
    dominion.Card.CardName cardName32 = dominion.Card.CardName.Smithy;
    dominion.Card card33 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card30, cardName32);
    dominion.GameState gameState34 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.Player player37 = new dominion.Player(gameState35, "");
    player22.buyCard(gameState35);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i39 = gameState35.gameBoard;
    dominion.GameState gameState40 = gameState35.clone();
    java.util.List<dominion.Card> list_card41 = dominion.Card.createCards();
    dominion.GameState gameState42 = new dominion.GameState(list_card41);
    gameState40.cards = list_card41;
    gameState6.cards = list_card41;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i45 = gameState6.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str19.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName32.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i45);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test056"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    dominion.Player player9 = new dominion.Player(gameState6, "hi!");
    dominion.Player player11 = new dominion.Player(gameState6, "hi!");
    boolean b12 = gameState6.isGameOver();
    java.util.List<dominion.Card> list_card13 = gameState6.cards;
    gameState6.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test057"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    dominion.Player player9 = new dominion.Player(gameState6, "hi!");
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i10 = gameState6.gameBoard;
    java.lang.String str11 = gameState6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str11.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test058"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.lang.String str19 = gameState6.toString();
    dominion.Card[] card_array20 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card21 = new java.util.ArrayList<dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card21, card_array20);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Smithy;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName23);
    dominion.GameState gameState25 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i27 = gameState26.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i28 = gameState26.play();
    dominion.GameState gameState29 = null;
    dominion.Player player31 = new dominion.Player(gameState29, "hi!");
    dominion.Card card32 = null;
    player31.addHand(card32);
    player31.playKingdomCard();
    player31.playKingdomCard();
    gameState26.addPlayer(player31);
    boolean b37 = gameState26.isGameOver();
    gameState26.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i39 = gameState26.gameBoard;
    java.util.List<dominion.Card> list_card40 = gameState26.cards;
    dominion.Card.CardName cardName41 = dominion.Card.CardName.Minion;
    dominion.Card card42 = dominion.Card.getCard(list_card40, cardName41);
    gameState6.cards = list_card40;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str19.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName23.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    org.junit.Assert.assertTrue("'" + cardName41 + "' != '" + dominion.Card.CardName.Minion + "'", cardName41.equals(dominion.Card.CardName.Minion));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card42);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test059"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState6.gameBoard;
    java.util.List<dominion.Card> list_card20 = gameState6.cards;
    dominion.GameState gameState21 = null;
    dominion.Player player23 = new dominion.Player(gameState21, "hi!");
    dominion.Card card24 = null;
    player23.addHand(card24);
    player23.playKingdomCard();
    dominion.Card card27 = null;
    player23.discard(card27);
    player23.playKingdomCard();
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Smithy;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card31);
    dominion.GameState gameState36 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card31);
    dominion.Player player38 = new dominion.Player(gameState36, "");
    player23.buyCard(gameState36);
    gameState36.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i41 = gameState36.play();
    dominion.Card[] card_array42 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card43 = new java.util.ArrayList<dominion.Card>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card43, card_array42);
    dominion.Card.CardName cardName45 = dominion.Card.CardName.Smithy;
    dominion.Card card46 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card43, cardName45);
    dominion.GameState gameState47 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card43);
    dominion.GameState gameState48 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card43);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i49 = gameState48.play();
    java.util.List<dominion.Player> list_player50 = gameState48.players;
    gameState36.players = list_player50;
    gameState6.players = list_player50;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName33.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    org.junit.Assert.assertTrue("'" + cardName45 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName45.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player50);

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test060"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playTtreasureCard();
    player2.playKingdomCard();
    dominion.Card card10 = null;
    player2.discard(card10);
    java.util.List<dominion.Card> list_card12 = dominion.Card.createCards();
    dominion.GameState gameState13 = new dominion.GameState(list_card12);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Smithy;
    dominion.Card card15 = dominion.Card.getCard(list_card12, cardName14);
    dominion.Card.CardName cardName16 = card15.getCardName();
    java.lang.String str17 = card15.toString();
    player2.discard(card15);
    java.lang.String str19 = player2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName14.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName16.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + " \n\tSmithy"+ "'", str17.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null, null,  \n\tSmithy]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str19.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null, null,  \n\tSmithy]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test061"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.lang.String str19 = gameState6.toString();
    dominion.GameState gameState20 = null;
    dominion.Player player22 = new dominion.Player(gameState20, "hi!");
    dominion.Card card23 = null;
    player22.addHand(card23);
    player22.playKingdomCard();
    dominion.Card card26 = null;
    player22.discard(card26);
    player22.playKingdomCard();
    dominion.Card[] card_array29 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card30 = new java.util.ArrayList<dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card30, card_array29);
    dominion.Card.CardName cardName32 = dominion.Card.CardName.Smithy;
    dominion.Card card33 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card30, cardName32);
    dominion.GameState gameState34 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.Player player37 = new dominion.Player(gameState35, "");
    player22.buyCard(gameState35);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i39 = gameState35.gameBoard;
    dominion.GameState gameState40 = gameState35.clone();
    java.util.List<dominion.Card> list_card41 = dominion.Card.createCards();
    dominion.GameState gameState42 = new dominion.GameState(list_card41);
    gameState40.cards = list_card41;
    gameState6.cards = list_card41;
    dominion.Card[] card_array45 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card46 = new java.util.ArrayList<dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card46, card_array45);
    dominion.Card.CardName cardName48 = dominion.Card.CardName.Smithy;
    dominion.Card card49 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card46, cardName48);
    dominion.GameState gameState50 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card46);
    dominion.Card.Type type51 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card52 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card46, type51);
    java.util.List<dominion.Card> list_card53 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card41, type51);
    dominion.Card.CardName cardName54 = dominion.Card.CardName.Ambassador;
    dominion.Card card55 = dominion.Card.getCard(list_card41, cardName54);
    dominion.Card.CardName cardName56 = dominion.Card.CardName.Baron;
    boolean b57 = card55.equals((java.lang.Object)cardName56);
    int i58 = card55.score();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str19.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName32.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName48.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card49);
    org.junit.Assert.assertTrue("'" + type51 + "' != '" + dominion.Card.Type.TREASURE + "'", type51.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + dominion.Card.CardName.Ambassador + "'", cardName54.equals(dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card55);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + dominion.Card.CardName.Baron + "'", cardName56.equals(dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test062"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    gameState15.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState15.getWinners();
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Smithy;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i27 = gameState26.play();
    dominion.Player player29 = new dominion.Player(gameState26, " --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    gameState15.addPlayer(player29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName24.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i27);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test063"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    player2.playKingdomCard();
    java.util.List<dominion.Card> list_card7 = dominion.Card.createCards();
    dominion.GameState gameState8 = new dominion.GameState(list_card7);
    dominion.Card.CardName cardName9 = dominion.Card.CardName.Smithy;
    dominion.Card card10 = dominion.Card.getCard(list_card7, cardName9);
    dominion.Card.CardName cardName11 = card10.getCardName();
    player2.discard(card10);
    // The following exception was thrown during execution in test generation
    try {
    player2.playTtreasureCard();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName9.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card10);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName11.equals(dominion.Card.CardName.Smithy));

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test064"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState15.gameBoard;
    dominion.GameState gameState20 = gameState15.clone();
    java.util.List<dominion.Card> list_card21 = dominion.Card.createCards();
    dominion.GameState gameState22 = new dominion.GameState(list_card21);
    gameState20.cards = list_card21;
    dominion.Card[] card_array24 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card25 = new java.util.ArrayList<dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card25, card_array24);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Smithy;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card25);
    dominion.Card.Type type30 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card31 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card25, type30);
    gameState20.cards = arraylist_card25;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i33 = gameState20.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = gameState20.gameBoard;
    java.util.List<dominion.Card> list_card35 = dominion.Card.createCards();
    dominion.Card[] card_array36 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card37 = new java.util.ArrayList<dominion.Card>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card37, card_array36);
    dominion.Card.CardName cardName39 = dominion.Card.CardName.Smithy;
    dominion.Card card40 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card37, cardName39);
    dominion.GameState gameState41 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card37);
    dominion.Card.Type type42 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card43 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card37, type42);
    java.util.List<dominion.Card> list_card44 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card35, type42);
    java.util.List<dominion.Card> list_card45 = dominion.Card.createCards();
    dominion.GameState gameState46 = new dominion.GameState(list_card45);
    dominion.Card.CardName cardName47 = dominion.Card.CardName.Smithy;
    dominion.Card card48 = dominion.Card.getCard(list_card45, cardName47);
    dominion.Card card49 = dominion.Card.getCard(list_card44, cardName47);
    gameState20.cards = list_card44;
    dominion.GameState gameState51 = new dominion.GameState(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName27.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + dominion.Card.Type.TREASURE + "'", type30.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName39.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);
    org.junit.Assert.assertTrue("'" + type42 + "' != '" + dominion.Card.Type.TREASURE + "'", type42.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName47.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card49);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test065"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    boolean b7 = gameState6.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test066"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "hi!");
    dominion.Card card20 = null;
    player19.addHand(card20);
    player19.playKingdomCard();
    dominion.Card card23 = null;
    player19.discard(card23);
    player19.playTtreasureCard();
    dominion.Card card26 = null;
    player19.discard(card26);
    gameState6.addPlayer(player19);
    dominion.GameState gameState29 = gameState6.clone();
    dominion.GameState gameState30 = null;
    dominion.Player player32 = new dominion.Player(gameState30, "hi!");
    dominion.Card card33 = null;
    player32.addHand(card33);
    player32.playKingdomCard();
    dominion.Card card36 = null;
    player32.discard(card36);
    player32.playKingdomCard();
    dominion.Card[] card_array39 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card40 = new java.util.ArrayList<dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card40, card_array39);
    dominion.Card.CardName cardName42 = dominion.Card.CardName.Smithy;
    dominion.Card card43 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card40, cardName42);
    dominion.GameState gameState44 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card40);
    dominion.GameState gameState45 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card40);
    dominion.Player player47 = new dominion.Player(gameState45, "");
    player32.buyCard(gameState45);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i49 = gameState45.gameBoard;
    dominion.GameState gameState50 = gameState45.clone();
    java.util.List<dominion.Card> list_card51 = dominion.Card.createCards();
    dominion.GameState gameState52 = new dominion.GameState(list_card51);
    gameState50.cards = list_card51;
    dominion.Card[] card_array54 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card55 = new java.util.ArrayList<dominion.Card>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card55, card_array54);
    dominion.Card.CardName cardName57 = dominion.Card.CardName.Smithy;
    dominion.Card card58 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card55, cardName57);
    dominion.GameState gameState59 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card55);
    dominion.Card.Type type60 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card61 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card55, type60);
    gameState50.cards = arraylist_card55;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i63 = gameState50.gameBoard;
    gameState6.gameBoard = hashmap_card_i63;
    dominion.GameState gameState65 = null;
    dominion.Player player67 = new dominion.Player(gameState65, "hi!");
    dominion.Card card68 = null;
    player67.addHand(card68);
    player67.playKingdomCard();
    dominion.Card card71 = null;
    player67.discard(card71);
    player67.playTtreasureCard();
    dominion.Card card74 = null;
    player67.addHand(card74);
    gameState6.addPlayer(player67);
    // The following exception was thrown during execution in test generation
    try {
    gameState6.initializeGame();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName42.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    org.junit.Assert.assertTrue("'" + cardName57 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName57.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card58);
    org.junit.Assert.assertTrue("'" + type60 + "' != '" + dominion.Card.Type.TREASURE + "'", type60.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i63);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test067"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.playTtreasureCard();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test068"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState15.gameBoard;
    dominion.GameState gameState20 = gameState15.clone();
    java.util.List<dominion.Card> list_card21 = dominion.Card.createCards();
    dominion.GameState gameState22 = new dominion.GameState(list_card21);
    gameState20.cards = list_card21;
    dominion.Card.Type type24 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card25 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card21, type24);
    dominion.GameState gameState26 = new dominion.GameState(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + dominion.Card.Type.VICTORY + "'", type24.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test069"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i6 = gameState5.play();
    dominion.Player player8 = new dominion.Player(gameState5, " --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.lang.String str9 = gameState5.toString();
    dominion.Player player11 = new dominion.Player(gameState5, "");
    player11.printStateGame();
    java.util.List<dominion.Card> list_card13 = dominion.Card.createCards();
    dominion.GameState gameState14 = new dominion.GameState(list_card13);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Smithy;
    dominion.Card card16 = dominion.Card.getCard(list_card13, cardName15);
    dominion.Card[] card_array17 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card18 = new java.util.ArrayList<dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card18, card_array17);
    dominion.Card.CardName cardName20 = dominion.Card.CardName.Smithy;
    dominion.Card card21 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card18, cardName20);
    dominion.GameState gameState22 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card18);
    dominion.GameState gameState23 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card18);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i24 = gameState23.play();
    java.util.List<dominion.Player> list_player25 = gameState23.players;
    boolean b26 = card16.equals((java.lang.Object)list_player25);
    int i27 = card16.getCost();
    player11.discard(card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str9.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName15.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName20.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 4);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test070"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    gameState15.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState15.play();
    dominion.GameState gameState21 = gameState15.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState21);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test071"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState15.gameBoard;
    dominion.GameState gameState20 = gameState15.clone();
    java.util.List<dominion.Card> list_card21 = dominion.Card.createCards();
    dominion.GameState gameState22 = new dominion.GameState(list_card21);
    gameState20.cards = list_card21;
    dominion.Card[] card_array24 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card25 = new java.util.ArrayList<dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card25, card_array24);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Smithy;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card25);
    dominion.GameState gameState30 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card25);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i31 = gameState30.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i32 = gameState30.play();
    dominion.GameState gameState33 = null;
    dominion.Player player35 = new dominion.Player(gameState33, "hi!");
    dominion.Card card36 = null;
    player35.addHand(card36);
    player35.playKingdomCard();
    player35.playKingdomCard();
    gameState30.addPlayer(player35);
    dominion.GameState gameState41 = null;
    dominion.Player player43 = new dominion.Player(gameState41, "hi!");
    dominion.Card card44 = null;
    player43.addHand(card44);
    player43.playKingdomCard();
    dominion.Card card47 = null;
    player43.discard(card47);
    player43.playTtreasureCard();
    dominion.Card card50 = null;
    player43.discard(card50);
    gameState30.addPlayer(player43);
    dominion.GameState gameState53 = gameState30.clone();
    dominion.GameState gameState54 = null;
    dominion.Player player56 = new dominion.Player(gameState54, "hi!");
    dominion.Card card57 = null;
    player56.addHand(card57);
    player56.playKingdomCard();
    dominion.Card card60 = null;
    player56.discard(card60);
    player56.playKingdomCard();
    dominion.Card[] card_array63 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card64 = new java.util.ArrayList<dominion.Card>();
    boolean b65 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card64, card_array63);
    dominion.Card.CardName cardName66 = dominion.Card.CardName.Smithy;
    dominion.Card card67 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card64, cardName66);
    dominion.GameState gameState68 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card64);
    dominion.GameState gameState69 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card64);
    dominion.Player player71 = new dominion.Player(gameState69, "");
    player56.buyCard(gameState69);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i73 = gameState69.gameBoard;
    dominion.GameState gameState74 = gameState69.clone();
    java.util.List<dominion.Card> list_card75 = dominion.Card.createCards();
    dominion.GameState gameState76 = new dominion.GameState(list_card75);
    gameState74.cards = list_card75;
    dominion.Card[] card_array78 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card79 = new java.util.ArrayList<dominion.Card>();
    boolean b80 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card79, card_array78);
    dominion.Card.CardName cardName81 = dominion.Card.CardName.Smithy;
    dominion.Card card82 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card79, cardName81);
    dominion.GameState gameState83 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card79);
    dominion.Card.Type type84 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card85 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card79, type84);
    gameState74.cards = arraylist_card79;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i87 = gameState74.gameBoard;
    gameState30.gameBoard = hashmap_card_i87;
    gameState20.gameBoard = hashmap_card_i87;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName27.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    org.junit.Assert.assertTrue("'" + cardName66 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName66.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    org.junit.Assert.assertTrue("'" + cardName81 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName81.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card82);
    org.junit.Assert.assertTrue("'" + type84 + "' != '" + dominion.Card.Type.TREASURE + "'", type84.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i87);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test072"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "hi!");
    dominion.Card card20 = null;
    player19.addHand(card20);
    player19.playKingdomCard();
    dominion.Card card23 = null;
    player19.discard(card23);
    player19.playTtreasureCard();
    dominion.Card card26 = null;
    player19.discard(card26);
    gameState6.addPlayer(player19);
    java.util.List<dominion.Card> list_card29 = dominion.Card.createCards();
    dominion.GameState gameState30 = new dominion.GameState(list_card29);
    dominion.Card.CardName cardName31 = dominion.Card.CardName.Smithy;
    dominion.Card card32 = dominion.Card.getCard(list_card29, cardName31);
    java.lang.String str33 = card32.toString();
    dominion.Card.CardName cardName34 = card32.getCardName();
    player19.discard(card32);
    java.util.List<dominion.Card> list_card36 = dominion.Card.createCards();
    dominion.GameState gameState37 = new dominion.GameState(list_card36);
    dominion.Card.CardName cardName38 = dominion.Card.CardName.Smithy;
    dominion.Card card39 = dominion.Card.getCard(list_card36, cardName38);
    java.lang.String str40 = card39.toString();
    int i41 = card32.compareTo(card39);
    dominion.Card.Type type42 = card32.getType();
    int i43 = card32.getTreasureValue();
    int i44 = card32.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName31.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + " \n\tSmithy"+ "'", str33.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName34.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName38.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + " \n\tSmithy"+ "'", str40.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    org.junit.Assert.assertTrue("'" + type42 + "' != '" + dominion.Card.Type.ACTION + "'", type42.equals(dominion.Card.Type.ACTION));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 4);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test073"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState15.gameBoard;
    dominion.GameState gameState20 = gameState15.clone();
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Smithy;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    dominion.GameState gameState27 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i28 = gameState27.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i29 = gameState27.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i30 = gameState27.gameBoard;
    gameState15.gameBoard = hashmap_card_i30;
    gameState15.initializeGame();
    java.lang.String str33 = gameState15.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName24.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str33.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test074"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState15.gameBoard;
    dominion.GameState gameState20 = gameState15.clone();
    java.util.List<dominion.Card> list_card21 = dominion.Card.createCards();
    dominion.GameState gameState22 = new dominion.GameState(list_card21);
    gameState20.cards = list_card21;
    dominion.Card[] card_array24 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card25 = new java.util.ArrayList<dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card25, card_array24);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Smithy;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card25);
    dominion.Card.Type type30 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card31 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card25, type30);
    gameState20.cards = arraylist_card25;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i33 = gameState20.gameBoard;
    java.lang.String str34 = gameState20.toString();
    dominion.Card[] card_array35 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card36 = new java.util.ArrayList<dominion.Card>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card36, card_array35);
    dominion.Card.CardName cardName38 = dominion.Card.CardName.Smithy;
    dominion.Card card39 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card36, cardName38);
    dominion.GameState gameState40 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card36);
    dominion.GameState gameState41 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card36);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i42 = gameState41.play();
    dominion.Player player44 = new dominion.Player(gameState41, "hi!");
    dominion.Player player46 = new dominion.Player(gameState41, "hi!");
    boolean b47 = gameState41.isGameOver();
    java.util.List<dominion.Card> list_card48 = gameState41.cards;
    gameState20.cards = list_card48;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName27.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + dominion.Card.Type.TREASURE + "'", type30.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str34.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName38.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test075"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.GameState gameState1 = new dominion.GameState(list_card0);
    boolean b2 = gameState1.isGameOver();
    dominion.Player player4 = new dominion.Player(gameState1, "");
    dominion.Card[] card_array5 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card6 = new java.util.ArrayList<dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card6, card_array5);
    dominion.Card.CardName cardName8 = dominion.Card.CardName.Smithy;
    dominion.Card card9 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card6, cardName8);
    dominion.GameState gameState10 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card6);
    dominion.GameState gameState11 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card6);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState11.play();
    dominion.Player player14 = new dominion.Player(gameState11, "hi!");
    java.lang.String str15 = gameState11.toString();
    player4.buyCard(gameState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName8.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str15.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test076"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.addHand(card6);
    java.util.List<dominion.Card> list_card8 = dominion.Card.createCards();
    dominion.GameState gameState9 = new dominion.GameState(list_card8);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Smithy;
    dominion.Card card11 = dominion.Card.getCard(list_card8, cardName10);
    java.lang.String str12 = card11.toString();
    dominion.Card.CardName cardName13 = card11.getCardName();
    java.lang.String str14 = card11.toString();
    player2.discard(card11);
    java.util.List<dominion.Card> list_card16 = dominion.Card.createCards();
    dominion.GameState gameState17 = new dominion.GameState(list_card16);
    dominion.Card.CardName cardName18 = dominion.Card.CardName.Smithy;
    dominion.Card card19 = dominion.Card.getCard(list_card16, cardName18);
    dominion.Card.CardName cardName20 = card19.getCardName();
    java.lang.String str21 = card19.toString();
    player2.addHand(card19);
    java.lang.String str23 = card19.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName10.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + " \n\tSmithy"+ "'", str12.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName13.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " \n\tSmithy"+ "'", str14.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName18.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card19);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName20.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + " \n\tSmithy"+ "'", str21.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + " \n\tSmithy"+ "'", str23.equals(" \n\tSmithy"));

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test077"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playTtreasureCard();
    dominion.Card card9 = null;
    player2.discard(card9);
    dominion.Card card11 = null;
    player2.addHand(card11);
    java.util.List<dominion.Card> list_card13 = dominion.Card.createCards();
    dominion.GameState gameState14 = new dominion.GameState(list_card13);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Smithy;
    dominion.Card card16 = dominion.Card.getCard(list_card13, cardName15);
    player2.addHand(card16);
    java.lang.String str18 = player2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName15.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: [null,  \n\tSmithy]Discard: [null, null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str18.equals(" --- hi! ---  --- --------------------------- --- Hand: [null,  \n\tSmithy]Discard: [null, null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test078"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    java.util.List<dominion.Player> list_player17 = gameState6.players;
    dominion.GameState gameState18 = gameState6.clone();
    java.util.List<dominion.Card> list_card19 = gameState6.cards;
    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState6.play();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test079"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.GameState gameState1 = new dominion.GameState(list_card0);
    dominion.GameState gameState2 = null;
    dominion.Player player4 = new dominion.Player(gameState2, "hi!");
    dominion.Card card5 = null;
    player4.addHand(card5);
    player4.playKingdomCard();
    dominion.Card card8 = null;
    player4.discard(card8);
    gameState1.addPlayer(player4);
    java.util.List<dominion.Card> list_card11 = dominion.Card.createCards();
    dominion.GameState gameState12 = new dominion.GameState(list_card11);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Smithy;
    dominion.Card card14 = dominion.Card.getCard(list_card11, cardName13);
    java.lang.String str15 = card14.toString();
    player4.addHand(card14);
    boolean b18 = card14.equals((java.lang.Object)10.0d);
    dominion.Card.CardName cardName19 = card14.getCardName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName13.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + " \n\tSmithy"+ "'", str15.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName19.equals(dominion.Card.CardName.Smithy));

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test080"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.lang.String str19 = gameState6.toString();
    dominion.GameState gameState20 = null;
    dominion.Player player22 = new dominion.Player(gameState20, "hi!");
    dominion.Card card23 = null;
    player22.addHand(card23);
    player22.playKingdomCard();
    dominion.Card card26 = null;
    player22.discard(card26);
    player22.playKingdomCard();
    dominion.Card[] card_array29 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card30 = new java.util.ArrayList<dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card30, card_array29);
    dominion.Card.CardName cardName32 = dominion.Card.CardName.Smithy;
    dominion.Card card33 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card30, cardName32);
    dominion.GameState gameState34 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.Player player37 = new dominion.Player(gameState35, "");
    player22.buyCard(gameState35);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i39 = gameState35.gameBoard;
    dominion.GameState gameState40 = gameState35.clone();
    java.util.List<dominion.Card> list_card41 = dominion.Card.createCards();
    dominion.GameState gameState42 = new dominion.GameState(list_card41);
    gameState40.cards = list_card41;
    gameState6.cards = list_card41;
    dominion.Card[] card_array45 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card46 = new java.util.ArrayList<dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card46, card_array45);
    dominion.Card.CardName cardName48 = dominion.Card.CardName.Smithy;
    dominion.Card card49 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card46, cardName48);
    dominion.GameState gameState50 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card46);
    dominion.Card.Type type51 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card52 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card46, type51);
    java.util.List<dominion.Card> list_card53 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card41, type51);
    dominion.Card.CardName cardName54 = dominion.Card.CardName.Ambassador;
    dominion.Card card55 = dominion.Card.getCard(list_card41, cardName54);
    dominion.Card.CardName cardName56 = dominion.Card.CardName.Baron;
    boolean b57 = card55.equals((java.lang.Object)cardName56);
    dominion.Card[] card_array58 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card59 = new java.util.ArrayList<dominion.Card>();
    boolean b60 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card59, card_array58);
    dominion.Card.CardName cardName61 = dominion.Card.CardName.Smithy;
    dominion.Card card62 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card59, cardName61);
    dominion.GameState gameState63 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card59);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i64 = gameState63.play();
    java.util.List<dominion.Player> list_player65 = gameState63.players;
    dominion.Card[] card_array66 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card67 = new java.util.ArrayList<dominion.Card>();
    boolean b68 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card67, card_array66);
    dominion.Card.CardName cardName69 = dominion.Card.CardName.Smithy;
    dominion.Card card70 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card67, cardName69);
    dominion.GameState gameState71 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card67);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i72 = gameState71.play();
    dominion.GameState gameState73 = null;
    dominion.Player player75 = new dominion.Player(gameState73, "hi!");
    dominion.Card card76 = null;
    player75.addHand(card76);
    player75.playKingdomCard();
    dominion.Card card79 = null;
    player75.discard(card79);
    player75.playTtreasureCard();
    player75.playKingdomCard();
    gameState71.addPlayer(player75);
    gameState63.addPlayer(player75);
    dominion.Card[] card_array85 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card86 = new java.util.ArrayList<dominion.Card>();
    boolean b87 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card86, card_array85);
    dominion.Card.CardName cardName88 = dominion.Card.CardName.Smithy;
    dominion.Card card89 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card86, cardName88);
    dominion.GameState gameState90 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card86);
    dominion.GameState gameState91 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card86);
    dominion.Player player93 = new dominion.Player(gameState91, "");
    // The following exception was thrown during execution in test generation
    try {
    card55.play(player75, gameState91);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str19.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName32.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName48.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card49);
    org.junit.Assert.assertTrue("'" + type51 + "' != '" + dominion.Card.Type.TREASURE + "'", type51.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + dominion.Card.CardName.Ambassador + "'", cardName54.equals(dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card55);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + dominion.Card.CardName.Baron + "'", cardName56.equals(dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    org.junit.Assert.assertTrue("'" + cardName61 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName61.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    org.junit.Assert.assertTrue("'" + cardName69 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName69.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    org.junit.Assert.assertTrue("'" + cardName88 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName88.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card89);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test081"); }

    java.util.List<dominion.Card> list_card0 = null;
    dominion.Card.CardName cardName1 = dominion.Card.CardName.Minion;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card2 = dominion.Card.getCard(list_card0, cardName1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + cardName1 + "' != '" + dominion.Card.CardName.Minion + "'", cardName1.equals(dominion.Card.CardName.Minion));

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test082"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playTtreasureCard();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test083"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player8 = new dominion.Player(gameState6, "");
    dominion.Player player10 = new dominion.Player(gameState6, "The board game is embty you need to intialize the game!!!!");
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Smithy;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i18 = gameState17.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i19 = gameState17.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState17.gameBoard;
    player10.buyCard(gameState17);
    player10.playTtreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName14.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test084"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState15.gameBoard;
    dominion.GameState gameState20 = gameState15.clone();
    java.util.List<dominion.Card> list_card21 = dominion.Card.createCards();
    dominion.GameState gameState22 = new dominion.GameState(list_card21);
    gameState20.cards = list_card21;
    dominion.Card[] card_array24 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card25 = new java.util.ArrayList<dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card25, card_array24);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Smithy;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card25);
    dominion.Card.Type type30 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card31 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card25, type30);
    gameState20.cards = arraylist_card25;
    dominion.Player player34 = new dominion.Player(gameState20, "The board game is embty you need to intialize the game!!!!");
    player34.printStateGame();
    dominion.GameState gameState36 = null;
    dominion.Player player38 = new dominion.Player(gameState36, "hi!");
    dominion.Card card39 = null;
    player38.addHand(card39);
    player38.playKingdomCard();
    player38.playKingdomCard();
    java.lang.String str43 = player38.toString();
    java.util.List<dominion.Card> list_card44 = dominion.Card.createCards();
    dominion.GameState gameState45 = new dominion.GameState(list_card44);
    dominion.Card.CardName cardName46 = dominion.Card.CardName.Smithy;
    dominion.Card card47 = dominion.Card.getCard(list_card44, cardName46);
    dominion.Card[] card_array48 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card49 = new java.util.ArrayList<dominion.Card>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card49, card_array48);
    dominion.Card.CardName cardName51 = dominion.Card.CardName.Smithy;
    dominion.Card card52 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card49, cardName51);
    dominion.GameState gameState53 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card49);
    dominion.GameState gameState54 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card49);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i55 = gameState54.play();
    java.util.List<dominion.Player> list_player56 = gameState54.players;
    boolean b57 = card47.equals((java.lang.Object)list_player56);
    player38.discard(card47);
    java.util.List<dominion.Card> list_card59 = dominion.Card.createCards();
    dominion.GameState gameState60 = new dominion.GameState(list_card59);
    dominion.Card.CardName cardName61 = dominion.Card.CardName.Smithy;
    dominion.Card card62 = dominion.Card.getCard(list_card59, cardName61);
    dominion.Card.CardName cardName63 = card62.getCardName();
    int i64 = card62.getTreasureValue();
    int i65 = card47.compareTo(card62);
    java.lang.String str66 = card47.toString();
    player34.discard(card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName27.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + dominion.Card.Type.TREASURE + "'", type30.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str43.equals(" --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName46.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName51.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    org.junit.Assert.assertTrue("'" + cardName61 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName61.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card62);
    org.junit.Assert.assertTrue("'" + cardName63 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName63.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + " \n\tSmithy"+ "'", str66.equals(" \n\tSmithy"));

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test085"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState6.gameBoard;
    java.util.List<dominion.Card> list_card20 = gameState6.cards;
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Smithy;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    gameState6.cards = arraylist_card22;
    dominion.Card.CardName cardName28 = dominion.Card.CardName.Cutpurse;
    dominion.Card card29 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName28);
    dominion.GameState gameState30 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i31 = gameState30.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName24.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName28.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i31);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test086"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState7 = null;
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    dominion.Card card10 = null;
    player9.addHand(card10);
    gameState6.addPlayer(player9);
    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i13 = gameState6.getWinners();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test087"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i6 = gameState5.play();
    dominion.Player player8 = new dominion.Player(gameState5, " --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.lang.String str9 = gameState5.toString();
    dominion.Player player11 = new dominion.Player(gameState5, "");
    player11.printStateGame();
    player11.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str9.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test088"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState15.gameBoard;
    dominion.GameState gameState20 = gameState15.clone();
    java.util.List<dominion.Card> list_card21 = dominion.Card.createCards();
    dominion.GameState gameState22 = new dominion.GameState(list_card21);
    gameState20.cards = list_card21;
    dominion.Card[] card_array24 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card25 = new java.util.ArrayList<dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card25, card_array24);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Smithy;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card25);
    dominion.Card.Type type30 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card31 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card25, type30);
    gameState20.cards = arraylist_card25;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i33 = gameState20.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = gameState20.gameBoard;
    java.util.List<dominion.Card> list_card35 = dominion.Card.createCards();
    dominion.Card[] card_array36 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card37 = new java.util.ArrayList<dominion.Card>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card37, card_array36);
    dominion.Card.CardName cardName39 = dominion.Card.CardName.Smithy;
    dominion.Card card40 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card37, cardName39);
    dominion.GameState gameState41 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card37);
    dominion.Card.Type type42 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card43 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card37, type42);
    java.util.List<dominion.Card> list_card44 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card35, type42);
    java.util.List<dominion.Card> list_card45 = dominion.Card.createCards();
    dominion.GameState gameState46 = new dominion.GameState(list_card45);
    dominion.Card.CardName cardName47 = dominion.Card.CardName.Smithy;
    dominion.Card card48 = dominion.Card.getCard(list_card45, cardName47);
    dominion.Card card49 = dominion.Card.getCard(list_card44, cardName47);
    gameState20.cards = list_card44;
    dominion.Card.CardName cardName51 = dominion.Card.CardName.Province;
    dominion.Card card52 = dominion.Card.getCard(list_card44, cardName51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName27.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + dominion.Card.Type.TREASURE + "'", type30.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName39.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);
    org.junit.Assert.assertTrue("'" + type42 + "' != '" + dominion.Card.Type.TREASURE + "'", type42.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName47.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card49);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + dominion.Card.CardName.Province + "'", cardName51.equals(dominion.Card.CardName.Province));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card52);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test089"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState15.gameBoard;
    java.util.List<dominion.Card> list_card20 = gameState15.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test090"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player8 = new dominion.Player(gameState6, "");
    dominion.Card card9 = null;
    player8.discard(card9);
    dominion.Card card11 = null;
    player8.addHand(card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test091"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i6 = gameState5.play();
    java.util.List<dominion.Player> list_player7 = gameState5.players;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i8 = gameState5.gameBoard;
    dominion.GameState gameState9 = gameState5.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState9);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test092"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    player2.playTtreasureCard();

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test093"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.GameState gameState1 = new dominion.GameState(list_card0);
    dominion.GameState gameState2 = null;
    dominion.Player player4 = new dominion.Player(gameState2, "hi!");
    dominion.Card card5 = null;
    player4.addHand(card5);
    player4.playKingdomCard();
    dominion.Card card8 = null;
    player4.discard(card8);
    gameState1.addPlayer(player4);
    java.util.List<dominion.Card> list_card11 = dominion.Card.createCards();
    dominion.GameState gameState12 = new dominion.GameState(list_card11);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Smithy;
    dominion.Card card14 = dominion.Card.getCard(list_card11, cardName13);
    java.lang.String str15 = card14.toString();
    player4.addHand(card14);
    boolean b18 = card14.equals((java.lang.Object)10.0d);
    int i19 = card14.getTreasureValue();
    dominion.Card.CardName cardName20 = card14.getCardName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName13.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + " \n\tSmithy"+ "'", str15.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName20.equals(dominion.Card.CardName.Smithy));

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test094"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    java.util.List<dominion.Player> list_player17 = gameState6.players;
    dominion.GameState gameState18 = gameState6.clone();
    java.util.List<dominion.Card> list_card19 = gameState6.cards;
    dominion.GameState gameState20 = null;
    dominion.Player player22 = new dominion.Player(gameState20, "hi!");
    dominion.Card card23 = null;
    player22.addHand(card23);
    player22.playKingdomCard();
    dominion.Card card26 = null;
    player22.discard(card26);
    player22.playTtreasureCard();
    dominion.Card card29 = null;
    player22.discard(card29);
    dominion.Card[] card_array31 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card32 = new java.util.ArrayList<dominion.Card>();
    boolean b33 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card32, card_array31);
    dominion.Card.CardName cardName34 = dominion.Card.CardName.Smithy;
    dominion.Card card35 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card32, cardName34);
    dominion.GameState gameState36 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card32);
    dominion.GameState gameState37 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card32);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i38 = gameState37.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i39 = gameState37.play();
    dominion.GameState gameState40 = null;
    dominion.Player player42 = new dominion.Player(gameState40, "hi!");
    dominion.Card card43 = null;
    player42.addHand(card43);
    player42.playKingdomCard();
    player42.playKingdomCard();
    gameState37.addPlayer(player42);
    dominion.GameState gameState48 = null;
    dominion.Player player50 = new dominion.Player(gameState48, "hi!");
    dominion.Card card51 = null;
    player50.addHand(card51);
    player50.playKingdomCard();
    dominion.Card card54 = null;
    player50.discard(card54);
    player50.playTtreasureCard();
    dominion.Card card57 = null;
    player50.discard(card57);
    gameState37.addPlayer(player50);
    dominion.GameState gameState60 = gameState37.clone();
    player22.buyCard(gameState60);
    gameState6.addPlayer(player22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName34.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState60);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test095"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState6.gameBoard;
    java.util.List<dominion.Card> list_card20 = gameState6.cards;
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Smithy;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    gameState6.cards = arraylist_card22;
    dominion.Card.CardName cardName28 = dominion.Card.CardName.Cutpurse;
    dominion.Card card29 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName28);
    dominion.GameState gameState30 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    dominion.GameState gameState31 = null;
    dominion.Player player33 = new dominion.Player(gameState31, "hi!");
    dominion.Card card34 = null;
    player33.addHand(card34);
    player33.playKingdomCard();
    dominion.Card card37 = null;
    player33.discard(card37);
    player33.playKingdomCard();
    dominion.Card[] card_array40 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card41 = new java.util.ArrayList<dominion.Card>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card41, card_array40);
    dominion.Card.CardName cardName43 = dominion.Card.CardName.Smithy;
    dominion.Card card44 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card41, cardName43);
    dominion.GameState gameState45 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card41);
    dominion.GameState gameState46 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card41);
    dominion.Player player48 = new dominion.Player(gameState46, "");
    player33.buyCard(gameState46);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i50 = gameState46.gameBoard;
    dominion.GameState gameState51 = gameState46.clone();
    java.util.List<dominion.Card> list_card52 = dominion.Card.createCards();
    dominion.GameState gameState53 = new dominion.GameState(list_card52);
    gameState51.cards = list_card52;
    dominion.Card[] card_array55 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card56 = new java.util.ArrayList<dominion.Card>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card56, card_array55);
    dominion.Card.CardName cardName58 = dominion.Card.CardName.Smithy;
    dominion.Card card59 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card56, cardName58);
    dominion.GameState gameState60 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card56);
    dominion.Card.Type type61 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card62 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card56, type61);
    gameState51.cards = arraylist_card56;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i64 = gameState51.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i65 = gameState51.gameBoard;
    java.util.List<dominion.Card> list_card66 = dominion.Card.createCards();
    dominion.Card[] card_array67 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card68 = new java.util.ArrayList<dominion.Card>();
    boolean b69 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card68, card_array67);
    dominion.Card.CardName cardName70 = dominion.Card.CardName.Smithy;
    dominion.Card card71 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card68, cardName70);
    dominion.GameState gameState72 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card68);
    dominion.Card.Type type73 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card74 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card68, type73);
    java.util.List<dominion.Card> list_card75 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card66, type73);
    java.util.List<dominion.Card> list_card76 = dominion.Card.createCards();
    dominion.GameState gameState77 = new dominion.GameState(list_card76);
    dominion.Card.CardName cardName78 = dominion.Card.CardName.Smithy;
    dominion.Card card79 = dominion.Card.getCard(list_card76, cardName78);
    dominion.Card card80 = dominion.Card.getCard(list_card75, cardName78);
    gameState51.cards = list_card75;
    dominion.Card[] card_array82 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card83 = new java.util.ArrayList<dominion.Card>();
    boolean b84 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card83, card_array82);
    dominion.Card.CardName cardName85 = dominion.Card.CardName.Smithy;
    dominion.Card card86 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card83, cardName85);
    dominion.GameState gameState87 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card83);
    dominion.Card.Type type88 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card89 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card83, type88);
    java.util.List<dominion.Card> list_card90 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card75, type88);
    java.util.List<dominion.Card> list_card91 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card22, type88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName24.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName28.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    org.junit.Assert.assertTrue("'" + cardName43 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName43.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName58.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card59);
    org.junit.Assert.assertTrue("'" + type61 + "' != '" + dominion.Card.Type.TREASURE + "'", type61.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    org.junit.Assert.assertTrue("'" + cardName70 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName70.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card71);
    org.junit.Assert.assertTrue("'" + type73 + "' != '" + dominion.Card.Type.TREASURE + "'", type73.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card76);
    org.junit.Assert.assertTrue("'" + cardName78 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName78.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    org.junit.Assert.assertTrue("'" + cardName85 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName85.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card86);
    org.junit.Assert.assertTrue("'" + type88 + "' != '" + dominion.Card.Type.TREASURE + "'", type88.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test096"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.GameState gameState1 = new dominion.GameState(list_card0);
    dominion.GameState gameState2 = null;
    dominion.Player player4 = new dominion.Player(gameState2, "hi!");
    dominion.Card card5 = null;
    player4.addHand(card5);
    player4.playKingdomCard();
    dominion.Card card8 = null;
    player4.discard(card8);
    gameState1.addPlayer(player4);
    java.util.List<dominion.Card> list_card11 = dominion.Card.createCards();
    dominion.GameState gameState12 = new dominion.GameState(list_card11);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Smithy;
    dominion.Card card14 = dominion.Card.getCard(list_card11, cardName13);
    java.lang.String str15 = card14.toString();
    player4.addHand(card14);
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "hi!");
    dominion.Card card20 = null;
    player19.addHand(card20);
    player19.playKingdomCard();
    dominion.Card card23 = null;
    player19.discard(card23);
    player19.playTtreasureCard();
    dominion.Card card26 = null;
    player19.discard(card26);
    dominion.Card card28 = null;
    player19.addHand(card28);
    java.util.List<dominion.Card> list_card30 = dominion.Card.createCards();
    dominion.GameState gameState31 = new dominion.GameState(list_card30);
    dominion.Card.CardName cardName32 = dominion.Card.CardName.Smithy;
    dominion.Card card33 = dominion.Card.getCard(list_card30, cardName32);
    player19.addHand(card33);
    player4.discard(card33);
    java.lang.Object obj36 = null;
    boolean b37 = card33.equals(obj36);
    int i38 = card33.score();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName13.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + " \n\tSmithy"+ "'", str15.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName32.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test097"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    gameState6.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test098"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    dominion.Player player9 = new dominion.Player(gameState6, "hi!");
    dominion.Player player11 = new dominion.Player(gameState6, "hi!");
    boolean b12 = gameState6.isGameOver();
    gameState6.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test099"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    player2.playKingdomCard();
    java.util.List<dominion.Card> list_card7 = dominion.Card.createCards();
    dominion.GameState gameState8 = new dominion.GameState(list_card7);
    dominion.Card.CardName cardName9 = dominion.Card.CardName.Smithy;
    dominion.Card card10 = dominion.Card.getCard(list_card7, cardName9);
    dominion.Card.CardName cardName11 = card10.getCardName();
    player2.discard(card10);
    java.util.List<dominion.Card> list_card13 = dominion.Card.createCards();
    dominion.GameState gameState14 = new dominion.GameState(list_card13);
    dominion.GameState gameState15 = null;
    dominion.Player player17 = new dominion.Player(gameState15, "hi!");
    dominion.Card card18 = null;
    player17.addHand(card18);
    player17.playKingdomCard();
    dominion.Card card21 = null;
    player17.discard(card21);
    gameState14.addPlayer(player17);
    java.util.List<dominion.Card> list_card24 = dominion.Card.createCards();
    dominion.GameState gameState25 = new dominion.GameState(list_card24);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Smithy;
    dominion.Card card27 = dominion.Card.getCard(list_card24, cardName26);
    java.lang.String str28 = card27.toString();
    player17.addHand(card27);
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Smithy;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card31);
    dominion.GameState gameState36 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card31);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i37 = gameState36.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i38 = gameState36.play();
    dominion.GameState gameState39 = null;
    dominion.Player player41 = new dominion.Player(gameState39, "hi!");
    dominion.Card card42 = null;
    player41.addHand(card42);
    player41.playKingdomCard();
    player41.playKingdomCard();
    gameState36.addPlayer(player41);
    boolean b47 = gameState36.isGameOver();
    gameState36.initializeGame();
    java.lang.String str49 = gameState36.toString();
    dominion.GameState gameState50 = null;
    dominion.Player player52 = new dominion.Player(gameState50, "hi!");
    dominion.Card card53 = null;
    player52.addHand(card53);
    player52.playKingdomCard();
    dominion.Card card56 = null;
    player52.discard(card56);
    player52.playKingdomCard();
    dominion.Card[] card_array59 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card60 = new java.util.ArrayList<dominion.Card>();
    boolean b61 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card60, card_array59);
    dominion.Card.CardName cardName62 = dominion.Card.CardName.Smithy;
    dominion.Card card63 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card60, cardName62);
    dominion.GameState gameState64 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card60);
    dominion.GameState gameState65 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card60);
    dominion.Player player67 = new dominion.Player(gameState65, "");
    player52.buyCard(gameState65);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i69 = gameState65.gameBoard;
    dominion.GameState gameState70 = gameState65.clone();
    java.util.List<dominion.Card> list_card71 = dominion.Card.createCards();
    dominion.GameState gameState72 = new dominion.GameState(list_card71);
    gameState70.cards = list_card71;
    gameState36.cards = list_card71;
    dominion.Card[] card_array75 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card76 = new java.util.ArrayList<dominion.Card>();
    boolean b77 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card76, card_array75);
    dominion.Card.CardName cardName78 = dominion.Card.CardName.Smithy;
    dominion.Card card79 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card76, cardName78);
    dominion.GameState gameState80 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card76);
    dominion.Card.Type type81 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card82 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card76, type81);
    java.util.List<dominion.Card> list_card83 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card71, type81);
    dominion.Card.CardName cardName84 = dominion.Card.CardName.Ambassador;
    dominion.Card card85 = dominion.Card.getCard(list_card71, cardName84);
    dominion.Card.CardName cardName86 = dominion.Card.CardName.Baron;
    boolean b87 = card85.equals((java.lang.Object)cardName86);
    boolean b88 = card27.equals((java.lang.Object)b87);
    java.lang.String str89 = card27.toString();
    boolean b90 = card10.equals((java.lang.Object)card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName9.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card10);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName11.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName26.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + " \n\tSmithy"+ "'", str28.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName33.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str49.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    org.junit.Assert.assertTrue("'" + cardName62 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName62.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    org.junit.Assert.assertTrue("'" + cardName78 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName78.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card79);
    org.junit.Assert.assertTrue("'" + type81 + "' != '" + dominion.Card.Type.TREASURE + "'", type81.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card83);
    org.junit.Assert.assertTrue("'" + cardName84 + "' != '" + dominion.Card.CardName.Ambassador + "'", cardName84.equals(dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card85);
    org.junit.Assert.assertTrue("'" + cardName86 + "' != '" + dominion.Card.CardName.Baron + "'", cardName86.equals(dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + " \n\tSmithy"+ "'", str89.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test100"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState6.gameBoard;
    java.util.List<dominion.Card> list_card20 = gameState6.cards;
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Smithy;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    gameState6.cards = arraylist_card22;
    dominion.Card[] card_array28 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card29 = new java.util.ArrayList<dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card29, card_array28);
    dominion.Card.CardName cardName31 = dominion.Card.CardName.Smithy;
    dominion.Card card32 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card29, cardName31);
    dominion.GameState gameState33 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card29);
    dominion.GameState gameState34 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card29);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i35 = gameState34.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i36 = gameState34.play();
    dominion.GameState gameState37 = null;
    dominion.Player player39 = new dominion.Player(gameState37, "hi!");
    dominion.Card card40 = null;
    player39.addHand(card40);
    player39.playKingdomCard();
    player39.playKingdomCard();
    gameState34.addPlayer(player39);
    boolean b45 = gameState34.isGameOver();
    gameState34.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i47 = gameState34.gameBoard;
    java.util.List<dominion.Card> list_card48 = gameState34.cards;
    dominion.Card[] card_array49 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card50 = new java.util.ArrayList<dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card50, card_array49);
    dominion.Card.CardName cardName52 = dominion.Card.CardName.Smithy;
    dominion.Card card53 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card50, cardName52);
    dominion.GameState gameState54 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card50);
    gameState34.cards = arraylist_card50;
    dominion.Card.CardName cardName56 = dominion.Card.CardName.Cutpurse;
    dominion.Card card57 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card50, cardName56);
    dominion.Card card58 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName24.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName31.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName52.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card53);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName56.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card58);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test101"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    player2.playKingdomCard();
    java.lang.String str7 = player2.toString();
    java.util.List<dominion.Card> list_card8 = dominion.Card.createCards();
    dominion.GameState gameState9 = new dominion.GameState(list_card8);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Smithy;
    dominion.Card card11 = dominion.Card.getCard(list_card8, cardName10);
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Smithy;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i19 = gameState18.play();
    java.util.List<dominion.Player> list_player20 = gameState18.players;
    boolean b21 = card11.equals((java.lang.Object)list_player20);
    player2.discard(card11);
    int i23 = card11.getTreasureValue();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName10.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName15.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test102"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.Card[] card_array1 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card2 = new java.util.ArrayList<dominion.Card>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card2, card_array1);
    dominion.Card.CardName cardName4 = dominion.Card.CardName.Smithy;
    dominion.Card card5 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card2, cardName4);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card2);
    dominion.Card.Type type7 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card8 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card2, type7);
    java.util.List<dominion.Card> list_card9 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card0, type7);
    dominion.Card.Type type10 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card11 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card9, type10);
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Smithy;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i19 = gameState18.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState18.play();
    dominion.GameState gameState21 = null;
    dominion.Player player23 = new dominion.Player(gameState21, "hi!");
    dominion.Card card24 = null;
    player23.addHand(card24);
    player23.playKingdomCard();
    player23.playKingdomCard();
    gameState18.addPlayer(player23);
    dominion.GameState gameState29 = null;
    dominion.Player player31 = new dominion.Player(gameState29, "hi!");
    dominion.Card card32 = null;
    player31.addHand(card32);
    player31.playKingdomCard();
    dominion.Card card35 = null;
    player31.discard(card35);
    player31.playKingdomCard();
    dominion.Card[] card_array38 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card39 = new java.util.ArrayList<dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card39, card_array38);
    dominion.Card.CardName cardName41 = dominion.Card.CardName.Smithy;
    dominion.Card card42 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card39, cardName41);
    dominion.GameState gameState43 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card39);
    dominion.GameState gameState44 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card39);
    dominion.Player player46 = new dominion.Player(gameState44, "");
    player31.buyCard(gameState44);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i48 = gameState44.gameBoard;
    dominion.GameState gameState49 = gameState44.clone();
    java.util.List<dominion.Card> list_card50 = dominion.Card.createCards();
    dominion.GameState gameState51 = new dominion.GameState(list_card50);
    gameState49.cards = list_card50;
    gameState18.cards = list_card50;
    dominion.Card.Type type54 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card55 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card50, type54);
    java.util.List<dominion.Card> list_card56 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card11, type54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + cardName4 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName4.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card5);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + dominion.Card.Type.TREASURE + "'", type7.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    org.junit.Assert.assertTrue("'" + type10 + "' != '" + dominion.Card.Type.VICTORY + "'", type10.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName15.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    org.junit.Assert.assertTrue("'" + cardName41 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName41.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    org.junit.Assert.assertTrue("'" + type54 + "' != '" + dominion.Card.Type.VICTORY + "'", type54.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card56);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test103"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.GameState gameState1 = new dominion.GameState(list_card0);
    dominion.Card.CardName cardName2 = dominion.Card.CardName.Smithy;
    dominion.Card card3 = dominion.Card.getCard(list_card0, cardName2);
    java.lang.String str4 = card3.toString();
    dominion.Card.CardName cardName5 = card3.getCardName();
    dominion.GameState gameState6 = null;
    dominion.Player player8 = new dominion.Player(gameState6, "hi!");
    dominion.Card card9 = null;
    player8.addHand(card9);
    player8.playKingdomCard();
    dominion.Card card12 = null;
    player8.discard(card12);
    player8.playKingdomCard();
    java.util.List<dominion.Card> list_card15 = dominion.Card.createCards();
    dominion.GameState gameState16 = new dominion.GameState(list_card15);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Smithy;
    dominion.Card card18 = dominion.Card.getCard(list_card15, cardName17);
    dominion.Card.CardName cardName19 = card18.getCardName();
    int i20 = card18.score();
    player8.addHand(card18);
    dominion.Card[] card_array22 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card23 = new java.util.ArrayList<dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card23, card_array22);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Smithy;
    dominion.Card card26 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card23, cardName25);
    dominion.GameState gameState27 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card23);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i28 = gameState27.play();
    gameState27.initializeGame();
    // The following exception was thrown during execution in test generation
    try {
    card3.play(player8, gameState27);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName2.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " \n\tSmithy"+ "'", str4.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName5.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName17.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card18);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName19.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName25.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i28);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test104"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState6.gameBoard;
    java.util.List<dominion.Card> list_card20 = gameState6.cards;
    dominion.GameState gameState21 = new dominion.GameState(list_card20);
    java.util.List<dominion.Card> list_card22 = dominion.Card.createCards();
    dominion.GameState gameState23 = new dominion.GameState(list_card22);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Smithy;
    dominion.Card card25 = dominion.Card.getCard(list_card22, cardName24);
    dominion.Card.Type type26 = card25.getType();
    java.util.List<dominion.Card> list_card27 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card20, type26);
    dominion.Card[] card_array28 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card29 = new java.util.ArrayList<dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card29, card_array28);
    dominion.Card.CardName cardName31 = dominion.Card.CardName.Smithy;
    dominion.Card card32 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card29, cardName31);
    dominion.GameState gameState33 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card29);
    dominion.GameState gameState34 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card29);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i35 = gameState34.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i36 = gameState34.play();
    dominion.GameState gameState37 = null;
    dominion.Player player39 = new dominion.Player(gameState37, "hi!");
    dominion.Card card40 = null;
    player39.addHand(card40);
    player39.playKingdomCard();
    player39.playKingdomCard();
    gameState34.addPlayer(player39);
    boolean b45 = gameState34.isGameOver();
    gameState34.initializeGame();
    java.lang.String str47 = gameState34.toString();
    dominion.GameState gameState48 = null;
    dominion.Player player50 = new dominion.Player(gameState48, "hi!");
    dominion.Card card51 = null;
    player50.addHand(card51);
    player50.playKingdomCard();
    dominion.Card card54 = null;
    player50.discard(card54);
    player50.playKingdomCard();
    dominion.Card[] card_array57 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card58 = new java.util.ArrayList<dominion.Card>();
    boolean b59 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card58, card_array57);
    dominion.Card.CardName cardName60 = dominion.Card.CardName.Smithy;
    dominion.Card card61 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card58, cardName60);
    dominion.GameState gameState62 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card58);
    dominion.GameState gameState63 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card58);
    dominion.Player player65 = new dominion.Player(gameState63, "");
    player50.buyCard(gameState63);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i67 = gameState63.gameBoard;
    dominion.GameState gameState68 = gameState63.clone();
    java.util.List<dominion.Card> list_card69 = dominion.Card.createCards();
    dominion.GameState gameState70 = new dominion.GameState(list_card69);
    gameState68.cards = list_card69;
    gameState34.cards = list_card69;
    dominion.Card[] card_array73 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card74 = new java.util.ArrayList<dominion.Card>();
    boolean b75 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card74, card_array73);
    dominion.Card.CardName cardName76 = dominion.Card.CardName.Smithy;
    dominion.Card card77 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card74, cardName76);
    dominion.GameState gameState78 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card74);
    dominion.Card.Type type79 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card80 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card74, type79);
    java.util.List<dominion.Card> list_card81 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card69, type79);
    dominion.Card.CardName cardName82 = dominion.Card.CardName.Gold;
    dominion.Card card83 = dominion.Card.getCard(list_card69, cardName82);
    dominion.Card card84 = dominion.Card.getCard(list_card20, cardName82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName24.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + dominion.Card.Type.ACTION + "'", type26.equals(dominion.Card.Type.ACTION));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName31.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str47.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName60.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    org.junit.Assert.assertTrue("'" + cardName76 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName76.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card77);
    org.junit.Assert.assertTrue("'" + type79 + "' != '" + dominion.Card.Type.TREASURE + "'", type79.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card81);
    org.junit.Assert.assertTrue("'" + cardName82 + "' != '" + dominion.Card.CardName.Gold + "'", cardName82.equals(dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card84);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test105"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    dominion.Player player9 = new dominion.Player(gameState6, "hi!");
    dominion.Player player11 = new dominion.Player(gameState6, "");
    boolean b12 = gameState6.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test106"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i6 = gameState5.play();
    dominion.Player player8 = new dominion.Player(gameState5, " --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.lang.String str9 = gameState5.toString();
    dominion.Player player11 = new dominion.Player(gameState5, "");
    dominion.GameState gameState12 = gameState5.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str9.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState12);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test107"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.GameState gameState1 = new dominion.GameState(list_card0);
    java.lang.String str2 = gameState1.toString();
    gameState1.initializeGame();
    java.util.List<dominion.Card> list_card4 = gameState1.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str2.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card4);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test108"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.addHand(card6);
    java.util.List<dominion.Card> list_card8 = dominion.Card.createCards();
    dominion.GameState gameState9 = new dominion.GameState(list_card8);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Smithy;
    dominion.Card card11 = dominion.Card.getCard(list_card8, cardName10);
    java.lang.String str12 = card11.toString();
    dominion.Card.CardName cardName13 = card11.getCardName();
    java.lang.String str14 = card11.toString();
    player2.discard(card11);
    java.util.List<dominion.Card> list_card16 = dominion.Card.createCards();
    dominion.GameState gameState17 = new dominion.GameState(list_card16);
    boolean b18 = card11.equals((java.lang.Object)list_card16);
    dominion.Card[] card_array19 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card20 = new java.util.ArrayList<dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card20, card_array19);
    dominion.Card.CardName cardName22 = dominion.Card.CardName.Smithy;
    dominion.Card card23 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card20, cardName22);
    dominion.GameState gameState24 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card20);
    dominion.GameState gameState25 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card20);
    dominion.Player player27 = new dominion.Player(gameState25, "");
    dominion.Player player29 = new dominion.Player(gameState25, "The board game is embty you need to intialize the game!!!!");
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Smithy;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card31);
    dominion.GameState gameState36 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card31);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i37 = gameState36.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i38 = gameState36.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i39 = gameState36.gameBoard;
    player29.buyCard(gameState36);
    dominion.GameState gameState41 = null;
    dominion.Player player43 = new dominion.Player(gameState41, "hi!");
    dominion.Card card44 = null;
    player43.addHand(card44);
    player43.playKingdomCard();
    dominion.Card card47 = null;
    player43.addHand(card47);
    java.util.List<dominion.Card> list_card49 = dominion.Card.createCards();
    dominion.GameState gameState50 = new dominion.GameState(list_card49);
    dominion.Card.CardName cardName51 = dominion.Card.CardName.Smithy;
    dominion.Card card52 = dominion.Card.getCard(list_card49, cardName51);
    java.lang.String str53 = card52.toString();
    dominion.Card.CardName cardName54 = card52.getCardName();
    java.lang.String str55 = card52.toString();
    player43.discard(card52);
    int i57 = card52.getCost();
    player29.addHand(card52);
    dominion.GameState gameState59 = null;
    dominion.Player player61 = new dominion.Player(gameState59, "hi!");
    dominion.Card card62 = null;
    player61.addHand(card62);
    player61.playKingdomCard();
    dominion.Card card65 = null;
    player61.discard(card65);
    player61.playKingdomCard();
    dominion.Card[] card_array68 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card69 = new java.util.ArrayList<dominion.Card>();
    boolean b70 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card69, card_array68);
    dominion.Card.CardName cardName71 = dominion.Card.CardName.Smithy;
    dominion.Card card72 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card69, cardName71);
    dominion.GameState gameState73 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card69);
    dominion.GameState gameState74 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card69);
    dominion.Player player76 = new dominion.Player(gameState74, "");
    player61.buyCard(gameState74);
    gameState74.initializeGame();
    // The following exception was thrown during execution in test generation
    try {
    card11.play(player29, gameState74);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName10.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + " \n\tSmithy"+ "'", str12.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName13.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " \n\tSmithy"+ "'", str14.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName22.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName33.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName51.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + " \n\tSmithy"+ "'", str53.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName54.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + " \n\tSmithy"+ "'", str55.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    org.junit.Assert.assertTrue("'" + cardName71 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName71.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card72);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test109"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.addHand(card6);
    java.util.List<dominion.Card> list_card8 = dominion.Card.createCards();
    dominion.GameState gameState9 = new dominion.GameState(list_card8);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Smithy;
    dominion.Card card11 = dominion.Card.getCard(list_card8, cardName10);
    java.lang.String str12 = card11.toString();
    dominion.Card.CardName cardName13 = card11.getCardName();
    java.lang.String str14 = card11.toString();
    player2.discard(card11);
    java.lang.String str16 = card11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName10.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + " \n\tSmithy"+ "'", str12.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName13.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " \n\tSmithy"+ "'", str14.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + " \n\tSmithy"+ "'", str16.equals(" \n\tSmithy"));

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test110"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playTtreasureCard();
    dominion.Card card9 = null;
    player2.discard(card9);
    dominion.Card card11 = null;
    player2.addHand(card11);
    java.util.List<dominion.Card> list_card13 = dominion.Card.createCards();
    dominion.GameState gameState14 = new dominion.GameState(list_card13);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Smithy;
    dominion.Card card16 = dominion.Card.getCard(list_card13, cardName15);
    player2.addHand(card16);
    java.util.List<dominion.Card> list_card18 = dominion.Card.createCards();
    dominion.GameState gameState19 = new dominion.GameState(list_card18);
    dominion.GameState gameState20 = null;
    dominion.Player player22 = new dominion.Player(gameState20, "hi!");
    dominion.Card card23 = null;
    player22.addHand(card23);
    player22.playKingdomCard();
    dominion.Card card26 = null;
    player22.discard(card26);
    gameState19.addPlayer(player22);
    java.util.List<dominion.Card> list_card29 = dominion.Card.createCards();
    dominion.GameState gameState30 = new dominion.GameState(list_card29);
    dominion.Card.CardName cardName31 = dominion.Card.CardName.Smithy;
    dominion.Card card32 = dominion.Card.getCard(list_card29, cardName31);
    java.lang.String str33 = card32.toString();
    player22.addHand(card32);
    boolean b36 = card32.equals((java.lang.Object)10.0d);
    int i37 = card32.getTreasureValue();
    player2.discard(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName15.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName31.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + " \n\tSmithy"+ "'", str33.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test111"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playTtreasureCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i16 = gameState15.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState15.play();
    dominion.GameState gameState18 = null;
    dominion.Player player20 = new dominion.Player(gameState18, "hi!");
    dominion.Card card21 = null;
    player20.addHand(card21);
    player20.playKingdomCard();
    player20.playKingdomCard();
    gameState15.addPlayer(player20);
    boolean b26 = gameState15.isGameOver();
    gameState15.initializeGame();
    java.lang.String str28 = gameState15.toString();
    dominion.GameState gameState29 = null;
    dominion.Player player31 = new dominion.Player(gameState29, "hi!");
    dominion.Card card32 = null;
    player31.addHand(card32);
    player31.playKingdomCard();
    dominion.Card card35 = null;
    player31.discard(card35);
    player31.playKingdomCard();
    dominion.Card[] card_array38 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card39 = new java.util.ArrayList<dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card39, card_array38);
    dominion.Card.CardName cardName41 = dominion.Card.CardName.Smithy;
    dominion.Card card42 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card39, cardName41);
    dominion.GameState gameState43 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card39);
    dominion.GameState gameState44 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card39);
    dominion.Player player46 = new dominion.Player(gameState44, "");
    player31.buyCard(gameState44);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i48 = gameState44.gameBoard;
    dominion.GameState gameState49 = gameState44.clone();
    java.util.List<dominion.Card> list_card50 = dominion.Card.createCards();
    dominion.GameState gameState51 = new dominion.GameState(list_card50);
    gameState49.cards = list_card50;
    gameState15.cards = list_card50;
    dominion.Card[] card_array54 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card55 = new java.util.ArrayList<dominion.Card>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card55, card_array54);
    dominion.Card.CardName cardName57 = dominion.Card.CardName.Smithy;
    dominion.Card card58 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card55, cardName57);
    dominion.GameState gameState59 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card55);
    dominion.Card.Type type60 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card61 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card55, type60);
    java.util.List<dominion.Card> list_card62 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card50, type60);
    dominion.Card.CardName cardName63 = dominion.Card.CardName.Gold;
    dominion.Card card64 = dominion.Card.getCard(list_card50, cardName63);
    dominion.Card.CardName cardName65 = card64.getCardName();
    player2.addHand(card64);
    int i67 = card64.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str28.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    org.junit.Assert.assertTrue("'" + cardName41 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName41.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    org.junit.Assert.assertTrue("'" + cardName57 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName57.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card58);
    org.junit.Assert.assertTrue("'" + type60 + "' != '" + dominion.Card.Type.TREASURE + "'", type60.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);
    org.junit.Assert.assertTrue("'" + cardName63 + "' != '" + dominion.Card.CardName.Gold + "'", cardName63.equals(dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card64);
    org.junit.Assert.assertTrue("'" + cardName65 + "' != '" + dominion.Card.CardName.Gold + "'", cardName65.equals(dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 6);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test112"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    player2.playKingdomCard();
    java.lang.String str7 = player2.toString();
    java.util.List<dominion.Card> list_card8 = dominion.Card.createCards();
    dominion.GameState gameState9 = new dominion.GameState(list_card8);
    dominion.GameState gameState10 = gameState9.clone();
    player2.buyCard(gameState9);
    dominion.GameState gameState12 = null;
    dominion.Player player14 = new dominion.Player(gameState12, "hi!");
    dominion.Card card15 = null;
    player14.addHand(card15);
    player14.playKingdomCard();
    dominion.Card card18 = null;
    player14.discard(card18);
    player14.playKingdomCard();
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Smithy;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    dominion.GameState gameState27 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    dominion.Player player29 = new dominion.Player(gameState27, "");
    player14.buyCard(gameState27);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i31 = gameState27.gameBoard;
    gameState9.gameBoard = hashmap_card_i31;
    java.util.List<dominion.Card> list_card33 = dominion.Card.createCards();
    dominion.Card[] card_array34 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card35 = new java.util.ArrayList<dominion.Card>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card35, card_array34);
    dominion.Card.CardName cardName37 = dominion.Card.CardName.Smithy;
    dominion.Card card38 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card35, cardName37);
    dominion.GameState gameState39 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card35);
    dominion.Card.Type type40 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card41 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card35, type40);
    java.util.List<dominion.Card> list_card42 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card33, type40);
    gameState9.cards = list_card33;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName24.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName37.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    org.junit.Assert.assertTrue("'" + type40 + "' != '" + dominion.Card.Type.TREASURE + "'", type40.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test113"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playTtreasureCard();
    dominion.Card card9 = null;
    player2.discard(card9);
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Smithy;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i18 = gameState17.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i19 = gameState17.play();
    dominion.GameState gameState20 = null;
    dominion.Player player22 = new dominion.Player(gameState20, "hi!");
    dominion.Card card23 = null;
    player22.addHand(card23);
    player22.playKingdomCard();
    player22.playKingdomCard();
    gameState17.addPlayer(player22);
    dominion.GameState gameState28 = null;
    dominion.Player player30 = new dominion.Player(gameState28, "hi!");
    dominion.Card card31 = null;
    player30.addHand(card31);
    player30.playKingdomCard();
    dominion.Card card34 = null;
    player30.discard(card34);
    player30.playTtreasureCard();
    dominion.Card card37 = null;
    player30.discard(card37);
    gameState17.addPlayer(player30);
    dominion.GameState gameState40 = gameState17.clone();
    player2.buyCard(gameState40);
    java.util.List<dominion.Player> list_player42 = gameState40.players;
    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i43 = gameState40.getWinners();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName14.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player42);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test114"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState6.gameBoard;
    java.util.List<dominion.Card> list_card20 = gameState6.cards;
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Smithy;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    gameState6.cards = arraylist_card22;
    dominion.Card.CardName cardName28 = dominion.Card.CardName.Cutpurse;
    dominion.Card card29 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName28);
    dominion.GameState gameState30 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    dominion.Player player32 = new dominion.Player(gameState30, " --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName24.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName28.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test115"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.GameState gameState1 = new dominion.GameState(list_card0);
    dominion.Card.CardName cardName2 = dominion.Card.CardName.Smithy;
    dominion.Card card3 = dominion.Card.getCard(list_card0, cardName2);
    dominion.Card[] card_array4 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card5 = new java.util.ArrayList<dominion.Card>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card5, card_array4);
    dominion.Card.CardName cardName7 = dominion.Card.CardName.Smithy;
    dominion.Card card8 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card5, cardName7);
    dominion.GameState gameState9 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card5);
    dominion.GameState gameState10 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card5);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i11 = gameState10.play();
    java.util.List<dominion.Player> list_player12 = gameState10.players;
    boolean b13 = card3.equals((java.lang.Object)list_player12);
    int i14 = card3.getCost();
    int i15 = card3.getCost();
    java.lang.String str16 = card3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName2.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName7.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + " \n\tSmithy"+ "'", str16.equals(" \n\tSmithy"));

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test116"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.addHand(card6);
    java.util.List<dominion.Card> list_card8 = dominion.Card.createCards();
    dominion.GameState gameState9 = new dominion.GameState(list_card8);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Smithy;
    dominion.Card card11 = dominion.Card.getCard(list_card8, cardName10);
    java.lang.String str12 = card11.toString();
    dominion.Card.CardName cardName13 = card11.getCardName();
    java.lang.String str14 = card11.toString();
    player2.discard(card11);
    dominion.Card.CardName cardName16 = card11.getCardName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName10.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + " \n\tSmithy"+ "'", str12.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName13.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " \n\tSmithy"+ "'", str14.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName16.equals(dominion.Card.CardName.Smithy));

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test117"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "hi!");
    dominion.Card card20 = null;
    player19.addHand(card20);
    player19.playKingdomCard();
    dominion.Card card23 = null;
    player19.discard(card23);
    player19.playTtreasureCard();
    dominion.Card card26 = null;
    player19.discard(card26);
    gameState6.addPlayer(player19);
    dominion.GameState gameState29 = gameState6.clone();
    dominion.GameState gameState30 = null;
    dominion.Player player32 = new dominion.Player(gameState30, "hi!");
    dominion.Card card33 = null;
    player32.addHand(card33);
    player32.playKingdomCard();
    dominion.Card card36 = null;
    player32.discard(card36);
    player32.playKingdomCard();
    dominion.Card[] card_array39 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card40 = new java.util.ArrayList<dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card40, card_array39);
    dominion.Card.CardName cardName42 = dominion.Card.CardName.Smithy;
    dominion.Card card43 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card40, cardName42);
    dominion.GameState gameState44 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card40);
    dominion.GameState gameState45 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card40);
    dominion.Player player47 = new dominion.Player(gameState45, "");
    player32.buyCard(gameState45);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i49 = gameState45.gameBoard;
    dominion.GameState gameState50 = gameState45.clone();
    java.util.List<dominion.Card> list_card51 = dominion.Card.createCards();
    dominion.GameState gameState52 = new dominion.GameState(list_card51);
    gameState50.cards = list_card51;
    dominion.Card[] card_array54 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card55 = new java.util.ArrayList<dominion.Card>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card55, card_array54);
    dominion.Card.CardName cardName57 = dominion.Card.CardName.Smithy;
    dominion.Card card58 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card55, cardName57);
    dominion.GameState gameState59 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card55);
    dominion.Card.Type type60 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card61 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card55, type60);
    gameState50.cards = arraylist_card55;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i63 = gameState50.gameBoard;
    gameState6.gameBoard = hashmap_card_i63;
    dominion.GameState gameState65 = null;
    dominion.Player player67 = new dominion.Player(gameState65, "hi!");
    dominion.Card card68 = null;
    player67.addHand(card68);
    player67.playKingdomCard();
    dominion.Card card71 = null;
    player67.discard(card71);
    player67.playTtreasureCard();
    dominion.Card card74 = null;
    player67.addHand(card74);
    gameState6.addPlayer(player67);
    java.util.List<dominion.Card> list_card77 = dominion.Card.createCards();
    dominion.GameState gameState78 = new dominion.GameState(list_card77);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i79 = gameState78.gameBoard;
    gameState6.gameBoard = hashmap_card_i79;
    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i81 = gameState6.getWinners();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName42.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    org.junit.Assert.assertTrue("'" + cardName57 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName57.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card58);
    org.junit.Assert.assertTrue("'" + type60 + "' != '" + dominion.Card.Type.TREASURE + "'", type60.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i79);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test118"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.List<dominion.Player> list_player8 = gameState6.players;
    dominion.GameState gameState9 = gameState6.clone();
    java.util.List<dominion.Card> list_card10 = gameState9.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test119"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    dominion.Player player9 = new dominion.Player(gameState6, "hi!");
    dominion.Player player11 = new dominion.Player(gameState6, "hi!");
    boolean b12 = gameState6.isGameOver();
    java.util.List<dominion.Card> list_card13 = gameState6.cards;
    dominion.GameState gameState14 = gameState6.clone();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i15 = gameState14.getWinners();
    boolean b16 = gameState14.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test120"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player8 = new dominion.Player(gameState6, "");
    dominion.Player player10 = new dominion.Player(gameState6, "The board game is embty you need to intialize the game!!!!");
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Smithy;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i18 = gameState17.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i19 = gameState17.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState17.gameBoard;
    player10.buyCard(gameState17);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i22 = gameState17.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName14.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i22);

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test121"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState6.gameBoard;
    java.util.List<dominion.Card> list_card20 = gameState6.cards;
    dominion.GameState gameState21 = new dominion.GameState(list_card20);
    java.util.List<dominion.Card> list_card22 = dominion.Card.createCards();
    dominion.GameState gameState23 = new dominion.GameState(list_card22);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Smithy;
    dominion.Card card25 = dominion.Card.getCard(list_card22, cardName24);
    dominion.Card.Type type26 = card25.getType();
    java.util.List<dominion.Card> list_card27 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card20, type26);
    dominion.GameState gameState28 = new dominion.GameState(list_card20);
    java.lang.String str29 = gameState28.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName24.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + dominion.Card.Type.ACTION + "'", type26.equals(dominion.Card.Type.ACTION));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str29.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test122"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playTtreasureCard();
    dominion.Card card9 = null;
    player2.addHand(card9);
    java.util.List<dominion.Card> list_card11 = dominion.Card.createCards();
    dominion.GameState gameState12 = new dominion.GameState(list_card11);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Smithy;
    dominion.Card card14 = dominion.Card.getCard(list_card11, cardName13);
    java.lang.String str15 = card14.toString();
    dominion.Card.CardName cardName16 = card14.getCardName();
    player2.discard(card14);
    int i18 = card14.getTreasureValue();
    dominion.GameState gameState19 = null;
    dominion.Player player21 = new dominion.Player(gameState19, "hi!");
    dominion.Card card22 = null;
    player21.addHand(card22);
    player21.playKingdomCard();
    dominion.Card card25 = null;
    player21.discard(card25);
    player21.playKingdomCard();
    dominion.Card[] card_array28 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card29 = new java.util.ArrayList<dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card29, card_array28);
    dominion.Card.CardName cardName31 = dominion.Card.CardName.Smithy;
    dominion.Card card32 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card29, cardName31);
    dominion.GameState gameState33 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card29);
    dominion.GameState gameState34 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card29);
    dominion.Player player36 = new dominion.Player(gameState34, "");
    player21.buyCard(gameState34);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i38 = gameState34.gameBoard;
    dominion.GameState gameState39 = gameState34.clone();
    java.util.List<dominion.Card> list_card40 = dominion.Card.createCards();
    dominion.GameState gameState41 = new dominion.GameState(list_card40);
    gameState39.cards = list_card40;
    dominion.Card[] card_array43 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card44 = new java.util.ArrayList<dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card44, card_array43);
    dominion.Card.CardName cardName46 = dominion.Card.CardName.Smithy;
    dominion.Card card47 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card44, cardName46);
    dominion.GameState gameState48 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card44);
    dominion.Card.Type type49 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card50 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card44, type49);
    gameState39.cards = arraylist_card44;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i52 = gameState39.getWinners();
    boolean b53 = card14.equals((java.lang.Object)gameState39);
    int i54 = card14.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName13.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + " \n\tSmithy"+ "'", str15.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName16.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName31.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName46.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card47);
    org.junit.Assert.assertTrue("'" + type49 + "' != '" + dominion.Card.Type.TREASURE + "'", type49.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 4);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test123"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "hi!");
    dominion.Card card20 = null;
    player19.addHand(card20);
    player19.playKingdomCard();
    dominion.Card card23 = null;
    player19.discard(card23);
    player19.playTtreasureCard();
    dominion.Card card26 = null;
    player19.discard(card26);
    gameState6.addPlayer(player19);
    dominion.GameState gameState29 = gameState6.clone();
    dominion.GameState gameState30 = gameState29.clone();
    dominion.Player player32 = new dominion.Player(gameState29, " \n\tSmithy");
    player32.playKingdomCard();
    player32.playKingdomCard();
    java.lang.String str35 = player32.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + " ---  \n\tSmithy ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str35.equals(" ---  \n\tSmithy ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test124"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "hi!");
    dominion.Card card20 = null;
    player19.addHand(card20);
    player19.playKingdomCard();
    dominion.Card card23 = null;
    player19.discard(card23);
    player19.playTtreasureCard();
    dominion.Card card26 = null;
    player19.discard(card26);
    gameState6.addPlayer(player19);
    java.util.List<dominion.Card> list_card29 = dominion.Card.createCards();
    dominion.GameState gameState30 = new dominion.GameState(list_card29);
    dominion.Card.CardName cardName31 = dominion.Card.CardName.Smithy;
    dominion.Card card32 = dominion.Card.getCard(list_card29, cardName31);
    java.lang.String str33 = card32.toString();
    dominion.Card.CardName cardName34 = card32.getCardName();
    player19.discard(card32);
    player19.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName31.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + " \n\tSmithy"+ "'", str33.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName34.equals(dominion.Card.CardName.Smithy));

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test125"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState15.gameBoard;
    dominion.GameState gameState20 = gameState15.clone();
    dominion.Player player22 = new dominion.Player(gameState20, " --- hi! ---  --- --------------------------- --- Hand: [null,  \n\tSmithy]Discard: [null, null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Smithy;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.GameState gameState28 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card24);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card24);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i30 = gameState29.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i31 = gameState29.play();
    dominion.GameState gameState32 = null;
    dominion.Player player34 = new dominion.Player(gameState32, "hi!");
    dominion.Card card35 = null;
    player34.addHand(card35);
    player34.playKingdomCard();
    player34.playKingdomCard();
    gameState29.addPlayer(player34);
    boolean b40 = gameState29.isGameOver();
    gameState29.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i42 = gameState29.gameBoard;
    java.util.List<dominion.Card> list_card43 = gameState29.cards;
    dominion.Card[] card_array44 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card45 = new java.util.ArrayList<dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card45, card_array44);
    dominion.Card.CardName cardName47 = dominion.Card.CardName.Smithy;
    dominion.Card card48 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card45, cardName47);
    dominion.GameState gameState49 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card45);
    gameState29.cards = arraylist_card45;
    dominion.Card.CardName cardName51 = dominion.Card.CardName.Cutpurse;
    dominion.Card card52 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card45, cardName51);
    dominion.GameState gameState53 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card45);
    player22.buyCard(gameState53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName26.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName47.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card48);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName51.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card52);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test126"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState6.gameBoard;
    java.util.List<dominion.Card> list_card20 = gameState6.cards;
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Smithy;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    gameState6.cards = arraylist_card22;
    dominion.Card.CardName cardName28 = dominion.Card.CardName.Cutpurse;
    dominion.Card card29 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName28);
    dominion.GameState gameState30 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    dominion.Card[] card_array31 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card32 = new java.util.ArrayList<dominion.Card>();
    boolean b33 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card32, card_array31);
    dominion.Card.CardName cardName34 = dominion.Card.CardName.Smithy;
    dominion.Card card35 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card32, cardName34);
    dominion.GameState gameState36 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card32);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i37 = gameState36.play();
    dominion.GameState gameState38 = null;
    dominion.Player player40 = new dominion.Player(gameState38, "hi!");
    dominion.Card card41 = null;
    player40.addHand(card41);
    player40.playKingdomCard();
    dominion.Card card44 = null;
    player40.discard(card44);
    player40.playTtreasureCard();
    player40.playKingdomCard();
    gameState36.addPlayer(player40);
    java.util.List<dominion.Card> list_card49 = dominion.Card.createCards();
    dominion.GameState gameState50 = new dominion.GameState(list_card49);
    dominion.GameState gameState51 = null;
    dominion.Player player53 = new dominion.Player(gameState51, "hi!");
    dominion.Card card54 = null;
    player53.addHand(card54);
    player53.playKingdomCard();
    dominion.Card card57 = null;
    player53.discard(card57);
    gameState50.addPlayer(player53);
    gameState36.addPlayer(player53);
    gameState30.addPlayer(player53);
    // The following exception was thrown during execution in test generation
    try {
    player53.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName24.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + dominion.Card.CardName.Cutpurse + "'", cardName28.equals(dominion.Card.CardName.Cutpurse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName34.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test127"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState15.gameBoard;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState15.getWinners();
    gameState15.initializeGame();
    dominion.Card[] card_array22 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card23 = new java.util.ArrayList<dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card23, card_array22);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Smithy;
    dominion.Card card26 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card23, cardName25);
    dominion.GameState gameState27 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card23);
    dominion.GameState gameState28 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card23);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i29 = gameState28.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i30 = gameState28.play();
    dominion.GameState gameState31 = null;
    dominion.Player player33 = new dominion.Player(gameState31, "hi!");
    dominion.Card card34 = null;
    player33.addHand(card34);
    player33.playKingdomCard();
    player33.playKingdomCard();
    gameState28.addPlayer(player33);
    java.util.List<dominion.Player> list_player39 = gameState28.players;
    gameState15.players = list_player39;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i41 = gameState15.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName25.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i41);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test128"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    dominion.Player player9 = new dominion.Player(gameState6, "hi!");
    dominion.GameState gameState10 = null;
    dominion.Player player12 = new dominion.Player(gameState10, "hi!");
    dominion.Card card13 = null;
    player12.addHand(card13);
    player12.playKingdomCard();
    dominion.Card card16 = null;
    player12.discard(card16);
    player12.playTtreasureCard();
    dominion.Card card19 = null;
    player12.addHand(card19);
    java.util.List<dominion.Card> list_card21 = dominion.Card.createCards();
    dominion.GameState gameState22 = new dominion.GameState(list_card21);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Smithy;
    dominion.Card card24 = dominion.Card.getCard(list_card21, cardName23);
    java.lang.String str25 = card24.toString();
    dominion.Card.CardName cardName26 = card24.getCardName();
    player12.discard(card24);
    gameState6.addPlayer(player12);
    java.util.List<dominion.Card> list_card29 = gameState6.cards;
    java.lang.String str30 = gameState6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName23.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + " \n\tSmithy"+ "'", str25.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName26.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str30.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test129"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playTtreasureCard();
    dominion.Card card9 = null;
    player2.addHand(card9);
    dominion.Card card11 = null;
    player2.addHand(card11);
    dominion.Card[] card_array13 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card14 = new java.util.ArrayList<dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card14, card_array13);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Smithy;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card14, cardName16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card14);
    dominion.GameState gameState19 = gameState18.clone();
    dominion.Card[] card_array20 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card21 = new java.util.ArrayList<dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card21, card_array20);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Smithy;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName23);
    dominion.GameState gameState25 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i27 = gameState26.play();
    java.util.List<dominion.Player> list_player28 = gameState26.players;
    gameState18.players = list_player28;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i30 = gameState18.getWinners();
    player2.buyCard(gameState18);
    dominion.GameState gameState32 = null;
    dominion.Player player34 = new dominion.Player(gameState32, "hi!");
    dominion.Card card35 = null;
    player34.addHand(card35);
    player34.playKingdomCard();
    dominion.Card card38 = null;
    player34.discard(card38);
    player34.playKingdomCard();
    dominion.Card[] card_array41 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card42 = new java.util.ArrayList<dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card42, card_array41);
    dominion.Card.CardName cardName44 = dominion.Card.CardName.Smithy;
    dominion.Card card45 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card42, cardName44);
    dominion.GameState gameState46 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card42);
    dominion.GameState gameState47 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card42);
    dominion.Player player49 = new dominion.Player(gameState47, "");
    player34.buyCard(gameState47);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i51 = gameState47.gameBoard;
    dominion.GameState gameState52 = gameState47.clone();
    java.util.List<dominion.Card> list_card53 = dominion.Card.createCards();
    dominion.GameState gameState54 = new dominion.GameState(list_card53);
    gameState52.cards = list_card53;
    dominion.Card[] card_array56 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card57 = new java.util.ArrayList<dominion.Card>();
    boolean b58 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card57, card_array56);
    dominion.Card.CardName cardName59 = dominion.Card.CardName.Smithy;
    dominion.Card card60 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card57, cardName59);
    dominion.GameState gameState61 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card57);
    dominion.Card.Type type62 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card63 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card57, type62);
    gameState52.cards = arraylist_card57;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i65 = gameState52.gameBoard;
    gameState18.gameBoard = hashmap_card_i65;
    dominion.Player player68 = new dominion.Player(gameState18, " --- The board game is embty you need to intialize the game!!!! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName16.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName23.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName44.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName59.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card60);
    org.junit.Assert.assertTrue("'" + type62 + "' != '" + dominion.Card.Type.TREASURE + "'", type62.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i65);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test130"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.lang.String str19 = gameState6.toString();
    dominion.GameState gameState20 = null;
    dominion.Player player22 = new dominion.Player(gameState20, "hi!");
    dominion.Card card23 = null;
    player22.addHand(card23);
    player22.playKingdomCard();
    dominion.Card card26 = null;
    player22.discard(card26);
    player22.playKingdomCard();
    dominion.Card[] card_array29 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card30 = new java.util.ArrayList<dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card30, card_array29);
    dominion.Card.CardName cardName32 = dominion.Card.CardName.Smithy;
    dominion.Card card33 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card30, cardName32);
    dominion.GameState gameState34 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.Player player37 = new dominion.Player(gameState35, "");
    player22.buyCard(gameState35);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i39 = gameState35.gameBoard;
    dominion.GameState gameState40 = gameState35.clone();
    java.util.List<dominion.Card> list_card41 = dominion.Card.createCards();
    dominion.GameState gameState42 = new dominion.GameState(list_card41);
    gameState40.cards = list_card41;
    gameState6.cards = list_card41;
    dominion.Card[] card_array45 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card46 = new java.util.ArrayList<dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card46, card_array45);
    dominion.Card.CardName cardName48 = dominion.Card.CardName.Smithy;
    dominion.Card card49 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card46, cardName48);
    dominion.GameState gameState50 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card46);
    dominion.Card.Type type51 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card52 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card46, type51);
    java.util.List<dominion.Card> list_card53 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card41, type51);
    dominion.Card.CardName cardName54 = dominion.Card.CardName.Gold;
    dominion.Card card55 = dominion.Card.getCard(list_card41, cardName54);
    dominion.Card.Type type56 = card55.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str19.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName32.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName48.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card49);
    org.junit.Assert.assertTrue("'" + type51 + "' != '" + dominion.Card.Type.TREASURE + "'", type51.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + dominion.Card.CardName.Gold + "'", cardName54.equals(dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card55);
    org.junit.Assert.assertTrue("'" + type56 + "' != '" + dominion.Card.Type.TREASURE + "'", type56.equals(dominion.Card.Type.TREASURE));

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test131"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, " \n\tSmithy");

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test132"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "hi!");
    dominion.Card card20 = null;
    player19.addHand(card20);
    player19.playKingdomCard();
    dominion.Card card23 = null;
    player19.discard(card23);
    player19.playTtreasureCard();
    dominion.Card card26 = null;
    player19.discard(card26);
    gameState6.addPlayer(player19);
    dominion.GameState gameState29 = gameState6.clone();
    dominion.GameState gameState30 = gameState29.clone();
    dominion.Player player32 = new dominion.Player(gameState29, " \n\tSmithy");
    boolean b33 = gameState29.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test133"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState15.gameBoard;
    dominion.GameState gameState20 = gameState15.clone();
    java.util.List<dominion.Card> list_card21 = dominion.Card.createCards();
    dominion.GameState gameState22 = new dominion.GameState(list_card21);
    gameState20.cards = list_card21;
    dominion.Card[] card_array24 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card25 = new java.util.ArrayList<dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card25, card_array24);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Smithy;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card25);
    dominion.Card.Type type30 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card31 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card25, type30);
    gameState20.cards = arraylist_card25;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i33 = gameState20.gameBoard;
    java.lang.String str34 = gameState20.toString();
    dominion.GameState gameState35 = null;
    dominion.Player player37 = new dominion.Player(gameState35, "hi!");
    dominion.Card card38 = null;
    player37.addHand(card38);
    player37.playKingdomCard();
    dominion.Card card41 = null;
    player37.discard(card41);
    player37.playKingdomCard();
    dominion.Card[] card_array44 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card45 = new java.util.ArrayList<dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card45, card_array44);
    dominion.Card.CardName cardName47 = dominion.Card.CardName.Smithy;
    dominion.Card card48 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card45, cardName47);
    dominion.GameState gameState49 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card45);
    dominion.GameState gameState50 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card45);
    dominion.Player player52 = new dominion.Player(gameState50, "");
    player37.buyCard(gameState50);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i54 = gameState50.gameBoard;
    dominion.GameState gameState55 = gameState50.clone();
    dominion.Card[] card_array56 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card57 = new java.util.ArrayList<dominion.Card>();
    boolean b58 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card57, card_array56);
    dominion.Card.CardName cardName59 = dominion.Card.CardName.Smithy;
    dominion.Card card60 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card57, cardName59);
    dominion.GameState gameState61 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card57);
    dominion.GameState gameState62 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card57);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i63 = gameState62.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i64 = gameState62.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i65 = gameState62.gameBoard;
    gameState50.gameBoard = hashmap_card_i65;
    gameState20.gameBoard = hashmap_card_i65;
    dominion.Card[] card_array68 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card69 = new java.util.ArrayList<dominion.Card>();
    boolean b70 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card69, card_array68);
    dominion.Card.CardName cardName71 = dominion.Card.CardName.Smithy;
    dominion.Card card72 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card69, cardName71);
    dominion.GameState gameState73 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card69);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i74 = gameState73.play();
    dominion.Player player76 = new dominion.Player(gameState73, " --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.lang.String str77 = gameState73.toString();
    dominion.Player player79 = new dominion.Player(gameState73, "");
    gameState20.addPlayer(player79);
    player79.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName27.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + dominion.Card.Type.TREASURE + "'", type30.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str34.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName47.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName59.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    org.junit.Assert.assertTrue("'" + cardName71 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName71.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str77.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test134"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "hi!");
    dominion.Card card20 = null;
    player19.addHand(card20);
    player19.playKingdomCard();
    dominion.Card card23 = null;
    player19.discard(card23);
    player19.playTtreasureCard();
    dominion.Card card26 = null;
    player19.discard(card26);
    gameState6.addPlayer(player19);
    dominion.GameState gameState29 = gameState6.clone();
    dominion.GameState gameState30 = null;
    dominion.Player player32 = new dominion.Player(gameState30, "hi!");
    dominion.Card card33 = null;
    player32.addHand(card33);
    player32.playKingdomCard();
    dominion.Card card36 = null;
    player32.discard(card36);
    player32.playKingdomCard();
    dominion.Card[] card_array39 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card40 = new java.util.ArrayList<dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card40, card_array39);
    dominion.Card.CardName cardName42 = dominion.Card.CardName.Smithy;
    dominion.Card card43 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card40, cardName42);
    dominion.GameState gameState44 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card40);
    dominion.GameState gameState45 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card40);
    dominion.Player player47 = new dominion.Player(gameState45, "");
    player32.buyCard(gameState45);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i49 = gameState45.gameBoard;
    dominion.GameState gameState50 = gameState45.clone();
    java.util.List<dominion.Card> list_card51 = dominion.Card.createCards();
    dominion.GameState gameState52 = new dominion.GameState(list_card51);
    gameState50.cards = list_card51;
    dominion.Card[] card_array54 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card55 = new java.util.ArrayList<dominion.Card>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card55, card_array54);
    dominion.Card.CardName cardName57 = dominion.Card.CardName.Smithy;
    dominion.Card card58 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card55, cardName57);
    dominion.GameState gameState59 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card55);
    dominion.Card.Type type60 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card61 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card55, type60);
    gameState50.cards = arraylist_card55;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i63 = gameState50.gameBoard;
    gameState6.gameBoard = hashmap_card_i63;
    dominion.GameState gameState65 = null;
    dominion.Player player67 = new dominion.Player(gameState65, "hi!");
    dominion.Card card68 = null;
    player67.addHand(card68);
    player67.playKingdomCard();
    dominion.Card card71 = null;
    player67.discard(card71);
    player67.playTtreasureCard();
    dominion.Card card74 = null;
    player67.addHand(card74);
    gameState6.addPlayer(player67);
    java.util.List<dominion.Card> list_card77 = dominion.Card.createCards();
    dominion.GameState gameState78 = new dominion.GameState(list_card77);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i79 = gameState78.gameBoard;
    gameState6.gameBoard = hashmap_card_i79;
    java.util.List<dominion.Player> list_player81 = null;
    gameState6.players = list_player81;
    java.util.List<dominion.Card> list_card83 = gameState6.cards;
    java.util.List<dominion.Card> list_card84 = dominion.Card.createCards();
    dominion.GameState gameState85 = new dominion.GameState(list_card84);
    dominion.Card.CardName cardName86 = dominion.Card.CardName.Smithy;
    dominion.Card card87 = dominion.Card.getCard(list_card84, cardName86);
    java.lang.String str88 = card87.toString();
    dominion.Card.CardName cardName89 = card87.getCardName();
    dominion.Card card90 = dominion.Card.getCard(list_card83, cardName89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName42.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    org.junit.Assert.assertTrue("'" + cardName57 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName57.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card58);
    org.junit.Assert.assertTrue("'" + type60 + "' != '" + dominion.Card.Type.TREASURE + "'", type60.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card84);
    org.junit.Assert.assertTrue("'" + cardName86 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName86.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + " \n\tSmithy"+ "'", str88.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName89 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName89.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card90);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test135"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "hi!");
    dominion.Card card20 = null;
    player19.addHand(card20);
    player19.playKingdomCard();
    dominion.Card card23 = null;
    player19.discard(card23);
    player19.playTtreasureCard();
    dominion.Card card26 = null;
    player19.discard(card26);
    gameState6.addPlayer(player19);
    java.util.List<dominion.Card> list_card29 = dominion.Card.createCards();
    dominion.GameState gameState30 = new dominion.GameState(list_card29);
    dominion.Card.CardName cardName31 = dominion.Card.CardName.Smithy;
    dominion.Card card32 = dominion.Card.getCard(list_card29, cardName31);
    java.lang.String str33 = card32.toString();
    dominion.Card.CardName cardName34 = card32.getCardName();
    player19.discard(card32);
    int i36 = card32.score();
    dominion.Card.Type type37 = card32.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName31.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + " \n\tSmithy"+ "'", str33.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName34.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    org.junit.Assert.assertTrue("'" + type37 + "' != '" + dominion.Card.Type.ACTION + "'", type37.equals(dominion.Card.Type.ACTION));

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test136"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playTtreasureCard();
    player2.playKingdomCard();
    dominion.Card card10 = null;
    player2.discard(card10);
    java.util.List<dominion.Card> list_card12 = dominion.Card.createCards();
    dominion.GameState gameState13 = new dominion.GameState(list_card12);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Smithy;
    dominion.Card card15 = dominion.Card.getCard(list_card12, cardName14);
    dominion.Card.CardName cardName16 = card15.getCardName();
    java.lang.String str17 = card15.toString();
    player2.discard(card15);
    int i19 = card15.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName14.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName16.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + " \n\tSmithy"+ "'", str17.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 4);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test137"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState15.gameBoard;
    dominion.GameState gameState20 = gameState15.clone();
    java.util.List<dominion.Card> list_card21 = dominion.Card.createCards();
    dominion.GameState gameState22 = new dominion.GameState(list_card21);
    gameState20.cards = list_card21;
    java.util.List<dominion.Card> list_card24 = gameState20.cards;
    gameState20.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test138"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState6.gameBoard;
    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState6.play();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test139"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "hi!");
    dominion.Card card20 = null;
    player19.addHand(card20);
    player19.playKingdomCard();
    dominion.Card card23 = null;
    player19.discard(card23);
    player19.playTtreasureCard();
    dominion.Card card26 = null;
    player19.discard(card26);
    gameState6.addPlayer(player19);
    java.util.List<dominion.Card> list_card29 = dominion.Card.createCards();
    dominion.GameState gameState30 = new dominion.GameState(list_card29);
    dominion.Card.CardName cardName31 = dominion.Card.CardName.Smithy;
    dominion.Card card32 = dominion.Card.getCard(list_card29, cardName31);
    java.lang.String str33 = card32.toString();
    dominion.Card.CardName cardName34 = card32.getCardName();
    player19.discard(card32);
    java.util.List<dominion.Card> list_card36 = dominion.Card.createCards();
    dominion.GameState gameState37 = new dominion.GameState(list_card36);
    dominion.Card.CardName cardName38 = dominion.Card.CardName.Smithy;
    dominion.Card card39 = dominion.Card.getCard(list_card36, cardName38);
    java.lang.String str40 = card39.toString();
    int i41 = card32.compareTo(card39);
    dominion.Card.Type type42 = card39.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName31.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + " \n\tSmithy"+ "'", str33.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName34.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName38.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + " \n\tSmithy"+ "'", str40.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    org.junit.Assert.assertTrue("'" + type42 + "' != '" + dominion.Card.Type.ACTION + "'", type42.equals(dominion.Card.Type.ACTION));

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test140"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "hi!");
    dominion.Card card20 = null;
    player19.addHand(card20);
    player19.playKingdomCard();
    dominion.Card card23 = null;
    player19.discard(card23);
    player19.playTtreasureCard();
    dominion.Card card26 = null;
    player19.discard(card26);
    gameState6.addPlayer(player19);
    dominion.GameState gameState29 = gameState6.clone();
    dominion.GameState gameState30 = null;
    dominion.Player player32 = new dominion.Player(gameState30, "hi!");
    dominion.Card card33 = null;
    player32.addHand(card33);
    player32.playKingdomCard();
    dominion.Card card36 = null;
    player32.discard(card36);
    player32.playKingdomCard();
    dominion.Card[] card_array39 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card40 = new java.util.ArrayList<dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card40, card_array39);
    dominion.Card.CardName cardName42 = dominion.Card.CardName.Smithy;
    dominion.Card card43 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card40, cardName42);
    dominion.GameState gameState44 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card40);
    dominion.GameState gameState45 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card40);
    dominion.Player player47 = new dominion.Player(gameState45, "");
    player32.buyCard(gameState45);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i49 = gameState45.gameBoard;
    dominion.GameState gameState50 = gameState45.clone();
    java.util.List<dominion.Card> list_card51 = dominion.Card.createCards();
    dominion.GameState gameState52 = new dominion.GameState(list_card51);
    gameState50.cards = list_card51;
    dominion.Card[] card_array54 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card55 = new java.util.ArrayList<dominion.Card>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card55, card_array54);
    dominion.Card.CardName cardName57 = dominion.Card.CardName.Smithy;
    dominion.Card card58 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card55, cardName57);
    dominion.GameState gameState59 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card55);
    dominion.Card.Type type60 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card61 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card55, type60);
    gameState50.cards = arraylist_card55;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i63 = gameState50.gameBoard;
    gameState6.gameBoard = hashmap_card_i63;
    dominion.GameState gameState65 = null;
    dominion.Player player67 = new dominion.Player(gameState65, "hi!");
    dominion.Card card68 = null;
    player67.addHand(card68);
    player67.playKingdomCard();
    dominion.Card card71 = null;
    player67.discard(card71);
    player67.playKingdomCard();
    dominion.Card[] card_array74 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card75 = new java.util.ArrayList<dominion.Card>();
    boolean b76 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card75, card_array74);
    dominion.Card.CardName cardName77 = dominion.Card.CardName.Smithy;
    dominion.Card card78 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card75, cardName77);
    dominion.GameState gameState79 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card75);
    dominion.GameState gameState80 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card75);
    dominion.Player player82 = new dominion.Player(gameState80, "");
    player67.buyCard(gameState80);
    gameState80.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i85 = gameState80.getWinners();
    java.util.List<dominion.Player> list_player86 = gameState80.players;
    gameState6.players = list_player86;
    java.lang.String str88 = gameState6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName42.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    org.junit.Assert.assertTrue("'" + cardName57 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName57.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card58);
    org.junit.Assert.assertTrue("'" + type60 + "' != '" + dominion.Card.Type.TREASURE + "'", type60.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    org.junit.Assert.assertTrue("'" + cardName77 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName77.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str88.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test141"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playTtreasureCard();
    player2.playTtreasureCard();
    player2.playKingdomCard();
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Smithy;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i18 = gameState17.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i19 = gameState17.play();
    dominion.GameState gameState20 = null;
    dominion.Player player22 = new dominion.Player(gameState20, "hi!");
    dominion.Card card23 = null;
    player22.addHand(card23);
    player22.playKingdomCard();
    player22.playKingdomCard();
    gameState17.addPlayer(player22);
    boolean b28 = gameState17.isGameOver();
    gameState17.initializeGame();
    player2.buyCard(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName14.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test142"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState6.gameBoard;
    gameState6.initializeGame();
    dominion.GameState gameState21 = gameState6.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState21);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test143"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.addHand(card6);
    player2.playKingdomCard();

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test144"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i6 = gameState5.play();
    java.util.List<dominion.Player> list_player7 = gameState5.players;
    dominion.Card[] card_array8 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card9 = new java.util.ArrayList<dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card9, card_array8);
    dominion.Card.CardName cardName11 = dominion.Card.CardName.Smithy;
    dominion.Card card12 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card9, cardName11);
    dominion.GameState gameState13 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card9);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i14 = gameState13.play();
    dominion.GameState gameState15 = null;
    dominion.Player player17 = new dominion.Player(gameState15, "hi!");
    dominion.Card card18 = null;
    player17.addHand(card18);
    player17.playKingdomCard();
    dominion.Card card21 = null;
    player17.discard(card21);
    player17.playTtreasureCard();
    player17.playKingdomCard();
    gameState13.addPlayer(player17);
    gameState5.addPlayer(player17);
    player17.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName11.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i14);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test145"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState6.gameBoard;
    java.util.List<dominion.Card> list_card20 = gameState6.cards;
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Smithy;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    gameState6.cards = arraylist_card22;
    dominion.GameState gameState28 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName24.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test146"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    player2.playKingdomCard();
    java.util.List<dominion.Card> list_card7 = dominion.Card.createCards();
    dominion.GameState gameState8 = new dominion.GameState(list_card7);
    dominion.Card.CardName cardName9 = dominion.Card.CardName.Smithy;
    dominion.Card card10 = dominion.Card.getCard(list_card7, cardName9);
    dominion.Card.CardName cardName11 = card10.getCardName();
    player2.discard(card10);
    java.util.List<dominion.Card> list_card13 = dominion.Card.createCards();
    dominion.GameState gameState14 = new dominion.GameState(list_card13);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Smithy;
    dominion.Card card16 = dominion.Card.getCard(list_card13, cardName15);
    dominion.Card.Type type17 = card16.getType();
    player2.addHand(card16);
    java.lang.String str19 = card16.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName9.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card10);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName11.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName15.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + dominion.Card.Type.ACTION + "'", type17.equals(dominion.Card.Type.ACTION));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + " \n\tSmithy"+ "'", str19.equals(" \n\tSmithy"));

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test147"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "hi!");
    dominion.Card card20 = null;
    player19.addHand(card20);
    player19.playKingdomCard();
    dominion.Card card23 = null;
    player19.discard(card23);
    player19.playTtreasureCard();
    dominion.Card card26 = null;
    player19.discard(card26);
    gameState6.addPlayer(player19);
    java.util.List<dominion.Card> list_card29 = dominion.Card.createCards();
    dominion.GameState gameState30 = new dominion.GameState(list_card29);
    dominion.Card.CardName cardName31 = dominion.Card.CardName.Smithy;
    dominion.Card card32 = dominion.Card.getCard(list_card29, cardName31);
    java.lang.String str33 = card32.toString();
    dominion.Card.CardName cardName34 = card32.getCardName();
    player19.discard(card32);
    java.util.List<dominion.Card> list_card36 = dominion.Card.createCards();
    dominion.GameState gameState37 = new dominion.GameState(list_card36);
    dominion.Card.CardName cardName38 = dominion.Card.CardName.Smithy;
    dominion.Card card39 = dominion.Card.getCard(list_card36, cardName38);
    java.lang.String str40 = card39.toString();
    int i41 = card32.compareTo(card39);
    dominion.Card.Type type42 = card32.getType();
    dominion.GameState gameState43 = null;
    dominion.Player player45 = new dominion.Player(gameState43, "hi!");
    dominion.Card card46 = null;
    player45.addHand(card46);
    player45.playKingdomCard();
    dominion.Card card49 = null;
    player45.discard(card49);
    player45.playTtreasureCard();
    dominion.Card card52 = null;
    player45.discard(card52);
    dominion.Card card54 = null;
    player45.addHand(card54);
    player45.playKingdomCard();
    dominion.Card[] card_array57 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card58 = new java.util.ArrayList<dominion.Card>();
    boolean b59 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card58, card_array57);
    dominion.Card.CardName cardName60 = dominion.Card.CardName.Smithy;
    dominion.Card card61 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card58, cardName60);
    dominion.GameState gameState62 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card58);
    // The following exception was thrown during execution in test generation
    try {
    card32.play(player45, gameState62);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName31.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + " \n\tSmithy"+ "'", str33.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName34.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName38.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + " \n\tSmithy"+ "'", str40.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    org.junit.Assert.assertTrue("'" + type42 + "' != '" + dominion.Card.Type.ACTION + "'", type42.equals(dominion.Card.Type.ACTION));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName60.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card61);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test148"); }

    java.util.List<dominion.Card> list_card0 = null;
    dominion.GameState gameState1 = new dominion.GameState(list_card0);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test149"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.lang.String str19 = gameState6.toString();
    dominion.GameState gameState20 = null;
    dominion.Player player22 = new dominion.Player(gameState20, "hi!");
    dominion.Card card23 = null;
    player22.addHand(card23);
    player22.playKingdomCard();
    dominion.Card card26 = null;
    player22.discard(card26);
    player22.playKingdomCard();
    dominion.Card[] card_array29 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card30 = new java.util.ArrayList<dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card30, card_array29);
    dominion.Card.CardName cardName32 = dominion.Card.CardName.Smithy;
    dominion.Card card33 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card30, cardName32);
    dominion.GameState gameState34 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.Player player37 = new dominion.Player(gameState35, "");
    player22.buyCard(gameState35);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i39 = gameState35.gameBoard;
    dominion.GameState gameState40 = gameState35.clone();
    java.util.List<dominion.Card> list_card41 = dominion.Card.createCards();
    dominion.GameState gameState42 = new dominion.GameState(list_card41);
    gameState40.cards = list_card41;
    gameState6.cards = list_card41;
    dominion.Card[] card_array45 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card46 = new java.util.ArrayList<dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card46, card_array45);
    dominion.Card.CardName cardName48 = dominion.Card.CardName.Smithy;
    dominion.Card card49 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card46, cardName48);
    dominion.GameState gameState50 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card46);
    dominion.Card.Type type51 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card52 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card46, type51);
    java.util.List<dominion.Card> list_card53 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card41, type51);
    dominion.GameState gameState54 = new dominion.GameState(list_card53);
    java.util.List<dominion.Player> list_player55 = gameState54.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str19.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName32.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName48.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card49);
    org.junit.Assert.assertTrue("'" + type51 + "' != '" + dominion.Card.Type.TREASURE + "'", type51.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player55);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test150"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.Player player10 = new dominion.Player(gameState6, " --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i11 = gameState6.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i11);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test151"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.GameState gameState1 = new dominion.GameState(list_card0);
    boolean b2 = gameState1.isGameOver();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i3 = gameState1.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i4 = gameState1.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i4);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test152"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player8 = new dominion.Player(gameState6, "");
    dominion.Player player10 = new dominion.Player(gameState6, " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    player10.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test153"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.GameState gameState1 = new dominion.GameState(list_card0);
    boolean b2 = gameState1.isGameOver();
    dominion.Player player4 = new dominion.Player(gameState1, "");
    dominion.GameState gameState5 = null;
    dominion.Player player7 = new dominion.Player(gameState5, "hi!");
    dominion.Card card8 = null;
    player7.addHand(card8);
    player7.playKingdomCard();
    dominion.Card card11 = null;
    player7.discard(card11);
    player7.playKingdomCard();
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Smithy;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    dominion.GameState gameState20 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    dominion.Player player22 = new dominion.Player(gameState20, "");
    player7.buyCard(gameState20);
    gameState20.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i25 = gameState20.play();
    dominion.Card[] card_array26 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card27 = new java.util.ArrayList<dominion.Card>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card27, card_array26);
    dominion.Card.CardName cardName29 = dominion.Card.CardName.Smithy;
    dominion.Card card30 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card27, cardName29);
    dominion.GameState gameState31 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card27);
    dominion.GameState gameState32 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card27);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i33 = gameState32.play();
    java.util.List<dominion.Player> list_player34 = gameState32.players;
    gameState20.players = list_player34;
    player4.buyCard(gameState20);
    player4.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName17.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName29.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test154"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "hi!");
    dominion.Card card20 = null;
    player19.addHand(card20);
    player19.playKingdomCard();
    dominion.Card card23 = null;
    player19.discard(card23);
    player19.playTtreasureCard();
    dominion.Card card26 = null;
    player19.discard(card26);
    gameState6.addPlayer(player19);
    java.util.List<dominion.Card> list_card29 = dominion.Card.createCards();
    dominion.GameState gameState30 = new dominion.GameState(list_card29);
    dominion.Card.CardName cardName31 = dominion.Card.CardName.Smithy;
    dominion.Card card32 = dominion.Card.getCard(list_card29, cardName31);
    java.lang.String str33 = card32.toString();
    dominion.Card.CardName cardName34 = card32.getCardName();
    player19.discard(card32);
    int i36 = card32.score();
    dominion.GameState gameState37 = null;
    dominion.Player player39 = new dominion.Player(gameState37, "hi!");
    dominion.Card card40 = null;
    player39.addHand(card40);
    player39.playKingdomCard();
    dominion.Card card43 = null;
    player39.discard(card43);
    player39.playKingdomCard();
    dominion.Card[] card_array46 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card47 = new java.util.ArrayList<dominion.Card>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card47, card_array46);
    dominion.Card.CardName cardName49 = dominion.Card.CardName.Smithy;
    dominion.Card card50 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card47, cardName49);
    dominion.GameState gameState51 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card47);
    dominion.GameState gameState52 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card47);
    dominion.Player player54 = new dominion.Player(gameState52, "");
    player39.buyCard(gameState52);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i56 = gameState52.gameBoard;
    dominion.GameState gameState57 = gameState52.clone();
    java.util.List<dominion.Card> list_card58 = dominion.Card.createCards();
    dominion.GameState gameState59 = new dominion.GameState(list_card58);
    gameState57.cards = list_card58;
    java.util.List<dominion.Card> list_card61 = gameState57.cards;
    boolean b62 = card32.equals((java.lang.Object)list_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName31.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + " \n\tSmithy"+ "'", str33.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName34.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    org.junit.Assert.assertTrue("'" + cardName49 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName49.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test155"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player8 = new dominion.Player(gameState6, "");
    player8.printStateGame();
    player8.playKingdomCard();
    java.lang.String str11 = player8.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + " ---  ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str11.equals(" ---  ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test156"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    java.util.List<dominion.Card> list_card3 = dominion.Card.createCards();
    dominion.GameState gameState4 = new dominion.GameState(list_card3);
    dominion.Card.CardName cardName5 = dominion.Card.CardName.Smithy;
    dominion.Card card6 = dominion.Card.getCard(list_card3, cardName5);
    dominion.Card[] card_array7 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card8 = new java.util.ArrayList<dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card8, card_array7);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Smithy;
    dominion.Card card11 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName10);
    dominion.GameState gameState12 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card8);
    dominion.GameState gameState13 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card8);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i14 = gameState13.play();
    java.util.List<dominion.Player> list_player15 = gameState13.players;
    boolean b16 = card6.equals((java.lang.Object)list_player15);
    player2.addHand(card6);
    player2.playTtreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card3);
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName5.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName10.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test157"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState15.gameBoard;
    dominion.GameState gameState20 = gameState15.clone();
    java.util.List<dominion.Card> list_card21 = dominion.Card.createCards();
    dominion.GameState gameState22 = new dominion.GameState(list_card21);
    gameState20.cards = list_card21;
    dominion.Card[] card_array24 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card25 = new java.util.ArrayList<dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card25, card_array24);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Smithy;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card25);
    dominion.Card.Type type30 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card31 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card25, type30);
    gameState20.cards = arraylist_card25;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i33 = gameState20.gameBoard;
    java.lang.String str34 = gameState20.toString();
    dominion.GameState gameState35 = null;
    dominion.Player player37 = new dominion.Player(gameState35, "hi!");
    dominion.Card card38 = null;
    player37.addHand(card38);
    player37.playKingdomCard();
    dominion.Card card41 = null;
    player37.discard(card41);
    player37.playKingdomCard();
    dominion.Card[] card_array44 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card45 = new java.util.ArrayList<dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card45, card_array44);
    dominion.Card.CardName cardName47 = dominion.Card.CardName.Smithy;
    dominion.Card card48 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card45, cardName47);
    dominion.GameState gameState49 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card45);
    dominion.GameState gameState50 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card45);
    dominion.Player player52 = new dominion.Player(gameState50, "");
    player37.buyCard(gameState50);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i54 = gameState50.gameBoard;
    dominion.GameState gameState55 = gameState50.clone();
    dominion.Card[] card_array56 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card57 = new java.util.ArrayList<dominion.Card>();
    boolean b58 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card57, card_array56);
    dominion.Card.CardName cardName59 = dominion.Card.CardName.Smithy;
    dominion.Card card60 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card57, cardName59);
    dominion.GameState gameState61 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card57);
    dominion.GameState gameState62 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card57);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i63 = gameState62.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i64 = gameState62.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i65 = gameState62.gameBoard;
    gameState50.gameBoard = hashmap_card_i65;
    gameState20.gameBoard = hashmap_card_i65;
    dominion.Card[] card_array68 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card69 = new java.util.ArrayList<dominion.Card>();
    boolean b70 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card69, card_array68);
    dominion.Card.CardName cardName71 = dominion.Card.CardName.Smithy;
    dominion.Card card72 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card69, cardName71);
    dominion.GameState gameState73 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card69);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i74 = gameState73.play();
    dominion.Player player76 = new dominion.Player(gameState73, " --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.lang.String str77 = gameState73.toString();
    dominion.Player player79 = new dominion.Player(gameState73, "");
    gameState20.addPlayer(player79);
    gameState20.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName27.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + dominion.Card.Type.TREASURE + "'", type30.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str34.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName47.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName59.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    org.junit.Assert.assertTrue("'" + cardName71 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName71.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str77.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test158"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playTtreasureCard();
    player2.playTtreasureCard();
    player2.playKingdomCard();
    java.lang.String str11 = player2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str11.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test159"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.Card[] card_array1 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card2 = new java.util.ArrayList<dominion.Card>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card2, card_array1);
    dominion.Card.CardName cardName4 = dominion.Card.CardName.Smithy;
    dominion.Card card5 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card2, cardName4);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card2);
    dominion.Card.Type type7 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card8 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card2, type7);
    java.util.List<dominion.Card> list_card9 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card0, type7);
    dominion.Card.Type type10 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card11 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card9, type10);
    dominion.GameState gameState12 = new dominion.GameState(list_card11);
    java.util.List<dominion.Player> list_player13 = gameState12.players;
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Smithy;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    dominion.GameState gameState20 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState20.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i22 = gameState20.play();
    dominion.GameState gameState23 = null;
    dominion.Player player25 = new dominion.Player(gameState23, "hi!");
    dominion.Card card26 = null;
    player25.addHand(card26);
    player25.playKingdomCard();
    player25.playKingdomCard();
    gameState20.addPlayer(player25);
    java.util.List<dominion.Player> list_player31 = gameState20.players;
    dominion.Player player33 = new dominion.Player(gameState20, " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    dominion.Card[] card_array34 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card35 = new java.util.ArrayList<dominion.Card>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card35, card_array34);
    dominion.Card.CardName cardName37 = dominion.Card.CardName.Smithy;
    dominion.Card card38 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card35, cardName37);
    dominion.GameState gameState39 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card35);
    dominion.GameState gameState40 = gameState39.clone();
    player33.buyCard(gameState39);
    gameState12.addPlayer(player33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + cardName4 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName4.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card5);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + dominion.Card.Type.TREASURE + "'", type7.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    org.junit.Assert.assertTrue("'" + type10 + "' != '" + dominion.Card.Type.VICTORY + "'", type10.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName17.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName37.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState40);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test160"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState15.gameBoard;
    dominion.GameState gameState20 = gameState15.clone();
    java.util.List<dominion.Card> list_card21 = dominion.Card.createCards();
    dominion.GameState gameState22 = new dominion.GameState(list_card21);
    gameState20.cards = list_card21;
    dominion.Card[] card_array24 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card25 = new java.util.ArrayList<dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card25, card_array24);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Smithy;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card25);
    dominion.Card.Type type30 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card31 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card25, type30);
    gameState20.cards = arraylist_card25;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i33 = gameState20.getWinners();
    dominion.GameState gameState34 = gameState20.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName27.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + dominion.Card.Type.TREASURE + "'", type30.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState34);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test161"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.addHand(card6);
    java.util.List<dominion.Card> list_card8 = dominion.Card.createCards();
    dominion.GameState gameState9 = new dominion.GameState(list_card8);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Smithy;
    dominion.Card card11 = dominion.Card.getCard(list_card8, cardName10);
    java.lang.String str12 = card11.toString();
    dominion.Card.CardName cardName13 = card11.getCardName();
    java.lang.String str14 = card11.toString();
    player2.discard(card11);
    java.util.List<dominion.Card> list_card16 = dominion.Card.createCards();
    dominion.GameState gameState17 = new dominion.GameState(list_card16);
    boolean b18 = card11.equals((java.lang.Object)list_card16);
    dominion.Card[] card_array19 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card20 = new java.util.ArrayList<dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card20, card_array19);
    dominion.Card.CardName cardName22 = dominion.Card.CardName.Smithy;
    dominion.Card card23 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card20, cardName22);
    dominion.GameState gameState24 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card20);
    dominion.GameState gameState25 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card20);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i26 = gameState25.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i27 = gameState25.play();
    dominion.GameState gameState28 = null;
    dominion.Player player30 = new dominion.Player(gameState28, "hi!");
    dominion.Card card31 = null;
    player30.addHand(card31);
    player30.playKingdomCard();
    player30.playKingdomCard();
    gameState25.addPlayer(player30);
    boolean b36 = gameState25.isGameOver();
    gameState25.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i38 = gameState25.gameBoard;
    java.util.List<dominion.Card> list_card39 = gameState25.cards;
    dominion.Card.CardName cardName40 = dominion.Card.CardName.Minion;
    dominion.Card card41 = dominion.Card.getCard(list_card39, cardName40);
    dominion.Card.CardName cardName42 = dominion.Card.CardName.Curse;
    dominion.Card card43 = dominion.Card.getCard(list_card39, cardName42);
    dominion.Card card44 = dominion.Card.getCard(list_card16, cardName42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName10.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + " \n\tSmithy"+ "'", str12.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName13.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " \n\tSmithy"+ "'", str14.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName22.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    org.junit.Assert.assertTrue("'" + cardName40 + "' != '" + dominion.Card.CardName.Minion + "'", cardName40.equals(dominion.Card.CardName.Minion));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card41);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + dominion.Card.CardName.Curse + "'", cardName42.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card44);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test162"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.addHand(card6);
    java.util.List<dominion.Card> list_card8 = dominion.Card.createCards();
    dominion.GameState gameState9 = new dominion.GameState(list_card8);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Smithy;
    dominion.Card card11 = dominion.Card.getCard(list_card8, cardName10);
    java.lang.String str12 = card11.toString();
    dominion.Card.CardName cardName13 = card11.getCardName();
    java.lang.String str14 = card11.toString();
    player2.discard(card11);
    java.util.List<dominion.Card> list_card16 = dominion.Card.createCards();
    dominion.GameState gameState17 = new dominion.GameState(list_card16);
    dominion.Card.CardName cardName18 = dominion.Card.CardName.Smithy;
    dominion.Card card19 = dominion.Card.getCard(list_card16, cardName18);
    dominion.Card.CardName cardName20 = card19.getCardName();
    java.lang.String str21 = card19.toString();
    player2.addHand(card19);
    dominion.Player player23 = null;
    dominion.GameState gameState24 = null;
    dominion.Player player26 = new dominion.Player(gameState24, "hi!");
    dominion.Card card27 = null;
    player26.addHand(card27);
    player26.playKingdomCard();
    dominion.Card card30 = null;
    player26.discard(card30);
    player26.playKingdomCard();
    dominion.Card[] card_array33 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card34 = new java.util.ArrayList<dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card34, card_array33);
    dominion.Card.CardName cardName36 = dominion.Card.CardName.Smithy;
    dominion.Card card37 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card34, cardName36);
    dominion.GameState gameState38 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card34);
    dominion.GameState gameState39 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card34);
    dominion.Player player41 = new dominion.Player(gameState39, "");
    player26.buyCard(gameState39);
    gameState39.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i44 = gameState39.play();
    boolean b45 = gameState39.isGameOver();
    // The following exception was thrown during execution in test generation
    try {
    card19.play(player23, gameState39);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName10.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + " \n\tSmithy"+ "'", str12.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName13.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " \n\tSmithy"+ "'", str14.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName18.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card19);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName20.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + " \n\tSmithy"+ "'", str21.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + cardName36 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName36.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test163"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "hi!");
    dominion.Card card20 = null;
    player19.addHand(card20);
    player19.playKingdomCard();
    dominion.Card card23 = null;
    player19.discard(card23);
    player19.playTtreasureCard();
    dominion.Card card26 = null;
    player19.discard(card26);
    gameState6.addPlayer(player19);
    java.util.List<dominion.Card> list_card29 = dominion.Card.createCards();
    dominion.GameState gameState30 = new dominion.GameState(list_card29);
    dominion.Card.CardName cardName31 = dominion.Card.CardName.Smithy;
    dominion.Card card32 = dominion.Card.getCard(list_card29, cardName31);
    java.lang.String str33 = card32.toString();
    dominion.Card.CardName cardName34 = card32.getCardName();
    player19.discard(card32);
    int i36 = card32.score();
    int i37 = card32.getTreasureValue();
    dominion.Card.Type type38 = card32.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName31.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + " \n\tSmithy"+ "'", str33.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName34.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    org.junit.Assert.assertTrue("'" + type38 + "' != '" + dominion.Card.Type.ACTION + "'", type38.equals(dominion.Card.Type.ACTION));

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test164"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState7 = gameState6.clone();
    java.util.List<dominion.Card> list_card8 = gameState7.cards;
    java.util.List<dominion.Card> list_card9 = dominion.Card.createCards();
    dominion.GameState gameState10 = new dominion.GameState(list_card9);
    java.util.List<dominion.Player> list_player11 = gameState10.players;
    gameState7.players = list_player11;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player11);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test165"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.lang.String str19 = gameState6.toString();
    dominion.GameState gameState20 = null;
    dominion.Player player22 = new dominion.Player(gameState20, "hi!");
    dominion.Card card23 = null;
    player22.addHand(card23);
    player22.playKingdomCard();
    dominion.Card card26 = null;
    player22.discard(card26);
    player22.playKingdomCard();
    dominion.Card[] card_array29 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card30 = new java.util.ArrayList<dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card30, card_array29);
    dominion.Card.CardName cardName32 = dominion.Card.CardName.Smithy;
    dominion.Card card33 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card30, cardName32);
    dominion.GameState gameState34 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.Player player37 = new dominion.Player(gameState35, "");
    player22.buyCard(gameState35);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i39 = gameState35.gameBoard;
    dominion.GameState gameState40 = gameState35.clone();
    java.util.List<dominion.Card> list_card41 = dominion.Card.createCards();
    dominion.GameState gameState42 = new dominion.GameState(list_card41);
    gameState40.cards = list_card41;
    gameState6.cards = list_card41;
    dominion.Card[] card_array45 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card46 = new java.util.ArrayList<dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card46, card_array45);
    dominion.Card.CardName cardName48 = dominion.Card.CardName.Smithy;
    dominion.Card card49 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card46, cardName48);
    dominion.GameState gameState50 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card46);
    dominion.Card.Type type51 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card52 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card46, type51);
    java.util.List<dominion.Card> list_card53 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card41, type51);
    dominion.Card.CardName cardName54 = dominion.Card.CardName.Gold;
    dominion.Card card55 = dominion.Card.getCard(list_card41, cardName54);
    dominion.Card.CardName cardName56 = card55.getCardName();
    int i57 = card55.getTreasureValue();
    dominion.GameState gameState58 = null;
    dominion.Player player60 = new dominion.Player(gameState58, "hi!");
    dominion.Card card61 = null;
    player60.addHand(card61);
    player60.playKingdomCard();
    dominion.Card card64 = null;
    player60.discard(card64);
    player60.playKingdomCard();
    player60.playKingdomCard();
    dominion.Card[] card_array68 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card69 = new java.util.ArrayList<dominion.Card>();
    boolean b70 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card69, card_array68);
    dominion.Card.CardName cardName71 = dominion.Card.CardName.Smithy;
    dominion.Card card72 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card69, cardName71);
    dominion.GameState gameState73 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card69);
    dominion.GameState gameState74 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card69);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i75 = gameState74.play();
    java.util.List<dominion.Player> list_player76 = gameState74.players;
    dominion.GameState gameState77 = gameState74.clone();
    card55.play(player60, gameState74);
    boolean b79 = gameState74.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str19.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName32.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName48.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card49);
    org.junit.Assert.assertTrue("'" + type51 + "' != '" + dominion.Card.Type.TREASURE + "'", type51.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + dominion.Card.CardName.Gold + "'", cardName54.equals(dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card55);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + dominion.Card.CardName.Gold + "'", cardName56.equals(dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    org.junit.Assert.assertTrue("'" + cardName71 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName71.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test166"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    java.util.List<dominion.Player> list_player17 = gameState6.players;
    dominion.GameState gameState18 = gameState6.clone();
    dominion.Player player20 = new dominion.Player(gameState18, "hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState18);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test167"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    java.util.List<dominion.Player> list_player17 = gameState6.players;
    dominion.GameState gameState18 = gameState6.clone();
    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i19 = gameState18.play();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState18);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test168"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.GameState gameState1 = new dominion.GameState(list_card0);
    dominion.Card.CardName cardName2 = dominion.Card.CardName.Smithy;
    dominion.Card card3 = dominion.Card.getCard(list_card0, cardName2);
    java.lang.String str4 = card3.toString();
    dominion.Card.CardName cardName5 = card3.getCardName();
    java.lang.String str6 = card3.toString();
    dominion.Card.CardName cardName7 = card3.getCardName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName2.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " \n\tSmithy"+ "'", str4.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName5 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName5.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " \n\tSmithy"+ "'", str6.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName7.equals(dominion.Card.CardName.Smithy));

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test169"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = gameState5.clone();
    dominion.GameState gameState7 = gameState6.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState7);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test170"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.GameState gameState1 = new dominion.GameState(list_card0);
    dominion.Card.CardName cardName2 = dominion.Card.CardName.Smithy;
    dominion.Card card3 = dominion.Card.getCard(list_card0, cardName2);
    java.lang.String str4 = card3.toString();
    java.lang.String str5 = card3.toString();
    int i6 = card3.getTreasureValue();
    dominion.Card[] card_array7 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card8 = new java.util.ArrayList<dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card8, card_array7);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Smithy;
    dominion.Card card11 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName10);
    dominion.GameState gameState12 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card8);
    dominion.GameState gameState13 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card8);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i14 = gameState13.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i15 = gameState13.play();
    dominion.GameState gameState16 = null;
    dominion.Player player18 = new dominion.Player(gameState16, "hi!");
    dominion.Card card19 = null;
    player18.addHand(card19);
    player18.playKingdomCard();
    player18.playKingdomCard();
    gameState13.addPlayer(player18);
    dominion.GameState gameState24 = null;
    dominion.Player player26 = new dominion.Player(gameState24, "hi!");
    dominion.Card card27 = null;
    player26.addHand(card27);
    player26.playKingdomCard();
    dominion.Card card30 = null;
    player26.discard(card30);
    player26.playTtreasureCard();
    dominion.Card card33 = null;
    player26.discard(card33);
    gameState13.addPlayer(player26);
    java.util.List<dominion.Card> list_card36 = dominion.Card.createCards();
    dominion.GameState gameState37 = new dominion.GameState(list_card36);
    dominion.Card.CardName cardName38 = dominion.Card.CardName.Smithy;
    dominion.Card card39 = dominion.Card.getCard(list_card36, cardName38);
    java.lang.String str40 = card39.toString();
    dominion.Card.CardName cardName41 = card39.getCardName();
    player26.discard(card39);
    dominion.Card.CardName cardName43 = card39.getCardName();
    boolean b44 = card3.equals((java.lang.Object)card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName2.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " \n\tSmithy"+ "'", str4.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " \n\tSmithy"+ "'", str5.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName10.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName38.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + " \n\tSmithy"+ "'", str40.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName41 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName41.equals(dominion.Card.CardName.Smithy));
    org.junit.Assert.assertTrue("'" + cardName43 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName43.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test171"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i9 = gameState6.gameBoard;
    java.util.List<dominion.Card> list_card10 = dominion.Card.createCards();
    dominion.GameState gameState11 = new dominion.GameState(list_card10);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard(list_card10, cardName12);
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Smithy;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    dominion.GameState gameState20 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState20.play();
    java.util.List<dominion.Player> list_player22 = gameState20.players;
    boolean b23 = card13.equals((java.lang.Object)list_player22);
    gameState6.players = list_player22;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName17.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test172"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    java.lang.String str9 = player2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str9.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test173"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.lang.String str19 = gameState6.toString();
    dominion.GameState gameState20 = null;
    dominion.Player player22 = new dominion.Player(gameState20, "hi!");
    dominion.Card card23 = null;
    player22.addHand(card23);
    player22.playKingdomCard();
    dominion.Card card26 = null;
    player22.discard(card26);
    player22.playKingdomCard();
    dominion.Card[] card_array29 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card30 = new java.util.ArrayList<dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card30, card_array29);
    dominion.Card.CardName cardName32 = dominion.Card.CardName.Smithy;
    dominion.Card card33 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card30, cardName32);
    dominion.GameState gameState34 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.Player player37 = new dominion.Player(gameState35, "");
    player22.buyCard(gameState35);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i39 = gameState35.gameBoard;
    dominion.GameState gameState40 = gameState35.clone();
    java.util.List<dominion.Card> list_card41 = dominion.Card.createCards();
    dominion.GameState gameState42 = new dominion.GameState(list_card41);
    gameState40.cards = list_card41;
    gameState6.cards = list_card41;
    dominion.Card[] card_array45 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card46 = new java.util.ArrayList<dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card46, card_array45);
    dominion.Card.CardName cardName48 = dominion.Card.CardName.Smithy;
    dominion.Card card49 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card46, cardName48);
    dominion.GameState gameState50 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card46);
    dominion.Card.Type type51 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card52 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card46, type51);
    java.util.List<dominion.Card> list_card53 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card41, type51);
    dominion.Card.CardName cardName54 = dominion.Card.CardName.Gold;
    dominion.Card card55 = dominion.Card.getCard(list_card41, cardName54);
    dominion.Card.CardName cardName56 = card55.getCardName();
    int i57 = card55.getTreasureValue();
    dominion.Card.Type type58 = card55.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str19.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName32.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName48.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card49);
    org.junit.Assert.assertTrue("'" + type51 + "' != '" + dominion.Card.Type.TREASURE + "'", type51.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + dominion.Card.CardName.Gold + "'", cardName54.equals(dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card55);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + dominion.Card.CardName.Gold + "'", cardName56.equals(dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 3);
    org.junit.Assert.assertTrue("'" + type58 + "' != '" + dominion.Card.Type.TREASURE + "'", type58.equals(dominion.Card.Type.TREASURE));

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test174"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.GameState gameState1 = new dominion.GameState(list_card0);
    dominion.Card.CardName cardName2 = dominion.Card.CardName.Smithy;
    dominion.Card card3 = dominion.Card.getCard(list_card0, cardName2);
    dominion.Card[] card_array4 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card5 = new java.util.ArrayList<dominion.Card>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card5, card_array4);
    dominion.Card.CardName cardName7 = dominion.Card.CardName.Smithy;
    dominion.Card card8 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card5, cardName7);
    dominion.GameState gameState9 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card5);
    dominion.GameState gameState10 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card5);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i11 = gameState10.play();
    java.util.List<dominion.Player> list_player12 = gameState10.players;
    boolean b13 = card3.equals((java.lang.Object)list_player12);
    int i14 = card3.getCost();
    dominion.Card[] card_array15 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card16 = new java.util.ArrayList<dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card16, card_array15);
    dominion.Card.CardName cardName18 = dominion.Card.CardName.Smithy;
    dominion.Card card19 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card16, cardName18);
    dominion.GameState gameState20 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card16);
    dominion.GameState gameState21 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card16);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i22 = gameState21.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i23 = gameState21.play();
    dominion.GameState gameState24 = null;
    dominion.Player player26 = new dominion.Player(gameState24, "hi!");
    dominion.Card card27 = null;
    player26.addHand(card27);
    player26.playKingdomCard();
    player26.playKingdomCard();
    gameState21.addPlayer(player26);
    java.util.List<dominion.Player> list_player32 = gameState21.players;
    boolean b33 = card3.equals((java.lang.Object)gameState21);
    int i34 = card3.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName2.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName7.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName18.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 4);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test175"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playTtreasureCard();
    java.lang.String str9 = player2.toString();
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Smithy;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card11);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card11);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState16.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i18 = gameState16.play();
    dominion.GameState gameState19 = null;
    dominion.Player player21 = new dominion.Player(gameState19, "hi!");
    dominion.Card card22 = null;
    player21.addHand(card22);
    player21.playKingdomCard();
    player21.playKingdomCard();
    gameState16.addPlayer(player21);
    dominion.GameState gameState27 = null;
    dominion.Player player29 = new dominion.Player(gameState27, "hi!");
    dominion.Card card30 = null;
    player29.addHand(card30);
    player29.playKingdomCard();
    dominion.Card card33 = null;
    player29.discard(card33);
    player29.playTtreasureCard();
    dominion.Card card36 = null;
    player29.discard(card36);
    gameState16.addPlayer(player29);
    java.util.List<dominion.Card> list_card39 = dominion.Card.createCards();
    dominion.GameState gameState40 = new dominion.GameState(list_card39);
    dominion.Card.CardName cardName41 = dominion.Card.CardName.Smithy;
    dominion.Card card42 = dominion.Card.getCard(list_card39, cardName41);
    java.lang.String str43 = card42.toString();
    dominion.Card.CardName cardName44 = card42.getCardName();
    player29.discard(card42);
    java.util.List<dominion.Card> list_card46 = dominion.Card.createCards();
    dominion.GameState gameState47 = new dominion.GameState(list_card46);
    dominion.Card.CardName cardName48 = dominion.Card.CardName.Smithy;
    dominion.Card card49 = dominion.Card.getCard(list_card46, cardName48);
    java.lang.String str50 = card49.toString();
    int i51 = card42.compareTo(card49);
    player2.discard(card42);
    // The following exception was thrown during execution in test generation
    try {
    player2.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str9.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName13.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    org.junit.Assert.assertTrue("'" + cardName41 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName41.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + " \n\tSmithy"+ "'", str43.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName44.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName48.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + " \n\tSmithy"+ "'", str50.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test176"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    dominion.Player player9 = new dominion.Player(gameState6, "hi!");
    dominion.Player player11 = new dominion.Player(gameState6, "hi!");
    player11.playTtreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test177"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState15.gameBoard;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState15.getWinners();
    gameState15.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i22 = gameState15.getWinners();
    java.lang.String str23 = gameState15.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str23.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test178"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState6.gameBoard;
    java.util.List<dominion.Card> list_card20 = gameState6.cards;
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Smithy;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    gameState6.cards = arraylist_card22;
    dominion.Player player29 = new dominion.Player(gameState6, " --- hi! ---  --- --------------------------- --- Hand: [null,  \n\tSmithy]Discard: [null, null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Smithy;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card31);
    dominion.GameState gameState36 = gameState35.clone();
    dominion.Card[] card_array37 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card38 = new java.util.ArrayList<dominion.Card>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card38, card_array37);
    dominion.Card.CardName cardName40 = dominion.Card.CardName.Smithy;
    dominion.Card card41 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card38, cardName40);
    dominion.GameState gameState42 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card38);
    dominion.GameState gameState43 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card38);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i44 = gameState43.play();
    java.util.List<dominion.Player> list_player45 = gameState43.players;
    gameState35.players = list_player45;
    gameState6.players = list_player45;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName24.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName33.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    org.junit.Assert.assertTrue("'" + cardName40 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName40.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player45);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test179"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.GameState gameState1 = new dominion.GameState(list_card0);
    dominion.GameState gameState2 = null;
    dominion.Player player4 = new dominion.Player(gameState2, "hi!");
    dominion.Card card5 = null;
    player4.addHand(card5);
    player4.playKingdomCard();
    dominion.Card card8 = null;
    player4.discard(card8);
    gameState1.addPlayer(player4);
    java.util.List<dominion.Card> list_card11 = dominion.Card.createCards();
    dominion.GameState gameState12 = new dominion.GameState(list_card11);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Smithy;
    dominion.Card card14 = dominion.Card.getCard(list_card11, cardName13);
    java.lang.String str15 = card14.toString();
    player4.addHand(card14);
    boolean b18 = card14.equals((java.lang.Object)10.0d);
    int i19 = card14.getTreasureValue();
    int i20 = card14.score();
    dominion.Card.CardName cardName21 = card14.getCardName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName13.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + " \n\tSmithy"+ "'", str15.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    org.junit.Assert.assertTrue("'" + cardName21 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName21.equals(dominion.Card.CardName.Smithy));

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test180"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "hi!");
    dominion.Card card20 = null;
    player19.addHand(card20);
    player19.playKingdomCard();
    dominion.Card card23 = null;
    player19.discard(card23);
    player19.playTtreasureCard();
    dominion.Card card26 = null;
    player19.discard(card26);
    gameState6.addPlayer(player19);
    dominion.GameState gameState29 = gameState6.clone();
    dominion.GameState gameState30 = gameState29.clone();
    java.util.List<dominion.Card> list_card31 = dominion.Card.createCards();
    dominion.GameState gameState32 = new dominion.GameState(list_card31);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i33 = gameState32.gameBoard;
    dominion.GameState gameState34 = gameState32.clone();
    java.util.List<dominion.Player> list_player35 = gameState34.players;
    gameState29.players = list_player35;
    dominion.Player player38 = new dominion.Player(gameState29, "hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player35);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test181"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState6.gameBoard;
    java.util.List<dominion.Card> list_card20 = gameState6.cards;
    dominion.GameState gameState21 = new dominion.GameState(list_card20);
    java.util.List<dominion.Card> list_card22 = dominion.Card.createCards();
    dominion.GameState gameState23 = new dominion.GameState(list_card22);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Smithy;
    dominion.Card card25 = dominion.Card.getCard(list_card22, cardName24);
    dominion.Card.Type type26 = card25.getType();
    java.util.List<dominion.Card> list_card27 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card20, type26);
    dominion.GameState gameState28 = new dominion.GameState(list_card20);
    dominion.Card[] card_array29 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card30 = new java.util.ArrayList<dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card30, card_array29);
    dominion.Card.CardName cardName32 = dominion.Card.CardName.Smithy;
    dominion.Card card33 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card30, cardName32);
    dominion.GameState gameState34 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.Card.Type type35 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card36 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card30, type35);
    java.util.List<dominion.Card> list_card37 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card20, type35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName24.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + dominion.Card.Type.ACTION + "'", type26.equals(dominion.Card.Type.ACTION));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName32.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    org.junit.Assert.assertTrue("'" + type35 + "' != '" + dominion.Card.Type.TREASURE + "'", type35.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test182"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.GameState gameState1 = new dominion.GameState(list_card0);
    dominion.Card.CardName cardName2 = dominion.Card.CardName.Smithy;
    dominion.Card card3 = dominion.Card.getCard(list_card0, cardName2);
    java.lang.String str4 = card3.toString();
    java.lang.String str5 = card3.toString();
    dominion.Card[] card_array6 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card7 = new java.util.ArrayList<dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card7, card_array6);
    dominion.Card.CardName cardName9 = dominion.Card.CardName.Smithy;
    dominion.Card card10 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card7, cardName9);
    dominion.GameState gameState11 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card7);
    dominion.GameState gameState12 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card7);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i13 = gameState12.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i14 = gameState12.play();
    dominion.GameState gameState15 = null;
    dominion.Player player17 = new dominion.Player(gameState15, "hi!");
    dominion.Card card18 = null;
    player17.addHand(card18);
    player17.playKingdomCard();
    player17.playKingdomCard();
    gameState12.addPlayer(player17);
    boolean b23 = gameState12.isGameOver();
    gameState12.initializeGame();
    java.lang.String str25 = gameState12.toString();
    dominion.GameState gameState26 = null;
    dominion.Player player28 = new dominion.Player(gameState26, "hi!");
    dominion.Card card29 = null;
    player28.addHand(card29);
    player28.playKingdomCard();
    dominion.Card card32 = null;
    player28.discard(card32);
    player28.playKingdomCard();
    dominion.Card[] card_array35 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card36 = new java.util.ArrayList<dominion.Card>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card36, card_array35);
    dominion.Card.CardName cardName38 = dominion.Card.CardName.Smithy;
    dominion.Card card39 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card36, cardName38);
    dominion.GameState gameState40 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card36);
    dominion.GameState gameState41 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card36);
    dominion.Player player43 = new dominion.Player(gameState41, "");
    player28.buyCard(gameState41);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i45 = gameState41.gameBoard;
    dominion.GameState gameState46 = gameState41.clone();
    java.util.List<dominion.Card> list_card47 = dominion.Card.createCards();
    dominion.GameState gameState48 = new dominion.GameState(list_card47);
    gameState46.cards = list_card47;
    gameState12.cards = list_card47;
    dominion.Card[] card_array51 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card52 = new java.util.ArrayList<dominion.Card>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card52, card_array51);
    dominion.Card.CardName cardName54 = dominion.Card.CardName.Smithy;
    dominion.Card card55 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card52, cardName54);
    dominion.GameState gameState56 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card52);
    dominion.Card.Type type57 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card58 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card52, type57);
    java.util.List<dominion.Card> list_card59 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card47, type57);
    dominion.Card.CardName cardName60 = dominion.Card.CardName.Ambassador;
    dominion.Card card61 = dominion.Card.getCard(list_card47, cardName60);
    dominion.Card.CardName cardName62 = dominion.Card.CardName.Baron;
    boolean b63 = card61.equals((java.lang.Object)cardName62);
    int i64 = card61.getTreasureValue();
    int i65 = card3.compareTo(card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName2.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " \n\tSmithy"+ "'", str4.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " \n\tSmithy"+ "'", str5.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName9.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str25.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName38.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName54.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card55);
    org.junit.Assert.assertTrue("'" + type57 + "' != '" + dominion.Card.Type.TREASURE + "'", type57.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + dominion.Card.CardName.Ambassador + "'", cardName60.equals(dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card61);
    org.junit.Assert.assertTrue("'" + cardName62 + "' != '" + dominion.Card.CardName.Baron + "'", cardName62.equals(dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == (-2));

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test183"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "");
    dominion.Card card3 = null;
    player2.addHand(card3);
    dominion.GameState gameState5 = null;
    dominion.Player player7 = new dominion.Player(gameState5, "hi!");
    dominion.Card card8 = null;
    player7.addHand(card8);
    player7.playKingdomCard();
    dominion.Card card11 = null;
    player7.discard(card11);
    player7.playTtreasureCard();
    dominion.Card card14 = null;
    player7.discard(card14);
    dominion.Card card16 = null;
    player7.addHand(card16);
    java.util.List<dominion.Card> list_card18 = dominion.Card.createCards();
    dominion.GameState gameState19 = new dominion.GameState(list_card18);
    dominion.Card.CardName cardName20 = dominion.Card.CardName.Smithy;
    dominion.Card card21 = dominion.Card.getCard(list_card18, cardName20);
    player7.addHand(card21);
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Smithy;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.GameState gameState28 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card24);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card24);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i30 = gameState29.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i31 = gameState29.play();
    dominion.GameState gameState32 = null;
    dominion.Player player34 = new dominion.Player(gameState32, "hi!");
    dominion.Card card35 = null;
    player34.addHand(card35);
    player34.playKingdomCard();
    player34.playKingdomCard();
    gameState29.addPlayer(player34);
    dominion.GameState gameState40 = null;
    dominion.Player player42 = new dominion.Player(gameState40, "hi!");
    dominion.Card card43 = null;
    player42.addHand(card43);
    player42.playKingdomCard();
    dominion.Card card46 = null;
    player42.discard(card46);
    player42.playTtreasureCard();
    dominion.Card card49 = null;
    player42.discard(card49);
    gameState29.addPlayer(player42);
    java.util.List<dominion.Card> list_card52 = dominion.Card.createCards();
    dominion.GameState gameState53 = new dominion.GameState(list_card52);
    dominion.Card.CardName cardName54 = dominion.Card.CardName.Smithy;
    dominion.Card card55 = dominion.Card.getCard(list_card52, cardName54);
    java.lang.String str56 = card55.toString();
    dominion.Card.CardName cardName57 = card55.getCardName();
    player42.discard(card55);
    int i59 = card55.score();
    player7.addHand(card55);
    player2.discard(card55);
    int i62 = card55.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName20.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName26.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName54.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + " \n\tSmithy"+ "'", str56.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName57 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName57.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 4);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test184"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState6.gameBoard;
    java.util.List<dominion.Card> list_card20 = gameState6.cards;
    dominion.GameState gameState21 = new dominion.GameState(list_card20);
    java.util.List<dominion.Card> list_card22 = dominion.Card.createCards();
    dominion.GameState gameState23 = new dominion.GameState(list_card22);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Smithy;
    dominion.Card card25 = dominion.Card.getCard(list_card22, cardName24);
    dominion.Card.Type type26 = card25.getType();
    java.util.List<dominion.Card> list_card27 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card20, type26);
    dominion.GameState gameState28 = new dominion.GameState(list_card20);
    dominion.Card.Type type29 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card30 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card20, type29);
    dominion.Card.Type type31 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card32 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card30, type31);
    dominion.Card.Type type33 = dominion.Card.Type.ACTION;
    java.util.List<dominion.Card> list_card34 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card30, type33);
    java.util.List<dominion.Card> list_card35 = dominion.Card.createCards();
    dominion.Card[] card_array36 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card37 = new java.util.ArrayList<dominion.Card>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card37, card_array36);
    dominion.Card.CardName cardName39 = dominion.Card.CardName.Smithy;
    dominion.Card card40 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card37, cardName39);
    dominion.GameState gameState41 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card37);
    dominion.Card.Type type42 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card43 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card37, type42);
    java.util.List<dominion.Card> list_card44 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card35, type42);
    dominion.Card[] card_array45 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card46 = new java.util.ArrayList<dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card46, card_array45);
    dominion.Card.CardName cardName48 = dominion.Card.CardName.Smithy;
    dominion.Card card49 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card46, cardName48);
    dominion.GameState gameState50 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card46);
    dominion.GameState gameState51 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card46);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i52 = gameState51.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i53 = gameState51.play();
    dominion.GameState gameState54 = null;
    dominion.Player player56 = new dominion.Player(gameState54, "hi!");
    dominion.Card card57 = null;
    player56.addHand(card57);
    player56.playKingdomCard();
    player56.playKingdomCard();
    gameState51.addPlayer(player56);
    boolean b62 = gameState51.isGameOver();
    gameState51.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i64 = gameState51.gameBoard;
    java.util.List<dominion.Card> list_card65 = gameState51.cards;
    dominion.Card.CardName cardName66 = dominion.Card.CardName.Minion;
    dominion.Card card67 = dominion.Card.getCard(list_card65, cardName66);
    dominion.Card.CardName cardName68 = dominion.Card.CardName.Curse;
    dominion.Card card69 = dominion.Card.getCard(list_card65, cardName68);
    dominion.Card card70 = dominion.Card.getCard(list_card44, cardName68);
    dominion.Card card71 = dominion.Card.getCard(list_card30, cardName68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName24.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + dominion.Card.Type.ACTION + "'", type26.equals(dominion.Card.Type.ACTION));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    org.junit.Assert.assertTrue("'" + type29 + "' != '" + dominion.Card.Type.TREASURE + "'", type29.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    org.junit.Assert.assertTrue("'" + type31 + "' != '" + dominion.Card.Type.TREASURE + "'", type31.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    org.junit.Assert.assertTrue("'" + type33 + "' != '" + dominion.Card.Type.ACTION + "'", type33.equals(dominion.Card.Type.ACTION));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName39.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);
    org.junit.Assert.assertTrue("'" + type42 + "' != '" + dominion.Card.Type.TREASURE + "'", type42.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName48.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card65);
    org.junit.Assert.assertTrue("'" + cardName66 + "' != '" + dominion.Card.CardName.Minion + "'", cardName66.equals(dominion.Card.CardName.Minion));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card67);
    org.junit.Assert.assertTrue("'" + cardName68 + "' != '" + dominion.Card.CardName.Curse + "'", cardName68.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card71);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test185"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.lang.String str19 = gameState6.toString();
    dominion.GameState gameState20 = null;
    dominion.Player player22 = new dominion.Player(gameState20, "hi!");
    dominion.Card card23 = null;
    player22.addHand(card23);
    player22.playKingdomCard();
    dominion.Card card26 = null;
    player22.discard(card26);
    player22.playKingdomCard();
    dominion.Card[] card_array29 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card30 = new java.util.ArrayList<dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card30, card_array29);
    dominion.Card.CardName cardName32 = dominion.Card.CardName.Smithy;
    dominion.Card card33 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card30, cardName32);
    dominion.GameState gameState34 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.Player player37 = new dominion.Player(gameState35, "");
    player22.buyCard(gameState35);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i39 = gameState35.gameBoard;
    dominion.GameState gameState40 = gameState35.clone();
    java.util.List<dominion.Card> list_card41 = dominion.Card.createCards();
    dominion.GameState gameState42 = new dominion.GameState(list_card41);
    gameState40.cards = list_card41;
    gameState6.cards = list_card41;
    boolean b45 = gameState6.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str19.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName32.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test186"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    gameState15.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState15.play();
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Smithy;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    dominion.GameState gameState27 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i28 = gameState27.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i29 = gameState27.play();
    dominion.GameState gameState30 = null;
    dominion.Player player32 = new dominion.Player(gameState30, "hi!");
    dominion.Card card33 = null;
    player32.addHand(card33);
    player32.playKingdomCard();
    player32.playKingdomCard();
    gameState27.addPlayer(player32);
    gameState15.addPlayer(player32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName24.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i29);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test187"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    player2.playKingdomCard();
    java.lang.String str7 = player2.toString();
    java.util.List<dominion.Card> list_card8 = dominion.Card.createCards();
    dominion.GameState gameState9 = new dominion.GameState(list_card8);
    dominion.GameState gameState10 = gameState9.clone();
    player2.buyCard(gameState9);
    dominion.GameState gameState12 = null;
    dominion.Player player14 = new dominion.Player(gameState12, "hi!");
    dominion.Card card15 = null;
    player14.addHand(card15);
    player14.playKingdomCard();
    dominion.Card card18 = null;
    player14.discard(card18);
    player14.playKingdomCard();
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Smithy;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    dominion.GameState gameState27 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    dominion.Player player29 = new dominion.Player(gameState27, "");
    player14.buyCard(gameState27);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i31 = gameState27.gameBoard;
    gameState9.gameBoard = hashmap_card_i31;
    dominion.GameState gameState33 = null;
    dominion.Player player35 = new dominion.Player(gameState33, "hi!");
    dominion.Card card36 = null;
    player35.addHand(card36);
    player35.playKingdomCard();
    dominion.Card card39 = null;
    player35.discard(card39);
    player35.playKingdomCard();
    dominion.Card[] card_array42 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card43 = new java.util.ArrayList<dominion.Card>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card43, card_array42);
    dominion.Card.CardName cardName45 = dominion.Card.CardName.Smithy;
    dominion.Card card46 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card43, cardName45);
    dominion.GameState gameState47 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card43);
    dominion.GameState gameState48 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card43);
    dominion.Player player50 = new dominion.Player(gameState48, "");
    player35.buyCard(gameState48);
    gameState48.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i53 = gameState48.play();
    dominion.Card[] card_array54 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card55 = new java.util.ArrayList<dominion.Card>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card55, card_array54);
    dominion.Card.CardName cardName57 = dominion.Card.CardName.Smithy;
    dominion.Card card58 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card55, cardName57);
    dominion.GameState gameState59 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card55);
    dominion.GameState gameState60 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card55);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i61 = gameState60.play();
    java.util.List<dominion.Player> list_player62 = gameState60.players;
    gameState48.players = list_player62;
    gameState9.players = list_player62;
    java.lang.String str65 = gameState9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName24.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    org.junit.Assert.assertTrue("'" + cardName45 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName45.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    org.junit.Assert.assertTrue("'" + cardName57 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName57.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str65.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test188"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState15.gameBoard;
    dominion.GameState gameState20 = gameState15.clone();
    java.util.List<dominion.Card> list_card21 = dominion.Card.createCards();
    dominion.GameState gameState22 = new dominion.GameState(list_card21);
    gameState20.cards = list_card21;
    dominion.Card[] card_array24 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card25 = new java.util.ArrayList<dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card25, card_array24);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Smithy;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card25);
    dominion.Card.Type type30 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card31 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card25, type30);
    gameState20.cards = arraylist_card25;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i33 = gameState20.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = gameState20.gameBoard;
    java.util.List<dominion.Card> list_card35 = dominion.Card.createCards();
    dominion.Card[] card_array36 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card37 = new java.util.ArrayList<dominion.Card>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card37, card_array36);
    dominion.Card.CardName cardName39 = dominion.Card.CardName.Smithy;
    dominion.Card card40 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card37, cardName39);
    dominion.GameState gameState41 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card37);
    dominion.Card.Type type42 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card43 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card37, type42);
    java.util.List<dominion.Card> list_card44 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card35, type42);
    java.util.List<dominion.Card> list_card45 = dominion.Card.createCards();
    dominion.GameState gameState46 = new dominion.GameState(list_card45);
    dominion.Card.CardName cardName47 = dominion.Card.CardName.Smithy;
    dominion.Card card48 = dominion.Card.getCard(list_card45, cardName47);
    dominion.Card card49 = dominion.Card.getCard(list_card44, cardName47);
    gameState20.cards = list_card44;
    dominion.Card[] card_array51 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card52 = new java.util.ArrayList<dominion.Card>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card52, card_array51);
    dominion.Card.CardName cardName54 = dominion.Card.CardName.Smithy;
    dominion.Card card55 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card52, cardName54);
    dominion.GameState gameState56 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card52);
    dominion.GameState gameState57 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card52);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i58 = gameState57.play();
    dominion.Player player60 = new dominion.Player(gameState57, "hi!");
    dominion.Player player62 = new dominion.Player(gameState57, "");
    java.util.List<dominion.Player> list_player63 = gameState57.players;
    gameState20.players = list_player63;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i65 = gameState20.getWinners();
    gameState20.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i67 = gameState20.gameBoard;
    gameState20.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName27.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + dominion.Card.Type.TREASURE + "'", type30.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName39.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);
    org.junit.Assert.assertTrue("'" + type42 + "' != '" + dominion.Card.Type.TREASURE + "'", type42.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName47.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName54.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i67);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test189"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    java.util.List<dominion.Player> list_player17 = gameState6.players;
    dominion.Player player19 = new dominion.Player(gameState6, " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    dominion.Card[] card_array20 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card21 = new java.util.ArrayList<dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card21, card_array20);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Smithy;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName23);
    dominion.GameState gameState25 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    dominion.GameState gameState26 = gameState25.clone();
    player19.buyCard(gameState25);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i28 = gameState25.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName23.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i28);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test190"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState15.gameBoard;
    dominion.GameState gameState20 = gameState15.clone();
    java.util.List<dominion.Card> list_card21 = dominion.Card.createCards();
    dominion.GameState gameState22 = new dominion.GameState(list_card21);
    gameState20.cards = list_card21;
    dominion.Card[] card_array24 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card25 = new java.util.ArrayList<dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card25, card_array24);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Smithy;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card25);
    dominion.Card.Type type30 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card31 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card25, type30);
    gameState20.cards = arraylist_card25;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i33 = gameState20.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = gameState20.gameBoard;
    boolean b35 = gameState20.isGameOver();
    boolean b36 = gameState20.isGameOver();
    dominion.Player player37 = null;
    gameState20.addPlayer(player37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName27.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + dominion.Card.Type.TREASURE + "'", type30.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test191"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.Card[] card_array1 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card2 = new java.util.ArrayList<dominion.Card>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card2, card_array1);
    dominion.Card.CardName cardName4 = dominion.Card.CardName.Smithy;
    dominion.Card card5 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card2, cardName4);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card2);
    dominion.Card.Type type7 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card8 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card2, type7);
    java.util.List<dominion.Card> list_card9 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card0, type7);
    dominion.Card.Type type10 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card11 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card9, type10);
    dominion.GameState gameState12 = new dominion.GameState(list_card11);
    java.util.List<dominion.Player> list_player13 = gameState12.players;
    java.lang.String str14 = gameState12.toString();
    java.util.List<dominion.Card> list_card15 = gameState12.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + cardName4 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName4.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card5);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + dominion.Card.Type.TREASURE + "'", type7.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    org.junit.Assert.assertTrue("'" + type10 + "' != '" + dominion.Card.Type.VICTORY + "'", type10.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str14.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test192"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playTtreasureCard();
    player2.playKingdomCard();
    dominion.Card card10 = null;
    player2.discard(card10);
    java.util.List<dominion.Card> list_card12 = dominion.Card.createCards();
    dominion.GameState gameState13 = new dominion.GameState(list_card12);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Smithy;
    dominion.Card card15 = dominion.Card.getCard(list_card12, cardName14);
    dominion.Card.CardName cardName16 = card15.getCardName();
    java.lang.String str17 = card15.toString();
    player2.discard(card15);
    // The following exception was thrown during execution in test generation
    try {
    player2.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName14.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName16.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + " \n\tSmithy"+ "'", str17.equals(" \n\tSmithy"));

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test193"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player8 = new dominion.Player(gameState6, "");
    dominion.Player player10 = new dominion.Player(gameState6, " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    dominion.GameState gameState11 = null;
    dominion.Player player13 = new dominion.Player(gameState11, "hi!");
    dominion.Card card14 = null;
    player13.addHand(card14);
    player13.playKingdomCard();
    dominion.Card card17 = null;
    player13.discard(card17);
    player13.playKingdomCard();
    dominion.Card[] card_array20 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card21 = new java.util.ArrayList<dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card21, card_array20);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Smithy;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName23);
    dominion.GameState gameState25 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    dominion.Player player28 = new dominion.Player(gameState26, "");
    player13.buyCard(gameState26);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i30 = gameState26.getWinners();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i31 = gameState26.gameBoard;
    player10.buyCard(gameState26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName23.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i31);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test194"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    player2.playKingdomCard();
    java.lang.String str7 = player2.toString();
    java.util.List<dominion.Card> list_card8 = dominion.Card.createCards();
    dominion.GameState gameState9 = new dominion.GameState(list_card8);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Smithy;
    dominion.Card card11 = dominion.Card.getCard(list_card8, cardName10);
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Smithy;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i19 = gameState18.play();
    java.util.List<dominion.Player> list_player20 = gameState18.players;
    boolean b21 = card11.equals((java.lang.Object)list_player20);
    player2.discard(card11);
    java.util.List<dominion.Card> list_card23 = dominion.Card.createCards();
    dominion.GameState gameState24 = new dominion.GameState(list_card23);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Smithy;
    dominion.Card card26 = dominion.Card.getCard(list_card23, cardName25);
    dominion.Card.CardName cardName27 = card26.getCardName();
    int i28 = card26.getTreasureValue();
    int i29 = card11.compareTo(card26);
    dominion.Card.Type type30 = card11.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName10.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName15.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName25.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card26);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName27.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + dominion.Card.Type.ACTION + "'", type30.equals(dominion.Card.Type.ACTION));

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test195"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    java.util.List<dominion.Card> list_card17 = dominion.Card.createCards();
    dominion.GameState gameState18 = new dominion.GameState(list_card17);
    dominion.GameState gameState19 = null;
    dominion.Player player21 = new dominion.Player(gameState19, "hi!");
    dominion.Card card22 = null;
    player21.addHand(card22);
    player21.playKingdomCard();
    dominion.Card card25 = null;
    player21.discard(card25);
    gameState18.addPlayer(player21);
    java.util.List<dominion.Card> list_card28 = dominion.Card.createCards();
    dominion.GameState gameState29 = new dominion.GameState(list_card28);
    dominion.Card.CardName cardName30 = dominion.Card.CardName.Smithy;
    dominion.Card card31 = dominion.Card.getCard(list_card28, cardName30);
    java.lang.String str32 = card31.toString();
    player21.addHand(card31);
    java.lang.String str34 = card31.toString();
    player11.discard(card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName30.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + " \n\tSmithy"+ "'", str32.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + " \n\tSmithy"+ "'", str34.equals(" \n\tSmithy"));

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test196"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    player2.playKingdomCard();
    java.lang.String str7 = player2.toString();
    java.util.List<dominion.Card> list_card8 = dominion.Card.createCards();
    dominion.GameState gameState9 = new dominion.GameState(list_card8);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Smithy;
    dominion.Card card11 = dominion.Card.getCard(list_card8, cardName10);
    dominion.Card[] card_array12 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card13 = new java.util.ArrayList<dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card13, card_array12);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Smithy;
    dominion.Card card16 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card13, cardName15);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card13);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i19 = gameState18.play();
    java.util.List<dominion.Player> list_player20 = gameState18.players;
    boolean b21 = card11.equals((java.lang.Object)list_player20);
    player2.discard(card11);
    java.util.List<dominion.Card> list_card23 = dominion.Card.createCards();
    dominion.GameState gameState24 = new dominion.GameState(list_card23);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Smithy;
    dominion.Card card26 = dominion.Card.getCard(list_card23, cardName25);
    dominion.Card.CardName cardName27 = card26.getCardName();
    int i28 = card26.getTreasureValue();
    int i29 = card11.compareTo(card26);
    int i30 = card26.getTreasureValue();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName10.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName15.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName25.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card26);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName27.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test197"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState6.gameBoard;
    java.util.List<dominion.Card> list_card20 = gameState6.cards;
    dominion.GameState gameState21 = new dominion.GameState(list_card20);
    java.util.List<dominion.Card> list_card22 = dominion.Card.createCards();
    dominion.GameState gameState23 = new dominion.GameState(list_card22);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Smithy;
    dominion.Card card25 = dominion.Card.getCard(list_card22, cardName24);
    dominion.Card.Type type26 = card25.getType();
    java.util.List<dominion.Card> list_card27 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card20, type26);
    dominion.GameState gameState28 = new dominion.GameState(list_card20);
    dominion.Card[] card_array29 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card30 = new java.util.ArrayList<dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card30, card_array29);
    dominion.Card.CardName cardName32 = dominion.Card.CardName.Smithy;
    dominion.Card card33 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card30, cardName32);
    dominion.GameState gameState34 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i36 = gameState35.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i37 = gameState35.play();
    dominion.GameState gameState38 = null;
    dominion.Player player40 = new dominion.Player(gameState38, "hi!");
    dominion.Card card41 = null;
    player40.addHand(card41);
    player40.playKingdomCard();
    player40.playKingdomCard();
    gameState35.addPlayer(player40);
    boolean b46 = gameState35.isGameOver();
    gameState35.initializeGame();
    java.lang.String str48 = gameState35.toString();
    dominion.GameState gameState49 = null;
    dominion.Player player51 = new dominion.Player(gameState49, "hi!");
    dominion.Card card52 = null;
    player51.addHand(card52);
    player51.playKingdomCard();
    dominion.Card card55 = null;
    player51.discard(card55);
    player51.playKingdomCard();
    dominion.Card[] card_array58 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card59 = new java.util.ArrayList<dominion.Card>();
    boolean b60 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card59, card_array58);
    dominion.Card.CardName cardName61 = dominion.Card.CardName.Smithy;
    dominion.Card card62 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card59, cardName61);
    dominion.GameState gameState63 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card59);
    dominion.GameState gameState64 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card59);
    dominion.Player player66 = new dominion.Player(gameState64, "");
    player51.buyCard(gameState64);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i68 = gameState64.gameBoard;
    dominion.GameState gameState69 = gameState64.clone();
    java.util.List<dominion.Card> list_card70 = dominion.Card.createCards();
    dominion.GameState gameState71 = new dominion.GameState(list_card70);
    gameState69.cards = list_card70;
    gameState35.cards = list_card70;
    dominion.Card[] card_array74 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card75 = new java.util.ArrayList<dominion.Card>();
    boolean b76 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card75, card_array74);
    dominion.Card.CardName cardName77 = dominion.Card.CardName.Smithy;
    dominion.Card card78 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card75, cardName77);
    dominion.GameState gameState79 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card75);
    dominion.Card.Type type80 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card81 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card75, type80);
    java.util.List<dominion.Card> list_card82 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card70, type80);
    java.util.List<dominion.Card> list_card83 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card20, type80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName24.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + dominion.Card.Type.ACTION + "'", type26.equals(dominion.Card.Type.ACTION));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName32.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str48.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    org.junit.Assert.assertTrue("'" + cardName61 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName61.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    org.junit.Assert.assertTrue("'" + cardName77 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName77.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card78);
    org.junit.Assert.assertTrue("'" + type80 + "' != '" + dominion.Card.Type.TREASURE + "'", type80.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card83);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test198"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.Player player10 = new dominion.Player(gameState6, " --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.List<dominion.Card> list_card11 = dominion.Card.createCards();
    dominion.GameState gameState12 = new dominion.GameState(list_card11);
    player10.buyCard(gameState12);
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Smithy;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    dominion.GameState gameState20 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState20.play();
    dominion.Player player23 = new dominion.Player(gameState20, "hi!");
    dominion.Player player25 = new dominion.Player(gameState20, "");
    java.util.List<dominion.Player> list_player26 = gameState20.players;
    java.util.List<dominion.Card> list_card27 = gameState20.cards;
    gameState12.cards = list_card27;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName17.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test199"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    java.util.List<dominion.Card> list_card9 = dominion.Card.createCards();
    dominion.GameState gameState10 = new dominion.GameState(list_card9);
    dominion.Card.CardName cardName11 = dominion.Card.CardName.Smithy;
    dominion.Card card12 = dominion.Card.getCard(list_card9, cardName11);
    dominion.Card.CardName cardName13 = card12.getCardName();
    int i14 = card12.score();
    player2.addHand(card12);
    player2.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName11.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card12);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName13.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test200"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState6.gameBoard;
    java.util.List<dominion.Card> list_card20 = gameState6.cards;
    dominion.GameState gameState21 = new dominion.GameState(list_card20);
    dominion.Card[] card_array22 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card23 = new java.util.ArrayList<dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card23, card_array22);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Smithy;
    dominion.Card card26 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card23, cardName25);
    dominion.GameState gameState27 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card23);
    dominion.GameState gameState28 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card23);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i29 = gameState28.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i30 = gameState28.play();
    dominion.GameState gameState31 = null;
    dominion.Player player33 = new dominion.Player(gameState31, "hi!");
    dominion.Card card34 = null;
    player33.addHand(card34);
    player33.playKingdomCard();
    player33.playKingdomCard();
    gameState28.addPlayer(player33);
    boolean b39 = gameState28.isGameOver();
    gameState28.initializeGame();
    java.lang.String str41 = gameState28.toString();
    dominion.GameState gameState42 = null;
    dominion.Player player44 = new dominion.Player(gameState42, "hi!");
    dominion.Card card45 = null;
    player44.addHand(card45);
    player44.playKingdomCard();
    dominion.Card card48 = null;
    player44.discard(card48);
    player44.playKingdomCard();
    dominion.Card[] card_array51 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card52 = new java.util.ArrayList<dominion.Card>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card52, card_array51);
    dominion.Card.CardName cardName54 = dominion.Card.CardName.Smithy;
    dominion.Card card55 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card52, cardName54);
    dominion.GameState gameState56 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card52);
    dominion.GameState gameState57 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card52);
    dominion.Player player59 = new dominion.Player(gameState57, "");
    player44.buyCard(gameState57);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i61 = gameState57.gameBoard;
    dominion.GameState gameState62 = gameState57.clone();
    java.util.List<dominion.Card> list_card63 = dominion.Card.createCards();
    dominion.GameState gameState64 = new dominion.GameState(list_card63);
    gameState62.cards = list_card63;
    gameState28.cards = list_card63;
    dominion.Card[] card_array67 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card68 = new java.util.ArrayList<dominion.Card>();
    boolean b69 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card68, card_array67);
    dominion.Card.CardName cardName70 = dominion.Card.CardName.Smithy;
    dominion.Card card71 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card68, cardName70);
    dominion.GameState gameState72 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card68);
    dominion.Card.Type type73 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card74 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card68, type73);
    java.util.List<dominion.Card> list_card75 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card63, type73);
    dominion.Card.CardName cardName76 = dominion.Card.CardName.Ambassador;
    dominion.Card card77 = dominion.Card.getCard(list_card63, cardName76);
    dominion.Card card78 = dominion.Card.getCard(list_card20, cardName76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName25.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str41.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName54.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    org.junit.Assert.assertTrue("'" + cardName70 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName70.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card71);
    org.junit.Assert.assertTrue("'" + type73 + "' != '" + dominion.Card.Type.TREASURE + "'", type73.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card75);
    org.junit.Assert.assertTrue("'" + cardName76 + "' != '" + dominion.Card.CardName.Ambassador + "'", cardName76.equals(dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card78);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test201"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playTtreasureCard();
    dominion.Card card9 = null;
    player2.discard(card9);
    dominion.Card card11 = null;
    player2.addHand(card11);
    java.util.List<dominion.Card> list_card13 = dominion.Card.createCards();
    dominion.GameState gameState14 = new dominion.GameState(list_card13);
    dominion.Card.CardName cardName15 = dominion.Card.CardName.Smithy;
    dominion.Card card16 = dominion.Card.getCard(list_card13, cardName15);
    player2.addHand(card16);
    java.util.List<dominion.Card> list_card18 = dominion.Card.createCards();
    dominion.Card[] card_array19 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card20 = new java.util.ArrayList<dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card20, card_array19);
    dominion.Card.CardName cardName22 = dominion.Card.CardName.Smithy;
    dominion.Card card23 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card20, cardName22);
    dominion.GameState gameState24 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card20);
    dominion.Card.Type type25 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card26 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card20, type25);
    java.util.List<dominion.Card> list_card27 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card18, type25);
    dominion.Card.Type type28 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card27, type28);
    dominion.GameState gameState30 = new dominion.GameState(list_card29);
    java.util.List<dominion.Player> list_player31 = gameState30.players;
    dominion.GameState gameState32 = gameState30.clone();
    java.util.List<dominion.Card> list_card33 = gameState32.cards;
    player2.buyCard(gameState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName15.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName22.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + type25 + "' != '" + dominion.Card.Type.TREASURE + "'", type25.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + dominion.Card.Type.VICTORY + "'", type28.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test202"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState7 = null;
    dominion.Player player9 = new dominion.Player(gameState7, "hi!");
    dominion.Card card10 = null;
    player9.addHand(card10);
    gameState6.addPlayer(player9);
    dominion.Card[] card_array13 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card14 = new java.util.ArrayList<dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card14, card_array13);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Smithy;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card14, cardName16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card14);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card14);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState19.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState19.play();
    dominion.GameState gameState22 = null;
    dominion.Player player24 = new dominion.Player(gameState22, "hi!");
    dominion.Card card25 = null;
    player24.addHand(card25);
    player24.playKingdomCard();
    player24.playKingdomCard();
    gameState19.addPlayer(player24);
    dominion.GameState gameState30 = null;
    dominion.Player player32 = new dominion.Player(gameState30, "hi!");
    dominion.Card card33 = null;
    player32.addHand(card33);
    player32.playKingdomCard();
    dominion.Card card36 = null;
    player32.discard(card36);
    player32.playTtreasureCard();
    dominion.Card card39 = null;
    player32.discard(card39);
    gameState19.addPlayer(player32);
    dominion.GameState gameState42 = gameState19.clone();
    dominion.Card[] card_array43 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card44 = new java.util.ArrayList<dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card44, card_array43);
    dominion.Card.CardName cardName46 = dominion.Card.CardName.Smithy;
    dominion.Card card47 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card44, cardName46);
    dominion.GameState gameState48 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card44);
    gameState42.cards = arraylist_card44;
    java.lang.String str50 = gameState42.toString();
    java.util.List<dominion.Card> list_card51 = dominion.Card.createCards();
    dominion.Card[] card_array52 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card53 = new java.util.ArrayList<dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card53, card_array52);
    dominion.Card.CardName cardName55 = dominion.Card.CardName.Smithy;
    dominion.Card card56 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card53, cardName55);
    dominion.GameState gameState57 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card53);
    dominion.Card.Type type58 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card59 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card53, type58);
    java.util.List<dominion.Card> list_card60 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card51, type58);
    dominion.Card.Type type61 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card62 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card60, type61);
    dominion.GameState gameState63 = new dominion.GameState(list_card62);
    java.util.List<dominion.Player> list_player64 = gameState63.players;
    dominion.GameState gameState65 = gameState63.clone();
    java.util.List<dominion.Player> list_player66 = gameState65.players;
    gameState42.players = list_player66;
    gameState6.players = list_player66;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName16.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + cardName46 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName46.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str50.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName55.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    org.junit.Assert.assertTrue("'" + type58 + "' != '" + dominion.Card.Type.TREASURE + "'", type58.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    org.junit.Assert.assertTrue("'" + type61 + "' != '" + dominion.Card.Type.VICTORY + "'", type61.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player66);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test203"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.GameState gameState1 = new dominion.GameState(list_card0);
    java.util.List<dominion.Card> list_card2 = gameState1.cards;
    gameState1.initializeGame();
    gameState1.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card2);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test204"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    java.util.List<dominion.Player> list_player17 = gameState6.players;
    dominion.Player player19 = new dominion.Player(gameState6, " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    dominion.Card[] card_array20 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card21 = new java.util.ArrayList<dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card21, card_array20);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Smithy;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName23);
    dominion.GameState gameState25 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    dominion.GameState gameState26 = gameState25.clone();
    player19.buyCard(gameState25);
    player19.playTtreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName23.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState26);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test205"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    gameState15.initializeGame();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState15.play();
    boolean b21 = gameState15.isGameOver();
    java.util.List<dominion.Card> list_card22 = dominion.Card.createCards();
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Smithy;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.GameState gameState28 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card24);
    dominion.Card.Type type29 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card30 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card24, type29);
    java.util.List<dominion.Card> list_card31 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card22, type29);
    dominion.Card.Type type32 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card33 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card31, type32);
    dominion.GameState gameState34 = new dominion.GameState(list_card33);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i35 = gameState34.gameBoard;
    gameState15.gameBoard = hashmap_card_i35;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName26.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    org.junit.Assert.assertTrue("'" + type29 + "' != '" + dominion.Card.Type.TREASURE + "'", type29.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    org.junit.Assert.assertTrue("'" + type32 + "' != '" + dominion.Card.Type.VICTORY + "'", type32.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i35);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test206"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    java.util.List<dominion.Card> list_card9 = dominion.Card.createCards();
    dominion.GameState gameState10 = new dominion.GameState(list_card9);
    dominion.Card.CardName cardName11 = dominion.Card.CardName.Smithy;
    dominion.Card card12 = dominion.Card.getCard(list_card9, cardName11);
    dominion.Card.CardName cardName13 = card12.getCardName();
    int i14 = card12.score();
    player2.addHand(card12);
    dominion.Card[] card_array16 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card17 = new java.util.ArrayList<dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card17, card_array16);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Smithy;
    dominion.Card card20 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card17, cardName19);
    dominion.GameState gameState21 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card17);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i22 = gameState21.play();
    dominion.Player player24 = new dominion.Player(gameState21, " --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.lang.String str25 = gameState21.toString();
    dominion.Player player27 = new dominion.Player(gameState21, "");
    player27.printStateGame();
    dominion.Card[] card_array29 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card30 = new java.util.ArrayList<dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card30, card_array29);
    dominion.Card.CardName cardName32 = dominion.Card.CardName.Smithy;
    dominion.Card card33 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card30, cardName32);
    dominion.GameState gameState34 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i36 = gameState35.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i37 = gameState35.play();
    dominion.GameState gameState38 = null;
    dominion.Player player40 = new dominion.Player(gameState38, "hi!");
    dominion.Card card41 = null;
    player40.addHand(card41);
    player40.playKingdomCard();
    player40.playKingdomCard();
    gameState35.addPlayer(player40);
    dominion.GameState gameState46 = null;
    dominion.Player player48 = new dominion.Player(gameState46, "hi!");
    dominion.Card card49 = null;
    player48.addHand(card49);
    player48.playKingdomCard();
    dominion.Card card52 = null;
    player48.discard(card52);
    player48.playTtreasureCard();
    dominion.Card card55 = null;
    player48.discard(card55);
    gameState35.addPlayer(player48);
    // The following exception was thrown during execution in test generation
    try {
    card12.play(player27, gameState35);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName11.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card12);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName13.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName19.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str25.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName32.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i37);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test207"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    player2.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test208"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "hi!");
    dominion.Card card20 = null;
    player19.addHand(card20);
    player19.playKingdomCard();
    dominion.Card card23 = null;
    player19.discard(card23);
    player19.playKingdomCard();
    dominion.Card[] card_array26 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card27 = new java.util.ArrayList<dominion.Card>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card27, card_array26);
    dominion.Card.CardName cardName29 = dominion.Card.CardName.Smithy;
    dominion.Card card30 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card27, cardName29);
    dominion.GameState gameState31 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card27);
    dominion.GameState gameState32 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card27);
    dominion.Player player34 = new dominion.Player(gameState32, "");
    player19.buyCard(gameState32);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i36 = gameState32.gameBoard;
    dominion.GameState gameState37 = gameState32.clone();
    java.util.List<dominion.Card> list_card38 = dominion.Card.createCards();
    dominion.GameState gameState39 = new dominion.GameState(list_card38);
    gameState37.cards = list_card38;
    gameState6.cards = list_card38;
    dominion.Card.Type type42 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card43 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card38, type42);
    dominion.GameState gameState44 = new dominion.GameState(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName29.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    org.junit.Assert.assertTrue("'" + type42 + "' != '" + dominion.Card.Type.VICTORY + "'", type42.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test209"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.Player player10 = new dominion.Player(gameState6, " --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    player10.playTtreasureCard();
    player10.playKingdomCard();
    java.util.List<dominion.Card> list_card13 = dominion.Card.createCards();
    dominion.GameState gameState14 = new dominion.GameState(list_card13);
    dominion.GameState gameState15 = null;
    dominion.Player player17 = new dominion.Player(gameState15, "hi!");
    dominion.Card card18 = null;
    player17.addHand(card18);
    player17.playKingdomCard();
    dominion.Card card21 = null;
    player17.discard(card21);
    gameState14.addPlayer(player17);
    java.util.List<dominion.Card> list_card24 = dominion.Card.createCards();
    dominion.GameState gameState25 = new dominion.GameState(list_card24);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Smithy;
    dominion.Card card27 = dominion.Card.getCard(list_card24, cardName26);
    java.lang.String str28 = card27.toString();
    player17.addHand(card27);
    dominion.GameState gameState30 = null;
    dominion.Player player32 = new dominion.Player(gameState30, "hi!");
    dominion.Card card33 = null;
    player32.addHand(card33);
    player32.playKingdomCard();
    dominion.Card card36 = null;
    player32.discard(card36);
    player32.playTtreasureCard();
    dominion.Card card39 = null;
    player32.discard(card39);
    dominion.Card card41 = null;
    player32.addHand(card41);
    java.util.List<dominion.Card> list_card43 = dominion.Card.createCards();
    dominion.GameState gameState44 = new dominion.GameState(list_card43);
    dominion.Card.CardName cardName45 = dominion.Card.CardName.Smithy;
    dominion.Card card46 = dominion.Card.getCard(list_card43, cardName45);
    player32.addHand(card46);
    player17.discard(card46);
    java.lang.Object obj49 = null;
    boolean b50 = card46.equals(obj49);
    player10.discard(card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName26.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + " \n\tSmithy"+ "'", str28.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    org.junit.Assert.assertTrue("'" + cardName45 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName45.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test210"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    java.util.List<dominion.Card> list_card18 = dominion.Card.createCards();
    dominion.Card[] card_array19 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card20 = new java.util.ArrayList<dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card20, card_array19);
    dominion.Card.CardName cardName22 = dominion.Card.CardName.Smithy;
    dominion.Card card23 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card20, cardName22);
    dominion.GameState gameState24 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card20);
    dominion.Card.Type type25 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card26 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card20, type25);
    java.util.List<dominion.Card> list_card27 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card18, type25);
    dominion.Card.Type type28 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card29 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card27, type28);
    dominion.GameState gameState30 = new dominion.GameState(list_card29);
    java.util.List<dominion.Player> list_player31 = gameState30.players;
    gameState6.players = list_player31;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName22.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + type25 + "' != '" + dominion.Card.Type.TREASURE + "'", type25.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + dominion.Card.Type.VICTORY + "'", type28.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player31);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test211"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playTtreasureCard();
    dominion.Card card9 = null;
    player2.addHand(card9);
    dominion.Card card11 = null;
    player2.addHand(card11);
    dominion.Card[] card_array13 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card14 = new java.util.ArrayList<dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card14, card_array13);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Smithy;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card14, cardName16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card14);
    dominion.GameState gameState19 = gameState18.clone();
    dominion.Card[] card_array20 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card21 = new java.util.ArrayList<dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card21, card_array20);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Smithy;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName23);
    dominion.GameState gameState25 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i27 = gameState26.play();
    java.util.List<dominion.Player> list_player28 = gameState26.players;
    gameState18.players = list_player28;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i30 = gameState18.getWinners();
    player2.buyCard(gameState18);
    dominion.GameState gameState32 = null;
    dominion.Player player34 = new dominion.Player(gameState32, "hi!");
    dominion.Card card35 = null;
    player34.addHand(card35);
    player34.playKingdomCard();
    dominion.Card card38 = null;
    player34.discard(card38);
    player34.playKingdomCard();
    dominion.Card[] card_array41 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card42 = new java.util.ArrayList<dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card42, card_array41);
    dominion.Card.CardName cardName44 = dominion.Card.CardName.Smithy;
    dominion.Card card45 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card42, cardName44);
    dominion.GameState gameState46 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card42);
    dominion.GameState gameState47 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card42);
    dominion.Player player49 = new dominion.Player(gameState47, "");
    player34.buyCard(gameState47);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i51 = gameState47.gameBoard;
    dominion.GameState gameState52 = gameState47.clone();
    java.util.List<dominion.Card> list_card53 = dominion.Card.createCards();
    dominion.GameState gameState54 = new dominion.GameState(list_card53);
    gameState52.cards = list_card53;
    dominion.Card[] card_array56 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card57 = new java.util.ArrayList<dominion.Card>();
    boolean b58 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card57, card_array56);
    dominion.Card.CardName cardName59 = dominion.Card.CardName.Smithy;
    dominion.Card card60 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card57, cardName59);
    dominion.GameState gameState61 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card57);
    dominion.Card.Type type62 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card63 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card57, type62);
    gameState52.cards = arraylist_card57;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i65 = gameState52.gameBoard;
    gameState18.gameBoard = hashmap_card_i65;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i67 = gameState18.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName16.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName23.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName44.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName59.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card60);
    org.junit.Assert.assertTrue("'" + type62 + "' != '" + dominion.Card.Type.TREASURE + "'", type62.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i67);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test212"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.GameState gameState1 = new dominion.GameState(list_card0);
    dominion.Card.CardName cardName2 = dominion.Card.CardName.Smithy;
    dominion.Card card3 = dominion.Card.getCard(list_card0, cardName2);
    java.lang.String str4 = card3.toString();
    int i5 = card3.score();
    int i6 = card3.getTreasureValue();
    java.lang.Object obj7 = null;
    boolean b8 = card3.equals(obj7);
    int i9 = card3.getCost();
    dominion.Card[] card_array10 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card11 = new java.util.ArrayList<dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card11, card_array10);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Smithy;
    dominion.Card card14 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card11, cardName13);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card11);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card11);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState16.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i18 = gameState16.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState16.gameBoard;
    boolean b20 = card3.equals((java.lang.Object)hashmap_card_i19);
    int i21 = card3.score();
    int i22 = card3.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName2.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " \n\tSmithy"+ "'", str4.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName13.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 4);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test213"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "hi!");
    dominion.Card card20 = null;
    player19.addHand(card20);
    player19.playKingdomCard();
    dominion.Card card23 = null;
    player19.discard(card23);
    player19.playKingdomCard();
    dominion.Card[] card_array26 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card27 = new java.util.ArrayList<dominion.Card>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card27, card_array26);
    dominion.Card.CardName cardName29 = dominion.Card.CardName.Smithy;
    dominion.Card card30 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card27, cardName29);
    dominion.GameState gameState31 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card27);
    dominion.GameState gameState32 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card27);
    dominion.Player player34 = new dominion.Player(gameState32, "");
    player19.buyCard(gameState32);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i36 = gameState32.gameBoard;
    dominion.GameState gameState37 = gameState32.clone();
    java.util.List<dominion.Card> list_card38 = dominion.Card.createCards();
    dominion.GameState gameState39 = new dominion.GameState(list_card38);
    gameState37.cards = list_card38;
    gameState6.cards = list_card38;
    java.util.List<dominion.Card> list_card42 = dominion.Card.createCards();
    dominion.GameState gameState43 = new dominion.GameState(list_card42);
    dominion.Card.CardName cardName44 = dominion.Card.CardName.Smithy;
    dominion.Card card45 = dominion.Card.getCard(list_card42, cardName44);
    dominion.Card.Type type46 = card45.getType();
    java.util.List<dominion.Card> list_card47 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card38, type46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName29.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName44.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card45);
    org.junit.Assert.assertTrue("'" + type46 + "' != '" + dominion.Card.Type.ACTION + "'", type46.equals(dominion.Card.Type.ACTION));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test214"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    java.util.List<dominion.Card> list_card9 = dominion.Card.createCards();
    dominion.GameState gameState10 = new dominion.GameState(list_card9);
    dominion.Card.CardName cardName11 = dominion.Card.CardName.Smithy;
    dominion.Card card12 = dominion.Card.getCard(list_card9, cardName11);
    dominion.Card.CardName cardName13 = card12.getCardName();
    int i14 = card12.score();
    player2.addHand(card12);
    player2.playTtreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName11.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card12);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName13.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test215"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.lang.String str19 = gameState6.toString();
    dominion.Card[] card_array20 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card21 = new java.util.ArrayList<dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card21, card_array20);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Smithy;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName23);
    dominion.GameState gameState25 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i27 = gameState26.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i28 = gameState26.play();
    dominion.GameState gameState29 = null;
    dominion.Player player31 = new dominion.Player(gameState29, "hi!");
    dominion.Card card32 = null;
    player31.addHand(card32);
    player31.playKingdomCard();
    player31.playKingdomCard();
    gameState26.addPlayer(player31);
    boolean b37 = gameState26.isGameOver();
    gameState26.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i39 = gameState26.gameBoard;
    java.util.List<dominion.Card> list_card40 = gameState26.cards;
    dominion.GameState gameState41 = new dominion.GameState(list_card40);
    java.util.List<dominion.Card> list_card42 = dominion.Card.createCards();
    dominion.GameState gameState43 = new dominion.GameState(list_card42);
    dominion.Card.CardName cardName44 = dominion.Card.CardName.Smithy;
    dominion.Card card45 = dominion.Card.getCard(list_card42, cardName44);
    dominion.Card.Type type46 = card45.getType();
    java.util.List<dominion.Card> list_card47 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card40, type46);
    dominion.GameState gameState48 = new dominion.GameState(list_card40);
    dominion.Card.Type type49 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card50 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card40, type49);
    dominion.Card.Type type51 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card52 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card50, type51);
    dominion.Card.Type type53 = dominion.Card.Type.ACTION;
    java.util.List<dominion.Card> list_card54 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card50, type53);
    gameState6.cards = list_card54;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str19.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName23.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    org.junit.Assert.assertTrue("'" + cardName44 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName44.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card45);
    org.junit.Assert.assertTrue("'" + type46 + "' != '" + dominion.Card.Type.ACTION + "'", type46.equals(dominion.Card.Type.ACTION));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    org.junit.Assert.assertTrue("'" + type49 + "' != '" + dominion.Card.Type.TREASURE + "'", type49.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    org.junit.Assert.assertTrue("'" + type51 + "' != '" + dominion.Card.Type.TREASURE + "'", type51.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    org.junit.Assert.assertTrue("'" + type53 + "' != '" + dominion.Card.Type.ACTION + "'", type53.equals(dominion.Card.Type.ACTION));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card54);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test216"); }

    java.util.List<dominion.Card> list_card0 = null;
    dominion.Card.CardName cardName1 = dominion.Card.CardName.Great_Hall;
    // The following exception was thrown during execution in test generation
    try {
    dominion.Card card2 = dominion.Card.getCard(list_card0, cardName1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + cardName1 + "' != '" + dominion.Card.CardName.Great_Hall + "'", cardName1.equals(dominion.Card.CardName.Great_Hall));

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test217"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.lang.String str19 = gameState6.toString();
    dominion.GameState gameState20 = null;
    dominion.Player player22 = new dominion.Player(gameState20, "hi!");
    dominion.Card card23 = null;
    player22.addHand(card23);
    player22.playKingdomCard();
    dominion.Card card26 = null;
    player22.discard(card26);
    player22.playKingdomCard();
    dominion.Card[] card_array29 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card30 = new java.util.ArrayList<dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card30, card_array29);
    dominion.Card.CardName cardName32 = dominion.Card.CardName.Smithy;
    dominion.Card card33 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card30, cardName32);
    dominion.GameState gameState34 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.Player player37 = new dominion.Player(gameState35, "");
    player22.buyCard(gameState35);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i39 = gameState35.gameBoard;
    dominion.GameState gameState40 = gameState35.clone();
    java.util.List<dominion.Card> list_card41 = dominion.Card.createCards();
    dominion.GameState gameState42 = new dominion.GameState(list_card41);
    gameState40.cards = list_card41;
    gameState6.cards = list_card41;
    dominion.Card[] card_array45 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card46 = new java.util.ArrayList<dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card46, card_array45);
    dominion.Card.CardName cardName48 = dominion.Card.CardName.Smithy;
    dominion.Card card49 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card46, cardName48);
    dominion.GameState gameState50 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card46);
    dominion.Card.Type type51 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card52 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card46, type51);
    java.util.List<dominion.Card> list_card53 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card41, type51);
    dominion.Card.CardName cardName54 = dominion.Card.CardName.Ambassador;
    dominion.Card card55 = dominion.Card.getCard(list_card41, cardName54);
    dominion.Card.CardName cardName56 = dominion.Card.CardName.Baron;
    boolean b57 = card55.equals((java.lang.Object)cardName56);
    int i58 = card55.getTreasureValue();
    dominion.Card.CardName cardName59 = card55.getCardName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str19.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName32.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName48.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card49);
    org.junit.Assert.assertTrue("'" + type51 + "' != '" + dominion.Card.Type.TREASURE + "'", type51.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + dominion.Card.CardName.Ambassador + "'", cardName54.equals(dominion.Card.CardName.Ambassador));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card55);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + dominion.Card.CardName.Baron + "'", cardName56.equals(dominion.Card.CardName.Baron));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + dominion.Card.CardName.Ambassador + "'", cardName59.equals(dominion.Card.CardName.Ambassador));

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test218"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = gameState5.clone();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test219"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.Card[] card_array1 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card2 = new java.util.ArrayList<dominion.Card>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card2, card_array1);
    dominion.Card.CardName cardName4 = dominion.Card.CardName.Smithy;
    dominion.Card card5 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card2, cardName4);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card2);
    dominion.Card.Type type7 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card8 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card2, type7);
    java.util.List<dominion.Card> list_card9 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card0, type7);
    dominion.Card.Type type10 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card11 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card9, type10);
    dominion.GameState gameState12 = new dominion.GameState(list_card11);
    dominion.Card[] card_array13 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card14 = new java.util.ArrayList<dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card14, card_array13);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Smithy;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card14, cardName16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card14);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card14);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState19.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState19.play();
    dominion.GameState gameState22 = null;
    dominion.Player player24 = new dominion.Player(gameState22, "hi!");
    dominion.Card card25 = null;
    player24.addHand(card25);
    player24.playKingdomCard();
    player24.playKingdomCard();
    gameState19.addPlayer(player24);
    dominion.GameState gameState30 = null;
    dominion.Player player32 = new dominion.Player(gameState30, "hi!");
    dominion.Card card33 = null;
    player32.addHand(card33);
    player32.playKingdomCard();
    dominion.Card card36 = null;
    player32.discard(card36);
    player32.playTtreasureCard();
    dominion.Card card39 = null;
    player32.discard(card39);
    gameState19.addPlayer(player32);
    dominion.GameState gameState42 = gameState19.clone();
    dominion.GameState gameState43 = null;
    dominion.Player player45 = new dominion.Player(gameState43, "hi!");
    dominion.Card card46 = null;
    player45.addHand(card46);
    player45.playKingdomCard();
    dominion.Card card49 = null;
    player45.discard(card49);
    player45.playKingdomCard();
    dominion.Card[] card_array52 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card53 = new java.util.ArrayList<dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card53, card_array52);
    dominion.Card.CardName cardName55 = dominion.Card.CardName.Smithy;
    dominion.Card card56 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card53, cardName55);
    dominion.GameState gameState57 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card53);
    dominion.GameState gameState58 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card53);
    dominion.Player player60 = new dominion.Player(gameState58, "");
    player45.buyCard(gameState58);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i62 = gameState58.gameBoard;
    dominion.GameState gameState63 = gameState58.clone();
    java.util.List<dominion.Card> list_card64 = dominion.Card.createCards();
    dominion.GameState gameState65 = new dominion.GameState(list_card64);
    gameState63.cards = list_card64;
    dominion.Card[] card_array67 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card68 = new java.util.ArrayList<dominion.Card>();
    boolean b69 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card68, card_array67);
    dominion.Card.CardName cardName70 = dominion.Card.CardName.Smithy;
    dominion.Card card71 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card68, cardName70);
    dominion.GameState gameState72 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card68);
    dominion.Card.Type type73 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card74 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card68, type73);
    gameState63.cards = arraylist_card68;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i76 = gameState63.gameBoard;
    gameState19.gameBoard = hashmap_card_i76;
    dominion.GameState gameState78 = null;
    dominion.Player player80 = new dominion.Player(gameState78, "hi!");
    dominion.Card card81 = null;
    player80.addHand(card81);
    player80.playKingdomCard();
    dominion.Card card84 = null;
    player80.discard(card84);
    player80.playTtreasureCard();
    dominion.Card card87 = null;
    player80.addHand(card87);
    gameState19.addPlayer(player80);
    java.util.List<dominion.Card> list_card90 = dominion.Card.createCards();
    dominion.GameState gameState91 = new dominion.GameState(list_card90);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i92 = gameState91.gameBoard;
    gameState19.gameBoard = hashmap_card_i92;
    gameState12.gameBoard = hashmap_card_i92;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i95 = gameState12.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + cardName4 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName4.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card5);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + dominion.Card.Type.TREASURE + "'", type7.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    org.junit.Assert.assertTrue("'" + type10 + "' != '" + dominion.Card.Type.VICTORY + "'", type10.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName16.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName55.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    org.junit.Assert.assertTrue("'" + cardName70 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName70.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card71);
    org.junit.Assert.assertTrue("'" + type73 + "' != '" + dominion.Card.Type.TREASURE + "'", type73.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i95);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test220"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    player2.playKingdomCard();
    java.lang.String str7 = player2.toString();
    java.util.List<dominion.Card> list_card8 = dominion.Card.createCards();
    dominion.GameState gameState9 = new dominion.GameState(list_card8);
    dominion.GameState gameState10 = gameState9.clone();
    player2.buyCard(gameState9);
    java.util.List<dominion.Card> list_card12 = dominion.Card.createCards();
    dominion.GameState gameState13 = new dominion.GameState(list_card12);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Smithy;
    dominion.Card card15 = dominion.Card.getCard(list_card12, cardName14);
    dominion.Card.CardName cardName16 = card15.getCardName();
    player2.discard(card15);
    dominion.Card.Type type18 = card15.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName14.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName16.equals(dominion.Card.CardName.Smithy));
    org.junit.Assert.assertTrue("'" + type18 + "' != '" + dominion.Card.Type.ACTION + "'", type18.equals(dominion.Card.Type.ACTION));

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test221"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    dominion.Player player9 = new dominion.Player(gameState6, "hi!");
    dominion.Player player11 = new dominion.Player(gameState6, "hi!");
    boolean b12 = gameState6.isGameOver();
    java.util.List<dominion.Card> list_card13 = gameState6.cards;
    dominion.GameState gameState14 = gameState6.clone();
    dominion.GameState gameState15 = gameState6.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState15);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test222"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState15.gameBoard;
    dominion.GameState gameState20 = gameState15.clone();
    dominion.Card[] card_array21 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card22 = new java.util.ArrayList<dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card22, card_array21);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Smithy;
    dominion.Card card25 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card22, cardName24);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    dominion.GameState gameState27 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card22);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i28 = gameState27.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i29 = gameState27.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i30 = gameState27.gameBoard;
    gameState15.gameBoard = hashmap_card_i30;
    dominion.GameState gameState32 = null;
    dominion.Player player34 = new dominion.Player(gameState32, "hi!");
    dominion.Card card35 = null;
    player34.addHand(card35);
    player34.playKingdomCard();
    dominion.Card card38 = null;
    player34.discard(card38);
    player34.playTtreasureCard();
    dominion.Card card41 = null;
    player34.discard(card41);
    dominion.Card card43 = null;
    player34.addHand(card43);
    gameState15.addPlayer(player34);
    dominion.Card[] card_array46 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card47 = new java.util.ArrayList<dominion.Card>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card47, card_array46);
    dominion.Card.CardName cardName49 = dominion.Card.CardName.Smithy;
    dominion.Card card50 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card47, cardName49);
    dominion.GameState gameState51 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card47);
    dominion.GameState gameState52 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card47);
    dominion.Card.CardName cardName53 = dominion.Card.CardName.Gardens;
    dominion.Card card54 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card47, cardName53);
    dominion.Card[] card_array55 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card56 = new java.util.ArrayList<dominion.Card>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card56, card_array55);
    dominion.Card.CardName cardName58 = dominion.Card.CardName.Smithy;
    dominion.Card card59 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card56, cardName58);
    dominion.GameState gameState60 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card56);
    dominion.GameState gameState61 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card56);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i62 = gameState61.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i63 = gameState61.play();
    dominion.GameState gameState64 = null;
    dominion.Player player66 = new dominion.Player(gameState64, "hi!");
    dominion.Card card67 = null;
    player66.addHand(card67);
    player66.playKingdomCard();
    player66.playKingdomCard();
    gameState61.addPlayer(player66);
    boolean b72 = gameState61.isGameOver();
    gameState61.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i74 = gameState61.gameBoard;
    java.util.List<dominion.Card> list_card75 = gameState61.cards;
    dominion.GameState gameState76 = new dominion.GameState(list_card75);
    java.util.List<dominion.Card> list_card77 = dominion.Card.createCards();
    dominion.GameState gameState78 = new dominion.GameState(list_card77);
    dominion.Card.CardName cardName79 = dominion.Card.CardName.Smithy;
    dominion.Card card80 = dominion.Card.getCard(list_card77, cardName79);
    dominion.Card.Type type81 = card80.getType();
    java.util.List<dominion.Card> list_card82 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card75, type81);
    dominion.GameState gameState83 = new dominion.GameState(list_card75);
    dominion.Card.Type type84 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card85 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card75, type84);
    java.util.List<dominion.Card> list_card86 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card47, type84);
    gameState15.cards = arraylist_card47;
    java.util.List<dominion.Player> list_player88 = gameState15.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName24.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    org.junit.Assert.assertTrue("'" + cardName49 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName49.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card50);
    org.junit.Assert.assertTrue("'" + cardName53 + "' != '" + dominion.Card.CardName.Gardens + "'", cardName53.equals(dominion.Card.CardName.Gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName58.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card77);
    org.junit.Assert.assertTrue("'" + cardName79 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName79.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card80);
    org.junit.Assert.assertTrue("'" + type81 + "' != '" + dominion.Card.Type.ACTION + "'", type81.equals(dominion.Card.Type.ACTION));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card82);
    org.junit.Assert.assertTrue("'" + type84 + "' != '" + dominion.Card.Type.TREASURE + "'", type84.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player88);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test223"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.addHand(card6);
    java.util.List<dominion.Card> list_card8 = dominion.Card.createCards();
    dominion.GameState gameState9 = new dominion.GameState(list_card8);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Smithy;
    dominion.Card card11 = dominion.Card.getCard(list_card8, cardName10);
    java.lang.String str12 = card11.toString();
    dominion.Card.CardName cardName13 = card11.getCardName();
    java.lang.String str14 = card11.toString();
    player2.discard(card11);
    java.util.List<dominion.Card> list_card16 = dominion.Card.createCards();
    dominion.GameState gameState17 = new dominion.GameState(list_card16);
    dominion.Card.CardName cardName18 = dominion.Card.CardName.Smithy;
    dominion.Card card19 = dominion.Card.getCard(list_card16, cardName18);
    dominion.Card.CardName cardName20 = card19.getCardName();
    java.lang.String str21 = card19.toString();
    player2.addHand(card19);
    int i23 = card19.getTreasureValue();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName10.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + " \n\tSmithy"+ "'", str12.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName13.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " \n\tSmithy"+ "'", str14.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName18.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card19);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName20.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + " \n\tSmithy"+ "'", str21.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test224"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.Card[] card_array1 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card2 = new java.util.ArrayList<dominion.Card>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card2, card_array1);
    dominion.Card.CardName cardName4 = dominion.Card.CardName.Smithy;
    dominion.Card card5 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card2, cardName4);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card2);
    dominion.Card.Type type7 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card8 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card2, type7);
    java.util.List<dominion.Card> list_card9 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card0, type7);
    dominion.Card.Type type10 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card11 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card9, type10);
    dominion.GameState gameState12 = new dominion.GameState(list_card11);
    java.util.List<dominion.Player> list_player13 = gameState12.players;
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Smithy;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    dominion.GameState gameState20 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState20.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i22 = gameState20.play();
    java.util.List<dominion.Player> list_player23 = gameState20.players;
    gameState12.players = list_player23;
    gameState12.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + cardName4 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName4.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card5);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + dominion.Card.Type.TREASURE + "'", type7.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    org.junit.Assert.assertTrue("'" + type10 + "' != '" + dominion.Card.Type.VICTORY + "'", type10.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName17.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player23);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test225"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState15.gameBoard;
    dominion.GameState gameState20 = gameState15.clone();
    java.util.List<dominion.Card> list_card21 = dominion.Card.createCards();
    dominion.GameState gameState22 = new dominion.GameState(list_card21);
    gameState20.cards = list_card21;
    dominion.Card[] card_array24 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card25 = new java.util.ArrayList<dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card25, card_array24);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Smithy;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card25);
    dominion.Card.Type type30 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card31 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card25, type30);
    gameState20.cards = arraylist_card25;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i33 = gameState20.gameBoard;
    dominion.GameState gameState34 = gameState20.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName27.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + dominion.Card.Type.TREASURE + "'", type30.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState34);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test226"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "hi!");
    dominion.Card card20 = null;
    player19.addHand(card20);
    player19.playKingdomCard();
    dominion.Card card23 = null;
    player19.discard(card23);
    player19.playTtreasureCard();
    dominion.Card card26 = null;
    player19.discard(card26);
    gameState6.addPlayer(player19);
    dominion.GameState gameState29 = gameState6.clone();
    // The following exception was thrown during execution in test generation
    try {
    gameState6.initializeGame();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState29);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test227"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.lang.String str19 = gameState6.toString();
    dominion.GameState gameState20 = null;
    dominion.Player player22 = new dominion.Player(gameState20, "hi!");
    dominion.Card card23 = null;
    player22.addHand(card23);
    player22.playKingdomCard();
    dominion.Card card26 = null;
    player22.discard(card26);
    player22.playKingdomCard();
    dominion.Card[] card_array29 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card30 = new java.util.ArrayList<dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card30, card_array29);
    dominion.Card.CardName cardName32 = dominion.Card.CardName.Smithy;
    dominion.Card card33 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card30, cardName32);
    dominion.GameState gameState34 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.Player player37 = new dominion.Player(gameState35, "");
    player22.buyCard(gameState35);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i39 = gameState35.gameBoard;
    dominion.GameState gameState40 = gameState35.clone();
    java.util.List<dominion.Card> list_card41 = dominion.Card.createCards();
    dominion.GameState gameState42 = new dominion.GameState(list_card41);
    gameState40.cards = list_card41;
    gameState6.cards = list_card41;
    dominion.Card[] card_array45 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card46 = new java.util.ArrayList<dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card46, card_array45);
    dominion.Card.CardName cardName48 = dominion.Card.CardName.Smithy;
    dominion.Card card49 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card46, cardName48);
    dominion.GameState gameState50 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card46);
    dominion.Card.Type type51 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card52 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card46, type51);
    java.util.List<dominion.Card> list_card53 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card41, type51);
    dominion.Card.CardName cardName54 = dominion.Card.CardName.Gold;
    dominion.Card card55 = dominion.Card.getCard(list_card41, cardName54);
    dominion.Card.CardName cardName56 = card55.getCardName();
    int i57 = card55.score();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str19.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName32.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName48.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card49);
    org.junit.Assert.assertTrue("'" + type51 + "' != '" + dominion.Card.Type.TREASURE + "'", type51.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + dominion.Card.CardName.Gold + "'", cardName54.equals(dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card55);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + dominion.Card.CardName.Gold + "'", cardName56.equals(dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test228"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.GameState gameState1 = new dominion.GameState(list_card0);
    boolean b2 = gameState1.isGameOver();
    dominion.Player player4 = new dominion.Player(gameState1, "");
    player4.playTtreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test229"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    dominion.Player player9 = new dominion.Player(gameState6, "hi!");
    dominion.Player player11 = new dominion.Player(gameState6, "hi!");
    boolean b12 = gameState6.isGameOver();
    java.util.List<dominion.Card> list_card13 = gameState6.cards;
    dominion.Card[] card_array14 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card15 = new java.util.ArrayList<dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card15, card_array14);
    dominion.Card.CardName cardName17 = dominion.Card.CardName.Smithy;
    dominion.Card card18 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card15, cardName17);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    dominion.GameState gameState20 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card15);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState20.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i22 = gameState20.play();
    dominion.GameState gameState23 = null;
    dominion.Player player25 = new dominion.Player(gameState23, "hi!");
    dominion.Card card26 = null;
    player25.addHand(card26);
    player25.playKingdomCard();
    player25.playKingdomCard();
    gameState20.addPlayer(player25);
    boolean b31 = gameState20.isGameOver();
    gameState20.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i33 = gameState20.gameBoard;
    java.util.List<dominion.Card> list_card34 = gameState20.cards;
    dominion.Card.CardName cardName35 = dominion.Card.CardName.Minion;
    dominion.Card card36 = dominion.Card.getCard(list_card34, cardName35);
    dominion.Card.CardName cardName37 = dominion.Card.CardName.Curse;
    dominion.Card card38 = dominion.Card.getCard(list_card34, cardName37);
    dominion.Card[] card_array39 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card40 = new java.util.ArrayList<dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card40, card_array39);
    dominion.Card.CardName cardName42 = dominion.Card.CardName.Smithy;
    dominion.Card card43 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card40, cardName42);
    dominion.GameState gameState44 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card40);
    dominion.GameState gameState45 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card40);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i46 = gameState45.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i47 = gameState45.play();
    dominion.GameState gameState48 = null;
    dominion.Player player50 = new dominion.Player(gameState48, "hi!");
    dominion.Card card51 = null;
    player50.addHand(card51);
    player50.playKingdomCard();
    player50.playKingdomCard();
    gameState45.addPlayer(player50);
    dominion.GameState gameState56 = null;
    dominion.Player player58 = new dominion.Player(gameState56, "hi!");
    dominion.Card card59 = null;
    player58.addHand(card59);
    player58.playKingdomCard();
    dominion.Card card62 = null;
    player58.discard(card62);
    player58.playKingdomCard();
    dominion.Card[] card_array65 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card66 = new java.util.ArrayList<dominion.Card>();
    boolean b67 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card66, card_array65);
    dominion.Card.CardName cardName68 = dominion.Card.CardName.Smithy;
    dominion.Card card69 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card66, cardName68);
    dominion.GameState gameState70 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card66);
    dominion.GameState gameState71 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card66);
    dominion.Player player73 = new dominion.Player(gameState71, "");
    player58.buyCard(gameState71);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i75 = gameState71.gameBoard;
    dominion.GameState gameState76 = gameState71.clone();
    java.util.List<dominion.Card> list_card77 = dominion.Card.createCards();
    dominion.GameState gameState78 = new dominion.GameState(list_card77);
    gameState76.cards = list_card77;
    gameState45.cards = list_card77;
    dominion.Card.Type type81 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card82 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card77, type81);
    java.util.List<dominion.Card> list_card83 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card34, type81);
    java.util.List<dominion.Card> list_card84 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card13, type81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName17.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + dominion.Card.CardName.Minion + "'", cardName35.equals(dominion.Card.CardName.Minion));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    org.junit.Assert.assertTrue("'" + cardName37 + "' != '" + dominion.Card.CardName.Curse + "'", cardName37.equals(dominion.Card.CardName.Curse));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName42.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    org.junit.Assert.assertTrue("'" + cardName68 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName68.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card77);
    org.junit.Assert.assertTrue("'" + type81 + "' != '" + dominion.Card.Type.VICTORY + "'", type81.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card84);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test230"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player8 = new dominion.Player(gameState6, "");
    dominion.Player player10 = new dominion.Player(gameState6, " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i11 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState6.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test231"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Card.CardName cardName7 = dominion.Card.CardName.Gardens;
    dominion.Card card8 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName7);
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i16 = gameState15.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i17 = gameState15.play();
    dominion.GameState gameState18 = null;
    dominion.Player player20 = new dominion.Player(gameState18, "hi!");
    dominion.Card card21 = null;
    player20.addHand(card21);
    player20.playKingdomCard();
    player20.playKingdomCard();
    gameState15.addPlayer(player20);
    boolean b26 = gameState15.isGameOver();
    gameState15.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i28 = gameState15.gameBoard;
    java.util.List<dominion.Card> list_card29 = gameState15.cards;
    dominion.GameState gameState30 = new dominion.GameState(list_card29);
    java.util.List<dominion.Card> list_card31 = dominion.Card.createCards();
    dominion.GameState gameState32 = new dominion.GameState(list_card31);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Smithy;
    dominion.Card card34 = dominion.Card.getCard(list_card31, cardName33);
    dominion.Card.Type type35 = card34.getType();
    java.util.List<dominion.Card> list_card36 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card29, type35);
    dominion.GameState gameState37 = new dominion.GameState(list_card29);
    dominion.Card.Type type38 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card39 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card29, type38);
    java.util.List<dominion.Card> list_card40 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card1, type38);
    dominion.GameState gameState41 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + dominion.Card.CardName.Gardens + "'", cardName7.equals(dominion.Card.CardName.Gardens));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName33.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card34);
    org.junit.Assert.assertTrue("'" + type35 + "' != '" + dominion.Card.Type.ACTION + "'", type35.equals(dominion.Card.Type.ACTION));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    org.junit.Assert.assertTrue("'" + type38 + "' != '" + dominion.Card.Type.TREASURE + "'", type38.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test232"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.Card[] card_array1 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card2 = new java.util.ArrayList<dominion.Card>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card2, card_array1);
    dominion.Card.CardName cardName4 = dominion.Card.CardName.Smithy;
    dominion.Card card5 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card2, cardName4);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card2);
    dominion.Card.Type type7 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card8 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card2, type7);
    java.util.List<dominion.Card> list_card9 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card0, type7);
    dominion.Card.Type type10 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card11 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card9, type10);
    dominion.GameState gameState12 = new dominion.GameState(list_card11);
    dominion.Card[] card_array13 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card14 = new java.util.ArrayList<dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card14, card_array13);
    dominion.Card.CardName cardName16 = dominion.Card.CardName.Smithy;
    dominion.Card card17 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card14, cardName16);
    dominion.GameState gameState18 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card14);
    dominion.GameState gameState19 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card14);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState19.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState19.play();
    dominion.GameState gameState22 = null;
    dominion.Player player24 = new dominion.Player(gameState22, "hi!");
    dominion.Card card25 = null;
    player24.addHand(card25);
    player24.playKingdomCard();
    player24.playKingdomCard();
    gameState19.addPlayer(player24);
    dominion.GameState gameState30 = null;
    dominion.Player player32 = new dominion.Player(gameState30, "hi!");
    dominion.Card card33 = null;
    player32.addHand(card33);
    player32.playKingdomCard();
    dominion.Card card36 = null;
    player32.discard(card36);
    player32.playTtreasureCard();
    dominion.Card card39 = null;
    player32.discard(card39);
    gameState19.addPlayer(player32);
    dominion.GameState gameState42 = gameState19.clone();
    dominion.GameState gameState43 = null;
    dominion.Player player45 = new dominion.Player(gameState43, "hi!");
    dominion.Card card46 = null;
    player45.addHand(card46);
    player45.playKingdomCard();
    dominion.Card card49 = null;
    player45.discard(card49);
    player45.playKingdomCard();
    dominion.Card[] card_array52 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card53 = new java.util.ArrayList<dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card53, card_array52);
    dominion.Card.CardName cardName55 = dominion.Card.CardName.Smithy;
    dominion.Card card56 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card53, cardName55);
    dominion.GameState gameState57 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card53);
    dominion.GameState gameState58 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card53);
    dominion.Player player60 = new dominion.Player(gameState58, "");
    player45.buyCard(gameState58);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i62 = gameState58.gameBoard;
    dominion.GameState gameState63 = gameState58.clone();
    java.util.List<dominion.Card> list_card64 = dominion.Card.createCards();
    dominion.GameState gameState65 = new dominion.GameState(list_card64);
    gameState63.cards = list_card64;
    dominion.Card[] card_array67 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card68 = new java.util.ArrayList<dominion.Card>();
    boolean b69 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card68, card_array67);
    dominion.Card.CardName cardName70 = dominion.Card.CardName.Smithy;
    dominion.Card card71 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card68, cardName70);
    dominion.GameState gameState72 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card68);
    dominion.Card.Type type73 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card74 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card68, type73);
    gameState63.cards = arraylist_card68;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i76 = gameState63.gameBoard;
    gameState19.gameBoard = hashmap_card_i76;
    dominion.GameState gameState78 = null;
    dominion.Player player80 = new dominion.Player(gameState78, "hi!");
    dominion.Card card81 = null;
    player80.addHand(card81);
    player80.playKingdomCard();
    dominion.Card card84 = null;
    player80.discard(card84);
    player80.playTtreasureCard();
    dominion.Card card87 = null;
    player80.addHand(card87);
    gameState19.addPlayer(player80);
    java.util.List<dominion.Card> list_card90 = dominion.Card.createCards();
    dominion.GameState gameState91 = new dominion.GameState(list_card90);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i92 = gameState91.gameBoard;
    gameState19.gameBoard = hashmap_card_i92;
    gameState12.gameBoard = hashmap_card_i92;
    java.util.List<dominion.Card> list_card95 = gameState12.cards;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i96 = gameState12.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + cardName4 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName4.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card5);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + dominion.Card.Type.TREASURE + "'", type7.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    org.junit.Assert.assertTrue("'" + type10 + "' != '" + dominion.Card.Type.VICTORY + "'", type10.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName16.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName55.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    org.junit.Assert.assertTrue("'" + cardName70 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName70.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card71);
    org.junit.Assert.assertTrue("'" + type73 + "' != '" + dominion.Card.Type.TREASURE + "'", type73.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i96);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test233"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    dominion.Player player20 = new dominion.Player(gameState6, " --- hi! ---  --- --------------------------- --- Hand: [null,  \n\tSmithy]Discard: [null, null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test234"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    dominion.Player player9 = new dominion.Player(gameState6, "hi!");
    dominion.Player player11 = new dominion.Player(gameState6, "");
    dominion.GameState gameState12 = null;
    dominion.Player player14 = new dominion.Player(gameState12, "hi!");
    dominion.Card card15 = null;
    player14.addHand(card15);
    player14.playKingdomCard();
    dominion.Card card18 = null;
    player14.discard(card18);
    player14.playTtreasureCard();
    dominion.Card card21 = null;
    player14.discard(card21);
    dominion.Card card23 = null;
    player14.addHand(card23);
    java.util.List<dominion.Card> list_card25 = dominion.Card.createCards();
    dominion.GameState gameState26 = new dominion.GameState(list_card25);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Smithy;
    dominion.Card card28 = dominion.Card.getCard(list_card25, cardName27);
    player14.addHand(card28);
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Smithy;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card31);
    dominion.GameState gameState36 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card31);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i37 = gameState36.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i38 = gameState36.play();
    dominion.GameState gameState39 = null;
    dominion.Player player41 = new dominion.Player(gameState39, "hi!");
    dominion.Card card42 = null;
    player41.addHand(card42);
    player41.playKingdomCard();
    player41.playKingdomCard();
    gameState36.addPlayer(player41);
    dominion.GameState gameState47 = null;
    dominion.Player player49 = new dominion.Player(gameState47, "hi!");
    dominion.Card card50 = null;
    player49.addHand(card50);
    player49.playKingdomCard();
    dominion.Card card53 = null;
    player49.discard(card53);
    player49.playTtreasureCard();
    dominion.Card card56 = null;
    player49.discard(card56);
    gameState36.addPlayer(player49);
    java.util.List<dominion.Card> list_card59 = dominion.Card.createCards();
    dominion.GameState gameState60 = new dominion.GameState(list_card59);
    dominion.Card.CardName cardName61 = dominion.Card.CardName.Smithy;
    dominion.Card card62 = dominion.Card.getCard(list_card59, cardName61);
    java.lang.String str63 = card62.toString();
    dominion.Card.CardName cardName64 = card62.getCardName();
    player49.discard(card62);
    int i66 = card62.score();
    player14.addHand(card62);
    player11.addHand(card62);
    int i69 = card62.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName27.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName33.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    org.junit.Assert.assertTrue("'" + cardName61 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName61.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + " \n\tSmithy"+ "'", str63.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName64 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName64.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 4);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test235"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playTtreasureCard();
    player2.playTtreasureCard();
    dominion.GameState gameState10 = null;
    player2.buyCard(gameState10);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test236"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "hi!");
    dominion.Card card20 = null;
    player19.addHand(card20);
    player19.playKingdomCard();
    dominion.Card card23 = null;
    player19.discard(card23);
    player19.playTtreasureCard();
    dominion.Card card26 = null;
    player19.discard(card26);
    gameState6.addPlayer(player19);
    dominion.GameState gameState29 = gameState6.clone();
    dominion.Card[] card_array30 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card31 = new java.util.ArrayList<dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card31, card_array30);
    dominion.Card.CardName cardName33 = dominion.Card.CardName.Smithy;
    dominion.Card card34 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card31, cardName33);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card31);
    gameState29.cards = arraylist_card31;
    java.lang.String str37 = gameState29.toString();
    java.util.List<dominion.Card> list_card38 = dominion.Card.createCards();
    dominion.Card[] card_array39 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card40 = new java.util.ArrayList<dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card40, card_array39);
    dominion.Card.CardName cardName42 = dominion.Card.CardName.Smithy;
    dominion.Card card43 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card40, cardName42);
    dominion.GameState gameState44 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card40);
    dominion.Card.Type type45 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card46 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card40, type45);
    java.util.List<dominion.Card> list_card47 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card38, type45);
    dominion.Card.Type type48 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card49 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card47, type48);
    dominion.GameState gameState50 = new dominion.GameState(list_card49);
    java.util.List<dominion.Player> list_player51 = gameState50.players;
    gameState29.players = list_player51;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName33.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str37.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName42.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card43);
    org.junit.Assert.assertTrue("'" + type45 + "' != '" + dominion.Card.Type.TREASURE + "'", type45.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    org.junit.Assert.assertTrue("'" + type48 + "' != '" + dominion.Card.Type.VICTORY + "'", type48.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player51);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test237"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player8 = new dominion.Player(gameState6, "");
    dominion.GameState gameState9 = null;
    player8.buyCard(gameState9);
    player8.playTtreasureCard();
    java.lang.String str12 = player8.toString();
    player8.playTtreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + " ---  ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str12.equals(" ---  ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test238"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.lang.String str19 = gameState6.toString();
    dominion.GameState gameState20 = null;
    dominion.Player player22 = new dominion.Player(gameState20, "hi!");
    dominion.Card card23 = null;
    player22.addHand(card23);
    player22.playKingdomCard();
    dominion.Card card26 = null;
    player22.discard(card26);
    player22.playKingdomCard();
    dominion.Card[] card_array29 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card30 = new java.util.ArrayList<dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card30, card_array29);
    dominion.Card.CardName cardName32 = dominion.Card.CardName.Smithy;
    dominion.Card card33 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card30, cardName32);
    dominion.GameState gameState34 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.Player player37 = new dominion.Player(gameState35, "");
    player22.buyCard(gameState35);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i39 = gameState35.gameBoard;
    dominion.GameState gameState40 = gameState35.clone();
    java.util.List<dominion.Card> list_card41 = dominion.Card.createCards();
    dominion.GameState gameState42 = new dominion.GameState(list_card41);
    gameState40.cards = list_card41;
    gameState6.cards = list_card41;
    dominion.Card[] card_array45 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card46 = new java.util.ArrayList<dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card46, card_array45);
    dominion.Card.CardName cardName48 = dominion.Card.CardName.Smithy;
    dominion.Card card49 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card46, cardName48);
    dominion.GameState gameState50 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card46);
    dominion.GameState gameState51 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card46);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i52 = gameState51.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i53 = gameState51.play();
    java.util.List<dominion.Player> list_player54 = gameState51.players;
    dominion.GameState gameState55 = null;
    dominion.Player player57 = new dominion.Player(gameState55, "hi!");
    dominion.Card card58 = null;
    player57.addHand(card58);
    player57.playKingdomCard();
    dominion.Card card61 = null;
    player57.discard(card61);
    gameState51.addPlayer(player57);
    gameState6.addPlayer(player57);
    boolean b65 = gameState6.isGameOver();
    java.util.List<dominion.Card> list_card66 = dominion.Card.createCards();
    dominion.Card[] card_array67 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card68 = new java.util.ArrayList<dominion.Card>();
    boolean b69 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card68, card_array67);
    dominion.Card.CardName cardName70 = dominion.Card.CardName.Smithy;
    dominion.Card card71 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card68, cardName70);
    dominion.GameState gameState72 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card68);
    dominion.Card.Type type73 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card74 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card68, type73);
    java.util.List<dominion.Card> list_card75 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card66, type73);
    gameState6.cards = list_card66;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str19.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName32.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName48.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    org.junit.Assert.assertTrue("'" + cardName70 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName70.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card71);
    org.junit.Assert.assertTrue("'" + type73 + "' != '" + dominion.Card.Type.TREASURE + "'", type73.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card75);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test239"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    java.util.List<dominion.Player> list_player9 = gameState6.players;
    dominion.GameState gameState10 = gameState6.clone();
    dominion.GameState gameState11 = null;
    dominion.Player player13 = new dominion.Player(gameState11, "hi!");
    dominion.Card card14 = null;
    player13.addHand(card14);
    player13.playKingdomCard();
    dominion.Card card17 = null;
    player13.discard(card17);
    player13.playKingdomCard();
    dominion.Card[] card_array20 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card21 = new java.util.ArrayList<dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card21, card_array20);
    dominion.Card.CardName cardName23 = dominion.Card.CardName.Smithy;
    dominion.Card card24 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card21, cardName23);
    dominion.GameState gameState25 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    dominion.GameState gameState26 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card21);
    dominion.Player player28 = new dominion.Player(gameState26, "");
    player13.buyCard(gameState26);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i30 = gameState26.gameBoard;
    dominion.GameState gameState31 = gameState26.clone();
    java.util.List<dominion.Card> list_card32 = dominion.Card.createCards();
    dominion.GameState gameState33 = new dominion.GameState(list_card32);
    gameState31.cards = list_card32;
    dominion.Card.Type type35 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card36 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card32, type35);
    dominion.Card[] card_array37 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card38 = new java.util.ArrayList<dominion.Card>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card38, card_array37);
    dominion.Card.CardName cardName40 = dominion.Card.CardName.Smithy;
    dominion.Card card41 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card38, cardName40);
    dominion.GameState gameState42 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card38);
    dominion.GameState gameState43 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card38);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i44 = gameState43.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i45 = gameState43.play();
    dominion.GameState gameState46 = null;
    dominion.Player player48 = new dominion.Player(gameState46, "hi!");
    dominion.Card card49 = null;
    player48.addHand(card49);
    player48.playKingdomCard();
    player48.playKingdomCard();
    gameState43.addPlayer(player48);
    boolean b54 = gameState43.isGameOver();
    gameState43.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i56 = gameState43.gameBoard;
    java.util.List<dominion.Card> list_card57 = gameState43.cards;
    dominion.GameState gameState58 = new dominion.GameState(list_card57);
    java.util.List<dominion.Card> list_card59 = dominion.Card.createCards();
    dominion.GameState gameState60 = new dominion.GameState(list_card59);
    dominion.Card.CardName cardName61 = dominion.Card.CardName.Smithy;
    dominion.Card card62 = dominion.Card.getCard(list_card59, cardName61);
    dominion.Card.Type type63 = card62.getType();
    java.util.List<dominion.Card> list_card64 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card57, type63);
    java.util.List<dominion.Card> list_card65 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card36, type63);
    gameState6.cards = list_card36;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i67 = gameState6.gameBoard;
    gameState6.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName23.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    org.junit.Assert.assertTrue("'" + type35 + "' != '" + dominion.Card.Type.VICTORY + "'", type35.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    org.junit.Assert.assertTrue("'" + cardName40 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName40.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    org.junit.Assert.assertTrue("'" + cardName61 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName61.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card62);
    org.junit.Assert.assertTrue("'" + type63 + "' != '" + dominion.Card.Type.ACTION + "'", type63.equals(dominion.Card.Type.ACTION));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i67);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test240"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState15.gameBoard;
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState15.getWinners();
    gameState15.initializeGame();
    java.util.List<dominion.Player> list_player22 = gameState15.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player22);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test241"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.Player player10 = new dominion.Player(gameState6, "The board game is embty you need to intialize the game!!!!");
    player10.playTtreasureCard();
    player10.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test242"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState6.gameBoard;
    java.util.List<dominion.Card> list_card20 = gameState6.cards;
    dominion.GameState gameState21 = new dominion.GameState(list_card20);
    java.util.List<dominion.Card> list_card22 = dominion.Card.createCards();
    dominion.GameState gameState23 = new dominion.GameState(list_card22);
    dominion.Card.CardName cardName24 = dominion.Card.CardName.Smithy;
    dominion.Card card25 = dominion.Card.getCard(list_card22, cardName24);
    dominion.Card.Type type26 = card25.getType();
    java.util.List<dominion.Card> list_card27 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card20, type26);
    dominion.GameState gameState28 = new dominion.GameState(list_card20);
    dominion.Card.Type type29 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card30 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card20, type29);
    dominion.Card.Type type31 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card32 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card30, type31);
    dominion.GameState gameState33 = new dominion.GameState(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName24.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + dominion.Card.Type.ACTION + "'", type26.equals(dominion.Card.Type.ACTION));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    org.junit.Assert.assertTrue("'" + type29 + "' != '" + dominion.Card.Type.TREASURE + "'", type29.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    org.junit.Assert.assertTrue("'" + type31 + "' != '" + dominion.Card.Type.TREASURE + "'", type31.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test243"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    dominion.Player player9 = new dominion.Player(gameState6, "hi!");
    dominion.Player player11 = new dominion.Player(gameState6, "hi!");
    dominion.GameState gameState12 = null;
    dominion.Player player14 = new dominion.Player(gameState12, "hi!");
    dominion.Card card15 = null;
    player14.addHand(card15);
    player14.playKingdomCard();
    dominion.Card card18 = null;
    player14.discard(card18);
    player14.playTtreasureCard();
    dominion.Card card21 = null;
    player14.addHand(card21);
    java.util.List<dominion.Card> list_card23 = dominion.Card.createCards();
    dominion.GameState gameState24 = new dominion.GameState(list_card23);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Smithy;
    dominion.Card card26 = dominion.Card.getCard(list_card23, cardName25);
    java.lang.String str27 = card26.toString();
    dominion.Card.CardName cardName28 = card26.getCardName();
    player14.discard(card26);
    int i30 = card26.getTreasureValue();
    dominion.Card.CardName cardName31 = card26.getCardName();
    player11.discard(card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName25.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + " \n\tSmithy"+ "'", str27.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName28.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName31.equals(dominion.Card.CardName.Smithy));

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test244"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.Card[] card_array1 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card2 = new java.util.ArrayList<dominion.Card>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card2, card_array1);
    dominion.Card.CardName cardName4 = dominion.Card.CardName.Smithy;
    dominion.Card card5 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card2, cardName4);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card2);
    dominion.Card.Type type7 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card8 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card2, type7);
    java.util.List<dominion.Card> list_card9 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card0, type7);
    dominion.Card.Type type10 = dominion.Card.Type.VICTORY;
    java.util.List<dominion.Card> list_card11 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card9, type10);
    dominion.GameState gameState12 = new dominion.GameState(list_card11);
    java.util.List<dominion.Player> list_player13 = gameState12.players;
    dominion.GameState gameState14 = null;
    dominion.Player player16 = new dominion.Player(gameState14, "hi!");
    dominion.Card card17 = null;
    player16.addHand(card17);
    player16.playKingdomCard();
    dominion.Card card20 = null;
    player16.discard(card20);
    player16.playKingdomCard();
    dominion.Card[] card_array23 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card24 = new java.util.ArrayList<dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card24, card_array23);
    dominion.Card.CardName cardName26 = dominion.Card.CardName.Smithy;
    dominion.Card card27 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card24, cardName26);
    dominion.GameState gameState28 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card24);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card24);
    dominion.Player player31 = new dominion.Player(gameState29, "");
    player16.buyCard(gameState29);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i33 = gameState29.gameBoard;
    gameState12.gameBoard = hashmap_card_i33;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + cardName4 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName4.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card5);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + dominion.Card.Type.TREASURE + "'", type7.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    org.junit.Assert.assertTrue("'" + type10 + "' != '" + dominion.Card.Type.VICTORY + "'", type10.equals(dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + cardName26 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName26.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i33);

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test245"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, " --- The board game is embty you need to intialize the game!!!! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    dominion.Card[] card_array3 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card4 = new java.util.ArrayList<dominion.Card>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card4, card_array3);
    dominion.Card.CardName cardName6 = dominion.Card.CardName.Smithy;
    dominion.Card card7 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card4, cardName6);
    dominion.GameState gameState8 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card4);
    dominion.GameState gameState9 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card4);
    dominion.Player player11 = new dominion.Player(gameState9, "");
    dominion.Player player13 = new dominion.Player(gameState9, " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i14 = gameState9.play();
    player2.buyCard(gameState9);
    dominion.GameState gameState16 = null;
    dominion.Player player18 = new dominion.Player(gameState16, "hi!");
    dominion.Card card19 = null;
    player18.addHand(card19);
    player18.playKingdomCard();
    dominion.Card card22 = null;
    player18.discard(card22);
    player18.playKingdomCard();
    dominion.Card[] card_array25 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card26 = new java.util.ArrayList<dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card26, card_array25);
    dominion.Card.CardName cardName28 = dominion.Card.CardName.Smithy;
    dominion.Card card29 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card26, cardName28);
    dominion.GameState gameState30 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card26);
    dominion.GameState gameState31 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card26);
    dominion.Player player33 = new dominion.Player(gameState31, "");
    player18.buyCard(gameState31);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i35 = gameState31.gameBoard;
    dominion.GameState gameState36 = gameState31.clone();
    dominion.Card[] card_array37 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card38 = new java.util.ArrayList<dominion.Card>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card38, card_array37);
    dominion.Card.CardName cardName40 = dominion.Card.CardName.Smithy;
    dominion.Card card41 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card38, cardName40);
    dominion.GameState gameState42 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card38);
    dominion.GameState gameState43 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card38);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i44 = gameState43.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i45 = gameState43.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i46 = gameState43.gameBoard;
    gameState31.gameBoard = hashmap_card_i46;
    gameState31.initializeGame();
    boolean b49 = gameState31.isGameOver();
    player2.buyCard(gameState31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    org.junit.Assert.assertTrue("'" + cardName6 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName6.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName28.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    org.junit.Assert.assertTrue("'" + cardName40 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName40.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test246"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState6.gameBoard;
    java.util.List<dominion.Card> list_card20 = gameState6.cards;
    dominion.GameState gameState21 = new dominion.GameState(list_card20);
    dominion.Card[] card_array22 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card23 = new java.util.ArrayList<dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card23, card_array22);
    dominion.Card.CardName cardName25 = dominion.Card.CardName.Smithy;
    dominion.Card card26 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card23, cardName25);
    dominion.GameState gameState27 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card23);
    dominion.GameState gameState28 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card23);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i29 = gameState28.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i30 = gameState28.play();
    dominion.GameState gameState31 = null;
    dominion.Player player33 = new dominion.Player(gameState31, "hi!");
    dominion.Card card34 = null;
    player33.addHand(card34);
    player33.playKingdomCard();
    player33.playKingdomCard();
    gameState28.addPlayer(player33);
    boolean b39 = gameState28.isGameOver();
    gameState28.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i41 = gameState28.gameBoard;
    gameState21.gameBoard = hashmap_card_i41;
    java.lang.String str43 = gameState21.toString();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i44 = gameState21.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName25.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str43.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i44);

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test247"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    dominion.Card[] card_array8 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card9 = new java.util.ArrayList<dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card9, card_array8);
    dominion.Card.CardName cardName11 = dominion.Card.CardName.Smithy;
    dominion.Card card12 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card9, cardName11);
    dominion.GameState gameState13 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card9);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i14 = gameState13.play();
    java.util.List<dominion.Player> list_player15 = gameState13.players;
    player2.buyCard(gameState13);
    java.util.List<dominion.Card> list_card17 = dominion.Card.createCards();
    dominion.GameState gameState18 = new dominion.GameState(list_card17);
    dominion.Card.CardName cardName19 = dominion.Card.CardName.Smithy;
    dominion.Card card20 = dominion.Card.getCard(list_card17, cardName19);
    java.lang.String str21 = card20.toString();
    dominion.Card.CardName cardName22 = card20.getCardName();
    int i23 = card20.getTreasureValue();
    player2.addHand(card20);
    java.lang.String str25 = card20.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName11.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName19.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + " \n\tSmithy"+ "'", str21.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName22.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + " \n\tSmithy"+ "'", str25.equals(" \n\tSmithy"));

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test248"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    java.util.List<dominion.Player> list_player17 = gameState6.players;
    dominion.GameState gameState18 = gameState6.clone();
    boolean b19 = gameState18.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test249"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player8 = new dominion.Player(gameState6, "");
    dominion.Player player10 = new dominion.Player(gameState6, "The board game is embty you need to intialize the game!!!!");
    dominion.Card[] card_array11 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card12 = new java.util.ArrayList<dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card12, card_array11);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Smithy;
    dominion.Card card15 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card12, cardName14);
    dominion.GameState gameState16 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    dominion.GameState gameState17 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card12);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i18 = gameState17.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i19 = gameState17.play();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState17.gameBoard;
    player10.buyCard(gameState17);
    dominion.GameState gameState22 = null;
    dominion.Player player24 = new dominion.Player(gameState22, "hi!");
    dominion.Card card25 = null;
    player24.addHand(card25);
    player24.playKingdomCard();
    dominion.Card card28 = null;
    player24.addHand(card28);
    java.util.List<dominion.Card> list_card30 = dominion.Card.createCards();
    dominion.GameState gameState31 = new dominion.GameState(list_card30);
    dominion.Card.CardName cardName32 = dominion.Card.CardName.Smithy;
    dominion.Card card33 = dominion.Card.getCard(list_card30, cardName32);
    java.lang.String str34 = card33.toString();
    dominion.Card.CardName cardName35 = card33.getCardName();
    java.lang.String str36 = card33.toString();
    player24.discard(card33);
    int i38 = card33.getCost();
    player10.addHand(card33);
    int i40 = card33.getTreasureValue();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName14.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName32.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + " \n\tSmithy"+ "'", str34.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName35.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + " \n\tSmithy"+ "'", str36.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test250"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.Player player8 = new dominion.Player(gameState6, "");
    dominion.Player player10 = new dominion.Player(gameState6, "The board game is embty you need to intialize the game!!!!");
    player10.printStateGame();
    player10.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test251"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState15.gameBoard;
    dominion.GameState gameState20 = gameState15.clone();
    java.util.List<dominion.Card> list_card21 = dominion.Card.createCards();
    dominion.GameState gameState22 = new dominion.GameState(list_card21);
    gameState20.cards = list_card21;
    dominion.Card[] card_array24 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card25 = new java.util.ArrayList<dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card25, card_array24);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Smithy;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card25);
    dominion.Card.Type type30 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card31 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card25, type30);
    gameState20.cards = arraylist_card25;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i33 = gameState20.gameBoard;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i34 = gameState20.gameBoard;
    java.util.List<dominion.Card> list_card35 = dominion.Card.createCards();
    dominion.Card[] card_array36 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card37 = new java.util.ArrayList<dominion.Card>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card37, card_array36);
    dominion.Card.CardName cardName39 = dominion.Card.CardName.Smithy;
    dominion.Card card40 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card37, cardName39);
    dominion.GameState gameState41 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card37);
    dominion.Card.Type type42 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card43 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card37, type42);
    java.util.List<dominion.Card> list_card44 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)list_card35, type42);
    java.util.List<dominion.Card> list_card45 = dominion.Card.createCards();
    dominion.GameState gameState46 = new dominion.GameState(list_card45);
    dominion.Card.CardName cardName47 = dominion.Card.CardName.Smithy;
    dominion.Card card48 = dominion.Card.getCard(list_card45, cardName47);
    dominion.Card card49 = dominion.Card.getCard(list_card44, cardName47);
    gameState20.cards = list_card44;
    dominion.Card[] card_array51 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card52 = new java.util.ArrayList<dominion.Card>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card52, card_array51);
    dominion.Card.CardName cardName54 = dominion.Card.CardName.Smithy;
    dominion.Card card55 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card52, cardName54);
    dominion.GameState gameState56 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card52);
    dominion.GameState gameState57 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card52);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i58 = gameState57.play();
    dominion.Player player60 = new dominion.Player(gameState57, "hi!");
    dominion.Player player62 = new dominion.Player(gameState57, "");
    java.util.List<dominion.Player> list_player63 = gameState57.players;
    gameState20.players = list_player63;
    java.util.List<dominion.Card> list_card65 = gameState20.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName27.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + dominion.Card.Type.TREASURE + "'", type30.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName39.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card40);
    org.junit.Assert.assertTrue("'" + type42 + "' != '" + dominion.Card.Type.TREASURE + "'", type42.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName47.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName54.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card65);

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test252"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.discard(card6);
    player2.playKingdomCard();
    dominion.Card[] card_array9 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card10 = new java.util.ArrayList<dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card10, card_array9);
    dominion.Card.CardName cardName12 = dominion.Card.CardName.Smithy;
    dominion.Card card13 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card10, cardName12);
    dominion.GameState gameState14 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.GameState gameState15 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card10);
    dominion.Player player17 = new dominion.Player(gameState15, "");
    player2.buyCard(gameState15);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState15.gameBoard;
    dominion.GameState gameState20 = gameState15.clone();
    java.util.List<dominion.Card> list_card21 = dominion.Card.createCards();
    dominion.GameState gameState22 = new dominion.GameState(list_card21);
    gameState20.cards = list_card21;
    dominion.Card[] card_array24 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card25 = new java.util.ArrayList<dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card25, card_array24);
    dominion.Card.CardName cardName27 = dominion.Card.CardName.Smithy;
    dominion.Card card28 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card25, cardName27);
    dominion.GameState gameState29 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card25);
    dominion.Card.Type type30 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card31 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card25, type30);
    gameState20.cards = arraylist_card25;
    boolean b33 = gameState20.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName12.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + cardName27 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName27.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card28);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + dominion.Card.Type.TREASURE + "'", type30.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test253"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.lang.String str19 = gameState6.toString();
    dominion.GameState gameState20 = null;
    dominion.Player player22 = new dominion.Player(gameState20, "hi!");
    dominion.Card card23 = null;
    player22.addHand(card23);
    player22.playKingdomCard();
    dominion.Card card26 = null;
    player22.discard(card26);
    player22.playKingdomCard();
    dominion.Card[] card_array29 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card30 = new java.util.ArrayList<dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card30, card_array29);
    dominion.Card.CardName cardName32 = dominion.Card.CardName.Smithy;
    dominion.Card card33 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card30, cardName32);
    dominion.GameState gameState34 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.Player player37 = new dominion.Player(gameState35, "");
    player22.buyCard(gameState35);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i39 = gameState35.gameBoard;
    dominion.GameState gameState40 = gameState35.clone();
    java.util.List<dominion.Card> list_card41 = dominion.Card.createCards();
    dominion.GameState gameState42 = new dominion.GameState(list_card41);
    gameState40.cards = list_card41;
    gameState6.cards = list_card41;
    dominion.Card[] card_array45 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card46 = new java.util.ArrayList<dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card46, card_array45);
    dominion.Card.CardName cardName48 = dominion.Card.CardName.Smithy;
    dominion.Card card49 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card46, cardName48);
    dominion.GameState gameState50 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card46);
    dominion.GameState gameState51 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card46);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i52 = gameState51.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i53 = gameState51.play();
    java.util.List<dominion.Player> list_player54 = gameState51.players;
    dominion.GameState gameState55 = null;
    dominion.Player player57 = new dominion.Player(gameState55, "hi!");
    dominion.Card card58 = null;
    player57.addHand(card58);
    player57.playKingdomCard();
    dominion.Card card61 = null;
    player57.discard(card61);
    gameState51.addPlayer(player57);
    gameState6.addPlayer(player57);
    boolean b65 = gameState6.isGameOver();
    dominion.Card[] card_array66 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card67 = new java.util.ArrayList<dominion.Card>();
    boolean b68 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card67, card_array66);
    dominion.Card.CardName cardName69 = dominion.Card.CardName.Smithy;
    dominion.Card card70 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card67, cardName69);
    dominion.GameState gameState71 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card67);
    dominion.GameState gameState72 = gameState71.clone();
    dominion.Card[] card_array73 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card74 = new java.util.ArrayList<dominion.Card>();
    boolean b75 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card74, card_array73);
    dominion.Card.CardName cardName76 = dominion.Card.CardName.Smithy;
    dominion.Card card77 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card74, cardName76);
    dominion.GameState gameState78 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card74);
    dominion.GameState gameState79 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card74);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i80 = gameState79.play();
    java.util.List<dominion.Player> list_player81 = gameState79.players;
    gameState71.players = list_player81;
    gameState6.players = list_player81;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str19.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName32.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName48.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    org.junit.Assert.assertTrue("'" + cardName69 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName69.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    org.junit.Assert.assertTrue("'" + cardName76 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName76.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player81);

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test254"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    java.lang.String str6 = player2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str6.equals(" --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test255"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState6.gameBoard;
    gameState6.initializeGame();
    java.util.List<dominion.Player> list_player21 = gameState6.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test256"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "hi!");
    dominion.Card card20 = null;
    player19.addHand(card20);
    player19.playKingdomCard();
    dominion.Card card23 = null;
    player19.discard(card23);
    player19.playTtreasureCard();
    dominion.Card card26 = null;
    player19.discard(card26);
    gameState6.addPlayer(player19);
    dominion.GameState gameState29 = gameState6.clone();
    dominion.GameState gameState30 = null;
    dominion.Player player32 = new dominion.Player(gameState30, "hi!");
    dominion.Card card33 = null;
    player32.addHand(card33);
    player32.playKingdomCard();
    dominion.Card card36 = null;
    player32.discard(card36);
    player32.playKingdomCard();
    dominion.Card[] card_array39 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card40 = new java.util.ArrayList<dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card40, card_array39);
    dominion.Card.CardName cardName42 = dominion.Card.CardName.Smithy;
    dominion.Card card43 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card40, cardName42);
    dominion.GameState gameState44 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card40);
    dominion.GameState gameState45 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card40);
    dominion.Player player47 = new dominion.Player(gameState45, "");
    player32.buyCard(gameState45);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i49 = gameState45.gameBoard;
    dominion.GameState gameState50 = gameState45.clone();
    java.util.List<dominion.Card> list_card51 = dominion.Card.createCards();
    dominion.GameState gameState52 = new dominion.GameState(list_card51);
    gameState50.cards = list_card51;
    dominion.Card[] card_array54 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card55 = new java.util.ArrayList<dominion.Card>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card55, card_array54);
    dominion.Card.CardName cardName57 = dominion.Card.CardName.Smithy;
    dominion.Card card58 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card55, cardName57);
    dominion.GameState gameState59 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card55);
    dominion.Card.Type type60 = dominion.Card.Type.TREASURE;
    java.util.List<dominion.Card> list_card61 = dominion.Card.filter((java.lang.Iterable<dominion.Card>)arraylist_card55, type60);
    gameState50.cards = arraylist_card55;
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i63 = gameState50.gameBoard;
    gameState6.gameBoard = hashmap_card_i63;
    dominion.GameState gameState65 = null;
    dominion.Player player67 = new dominion.Player(gameState65, "hi!");
    dominion.Card card68 = null;
    player67.addHand(card68);
    player67.playKingdomCard();
    dominion.Card card71 = null;
    player67.discard(card71);
    player67.playTtreasureCard();
    dominion.Card card74 = null;
    player67.addHand(card74);
    gameState6.addPlayer(player67);
    player67.playKingdomCard();
    // The following exception was thrown during execution in test generation
    try {
    player67.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName42.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    org.junit.Assert.assertTrue("'" + cardName57 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName57.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card58);
    org.junit.Assert.assertTrue("'" + type60 + "' != '" + dominion.Card.Type.TREASURE + "'", type60.equals(dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i63);

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test257"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    player2.playKingdomCard();
    java.lang.String str7 = player2.toString();
    java.util.List<dominion.Card> list_card8 = dominion.Card.createCards();
    dominion.GameState gameState9 = new dominion.GameState(list_card8);
    dominion.GameState gameState10 = gameState9.clone();
    player2.buyCard(gameState9);
    java.util.List<dominion.Card> list_card12 = dominion.Card.createCards();
    dominion.GameState gameState13 = new dominion.GameState(list_card12);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Smithy;
    dominion.Card card15 = dominion.Card.getCard(list_card12, cardName14);
    dominion.Card.CardName cardName16 = card15.getCardName();
    player2.discard(card15);
    int i18 = card15.score();
    dominion.Card.CardName cardName19 = card15.getCardName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName14.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName16.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName19.equals(dominion.Card.CardName.Smithy));

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test258"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = gameState5.clone();
    dominion.Card[] card_array7 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card8 = new java.util.ArrayList<dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card8, card_array7);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Smithy;
    dominion.Card card11 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card8, cardName10);
    dominion.GameState gameState12 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card8);
    dominion.GameState gameState13 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card8);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i14 = gameState13.play();
    java.util.List<dominion.Player> list_player15 = gameState13.players;
    gameState5.players = list_player15;
    java.util.List<dominion.Player> list_player17 = gameState5.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName10.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player17);

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test259"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    dominion.Card card6 = null;
    player2.addHand(card6);
    java.util.List<dominion.Card> list_card8 = dominion.Card.createCards();
    dominion.GameState gameState9 = new dominion.GameState(list_card8);
    dominion.Card.CardName cardName10 = dominion.Card.CardName.Smithy;
    dominion.Card card11 = dominion.Card.getCard(list_card8, cardName10);
    java.lang.String str12 = card11.toString();
    dominion.Card.CardName cardName13 = card11.getCardName();
    java.lang.String str14 = card11.toString();
    player2.discard(card11);
    java.util.List<dominion.Card> list_card16 = dominion.Card.createCards();
    dominion.GameState gameState17 = new dominion.GameState(list_card16);
    dominion.Card.CardName cardName18 = dominion.Card.CardName.Smithy;
    dominion.Card card19 = dominion.Card.getCard(list_card16, cardName18);
    dominion.Card.CardName cardName20 = card19.getCardName();
    java.lang.String str21 = card19.toString();
    player2.addHand(card19);
    int i23 = card19.score();
    dominion.Card.Type type24 = card19.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName10.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + " \n\tSmithy"+ "'", str12.equals(" \n\tSmithy"));
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName13.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " \n\tSmithy"+ "'", str14.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName18.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card19);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName20.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + " \n\tSmithy"+ "'", str21.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + dominion.Card.Type.ACTION + "'", type24.equals(dominion.Card.Type.ACTION));

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test260"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    dominion.GameState gameState17 = null;
    dominion.Player player19 = new dominion.Player(gameState17, "hi!");
    dominion.Card card20 = null;
    player19.addHand(card20);
    player19.playKingdomCard();
    dominion.Card card23 = null;
    player19.discard(card23);
    player19.playTtreasureCard();
    dominion.Card card26 = null;
    player19.discard(card26);
    gameState6.addPlayer(player19);
    dominion.Card[] card_array29 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card30 = new java.util.ArrayList<dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card30, card_array29);
    dominion.Card.CardName cardName32 = dominion.Card.CardName.Smithy;
    dominion.Card card33 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card30, cardName32);
    dominion.GameState gameState34 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    dominion.GameState gameState35 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card30);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i36 = gameState35.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i37 = gameState35.play();
    dominion.GameState gameState38 = null;
    dominion.Player player40 = new dominion.Player(gameState38, "hi!");
    dominion.Card card41 = null;
    player40.addHand(card41);
    player40.playKingdomCard();
    player40.playKingdomCard();
    gameState35.addPlayer(player40);
    java.util.List<dominion.Card> list_card46 = dominion.Card.createCards();
    dominion.GameState gameState47 = new dominion.GameState(list_card46);
    dominion.Card.CardName cardName48 = dominion.Card.CardName.Smithy;
    dominion.Card card49 = dominion.Card.getCard(list_card46, cardName48);
    dominion.Card[] card_array50 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card51 = new java.util.ArrayList<dominion.Card>();
    boolean b52 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card51, card_array50);
    dominion.Card.CardName cardName53 = dominion.Card.CardName.Smithy;
    dominion.Card card54 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card51, cardName53);
    dominion.GameState gameState55 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card51);
    dominion.GameState gameState56 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card51);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i57 = gameState56.play();
    java.util.List<dominion.Player> list_player58 = gameState56.players;
    boolean b59 = card49.equals((java.lang.Object)list_player58);
    player40.addHand(card49);
    gameState6.addPlayer(player40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + cardName32 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName32.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName48.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    org.junit.Assert.assertTrue("'" + cardName53 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName53.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test261"); }

    java.util.List<dominion.Card> list_card0 = dominion.Card.createCards();
    dominion.GameState gameState1 = new dominion.GameState(list_card0);
    dominion.GameState gameState2 = null;
    dominion.Player player4 = new dominion.Player(gameState2, "hi!");
    dominion.Card card5 = null;
    player4.addHand(card5);
    player4.playKingdomCard();
    dominion.Card card8 = null;
    player4.discard(card8);
    gameState1.addPlayer(player4);
    java.util.List<dominion.Card> list_card11 = dominion.Card.createCards();
    dominion.GameState gameState12 = new dominion.GameState(list_card11);
    dominion.Card.CardName cardName13 = dominion.Card.CardName.Smithy;
    dominion.Card card14 = dominion.Card.getCard(list_card11, cardName13);
    java.lang.String str15 = card14.toString();
    player4.addHand(card14);
    boolean b18 = card14.equals((java.lang.Object)10.0d);
    dominion.GameState gameState19 = null;
    dominion.Player player21 = new dominion.Player(gameState19, "hi!");
    dominion.Card card22 = null;
    player21.addHand(card22);
    player21.playKingdomCard();
    player21.playKingdomCard();
    java.lang.String str26 = player21.toString();
    java.util.List<dominion.Card> list_card27 = dominion.Card.createCards();
    dominion.GameState gameState28 = new dominion.GameState(list_card27);
    dominion.GameState gameState29 = gameState28.clone();
    player21.buyCard(gameState28);
    dominion.GameState gameState31 = null;
    dominion.Player player33 = new dominion.Player(gameState31, "hi!");
    dominion.Card card34 = null;
    player33.addHand(card34);
    player33.playKingdomCard();
    dominion.Card card37 = null;
    player33.discard(card37);
    player33.playKingdomCard();
    dominion.Card[] card_array40 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card41 = new java.util.ArrayList<dominion.Card>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card41, card_array40);
    dominion.Card.CardName cardName43 = dominion.Card.CardName.Smithy;
    dominion.Card card44 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card41, cardName43);
    dominion.GameState gameState45 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card41);
    dominion.GameState gameState46 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card41);
    dominion.Player player48 = new dominion.Player(gameState46, "");
    player33.buyCard(gameState46);
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i50 = gameState46.gameBoard;
    gameState28.gameBoard = hashmap_card_i50;
    boolean b52 = card14.equals((java.lang.Object)gameState28);
    java.util.List<dominion.Player> list_player53 = gameState28.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName13.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + " \n\tSmithy"+ "'", str15.equals(" \n\tSmithy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str26.equals(" --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    org.junit.Assert.assertTrue("'" + cardName43 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName43.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player53);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test262"); }

    dominion.GameState gameState0 = null;
    dominion.Player player2 = new dominion.Player(gameState0, "hi!");
    dominion.Card card3 = null;
    player2.addHand(card3);
    player2.playKingdomCard();
    player2.playKingdomCard();
    java.lang.String str7 = player2.toString();
    java.util.List<dominion.Card> list_card8 = dominion.Card.createCards();
    dominion.GameState gameState9 = new dominion.GameState(list_card8);
    dominion.GameState gameState10 = gameState9.clone();
    player2.buyCard(gameState9);
    java.util.List<dominion.Card> list_card12 = dominion.Card.createCards();
    dominion.GameState gameState13 = new dominion.GameState(list_card12);
    dominion.Card.CardName cardName14 = dominion.Card.CardName.Smithy;
    dominion.Card card15 = dominion.Card.getCard(list_card12, cardName14);
    dominion.Card.CardName cardName16 = card15.getCardName();
    player2.discard(card15);
    dominion.Card.CardName cardName18 = card15.getCardName();
    dominion.Card.Type type19 = card15.getType();
    java.lang.String str20 = card15.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: [null]Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName14.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card15);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName16.equals(dominion.Card.CardName.Smithy));
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName18.equals(dominion.Card.CardName.Smithy));
    org.junit.Assert.assertTrue("'" + type19 + "' != '" + dominion.Card.Type.ACTION + "'", type19.equals(dominion.Card.Type.ACTION));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + " \n\tSmithy"+ "'", str20.equals(" \n\tSmithy"));

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test263"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    java.util.HashMap<dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState6.gameBoard;
    java.util.List<dominion.Card> list_card20 = gameState6.cards;
    dominion.GameState gameState21 = new dominion.GameState(list_card20);
    dominion.GameState gameState22 = new dominion.GameState(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test264"); }

    dominion.Card[] card_array0 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card1 = new java.util.ArrayList<dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card1, card_array0);
    dominion.Card.CardName cardName3 = dominion.Card.CardName.Smithy;
    dominion.Card card4 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card1, cardName3);
    dominion.GameState gameState5 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    dominion.GameState gameState6 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card1);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState6.play();
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState6.play();
    dominion.GameState gameState9 = null;
    dominion.Player player11 = new dominion.Player(gameState9, "hi!");
    dominion.Card card12 = null;
    player11.addHand(card12);
    player11.playKingdomCard();
    player11.playKingdomCard();
    gameState6.addPlayer(player11);
    boolean b17 = gameState6.isGameOver();
    gameState6.initializeGame();
    dominion.Card[] card_array19 = new dominion.Card[] {  };
    java.util.ArrayList<dominion.Card> arraylist_card20 = new java.util.ArrayList<dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dominion.Card>)arraylist_card20, card_array19);
    dominion.Card.CardName cardName22 = dominion.Card.CardName.Smithy;
    dominion.Card card23 = dominion.Card.getCard((java.util.List<dominion.Card>)arraylist_card20, cardName22);
    dominion.GameState gameState24 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card20);
    dominion.GameState gameState25 = new dominion.GameState((java.util.List<dominion.Card>)arraylist_card20);
    java.util.HashMap<dominion.Player,java.lang.Integer> hashmap_player_i26 = gameState25.play();
    dominion.Player player28 = new dominion.Player(gameState25, "hi!");
    gameState6.addPlayer(player28);
    player28.playTtreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + cardName3 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName3.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + dominion.Card.CardName.Smithy + "'", cardName22.equals(dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i26);

  }

}
